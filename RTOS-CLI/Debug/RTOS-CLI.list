
RTOS-CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021de8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047bc  08021f78  08021f78  00022f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026734  08026734  00028210  2**0
                  CONTENTS
  4 .ARM          00000008  08026734  08026734  00027734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802673c  0802673c  00028210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802673c  0802673c  0002773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026740  08026740  00027740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  08026744  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00028210  2**0
                  CONTENTS
 10 .bss          0000f560  20000210  20000210  00028210  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  2000f770  2000f770  00028210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00041fc0  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a480  00000000  00000000  0006a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003030  00000000  00000000  00074680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000262c  00000000  00000000  000776b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039307  00000000  00000000  00079cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c457  00000000  00000000  000b2fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc586  00000000  00000000  000ff43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001fb9c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000db54  00000000  00000000  001fba04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00209558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021f60 	.word	0x08021f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08021f60 	.word	0x08021f60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800100e:	2008      	movs	r0, #8
 8001010:	f00a fecc 	bl	800bdac <pvPortMalloc>
 8001014:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001020:	f383 8811 	msr	BASEPRI, r3
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	60bb      	str	r3, [r7, #8]
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8e7 	bl	8001210 <prvRegisterCommand>
            xReturn = pdPASS;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8001046:	697b      	ldr	r3, [r7, #20]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d141      	bne.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800106a:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <FreeRTOS_CLIProcessCommand+0x100>)
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e037      	b.n	80010e0 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800107a:	69b8      	ldr	r0, [r7, #24]
 800107c:	f7ff f8f8 	bl	8000270 <strlen>
 8001080:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f01d fc6d 	bl	801e966 <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d121      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d005      	beq.n	80010aa <FreeRTOS_CLIProcessCommand+0x5a>
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d115      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db18      	blt.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f911 	bl	80012e0 <prvGetNumberOfParameters>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d00c      	beq.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 80010d4:	e009      	b.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1c3      	bne.n	8001070 <FreeRTOS_CLIProcessCommand+0x20>
 80010e8:	e000      	b.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ea:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d108      	bne.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4915      	ldr	r1, [pc, #84]	@ (8001154 <FreeRTOS_CLIProcessCommand+0x104>)
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f01d fc43 	bl	801e98a <strncpy>
        pxCommand = NULL;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e01a      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00f      	beq.n	8001134 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	4798      	blx	r3
 8001124:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e006      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <FreeRTOS_CLIProcessCommand+0x108>)
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f01d fc26 	bl	801e98a <strncpy>
        xReturn = pdFALSE;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001142:	69fb      	ldr	r3, [r7, #28]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000022c 	.word	0x2000022c
 8001150:	20000000 	.word	0x20000000
 8001154:	08021fb0 	.word	0x08021fb0
 8001158:	08022008 	.word	0x08022008

0800115c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8001176:	e03b      	b.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1f4      	bne.n	8001178 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800118e:	e002      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x4a>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d0f4      	beq.n	8001190 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d025      	beq.n	80011fa <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d119      	bne.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011c0:	e007      	b.n	80011d2 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FreeRTOS_CLIGetParameter+0x86>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d1ef      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
                }

                break;
 80011ee:	e006      	b.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3c2      	bcc.n	800117e <FreeRTOS_CLIGetParameter+0x22>
 80011f8:	e002      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011fe:	bf00      	nop
        }
    }

    return pcReturn;
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <prvRegisterCommand+0x28>
	__asm volatile
 8001220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	60fb      	str	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <prvRegisterCommand+0x46>
	__asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	60bb      	str	r3, [r7, #8]
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	e7fd      	b.n	8001252 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 8001256:	f00a fc87 	bl	800bb68 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <prvRegisterCommand+0x70>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <prvRegisterCommand+0x70>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001274:	f00a fcaa 	bl	800bbcc <vPortExitCritical>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <prvHelpCommand+0x54>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <prvHelpCommand+0x54>)
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <prvHelpCommand+0x58>)
 800129c:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <prvHelpCommand+0x54>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f01d fb6d 	bl	801e98a <strncpy>
    pxCommand = pxCommand->pxNext;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <prvHelpCommand+0x54>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e001      	b.n	80012cc <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000230 	.word	0x20000230
 80012dc:	20000000 	.word	0x20000000

080012e0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012f0:	e014      	b.n	800131c <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d10b      	bne.n	8001312 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d00a      	beq.n	8001316 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 800130c:	2301      	movs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e001      	b.n	8001316 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e6      	bne.n	80012f2 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_write>:
/* CLI escape sequences*/
uint8_t backspace[] = "\b \b";
uint8_t backspace_tt[] = " \b";

int _write(int file, char *data, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00b      	b.n	8001372 <_write+0x2a>
    {
        // Send the character
    	HAL_UART_Transmit(&huart3, (const uint8_t*)&data[i], 1, 0xffff);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	18d1      	adds	r1, r2, r3
 8001360:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001364:	2201      	movs	r2, #1
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <_write+0x3c>)
 8001368:	f004 fe14 	bl	8005f94 <HAL_UART_Transmit>
    for (int i = 0; i < len; i++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbef      	blt.n	800135a <_write+0x12>
        // Wait for the transmit buffer to be empty
//        while (!(USART3->ISR & USART_ISR_TXE));
    }
    return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000bc8 	.word	0x20000bc8

08001388 <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	2100      	movs	r1, #0
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f01d fadc 	bl	801e956 <memset>
    printf("\033[2J\033[1;1H");
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <cmd_clearScreen+0x28>)
 80013a0:	f01d fa3a 	bl	801e818 <iprintf>
    return pdFALSE;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08022060 	.word	0x08022060

080013b4 <cmd_toggle_led>:
//*****************************************************************************
BaseType_t cmd_toggle_led(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    /* Toggle the LED */
    //ToggleLED();


    /* Write the response to the buffer */
    uint8_t string[] = "LED toggled\r\n";
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <cmd_toggle_led+0x30>)
 80013c2:	f107 0410 	add.w	r4, r7, #16
 80013c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c8:	c407      	stmia	r4!, {r0, r1, r2}
 80013ca:	8023      	strh	r3, [r4, #0]
    strcpy(pcWriteBuffer, (char *)string);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f01d fbb9 	bl	801eb4a <strcpy>

    return pdFALSE;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	0802206c 	.word	0x0802206c

080013e8 <cmd_add>:
//*****************************************************************************
BaseType_t cmd_add(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	@ 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
    const char *pcParameter1, *pcParameter2;
    BaseType_t xParameter1StringLength, xParameter2StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	461a      	mov	r2, r3
 80013fa:	2101      	movs	r1, #1
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fead 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001402:	6378      	str	r0, [r7, #52]	@ 0x34
                          /* Return the first parameter. */
                          1,
                          /* Store the parameter string length. */
                          &xParameter1StringLength
                        );
    pcParameter2 = FreeRTOS_CLIGetParameter
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	461a      	mov	r2, r3
 800140a:	2102      	movs	r1, #2
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fea5 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001412:	6338      	str	r0, [r7, #48]	@ 0x30
                          2,
                          /* Store the parameter string length. */
                          &xParameter2StringLength
                        );
    // convert the string to a number
    int32_t xValue1 = strtol(pcParameter1, NULL, 10);
 8001414:	220a      	movs	r2, #10
 8001416:	2100      	movs	r1, #0
 8001418:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800141a:	f01c f9c3 	bl	801d7a4 <strtol>
 800141e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int32_t xValue2 = strtol(pcParameter2, NULL, 10);
 8001420:	220a      	movs	r2, #10
 8001422:	2100      	movs	r1, #0
 8001424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001426:	f01c f9bd 	bl	801d7a4 <strtol>
 800142a:	62b8      	str	r0, [r7, #40]	@ 0x28
    // add the two numbers
    int32_t xResultValue = xValue1 + xValue2;
 800142c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800142e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001430:	4413      	add	r3, r2
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    // convert the result to a string
    char cResultString[10];
    itoa(xResultValue, cResultString, 10);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	220a      	movs	r2, #10
 800143a:	4619      	mov	r1, r3
 800143c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800143e:	f01c f8f5 	bl	801d62c <itoa>
    // copy the result to the write buffer
    strcpy(pcWriteBuffer, cResultString);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4619      	mov	r1, r3
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f01d fb7e 	bl	801eb4a <strcpy>

    return pdFALSE;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3738      	adds	r7, #56	@ 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    //itterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	e009      	b.n	8001478 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4a09      	ldr	r2, [pc, #36]	@ (8001490 <vRegisterCLICommands+0x38>)
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fdb9 	bl	8000fe4 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3301      	adds	r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <vRegisterCLICommands+0x38>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ee      	bne.n	8001464 <vRegisterCLICommands+0xc>
    }
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	08025fec 	.word	0x08025fec

08001494 <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
   printf("%s", str);
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <cliWrite+0x24>)
 80014a0:	f01d f9ba 	bl	801e818 <iprintf>
   // flush stdout
   fflush(stdout);
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <cliWrite+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f01d f8de 	bl	801e66c <fflush>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08022100 	.word	0x08022100
 80014bc:	20000054 	.word	0x20000054

080014c0 <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint8_t *cInputIndex)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    cliWrite("\r\n");
 80014cc:	4810      	ldr	r0, [pc, #64]	@ (8001510 <handleNewline+0x50>)
 80014ce:	f7ff ffe1 	bl	8001494 <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80014d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff fdb9 	bl	8001050 <FreeRTOS_CLIProcessCommand>
 80014de:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer);
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	f7ff ffd7 	bl	8001494 <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f2      	bne.n	80014d2 <handleNewline+0x12>

    cliWrite(cli_prompt);
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <handleNewline+0x54>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffcf 	bl	8001494 <cliWrite>
    *cInputIndex = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 80014fc:	2232      	movs	r2, #50	@ 0x32
 80014fe:	2100      	movs	r1, #0
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f01d fa28 	bl	801e956 <memset>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	08022104 	.word	0x08022104
 8001514:	2000000c 	.word	0x2000000c

08001518 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d010      	beq.n	800154c <handleBackspace+0x34>
    {
        (*cInputIndex)--;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace);
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt);
 8001544:	4807      	ldr	r0, [pc, #28]	@ (8001564 <handleBackspace+0x4c>)
 8001546:	f7ff ffa5 	bl	8001494 <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right);
#endif
    }
}
 800154a:	e006      	b.n	800155a <handleBackspace+0x42>
        uint8_t right[] = "\x1b\x5b\x43";
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <handleBackspace+0x50>)
 800154e:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff9d 	bl	8001494 <cliWrite>
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000010 	.word	0x20000010
 8001568:	00435b1b 	.word	0x00435b1b

0800156c <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <handleCharacterInput+0x64>)
 8001578:	f993 3000 	ldrsb.w	r3, [r3]
 800157c:	2b0d      	cmp	r3, #13
 800157e:	d023      	beq.n	80015c8 <handleCharacterInput+0x5c>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <handleCharacterInput+0x64>)
 8001582:	f993 3000 	ldrsb.w	r3, [r3]
 8001586:	2b08      	cmp	r3, #8
 8001588:	d004      	beq.n	8001594 <handleCharacterInput+0x28>
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <handleCharacterInput+0x64>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	2b7f      	cmp	r3, #127	@ 0x7f
 8001592:	d104      	bne.n	800159e <handleCharacterInput+0x32>
    {
        handleBackspace(cInputIndex, pcInputString);
 8001594:	6839      	ldr	r1, [r7, #0]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffbe 	bl	8001518 <handleBackspace>
 800159c:	e015      	b.n	80015ca <handleCharacterInput+0x5e>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b31      	cmp	r3, #49	@ 0x31
 80015a4:	d811      	bhi.n	80015ca <handleCharacterInput+0x5e>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <handleCharacterInput+0x64>)
 80015a8:	f993 2000 	ldrsb.w	r2, [r3]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	440b      	add	r3, r1
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e000      	b.n	80015ca <handleCharacterInput+0x5e>
        return;
 80015c8:	bf00      	nop
        }
    }
}
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000a66 	.word	0x20000a66

080015d4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
return 0;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dhcpSem */
  dhcpSemHandle = osSemaphoreNew(1, 0, &dhcpSem_attributes);
 80015f8:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <MX_FREERTOS_Init+0x38>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	2001      	movs	r0, #1
 80015fe:	f007 f81a 	bl	8008636 <osSemaphoreNew>
 8001602:	4603      	mov	r3, r0
 8001604:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <MX_FREERTOS_Init+0x3c>)
 8001606:	6013      	str	r3, [r2, #0]

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);
 8001608:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <MX_FREERTOS_Init+0x40>)
 800160a:	2100      	movs	r1, #0
 800160c:	2001      	movs	r0, #1
 800160e:	f007 f812 	bl	8008636 <osSemaphoreNew>
 8001612:	4603      	mov	r3, r0
 8001614:	4a08      	ldr	r2, [pc, #32]	@ (8001638 <MX_FREERTOS_Init+0x44>)
 8001616:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vInitTask */
  vInitTaskHandle = osThreadNew(StartInitTask, NULL, &vInitTask_attributes);
 8001618:	4a08      	ldr	r2, [pc, #32]	@ (800163c <MX_FREERTOS_Init+0x48>)
 800161a:	2100      	movs	r1, #0
 800161c:	4808      	ldr	r0, [pc, #32]	@ (8001640 <MX_FREERTOS_Init+0x4c>)
 800161e:	f006 fe4e 	bl	80082be <osThreadNew>
 8001622:	4603      	mov	r3, r0
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <MX_FREERTOS_Init+0x50>)
 8001626:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	08026098 	.word	0x08026098
 8001630:	20000a94 	.word	0x20000a94
 8001634:	080260a8 	.word	0x080260a8
 8001638:	20000a98 	.word	0x20000a98
 800163c:	0802602c 	.word	0x0802602c
 8001640:	08001649 	.word	0x08001649
 8001644:	20000a88 	.word	0x20000a88

08001648 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001650:	f005 ffe8 	bl	8007624 <MX_LWIP_Init>
  /* USER CODE BEGIN StartInitTask */
  HAL_Delay(5000);
 8001654:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001658:	f000 fe76 	bl	8002348 <HAL_Delay>
//  while (gnetif.ip_addr.addr == 0){};
  /* Infinite loop */
  for(;;)
  {
	  if (gnetif.ip_addr.addr != 0)
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <StartInitTask+0x4c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d012      	beq.n	800168a <StartInitTask+0x42>
	  {
		  vClientTaskHandle = osThreadNew(StartClientTask, NULL, &vClientTask_attributes);
 8001664:	4a0c      	ldr	r2, [pc, #48]	@ (8001698 <StartInitTask+0x50>)
 8001666:	2100      	movs	r1, #0
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <StartInitTask+0x54>)
 800166a:	f006 fe28 	bl	80082be <osThreadNew>
 800166e:	4603      	mov	r3, r0
 8001670:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <StartInitTask+0x58>)
 8001672:	6013      	str	r3, [r2, #0]
		  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
 8001674:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <StartInitTask+0x5c>)
 8001676:	2100      	movs	r1, #0
 8001678:	480b      	ldr	r0, [pc, #44]	@ (80016a8 <StartInitTask+0x60>)
 800167a:	f006 fe20 	bl	80082be <osThreadNew>
 800167e:	4603      	mov	r3, r0
 8001680:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <StartInitTask+0x64>)
 8001682:	6013      	str	r3, [r2, #0]
//		  vTaskResume((TaskHandle_t)vClientTaskHandle);
//		  vTaskResume((TaskHandle_t)vCmdTaskHandle);
		  vTaskDelete(NULL);
 8001684:	2000      	movs	r0, #0
 8001686:	f008 fe59 	bl	800a33c <vTaskDelete>

	  }
      osDelay(1);
 800168a:	2001      	movs	r0, #1
 800168c:	f006 feaa 	bl	80083e4 <osDelay>
	  if (gnetif.ip_addr.addr != 0)
 8001690:	e7e4      	b.n	800165c <StartInitTask+0x14>
 8001692:	bf00      	nop
 8001694:	20000c20 	.word	0x20000c20
 8001698:	08026050 	.word	0x08026050
 800169c:	080016b1 	.word	0x080016b1
 80016a0:	20000a8c 	.word	0x20000a8c
 80016a4:	08026074 	.word	0x08026074
 80016a8:	08001739 	.word	0x08001739
 80016ac:	20000a90 	.word	0x20000a90

080016b0 <StartClientTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClientTask */
void StartClientTask(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClientTask */
	  struct sockaddr_in remout_host;
	  int s;

	  s = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 80016b8:	2206      	movs	r2, #6
 80016ba:	2101      	movs	r1, #1
 80016bc:	2002      	movs	r0, #2
 80016be:	f00d fcf1 	bl	800f0a4 <lwip_socket>
 80016c2:	61f8      	str	r0, [r7, #28]
	  remout_host.sin_family = AF_INET;
 80016c4:	2302      	movs	r3, #2
 80016c6:	737b      	strb	r3, [r7, #13]
	  remout_host.sin_port = htons(23);
 80016c8:	2017      	movs	r0, #23
 80016ca:	f00e f89f 	bl	800f80c <lwip_htons>
 80016ce:	4603      	mov	r3, r0
 80016d0:	81fb      	strh	r3, [r7, #14]
	  ip4addr_aton("192.168.0.10",(ip4_addr_t*)&remout_host.sin_addr);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	3304      	adds	r3, #4
 80016d8:	4619      	mov	r1, r3
 80016da:	4813      	ldr	r0, [pc, #76]	@ (8001728 <StartClientTask+0x78>)
 80016dc:	f01a fd9a 	bl	801c214 <ip4addr_aton>
	  lwip_connect(s, (struct sockaddr *)&remout_host, sizeof(struct sockaddr_in));
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2210      	movs	r2, #16
 80016e6:	4619      	mov	r1, r3
 80016e8:	69f8      	ldr	r0, [r7, #28]
 80016ea:	f00d f81f 	bl	800e72c <lwip_connect>
	  lwip_write(s, "Hello\n\r", sizeof("Hello\n\r"));
 80016ee:	2208      	movs	r2, #8
 80016f0:	490e      	ldr	r1, [pc, #56]	@ (800172c <StartClientTask+0x7c>)
 80016f2:	69f8      	ldr	r0, [r7, #28]
 80016f4:	f00d fd34 	bl	800f160 <lwip_write>


	  /* Infinite loop */
	  for(;;)
	  {
		lwip_recv(s, buf, 30, 0);
 80016f8:	2300      	movs	r3, #0
 80016fa:	221e      	movs	r2, #30
 80016fc:	490c      	ldr	r1, [pc, #48]	@ (8001730 <StartClientTask+0x80>)
 80016fe:	69f8      	ldr	r0, [r7, #28]
 8001700:	f00d fbaa 	bl	800ee58 <lwip_recv>
		HAL_UART_Transmit(&huart3, buf, sizeof(buf), 0xffff);
 8001704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001708:	221e      	movs	r2, #30
 800170a:	4909      	ldr	r1, [pc, #36]	@ (8001730 <StartClientTask+0x80>)
 800170c:	4809      	ldr	r0, [pc, #36]	@ (8001734 <StartClientTask+0x84>)
 800170e:	f004 fc41 	bl	8005f94 <HAL_UART_Transmit>
		memset(buf, (uint32_t)'\0', sizeof(buf));
 8001712:	221e      	movs	r2, #30
 8001714:	2100      	movs	r1, #0
 8001716:	4806      	ldr	r0, [pc, #24]	@ (8001730 <StartClientTask+0x80>)
 8001718:	f01d f91d 	bl	801e956 <memset>
	    osDelay(300);
 800171c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001720:	f006 fe60 	bl	80083e4 <osDelay>
		lwip_recv(s, buf, 30, 0);
 8001724:	bf00      	nop
 8001726:	e7e7      	b.n	80016f8 <StartClientTask+0x48>
 8001728:	08022144 	.word	0x08022144
 800172c:	08022154 	.word	0x08022154
 8001730:	20000a68 	.word	0x20000a68
 8001734:	20000bc8 	.word	0x20000bc8

08001738 <vStartCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
    uint32_t receivedValue; // used to store the received value from the notification
    vRegisterCLICommands();
 8001744:	f7ff fe88 	bl	8001458 <vRegisterCLICommands>

    for (;;)
    {
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8001748:	f107 0208 	add.w	r2, r7, #8
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	2100      	movs	r1, #0
 8001752:	2000      	movs	r0, #0
 8001754:	f009 fccc 	bl	800b0f0 <xTaskNotifyWait>
                                  0,  // Clear all bits on exit
                                  &receivedValue, // Receives the notification value
                                  portMAX_DELAY); // Wait indefinitely
        //echo recevied char
        cRxedChar = receivedValue & 0xFF;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	b25a      	sxtb	r2, r3
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <vStartCmdTask+0x60>)
 800175e:	701a      	strb	r2, [r3, #0]
        cliWrite((char *)&cRxedChar);
 8001760:	480d      	ldr	r0, [pc, #52]	@ (8001798 <vStartCmdTask+0x60>)
 8001762:	f7ff fe97 	bl	8001494 <cliWrite>
        if (cRxedChar == '\r' || cRxedChar == '\n')
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <vStartCmdTask+0x60>)
 8001768:	f993 3000 	ldrsb.w	r3, [r3]
 800176c:	2b0d      	cmp	r3, #13
 800176e:	d004      	beq.n	800177a <vStartCmdTask+0x42>
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <vStartCmdTask+0x60>)
 8001772:	f993 3000 	ldrsb.w	r3, [r3]
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d107      	bne.n	800178a <vStartCmdTask+0x52>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
 800177a:	f107 030f 	add.w	r3, r7, #15
 800177e:	461a      	mov	r2, r3
 8001780:	4906      	ldr	r1, [pc, #24]	@ (800179c <vStartCmdTask+0x64>)
 8001782:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <vStartCmdTask+0x68>)
 8001784:	f7ff fe9c 	bl	80014c0 <handleNewline>
 8001788:	e005      	b.n	8001796 <vStartCmdTask+0x5e>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 800178a:	f107 030f 	add.w	r3, r7, #15
 800178e:	4904      	ldr	r1, [pc, #16]	@ (80017a0 <vStartCmdTask+0x68>)
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff feeb 	bl	800156c <handleCharacterInput>
        xTaskNotifyWait(pdFALSE,    // Don't clear bits on entry
 8001796:	e7d7      	b.n	8001748 <vStartCmdTask+0x10>
 8001798:	20000a66 	.word	0x20000a66
 800179c:	20000234 	.word	0x20000234
 80017a0:	20000a34 	.word	0x20000a34

080017a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a24      	ldr	r2, [pc, #144]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a16      	ldr	r2, [pc, #88]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_GPIO_Init+0xa0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <MX_GPIO_Init+0xa0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a0f      	ldr	r2, [pc, #60]	@ (8001844 <MX_GPIO_Init+0xa0>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <MX_GPIO_Init+0xa0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_GPIO_Init+0xa0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <MX_GPIO_Init+0xa0>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_GPIO_Init+0xa0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

}
 8001836:	bf00      	nop
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184c:	f000 fd3a 	bl	80022c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001850:	f000 f81e 	bl	8001890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001854:	f7ff ffa6 	bl	80017a4 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001858:	f000 fb1c 	bl	8001e94 <MX_TIM5_Init>
  MX_SDIO_SD_Init();
 800185c:	f000 f8d6 	bl	8001a0c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001860:	f005 fcc6 	bl	80071f0 <MX_FATFS_Init>
  MX_RNG_Init();
 8001864:	f000 f896 	bl	8001994 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8001868:	f000 fb8a 	bl	8001f80 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
// HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
  HAL_UART_Receive_IT(&huart3, &dataByte, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	4906      	ldr	r1, [pc, #24]	@ (8001888 <main+0x40>)
 8001870:	4806      	ldr	r0, [pc, #24]	@ (800188c <main+0x44>)
 8001872:	f004 fc1a 	bl	80060aa <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001876:	f006 fca1 	bl	80081bc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800187a:	f7ff febb 	bl	80015f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800187e:	f006 fce3 	bl	8008248 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001882:	bf00      	nop
 8001884:	e7fd      	b.n	8001882 <main+0x3a>
 8001886:	bf00      	nop
 8001888:	20000bc4 	.word	0x20000bc4
 800188c:	20000bc8 	.word	0x20000bc8

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b094      	sub	sp, #80	@ 0x50
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	2230      	movs	r2, #48	@ 0x30
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f01d f859 	bl	801e956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	4b28      	ldr	r3, [pc, #160]	@ (800195c <SystemClock_Config+0xcc>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	4a27      	ldr	r2, [pc, #156]	@ (800195c <SystemClock_Config+0xcc>)
 80018be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c4:	4b25      	ldr	r3, [pc, #148]	@ (800195c <SystemClock_Config+0xcc>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <SystemClock_Config+0xd0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <SystemClock_Config+0xd0>)
 80018da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <SystemClock_Config+0xd0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ec:	2302      	movs	r3, #2
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f4:	2310      	movs	r3, #16
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f8:	2302      	movs	r3, #2
 80018fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001900:	2308      	movs	r3, #8
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001904:	23a8      	movs	r3, #168	@ 0xa8
 8001906:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001908:	2302      	movs	r3, #2
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800190c:	2307      	movs	r3, #7
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fac3 	bl	8003ea0 <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001920:	f000 f832 	bl	8001988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001924:	230f      	movs	r3, #15
 8001926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001928:	2302      	movs	r3, #2
 800192a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001930:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2105      	movs	r1, #5
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fd24 	bl	8004390 <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800194e:	f000 f81b 	bl	8001988 <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3750      	adds	r7, #80	@ 0x50
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000

08001964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001976:	f000 fcc7 	bl	8002308 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40010000 	.word	0x40010000

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <Error_Handler+0x8>

08001994 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_RNG_Init+0x20>)
 800199a:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <MX_RNG_Init+0x24>)
 800199c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_RNG_Init+0x20>)
 80019a0:	f002 ff08 	bl	80047b4 <HAL_RNG_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80019aa:	f7ff ffed 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000a9c 	.word	0x20000a9c
 80019b8:	50060800 	.word	0x50060800

080019bc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <HAL_RNG_MspInit+0x48>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d115      	bne.n	80019fa <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <HAL_RNG_MspInit+0x4c>)
 80019d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <HAL_RNG_MspInit+0x4c>)
 80019d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_RNG_MspInit+0x4c>)
 80019e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2105      	movs	r1, #5
 80019ee:	2050      	movs	r0, #80	@ 0x50
 80019f0:	f000 fd86 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80019f4:	2050      	movs	r0, #80	@ 0x50
 80019f6:	f000 fd9f 	bl	8002538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	50060800 	.word	0x50060800
 8001a08:	40023800 	.word	0x40023800

08001a0c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <MX_SDIO_SD_Init+0x38>)
 8001a12:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <MX_SDIO_SD_Init+0x3c>)
 8001a14:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <MX_SDIO_SD_Init+0x38>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <MX_SDIO_SD_Init+0x38>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <MX_SDIO_SD_Init+0x38>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <MX_SDIO_SD_Init+0x38>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <MX_SDIO_SD_Init+0x38>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <MX_SDIO_SD_Init+0x38>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	20000aac 	.word	0x20000aac
 8001a48:	40012c00 	.word	0x40012c00

08001a4c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a28      	ldr	r2, [pc, #160]	@ (8001b0c <HAL_SD_MspInit+0xc0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d14a      	bne.n	8001b04 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a26      	ldr	r2, [pc, #152]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001a78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a1f      	ldr	r2, [pc, #124]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a18      	ldr	r2, [pc, #96]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HAL_SD_MspInit+0xc4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001ac2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	480d      	ldr	r0, [pc, #52]	@ (8001b14 <HAL_SD_MspInit+0xc8>)
 8001ae0:	f002 f842 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001af4:	230c      	movs	r3, #12
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <HAL_SD_MspInit+0xcc>)
 8001b00:	f002 f832 	bl	8003b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	@ 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_MspInit+0x64>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	4a15      	ldr	r2, [pc, #84]	@ (8001b80 <HAL_MspInit+0x64>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <HAL_MspInit+0x64>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_MspInit+0x64>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <HAL_MspInit+0x64>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_MspInit+0x64>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	f06f 0001 	mvn.w	r0, #1
 8001b62:	f000 fccd 	bl	8002500 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	2005      	movs	r0, #5
 8001b6c:	f000 fcc8 	bl	8002500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b70:	2005      	movs	r0, #5
 8001b72:	f000 fce1 	bl	8002538 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	@ 0x30
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <HAL_InitTick+0xd4>)
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c58 <HAL_InitTick+0xd4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <HAL_InitTick+0xd4>)
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fdc8 	bl	8004750 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001bc0:	f002 fdb2 	bl	8004728 <HAL_RCC_GetPCLK2Freq>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bcc:	4a23      	ldr	r2, [pc, #140]	@ (8001c5c <HAL_InitTick+0xd8>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9b      	lsrs	r3, r3, #18
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bd8:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <HAL_InitTick+0xdc>)
 8001bda:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <HAL_InitTick+0xe0>)
 8001bdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_InitTick+0xdc>)
 8001be0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001be4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001be6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c60 <HAL_InitTick+0xdc>)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <HAL_InitTick+0xdc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_InitTick+0xdc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_InitTick+0xdc>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001bfe:	4818      	ldr	r0, [pc, #96]	@ (8001c60 <HAL_InitTick+0xdc>)
 8001c00:	f003 fd02 	bl	8005608 <HAL_TIM_Base_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d11b      	bne.n	8001c4a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c12:	4813      	ldr	r0, [pc, #76]	@ (8001c60 <HAL_InitTick+0xdc>)
 8001c14:	f003 fd48 	bl	80056a8 <HAL_TIM_Base_Start_IT>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d111      	bne.n	8001c4a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c26:	2019      	movs	r0, #25
 8001c28:	f000 fc86 	bl	8002538 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	d808      	bhi.n	8001c44 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c32:	2200      	movs	r2, #0
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	2019      	movs	r0, #25
 8001c38:	f000 fc62 	bl	8002500 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <HAL_InitTick+0xe4>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e002      	b.n	8001c4a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3730      	adds	r7, #48	@ 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	431bde83 	.word	0x431bde83
 8001c60:	20000b30 	.word	0x20000b30
 8001c64:	40010000 	.word	0x40010000
 8001c68:	20000018 	.word	0x20000018

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <NMI_Handler+0x4>

08001c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <MemManage_Handler+0x4>

08001c84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cb6:	f003 fd67 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000b30 	.word	0x20000b30

08001cc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <TIM5_IRQHandler+0x10>)
 8001cca:	f003 fd5d 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000b7c 	.word	0x20000b7c

08001cd8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <ETH_IRQHandler+0x10>)
 8001cde:	f001 f859 	bl	8002d94 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000575c 	.word	0x2000575c

08001cec <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <ETH_WKUP_IRQHandler+0x10>)
 8001cf2:	f001 f84f 	bl	8002d94 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000575c 	.word	0x2000575c

08001d00 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001d04:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <HASH_RNG_IRQHandler+0x10>)
 8001d06:	f002 fd7f 	bl	8004808 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000a9c 	.word	0x20000a9c

08001d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return 1;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_kill>:

int _kill(int pid, int sig)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2e:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <_kill+0x20>)
 8001d30:	2216      	movs	r2, #22
 8001d32:	601a      	str	r2, [r3, #0]
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	2000f760 	.word	0x2000f760

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe5 	bl	8001d24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5a:	bf00      	nop
 8001d5c:	e7fd      	b.n	8001d5a <_exit+0x12>

08001d5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e00a      	b.n	8001d86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d70:	f3af 8000 	nop.w
 8001d74:	4601      	mov	r1, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	60ba      	str	r2, [r7, #8]
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbf0      	blt.n	8001d70 <_read+0x12>
  }

  return len;
 8001d8e:	687b      	ldr	r3, [r7, #4]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc0:	605a      	str	r2, [r3, #4]
  return 0;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_isatty>:

int _isatty(int file)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d205      	bcs.n	8001e3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e30:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <_sbrk+0x6c>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	20020000 	.word	0x20020000
 8001e60:	00000800 	.word	0x00000800
 8001e64:	20000b78 	.word	0x20000b78
 8001e68:	2000f770 	.word	0x2000f770
 8001e6c:	2000f760 	.word	0x2000f760

08001e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <SystemInit+0x20>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e7a:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <SystemInit+0x20>)
 8001e7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <MX_TIM5_Init+0x98>)
 8001eb4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 599;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001eb8:	f240 2257 	movw	r2, #599	@ 0x257
 8001ebc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ecc:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ed8:	4813      	ldr	r0, [pc, #76]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001eda:	f003 fb95 	bl	8005608 <HAL_TIM_Base_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ee4:	f7ff fd50 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001ef6:	f003 fd37 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f00:	f7ff fd42 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <MX_TIM5_Init+0x94>)
 8001f12:	f003 ff5f 	bl	8005dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f1c:	f7ff fd34 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000b7c 	.word	0x20000b7c
 8001f2c:	40000c00 	.word	0x40000c00

08001f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <HAL_TIM_Base_MspInit+0x48>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d115      	bne.n	8001f6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <HAL_TIM_Base_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <HAL_TIM_Base_MspInit+0x4c>)
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_TIM_Base_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	2032      	movs	r0, #50	@ 0x32
 8001f64:	f000 facc 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f68:	2032      	movs	r0, #50	@ 0x32
 8001f6a:	f000 fae5 	bl	8002538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	40023800 	.word	0x40023800

08001f80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <MX_USART3_UART_Init+0x50>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <MX_USART3_UART_Init+0x4c>)
 8001fb8:	f003 ff9c 	bl	8005ef4 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fc2:	f7ff fce1 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000bc8 	.word	0x20000bc8
 8001fd0:	40004800 	.word	0x40004800

08001fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	@ 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	@ (8002058 <HAL_UART_MspInit+0x84>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d12c      	bne.n	8002050 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <HAL_UART_MspInit+0x88>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	4a17      	ldr	r2, [pc, #92]	@ (800205c <HAL_UART_MspInit+0x88>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002004:	6413      	str	r3, [r2, #64]	@ 0x40
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_UART_MspInit+0x88>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_UART_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <HAL_UART_MspInit+0x88>)
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_UART_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002040:	2307      	movs	r3, #7
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4805      	ldr	r0, [pc, #20]	@ (8002060 <HAL_UART_MspInit+0x8c>)
 800204c:	f001 fd8c 	bl	8003b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	@ 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40004800 	.word	0x40004800
 800205c:	40023800 	.word	0x40023800
 8002060:	40020c00 	.word	0x40020c00

08002064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800209c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002068:	f7ff ff02 	bl	8001e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800206e:	490d      	ldr	r1, [pc, #52]	@ (80020a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002084:	4c0a      	ldr	r4, [pc, #40]	@ (80020b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002092:	f01c fd33 	bl	801eafc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002096:	f7ff fbd7 	bl	8001848 <main>
  bx  lr    
 800209a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800209c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80020a8:	08026744 	.word	0x08026744
  ldr r2, =_sbss
 80020ac:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80020b0:	2000f770 	.word	0x2000f770

080020b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC_IRQHandler>

080020b6 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <DP83848_RegisterBusIO+0x28>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <DP83848_RegisterBusIO+0x28>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <DP83848_RegisterBusIO+0x28>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e014      	b.n	800210e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d139      	bne.n	80021aa <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e01c      	b.n	800218a <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f107 020c 	add.w	r2, r7, #12
 8002158:	2119      	movs	r1, #25
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	4798      	blx	r3
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	da03      	bge.n	800216c <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 8002164:	f06f 0304 	mvn.w	r3, #4
 8002168:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800216a:	e00b      	b.n	8002184 <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d105      	bne.n	8002184 <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
         break;
 8002182:	e005      	b.n	8002190 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b1f      	cmp	r3, #31
 800218e:	d9df      	bls.n	8002150 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b1f      	cmp	r3, #31
 8002196:	d902      	bls.n	800219e <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8002198:	f06f 0302 	mvn.w	r3, #2
 800219c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80021aa:	693b      	ldr	r3, [r7, #16]
 }
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6810      	ldr	r0, [r2, #0]
 80021c8:	f107 020c 	add.w	r2, r7, #12
 80021cc:	2101      	movs	r1, #1
 80021ce:	4798      	blx	r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da02      	bge.n	80021dc <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80021d6:	f06f 0304 	mvn.w	r3, #4
 80021da:	e06e      	b.n	80022ba <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6810      	ldr	r0, [r2, #0]
 80021e4:	f107 020c 	add.w	r2, r7, #12
 80021e8:	2101      	movs	r1, #1
 80021ea:	4798      	blx	r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da02      	bge.n	80021f8 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80021f2:	f06f 0304 	mvn.w	r3, #4
 80021f6:	e060      	b.n	80022ba <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8002202:	2301      	movs	r3, #1
 8002204:	e059      	b.n	80022ba <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6810      	ldr	r0, [r2, #0]
 800220e:	f107 020c 	add.w	r2, r7, #12
 8002212:	2100      	movs	r1, #0
 8002214:	4798      	blx	r3
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	da02      	bge.n	8002222 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800221c:	f06f 0304 	mvn.w	r3, #4
 8002220:	e04b      	b.n	80022ba <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d11b      	bne.n	8002264 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <DP83848_GetLinkState+0x90>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002240:	2302      	movs	r3, #2
 8002242:	e03a      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800224e:	2303      	movs	r3, #3
 8002250:	e033      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800225c:	2304      	movs	r3, #4
 800225e:	e02c      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002260:	2305      	movs	r3, #5
 8002262:	e02a      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6810      	ldr	r0, [r2, #0]
 800226c:	f107 020c 	add.w	r2, r7, #12
 8002270:	2110      	movs	r1, #16
 8002272:	4798      	blx	r3
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	da02      	bge.n	8002280 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 800227a:	f06f 0304 	mvn.w	r3, #4
 800227e:	e01c      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 800228a:	2306      	movs	r3, #6
 800228c:	e015      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0306 	and.w	r3, r3, #6
 8002294:	2b04      	cmp	r3, #4
 8002296:	d101      	bne.n	800229c <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002298:	2302      	movs	r3, #2
 800229a:	e00e      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0306 	and.w	r3, r3, #6
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e007      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0306 	and.w	r3, r3, #6
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d101      	bne.n	80022b8 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80022b4:	2304      	movs	r3, #4
 80022b6:	e000      	b.n	80022ba <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80022b8:	2305      	movs	r3, #5
    }
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_Init+0x40>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <HAL_Init+0x40>)
 80022ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <HAL_Init+0x40>)
 80022da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <HAL_Init+0x40>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f000 f8fc 	bl	80024ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f2:	200f      	movs	r0, #15
 80022f4:	f7ff fc46 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f8:	f7ff fc10 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023c00 	.word	0x40023c00

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000001c 	.word	0x2000001c
 800232c:	20000c10 	.word	0x20000c10

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000c10 	.word	0x20000c10

08002348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff ffee 	bl	8002330 <HAL_GetTick>
 8002354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d005      	beq.n	800236e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_Delay+0x44>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236e:	bf00      	nop
 8002370:	f7ff ffde 	bl	8002330 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	429a      	cmp	r2, r3
 800237e:	d8f7      	bhi.n	8002370 <HAL_Delay+0x28>
  {
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000001c 	.word	0x2000001c

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	@ (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	@ (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	@ (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	@ (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	@ 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff4c 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002512:	f7ff ff61 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 8002516:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f7ff ffb1 	bl	8002484 <NVIC_EncodePriority>
 8002522:	4602      	mov	r2, r0
 8002524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff80 	bl	8002430 <__NVIC_SetPriority>
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff54 	bl	80023f4 <__NVIC_EnableIRQ>
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_DMA_Start_IT+0x26>
 8002576:	2302      	movs	r3, #2
 8002578:	e040      	b.n	80025fc <HAL_DMA_Start_IT+0xa8>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d12f      	bne.n	80025ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f83a 	bl	800261c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	223f      	movs	r2, #63	@ 0x3f
 80025ae:	409a      	lsls	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0216 	orr.w	r2, r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e005      	b.n	80025fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002638:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b40      	cmp	r3, #64	@ 0x40
 8002648:	d108      	bne.n	800265c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800265a:	e007      	b.n	800266c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e08a      	b.n	80027a0 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2223      	movs	r2, #35	@ 0x23
 8002698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f005 fadf 	bl	8007c60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	4b40      	ldr	r3, [pc, #256]	@ (80027a8 <HAL_ETH_Init+0x130>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	4a3f      	ldr	r2, [pc, #252]	@ (80027a8 <HAL_ETH_Init+0x130>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b2:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <HAL_ETH_Init+0x130>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026be:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <HAL_ETH_Init+0x134>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a3a      	ldr	r2, [pc, #232]	@ (80027ac <HAL_ETH_Init+0x134>)
 80026c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026ca:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <HAL_ETH_Init+0x134>)
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4936      	ldr	r1, [pc, #216]	@ (80027ac <HAL_ETH_Init+0x134>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026d8:	4b34      	ldr	r3, [pc, #208]	@ (80027ac <HAL_ETH_Init+0x134>)
 80026da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f4:	f7ff fe1c 	bl	8002330 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026fa:	e011      	b.n	8002720 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026fc:	f7ff fe18 	bl	8002330 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800270a:	d909      	bls.n	8002720 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2204      	movs	r2, #4
 8002710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	22e0      	movs	r2, #224	@ 0xe0
 8002718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e03f      	b.n	80027a0 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e4      	bne.n	80026fc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 ff5a 	bl	80035ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f001 f805 	bl	8003748 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f001 f85b 	bl	80037fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	461a      	mov	r2, r3
 800274a:	2100      	movs	r1, #0
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 ffc3 	bl	80036d8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002760:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002772:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002776:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800278a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2210      	movs	r2, #16
 800279a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800

080027b0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d161      	bne.n	8002886 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2223      	movs	r2, #35	@ 0x23
 80027c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2204      	movs	r2, #4
 80027d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f9f4 	bl	8002bc4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e4:	2001      	movs	r0, #1
 80027e6:	f7ff fdaf 	bl	8002348 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002804:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002808:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002820:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fd7e 	bl	8003324 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0208 	orr.w	r2, r2, #8
 8002836:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002840:	2001      	movs	r0, #1
 8002842:	f7ff fd81 	bl	8002348 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0204 	orr.w	r2, r2, #4
 800285c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002870:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8002874:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002878:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2223      	movs	r2, #35	@ 0x23
 800287e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800289e:	2b23      	cmp	r3, #35	@ 0x23
 80028a0:	d170      	bne.n	8002984 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2223      	movs	r2, #35	@ 0x23
 80028a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80028bc:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80028c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028c4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028dc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	f023 0302 	bic.w	r3, r3, #2
 80028f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028f4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0204 	bic.w	r2, r2, #4
 8002904:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800290e:	2001      	movs	r0, #1
 8002910:	f7ff fd1a 	bl	8002348 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fd01 	bl	8003324 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0208 	bic.w	r2, r2, #8
 8002930:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800293a:	2001      	movs	r0, #1
 800293c:	f7ff fd04 	bl	8002348 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e00e      	b.n	800296c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	3212      	adds	r2, #18
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d9ed      	bls.n	800294e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2210      	movs	r2, #16
 800297c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a4:	f043 0201 	orr.w	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e045      	b.n	8002a3e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029b8:	2b23      	cmp	r3, #35	@ 0x23
 80029ba:	d13f      	bne.n	8002a3c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80029c4:	2201      	movs	r2, #1
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 ff85 	bl	80038d8 <ETH_Prepare_Tx_Descriptors>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029da:	f043 0202 	orr.w	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e02a      	b.n	8002a3e <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80029e8:	f3bf 8f4f 	dsb	sy
}
 80029ec:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d904      	bls.n	8002a0a <HAL_ETH_Transmit_IT+0x7c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	1f1a      	subs	r2, r3, #4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a24:	461a      	mov	r2, r3
 8002a26:	2304      	movs	r3, #4
 8002a28:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a32:	461a      	mov	r2, r3
 8002a34:	2300      	movs	r3, #0
 8002a36:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b088      	sub	sp, #32
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0a4      	b.n	8002bbc <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a78:	2b23      	cmp	r3, #35	@ 0x23
 8002a7a:	d001      	beq.n	8002a80 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e09d      	b.n	8002bbc <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a84:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	3212      	adds	r2, #18
 8002a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a90:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a96:	f1c3 0304 	rsb	r3, r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a9c:	e066      	b.n	8002b6c <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_ETH_ReadData+0x88>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d03c      	beq.n	8002b48 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002af0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f005 fa5c 	bl	8007fe4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	441a      	add	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d902      	bls.n	8002b5a <HAL_ETH_ReadData+0x114>
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	3b04      	subs	r3, #4
 8002b58:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69fa      	ldr	r2, [r7, #28]
 8002b5e:	3212      	adds	r2, #18
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db06      	blt.n	8002b82 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d202      	bcs.n	8002b82 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d08d      	beq.n	8002a9e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f814 	bl	8002bc4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d108      	bne.n	8002bba <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bd8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	3212      	adds	r2, #18
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bea:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002bec:	e044      	b.n	8002c78 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d112      	bne.n	8002c1c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f005 f9c2 	bl	8007f84 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	74fb      	strb	r3, [r7, #19]
 8002c0a:	e007      	b.n	8002c1c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	461a      	mov	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d02a      	beq.n	8002c78 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d108      	bne.n	8002c3c <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	6053      	str	r3, [r2, #4]
 8002c3a:	e005      	b.n	8002c48 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	3301      	adds	r3, #1
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d902      	bls.n	8002c66 <ETH_UpdateDescriptor+0xa2>
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3b04      	subs	r3, #4
 8002c64:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	3212      	adds	r2, #18
 8002c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c70:	617b      	str	r3, [r7, #20]
      desccount--;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <ETH_UpdateDescriptor+0xc0>
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1b4      	bne.n	8002bee <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d01a      	beq.n	8002cc4 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c98:	f3bf 8f5f 	dmb	sy
}
 8002c9c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6919      	ldr	r1, [r3, #16]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	18ca      	adds	r2, r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb6:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3318      	adds	r3, #24
 8002cd8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002cea:	e047      	b.n	8002d7c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d902      	bls.n	8002d18 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	3b04      	subs	r3, #4
 8002d16:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002d1c:	7bbb      	ldrb	r3, [r7, #14]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02c      	beq.n	8002d7c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68d9      	ldr	r1, [r3, #12]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db1f      	blt.n	8002d78 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f005 f98d 	bl	8008064 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	2200      	movs	r2, #0
 8002d56:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d902      	bls.n	8002d6a <HAL_ETH_ReleaseTxPacket+0x9e>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	3b04      	subs	r3, #4
 8002d68:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d76:	e001      	b.n	8002d7c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1b1      	bne.n	8002cec <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_ETH_IRQHandler+0x158>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00e      	beq.n	8002dea <HAL_ETH_IRQHandler+0x56>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <HAL_ETH_IRQHandler+0x15c>)
 8002de2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f004 fc7b 	bl	80076e0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00f      	beq.n	8002e14 <HAL_ETH_IRQHandler+0x80>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e06:	461a      	mov	r2, r3
 8002e08:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002e0c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f004 fc76 	bl	8007700 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d042      	beq.n	8002ea4 <HAL_ETH_IRQHandler+0x110>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d03d      	beq.n	8002ea4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	f043 0208 	orr.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01a      	beq.n	8002e78 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	4b29      	ldr	r3, [pc, #164]	@ (8002ef4 <HAL_ETH_IRQHandler+0x160>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002e68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e6c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	22e0      	movs	r2, #224	@ 0xe0
 8002e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e76:	e012      	b.n	8002e9e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e96:	461a      	mov	r2, r3
 8002e98:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002e9c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f004 fc3e 	bl	8007720 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00e      	beq.n	8002ecc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f81a 	bl	8002ef8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_ETH_IRQHandler+0x158>)
 8002ed8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002edc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f814 	bl	8002f0c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40013c00 	.word	0x40013c00
 8002ef0:	00010040 	.word	0x00010040
 8002ef4:	007e2000 	.word	0x007e2000

08002ef8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 031c 	and.w	r3, r3, #28
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	02db      	lsls	r3, r3, #11
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002f70:	f7ff f9de 	bl	8002330 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f76:	e00d      	b.n	8002f94 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002f78:	f7ff f9da 	bl	8002330 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f86:	d301      	bcc.n	8002f8c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e010      	b.n	8002fae <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ec      	bne.n	8002f78 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 031c 	and.w	r3, r3, #28
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	02db      	lsls	r3, r3, #11
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	019b      	lsls	r3, r3, #6
 8002fe4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003010:	f7ff f98e 	bl	8002330 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003016:	e00d      	b.n	8003034 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003018:	f7ff f98a 	bl	8002330 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003026:	d301      	bcc.n	800302c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e009      	b.n	8003040 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ec      	bne.n	8003018 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0e6      	b.n	800322a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf0c      	ite	eq
 80030ca:	2301      	moveq	r3, #1
 80030cc:	2300      	movne	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf14      	ite	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	2300      	moveq	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf0c      	ite	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	2300      	movne	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e00b      	b.n	8003262 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003250:	2b10      	cmp	r3, #16
 8003252:	d105      	bne.n	8003260 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f88a 	bl	8003370 <ETH_SetMACConfig>

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 031c 	bic.w	r3, r3, #28
 8003282:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003284:	f001 fa30 	bl	80046e8 <HAL_RCC_GetHCLKFreq>
 8003288:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4a14      	ldr	r2, [pc, #80]	@ (80032e0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d804      	bhi.n	800329c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f043 0308 	orr.w	r3, r3, #8
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e019      	b.n	80032d0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4a11      	ldr	r2, [pc, #68]	@ (80032e4 <HAL_ETH_SetMDIOClockRange+0x78>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d204      	bcs.n	80032ae <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f043 030c 	orr.w	r3, r3, #12
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e010      	b.n	80032d0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4a0d      	ldr	r2, [pc, #52]	@ (80032e8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d90c      	bls.n	80032d0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4a0c      	ldr	r2, [pc, #48]	@ (80032ec <HAL_ETH_SetMDIOClockRange+0x80>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d804      	bhi.n	80032c8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e003      	b.n	80032d0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f043 0310 	orr.w	r3, r3, #16
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	611a      	str	r2, [r3, #16]
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	02160ebf 	.word	0x02160ebf
 80032e4:	03938700 	.word	0x03938700
 80032e8:	05f5e0ff 	.word	0x05f5e0ff
 80032ec:	08f0d17f 	.word	0x08f0d17f

080032f0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003342:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003346:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003354:	2001      	movs	r0, #1
 8003356:	f7fe fff7 	bl	8002348 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003364:	6193      	str	r3, [r2, #24]
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4b53      	ldr	r3, [pc, #332]	@ (80034d4 <ETH_SetMACConfig+0x164>)
 8003386:	4013      	ands	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	7b9b      	ldrb	r3, [r3, #14]
 800338e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	7c12      	ldrb	r2, [r2, #16]
 8003394:	2a00      	cmp	r2, #0
 8003396:	d102      	bne.n	800339e <ETH_SetMACConfig+0x2e>
 8003398:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800339c:	e000      	b.n	80033a0 <ETH_SetMACConfig+0x30>
 800339e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80033a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	7c52      	ldrb	r2, [r2, #17]
 80033a6:	2a00      	cmp	r2, #0
 80033a8:	d102      	bne.n	80033b0 <ETH_SetMACConfig+0x40>
 80033aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80033ae:	e000      	b.n	80033b2 <ETH_SetMACConfig+0x42>
 80033b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	7fdb      	ldrb	r3, [r3, #31]
 80033be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80033c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	7f92      	ldrb	r2, [r2, #30]
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	d102      	bne.n	80033d6 <ETH_SetMACConfig+0x66>
 80033d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033d4:	e000      	b.n	80033d8 <ETH_SetMACConfig+0x68>
 80033d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80033d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	7f1b      	ldrb	r3, [r3, #28]
 80033de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	791b      	ldrb	r3, [r3, #4]
 80033ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80033ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80033f6:	2a00      	cmp	r2, #0
 80033f8:	d102      	bne.n	8003400 <ETH_SetMACConfig+0x90>
 80033fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033fe:	e000      	b.n	8003402 <ETH_SetMACConfig+0x92>
 8003400:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003402:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	7bdb      	ldrb	r3, [r3, #15]
 8003408:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800340a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003410:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003418:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800341a:	4313      	orrs	r3, r2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003432:	2001      	movs	r0, #1
 8003434:	f7fe ff88 	bl	8002348 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800344e:	4013      	ands	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003456:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800345e:	2a00      	cmp	r2, #0
 8003460:	d101      	bne.n	8003466 <ETH_SetMACConfig+0xf6>
 8003462:	2280      	movs	r2, #128	@ 0x80
 8003464:	e000      	b.n	8003468 <ETH_SetMACConfig+0xf8>
 8003466:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003468:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800346e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003476:	2a01      	cmp	r2, #1
 8003478:	d101      	bne.n	800347e <ETH_SetMACConfig+0x10e>
 800347a:	2208      	movs	r2, #8
 800347c:	e000      	b.n	8003480 <ETH_SetMACConfig+0x110>
 800347e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003480:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003488:	2a01      	cmp	r2, #1
 800348a:	d101      	bne.n	8003490 <ETH_SetMACConfig+0x120>
 800348c:	2204      	movs	r2, #4
 800348e:	e000      	b.n	8003492 <ETH_SetMACConfig+0x122>
 8003490:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800349a:	2a01      	cmp	r2, #1
 800349c:	d101      	bne.n	80034a2 <ETH_SetMACConfig+0x132>
 800349e:	2202      	movs	r2, #2
 80034a0:	e000      	b.n	80034a4 <ETH_SetMACConfig+0x134>
 80034a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034a4:	4313      	orrs	r3, r2
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034bc:	2001      	movs	r0, #1
 80034be:	f7fe ff43 	bl	8002348 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	619a      	str	r2, [r3, #24]
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	fd20810f 	.word	0xfd20810f

080034d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4b3d      	ldr	r3, [pc, #244]	@ (80035e8 <ETH_SetDMAConfig+0x110>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	7b1b      	ldrb	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <ETH_SetDMAConfig+0x2c>
 80034fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003502:	e000      	b.n	8003506 <ETH_SetDMAConfig+0x2e>
 8003504:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	7b5b      	ldrb	r3, [r3, #13]
 800350a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800350c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	7f52      	ldrb	r2, [r2, #29]
 8003512:	2a00      	cmp	r2, #0
 8003514:	d102      	bne.n	800351c <ETH_SetDMAConfig+0x44>
 8003516:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800351a:	e000      	b.n	800351e <ETH_SetDMAConfig+0x46>
 800351c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800351e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	7b9b      	ldrb	r3, [r3, #14]
 8003524:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003526:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800352c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	7f1b      	ldrb	r3, [r3, #28]
 8003532:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003534:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	7f9b      	ldrb	r3, [r3, #30]
 800353a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800353c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003542:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800354a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800354c:	4313      	orrs	r3, r2
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800355c:	461a      	mov	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800356e:	2001      	movs	r0, #1
 8003570:	f7fe feea 	bl	8002348 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800357c:	461a      	mov	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	791b      	ldrb	r3, [r3, #4]
 8003586:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800358c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003592:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003598:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80035a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7fe febb 	bl	8002348 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	f8de3f23 	.word	0xf8de3f23

080035ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b0a6      	sub	sp, #152	@ 0x98
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003600:	2300      	movs	r3, #0
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800362e:	2300      	movs	r3, #0
 8003630:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003638:	2300      	movs	r3, #0
 800363a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003658:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800365a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800365e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003660:	2300      	movs	r3, #0
 8003662:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003666:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fe7f 	bl	8003370 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003672:	2301      	movs	r3, #1
 8003674:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003676:	2301      	movs	r3, #1
 8003678:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003680:	2301      	movs	r3, #1
 8003682:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003694:	2300      	movs	r3, #0
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800369e:	2301      	movs	r3, #1
 80036a0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80036a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036a6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036ac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036b2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80036c2:	f107 0308 	add.w	r3, r7, #8
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff05 	bl	80034d8 <ETH_SetDMAConfig>
}
 80036ce:	bf00      	nop
 80036d0:	3798      	adds	r7, #152	@ 0x98
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3305      	adds	r3, #5
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	3204      	adds	r2, #4
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <ETH_MACAddressConfig+0x68>)
 80036fa:	4413      	add	r3, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3303      	adds	r3, #3
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	061a      	lsls	r2, r3, #24
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3302      	adds	r3, #2
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3301      	adds	r3, #1
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	4313      	orrs	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	7812      	ldrb	r2, [r2, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <ETH_MACAddressConfig+0x6c>)
 800372a:	4413      	add	r3, r2
 800372c:	461a      	mov	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	6013      	str	r3, [r2, #0]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40028040 	.word	0x40028040
 8003744:	40028044 	.word	0x40028044

08003748 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	e03e      	b.n	80037d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68d9      	ldr	r1, [r3, #12]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	440b      	add	r3, r1
 8003766:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	3206      	adds	r2, #6
 8003788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d80c      	bhi.n	80037b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68d9      	ldr	r1, [r3, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	440b      	add	r3, r1
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	e004      	b.n	80037c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d9bd      	bls.n	8003756 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ec:	611a      	str	r2, [r3, #16]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e048      	b.n	800389a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6919      	ldr	r1, [r3, #16]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2200      	movs	r2, #0
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003844:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	3212      	adds	r2, #18
 8003866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d80c      	bhi.n	800388a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6919      	ldr	r1, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	60da      	str	r2, [r3, #12]
 8003888:	e004      	b.n	8003894 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3301      	adds	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d9b3      	bls.n	8003808 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ca:	60da      	str	r2, [r3, #12]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80038d8:	b480      	push	{r7}
 80038da:	b091      	sub	sp, #68	@ 0x44
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3318      	adds	r3, #24
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003902:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003916:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800391a:	d007      	beq.n	800392c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800391c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003920:	3304      	adds	r3, #4
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	e115      	b.n	8003b5c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003932:	3301      	adds	r3, #1
 8003934:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003948:	f023 031f 	bic.w	r3, r3, #31
 800394c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800394e:	6852      	ldr	r2, [r2, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	431a      	orrs	r2, r3
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	431a      	orrs	r2, r3
 800398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003990:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80039b6:	e084      	b.n	8003ac2 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80039c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e005      	b.n	80039e4 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80039e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e6:	3301      	adds	r3, #1
 80039e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d902      	bls.n	80039f6 <ETH_Prepare_Tx_Descriptors+0x11e>
 80039f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f2:	3b04      	subs	r3, #4
 80039f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a0c:	d007      	beq.n	8003a1e <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a12:	3304      	adds	r3, #4
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d029      	beq.n	8003a72 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a30:	e019      	b.n	8003a66 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003a32:	f3bf 8f5f 	dmb	sy
}
 8003a36:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a46:	3301      	adds	r3, #1
 8003a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d902      	bls.n	8003a56 <ETH_Prepare_Tx_Descriptors+0x17e>
 8003a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a52:	3b04      	subs	r3, #4
 8003a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a62:	3301      	adds	r3, #1
 8003a64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3e1      	bcc.n	8003a32 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e074      	b.n	8003b5c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a80:	3301      	adds	r3, #1
 8003a82:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a92:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003a9c:	f023 031f 	bic.w	r3, r3, #31
 8003aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa2:	6852      	ldr	r2, [r2, #4]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	3301      	adds	r3, #1
 8003aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003ab0:	f3bf 8f5f 	dmb	sy
}
 8003ab4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f47f af76 	bne.w	80039b8 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d006      	beq.n	8003ae0 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e005      	b.n	8003aec <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	6a3a      	ldr	r2, [r7, #32]
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003b02:	f3bf 8f5f 	dmb	sy
}
 8003b06:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b28:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2e:	613b      	str	r3, [r7, #16]
  return(result);
 8003b30:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	2301      	movs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b46:	4413      	add	r3, r2
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f383 8810 	msr	PRIMASK, r3
}
 8003b58:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3744      	adds	r7, #68	@ 0x44
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	@ 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e16b      	b.n	8003e5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b84:	2201      	movs	r2, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	f040 815a 	bne.w	8003e56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d005      	beq.n	8003bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d130      	bne.n	8003c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 0201 	and.w	r2, r3, #1
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d017      	beq.n	8003c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d123      	bne.n	8003cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	08da      	lsrs	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3208      	adds	r2, #8
 8003c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	220f      	movs	r2, #15
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3208      	adds	r2, #8
 8003ca6:	69b9      	ldr	r1, [r7, #24]
 8003ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0203 	and.w	r2, r3, #3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80b4 	beq.w	8003e56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b60      	ldr	r3, [pc, #384]	@ (8003e74 <HAL_GPIO_Init+0x30c>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e74 <HAL_GPIO_Init+0x30c>)
 8003cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e74 <HAL_GPIO_Init+0x30c>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003e78 <HAL_GPIO_Init+0x310>)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3302      	adds	r3, #2
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	220f      	movs	r2, #15
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a52      	ldr	r2, [pc, #328]	@ (8003e7c <HAL_GPIO_Init+0x314>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02b      	beq.n	8003d8e <HAL_GPIO_Init+0x226>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a51      	ldr	r2, [pc, #324]	@ (8003e80 <HAL_GPIO_Init+0x318>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d025      	beq.n	8003d8a <HAL_GPIO_Init+0x222>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a50      	ldr	r2, [pc, #320]	@ (8003e84 <HAL_GPIO_Init+0x31c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <HAL_GPIO_Init+0x21e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4f      	ldr	r2, [pc, #316]	@ (8003e88 <HAL_GPIO_Init+0x320>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d019      	beq.n	8003d82 <HAL_GPIO_Init+0x21a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4e      	ldr	r2, [pc, #312]	@ (8003e8c <HAL_GPIO_Init+0x324>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_GPIO_Init+0x216>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a4d      	ldr	r2, [pc, #308]	@ (8003e90 <HAL_GPIO_Init+0x328>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00d      	beq.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a4c      	ldr	r2, [pc, #304]	@ (8003e94 <HAL_GPIO_Init+0x32c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <HAL_GPIO_Init+0x20e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4b      	ldr	r2, [pc, #300]	@ (8003e98 <HAL_GPIO_Init+0x330>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_GPIO_Init+0x20a>
 8003d6e:	2307      	movs	r3, #7
 8003d70:	e00e      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d72:	2308      	movs	r3, #8
 8003d74:	e00c      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d76:	2306      	movs	r3, #6
 8003d78:	e00a      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	e008      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	e006      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d82:	2303      	movs	r3, #3
 8003d84:	e004      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e002      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_GPIO_Init+0x228>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	f002 0203 	and.w	r2, r2, #3
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	4093      	lsls	r3, r2
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da0:	4935      	ldr	r1, [pc, #212]	@ (8003e78 <HAL_GPIO_Init+0x310>)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	3302      	adds	r3, #2
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dae:	4b3b      	ldr	r3, [pc, #236]	@ (8003e9c <HAL_GPIO_Init+0x334>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dd2:	4a32      	ldr	r2, [pc, #200]	@ (8003e9c <HAL_GPIO_Init+0x334>)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dd8:	4b30      	ldr	r3, [pc, #192]	@ (8003e9c <HAL_GPIO_Init+0x334>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dfc:	4a27      	ldr	r2, [pc, #156]	@ (8003e9c <HAL_GPIO_Init+0x334>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e02:	4b26      	ldr	r3, [pc, #152]	@ (8003e9c <HAL_GPIO_Init+0x334>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e26:	4a1d      	ldr	r2, [pc, #116]	@ (8003e9c <HAL_GPIO_Init+0x334>)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e9c <HAL_GPIO_Init+0x334>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e50:	4a12      	ldr	r2, [pc, #72]	@ (8003e9c <HAL_GPIO_Init+0x334>)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	f67f ae90 	bls.w	8003b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3724      	adds	r7, #36	@ 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40013800 	.word	0x40013800
 8003e7c:	40020000 	.word	0x40020000
 8003e80:	40020400 	.word	0x40020400
 8003e84:	40020800 	.word	0x40020800
 8003e88:	40020c00 	.word	0x40020c00
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40021400 	.word	0x40021400
 8003e94:	40021800 	.word	0x40021800
 8003e98:	40021c00 	.word	0x40021c00
 8003e9c:	40013c00 	.word	0x40013c00

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e267      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d075      	beq.n	8003faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ebe:	4b88      	ldr	r3, [pc, #544]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eca:	4b85      	ldr	r3, [pc, #532]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d112      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed6:	4b82      	ldr	r3, [pc, #520]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ede:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	4b7e      	ldr	r3, [pc, #504]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d05b      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x108>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d157      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e242      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f04:	d106      	bne.n	8003f14 <HAL_RCC_OscConfig+0x74>
 8003f06:	4b76      	ldr	r3, [pc, #472]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a75      	ldr	r2, [pc, #468]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e01d      	b.n	8003f50 <HAL_RCC_OscConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x98>
 8003f1e:	4b70      	ldr	r3, [pc, #448]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6f      	ldr	r2, [pc, #444]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a6c      	ldr	r2, [pc, #432]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0xb0>
 8003f38:	4b69      	ldr	r3, [pc, #420]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a68      	ldr	r2, [pc, #416]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b66      	ldr	r3, [pc, #408]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a65      	ldr	r2, [pc, #404]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fe f9ea 	bl	8002330 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fe f9e6 	bl	8002330 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	@ 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e207      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b5b      	ldr	r3, [pc, #364]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0xc0>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe f9d6 	bl	8002330 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fe f9d2 	bl	8002330 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	@ 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1f3      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9a:	4b51      	ldr	r3, [pc, #324]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0xe8>
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d063      	beq.n	800407e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc2:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d11c      	bne.n	8004008 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fce:	4b44      	ldr	r3, [pc, #272]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	4b41      	ldr	r3, [pc, #260]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x152>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e1c7      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4937      	ldr	r1, [pc, #220]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004006:	e03a      	b.n	800407e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004010:	4b34      	ldr	r3, [pc, #208]	@ (80040e4 <HAL_RCC_OscConfig+0x244>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fe f98b 	bl	8002330 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401e:	f7fe f987 	bl	8002330 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1a8      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	4b2b      	ldr	r3, [pc, #172]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403c:	4b28      	ldr	r3, [pc, #160]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4925      	ldr	r1, [pc, #148]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]
 8004050:	e015      	b.n	800407e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004052:	4b24      	ldr	r3, [pc, #144]	@ (80040e4 <HAL_RCC_OscConfig+0x244>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fe f96a 	bl	8002330 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004060:	f7fe f966 	bl	8002330 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e187      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004072:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d036      	beq.n	80040f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004092:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <HAL_RCC_OscConfig+0x248>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fe f94a 	bl	8002330 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a0:	f7fe f946 	bl	8002330 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e167      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b2:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <HAL_RCC_OscConfig+0x240>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x200>
 80040be:	e01b      	b.n	80040f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c0:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <HAL_RCC_OscConfig+0x248>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c6:	f7fe f933 	bl	8002330 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	e00e      	b.n	80040ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ce:	f7fe f92f 	bl	8002330 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d907      	bls.n	80040ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e150      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
 80040e0:	40023800 	.word	0x40023800
 80040e4:	42470000 	.word	0x42470000
 80040e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	4b88      	ldr	r3, [pc, #544]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ea      	bne.n	80040ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8097 	beq.w	8004234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410a:	4b81      	ldr	r3, [pc, #516]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	4b7d      	ldr	r3, [pc, #500]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	4a7c      	ldr	r2, [pc, #496]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	@ 0x40
 8004126:	4b7a      	ldr	r3, [pc, #488]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b77      	ldr	r3, [pc, #476]	@ (8004314 <HAL_RCC_OscConfig+0x474>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004142:	4b74      	ldr	r3, [pc, #464]	@ (8004314 <HAL_RCC_OscConfig+0x474>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a73      	ldr	r2, [pc, #460]	@ (8004314 <HAL_RCC_OscConfig+0x474>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7fe f8ef 	bl	8002330 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fe f8eb 	bl	8002330 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e10c      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	4b6a      	ldr	r3, [pc, #424]	@ (8004314 <HAL_RCC_OscConfig+0x474>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x2ea>
 800417c:	4b64      	ldr	r3, [pc, #400]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004180:	4a63      	ldr	r2, [pc, #396]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	@ 0x70
 8004188:	e01c      	b.n	80041c4 <HAL_RCC_OscConfig+0x324>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x30c>
 8004192:	4b5f      	ldr	r3, [pc, #380]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004196:	4a5e      	ldr	r2, [pc, #376]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	6713      	str	r3, [r2, #112]	@ 0x70
 800419e:	4b5c      	ldr	r3, [pc, #368]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0x324>
 80041ac:	4b58      	ldr	r3, [pc, #352]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b0:	4a57      	ldr	r2, [pc, #348]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b8:	4b55      	ldr	r3, [pc, #340]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041bc:	4a54      	ldr	r2, [pc, #336]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80041be:	f023 0304 	bic.w	r3, r3, #4
 80041c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fe f8b0 	bl	8002330 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d4:	f7fe f8ac 	bl	8002330 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0cb      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ea:	4b49      	ldr	r3, [pc, #292]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0ee      	beq.n	80041d4 <HAL_RCC_OscConfig+0x334>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f8:	f7fe f89a 	bl	8002330 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fe f896 	bl	8002330 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e0b5      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004216:	4b3e      	ldr	r3, [pc, #248]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ee      	bne.n	8004200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004228:	4b39      	ldr	r3, [pc, #228]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	4a38      	ldr	r2, [pc, #224]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004232:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80a1 	beq.w	8004380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800423e:	4b34      	ldr	r3, [pc, #208]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b08      	cmp	r3, #8
 8004248:	d05c      	beq.n	8004304 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d141      	bne.n	80042d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004252:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <HAL_RCC_OscConfig+0x478>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fe f86a 	bl	8002330 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004260:	f7fe f866 	bl	8002330 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e087      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	4b27      	ldr	r3, [pc, #156]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	3b01      	subs	r3, #1
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	061b      	lsls	r3, r3, #24
 80042a2:	491b      	ldr	r1, [pc, #108]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <HAL_RCC_OscConfig+0x478>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fe f83f 	bl	8002330 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fe f83b 	bl	8002330 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e05c      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x416>
 80042d4:	e054      	b.n	8004380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d6:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <HAL_RCC_OscConfig+0x478>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fe f828 	bl	8002330 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe f824 	bl	8002330 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e045      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <HAL_RCC_OscConfig+0x470>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x444>
 8004302:	e03d      	b.n	8004380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e038      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
 8004310:	40023800 	.word	0x40023800
 8004314:	40007000 	.word	0x40007000
 8004318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800431c:	4b1b      	ldr	r3, [pc, #108]	@ (800438c <HAL_RCC_OscConfig+0x4ec>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d028      	beq.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d121      	bne.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d11a      	bne.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004354:	4293      	cmp	r3, r2
 8004356:	d111      	bne.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d107      	bne.n	800437c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800

08004390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0cc      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4b68      	ldr	r3, [pc, #416]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d90c      	bls.n	80043cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b65      	ldr	r3, [pc, #404]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b63      	ldr	r3, [pc, #396]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0b8      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e4:	4b59      	ldr	r3, [pc, #356]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a58      	ldr	r2, [pc, #352]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043fc:	4b53      	ldr	r3, [pc, #332]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a52      	ldr	r2, [pc, #328]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b50      	ldr	r3, [pc, #320]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	494d      	ldr	r1, [pc, #308]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d044      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b47      	ldr	r3, [pc, #284]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d119      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d003      	beq.n	800444e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444a:	2b03      	cmp	r3, #3
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444e:	4b3f      	ldr	r3, [pc, #252]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e06f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	4b3b      	ldr	r3, [pc, #236]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e067      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446e:	4b37      	ldr	r3, [pc, #220]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4934      	ldr	r1, [pc, #208]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	4313      	orrs	r3, r2
 800447e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004480:	f7fd ff56 	bl	8002330 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	e00a      	b.n	800449e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004488:	f7fd ff52 	bl	8002330 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e04f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	4b2b      	ldr	r3, [pc, #172]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 020c 	and.w	r2, r3, #12
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1eb      	bne.n	8004488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b0:	4b25      	ldr	r3, [pc, #148]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d20c      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b22      	ldr	r3, [pc, #136]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b20      	ldr	r3, [pc, #128]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e032      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b19      	ldr	r3, [pc, #100]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4916      	ldr	r1, [pc, #88]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004502:	4b12      	ldr	r3, [pc, #72]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	490e      	ldr	r1, [pc, #56]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004516:	f000 f821 	bl	800455c <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	490a      	ldr	r1, [pc, #40]	@ (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	4a09      	ldr	r2, [pc, #36]	@ (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004532:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <HAL_RCC_ClockConfig+0x1c8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd fb24 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023c00 	.word	0x40023c00
 800454c:	40023800 	.word	0x40023800
 8004550:	080260b8 	.word	0x080260b8
 8004554:	20000014 	.word	0x20000014
 8004558:	20000018 	.word	0x20000018

0800455c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b090      	sub	sp, #64	@ 0x40
 8004562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004574:	4b59      	ldr	r3, [pc, #356]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b08      	cmp	r3, #8
 800457e:	d00d      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x40>
 8004580:	2b08      	cmp	r3, #8
 8004582:	f200 80a1 	bhi.w	80046c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x34>
 800458a:	2b04      	cmp	r3, #4
 800458c:	d003      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x3a>
 800458e:	e09b      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004592:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004594:	e09b      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004596:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004598:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800459a:	e098      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800459c:	4b4f      	ldr	r3, [pc, #316]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045a6:	4b4d      	ldr	r3, [pc, #308]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d028      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b2:	4b4a      	ldr	r3, [pc, #296]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	2200      	movs	r2, #0
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045c4:	2100      	movs	r1, #0
 80045c6:	4b47      	ldr	r3, [pc, #284]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80045c8:	fb03 f201 	mul.w	r2, r3, r1
 80045cc:	2300      	movs	r3, #0
 80045ce:	fb00 f303 	mul.w	r3, r0, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	4a43      	ldr	r2, [pc, #268]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80045d6:	fba0 1202 	umull	r1, r2, r0, r2
 80045da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045dc:	460a      	mov	r2, r1
 80045de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e2:	4413      	add	r3, r2
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e8:	2200      	movs	r2, #0
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	61fa      	str	r2, [r7, #28]
 80045ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045f6:	f7fc fb47 	bl	8000c88 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4613      	mov	r3, r2
 8004600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004602:	e053      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004604:	4b35      	ldr	r3, [pc, #212]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	099b      	lsrs	r3, r3, #6
 800460a:	2200      	movs	r2, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	617a      	str	r2, [r7, #20]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004616:	f04f 0b00 	mov.w	fp, #0
 800461a:	4652      	mov	r2, sl
 800461c:	465b      	mov	r3, fp
 800461e:	f04f 0000 	mov.w	r0, #0
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	0159      	lsls	r1, r3, #5
 8004628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800462c:	0150      	lsls	r0, r2, #5
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	ebb2 080a 	subs.w	r8, r2, sl
 8004636:	eb63 090b 	sbc.w	r9, r3, fp
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004646:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800464a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800464e:	ebb2 0408 	subs.w	r4, r2, r8
 8004652:	eb63 0509 	sbc.w	r5, r3, r9
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	00eb      	lsls	r3, r5, #3
 8004660:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004664:	00e2      	lsls	r2, r4, #3
 8004666:	4614      	mov	r4, r2
 8004668:	461d      	mov	r5, r3
 800466a:	eb14 030a 	adds.w	r3, r4, sl
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	eb45 030b 	adc.w	r3, r5, fp
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004682:	4629      	mov	r1, r5
 8004684:	028b      	lsls	r3, r1, #10
 8004686:	4621      	mov	r1, r4
 8004688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800468c:	4621      	mov	r1, r4
 800468e:	028a      	lsls	r2, r1, #10
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004696:	2200      	movs	r2, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	60fa      	str	r2, [r7, #12]
 800469c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a0:	f7fc faf2 	bl	8000c88 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4613      	mov	r3, r2
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046ac:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x180>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	3301      	adds	r3, #1
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046c6:	e002      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80046ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3740      	adds	r7, #64	@ 0x40
 80046d4:	46bd      	mov	sp, r7
 80046d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
 80046e0:	00f42400 	.word	0x00f42400
 80046e4:	017d7840 	.word	0x017d7840

080046e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046ec:	4b03      	ldr	r3, [pc, #12]	@ (80046fc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000014 	.word	0x20000014

08004700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004704:	f7ff fff0 	bl	80046e8 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0a9b      	lsrs	r3, r3, #10
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4903      	ldr	r1, [pc, #12]	@ (8004724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	080260c8 	.word	0x080260c8

08004728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800472c:	f7ff ffdc 	bl	80046e8 <HAL_RCC_GetHCLKFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	0b5b      	lsrs	r3, r3, #13
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4903      	ldr	r1, [pc, #12]	@ (800474c <HAL_RCC_GetPCLK2Freq+0x24>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40023800 	.word	0x40023800
 800474c:	080260c8 	.word	0x080260c8

08004750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	220f      	movs	r2, #15
 800475e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004760:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0203 	and.w	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800476c:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004778:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <HAL_RCC_GetClockConfig+0x5c>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004784:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <HAL_RCC_GetClockConfig+0x5c>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_RCC_GetClockConfig+0x60>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0207 	and.w	r2, r3, #7
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	601a      	str	r2, [r3, #0]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40023c00 	.word	0x40023c00

080047b4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e01c      	b.n	8004800 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	795b      	ldrb	r3, [r3, #5]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fd f8f0 	bl	80019bc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0204 	orr.w	r2, r2, #4
 80047f0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2210      	movs	r2, #16
 800482a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800482c:	2301      	movs	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e009      	b.n	8004846 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2208      	movs	r2, #8
 8004840:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d10b      	bne.n	8004864 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2204      	movs	r2, #4
 8004850:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f837 	bl	80048c6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8004860:	605a      	str	r2, [r3, #4]

    return;
 8004862:	e022      	b.n	80048aa <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01d      	beq.n	80048aa <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0208 	bic.w	r2, r2, #8
 800487c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	795b      	ldrb	r3, [r3, #5]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b04      	cmp	r3, #4
 8004890:	d00b      	beq.n	80048aa <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f803 	bl	80048b0 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e022      	b.n	8004932 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd f8a4 	bl	8001a4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2203      	movs	r2, #3
 8004908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f815 	bl	800493c <HAL_SD_InitCard>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e00a      	b.n	8004932 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800493c:	b5b0      	push	{r4, r5, r7, lr}
 800493e:	b08e      	sub	sp, #56	@ 0x38
 8004940:	af04      	add	r7, sp, #16
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004944:	2300      	movs	r3, #0
 8004946:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004958:	2376      	movs	r3, #118	@ 0x76
 800495a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681d      	ldr	r5, [r3, #0]
 8004960:	466c      	mov	r4, sp
 8004962:	f107 0314 	add.w	r3, r7, #20
 8004966:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800496a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800496e:	f107 0308 	add.w	r3, r7, #8
 8004972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004974:	4628      	mov	r0, r5
 8004976:	f001 ff27 	bl	80067c8 <SDIO_Init>
 800497a:	4603      	mov	r3, r0
 800497c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e04f      	b.n	8004a2c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800498c:	4b29      	ldr	r3, [pc, #164]	@ (8004a34 <HAL_SD_InitCard+0xf8>)
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f001 ff41 	bl	800681e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800499c:	4b25      	ldr	r3, [pc, #148]	@ (8004a34 <HAL_SD_InitCard+0xf8>)
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80049a2:	2002      	movs	r0, #2
 80049a4:	f7fd fcd0 	bl	8002348 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fd77 	bl	800549c <SD_PowerON>
 80049ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02e      	b.n	8004a2c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fc96 	bl	8005300 <SD_InitCard>
 80049d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00b      	beq.n	80049f4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e01b      	b.n	8004a2c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 ffa0 	bl	8006942 <SDMMC_CmdBlockLength>
 8004a02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00f      	beq.n	8004a2a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a38 <HAL_SD_InitCard+0xfc>)
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	@ 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bdb0      	pop	{r4, r5, r7, pc}
 8004a34:	422580a0 	.word	0x422580a0
 8004a38:	004005ff 	.word	0x004005ff

08004a3c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08c      	sub	sp, #48	@ 0x30
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0c0      	b.n	8004be6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	f040 80b9 	bne.w	8004be4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d907      	bls.n	8004a96 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e0a7      	b.n	8004be6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2203      	movs	r2, #3
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	4a4c      	ldr	r2, [pc, #304]	@ (8004bf0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8004bf4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004ac8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	2200      	movs	r2, #0
 8004ad0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3380      	adds	r3, #128	@ 0x80
 8004b00:	4619      	mov	r1, r3
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	025b      	lsls	r3, r3, #9
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	f7fd fd23 	bl	8002554 <HAL_DMA_Start_IT>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d017      	beq.n	8004b44 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8004b22:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a33      	ldr	r2, [pc, #204]	@ (8004bf8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004b2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e050      	b.n	8004be6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004b44:	4b2d      	ldr	r3, [pc, #180]	@ (8004bfc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d002      	beq.n	8004b58 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	025b      	lsls	r3, r3, #9
 8004b56:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b58:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	025b      	lsls	r3, r3, #9
 8004b62:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b64:	2390      	movs	r3, #144	@ 0x90
 8004b66:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004b70:	2301      	movs	r3, #1
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f107 0210 	add.w	r2, r7, #16
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 feb3 	bl	80068ea <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d90a      	bls.n	8004ba0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2282      	movs	r2, #130	@ 0x82
 8004b8e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 ff17 	bl	80069ca <SDMMC_CmdReadMultiBlock>
 8004b9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004b9e:	e009      	b.n	8004bb4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2281      	movs	r2, #129	@ 0x81
 8004ba4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 feea 	bl	8006986 <SDMMC_CmdReadSingleBlock>
 8004bb2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d012      	beq.n	8004be0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004bc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e002      	b.n	8004be6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3730      	adds	r7, #48	@ 0x30
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	080051eb 	.word	0x080051eb
 8004bf4:	0800525d 	.word	0x0800525d
 8004bf8:	004005ff 	.word	0x004005ff
 8004bfc:	4225858c 	.word	0x4225858c

08004c00 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08c      	sub	sp, #48	@ 0x30
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0c5      	b.n	8004db4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	f040 80be 	bne.w	8004db2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	441a      	add	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d907      	bls.n	8004c5a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e0ac      	b.n	8004db4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	4a4e      	ldr	r2, [pc, #312]	@ (8004dbc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8a:	4a4d      	ldr	r2, [pc, #308]	@ (8004dc0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004c8c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c92:	2200      	movs	r2, #0
 8004c94:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	025b      	lsls	r3, r3, #9
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d90a      	bls.n	8004cc0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	22a0      	movs	r2, #160	@ 0xa0
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 fecb 	bl	8006a52 <SDMMC_CmdWriteMultiBlock>
 8004cbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004cbe:	e009      	b.n	8004cd4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2290      	movs	r2, #144	@ 0x90
 8004cc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 fe9e 	bl	8006a0e <SDMMC_CmdWriteSingleBlock>
 8004cd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d012      	beq.n	8004d00 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a39      	ldr	r2, [pc, #228]	@ (8004dc4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004ce0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e059      	b.n	8004db4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004d00:	4b31      	ldr	r3, [pc, #196]	@ (8004dc8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0a:	2240      	movs	r2, #64	@ 0x40
 8004d0c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3380      	adds	r3, #128	@ 0x80
 8004d36:	461a      	mov	r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	025b      	lsls	r3, r3, #9
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	f7fd fc09 	bl	8002554 <HAL_DMA_Start_IT>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01c      	beq.n	8004d82 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8004d56:	f023 0302 	bic.w	r3, r3, #2
 8004d5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004d62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e018      	b.n	8004db4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	025b      	lsls	r3, r3, #9
 8004d8c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d8e:	2390      	movs	r3, #144	@ 0x90
 8004d90:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f107 0210 	add.w	r2, r7, #16
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 fd9e 	bl	80068ea <SDIO_ConfigData>

      return HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3730      	adds	r7, #48	@ 0x30
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	080051c1 	.word	0x080051c1
 8004dc0:	0800525d 	.word	0x0800525d
 8004dc4:	004005ff 	.word	0x004005ff
 8004dc8:	4225858c 	.word	0x4225858c

08004dcc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dee:	0f9b      	lsrs	r3, r3, #30
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dfa:	0e9b      	lsrs	r3, r3, #26
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0c:	0e1b      	lsrs	r3, r3, #24
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e40:	0d1b      	lsrs	r3, r3, #20
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e5e:	0bdb      	lsrs	r3, r3, #15
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e70:	0b9b      	lsrs	r3, r3, #14
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e82:	0b5b      	lsrs	r3, r3, #13
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e94:	0b1b      	lsrs	r3, r3, #12
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d163      	bne.n	8004f78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eb4:	009a      	lsls	r2, r3, #2
 8004eb6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004eba:	4013      	ands	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004ec0:	0f92      	lsrs	r2, r2, #30
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ecc:	0edb      	lsrs	r3, r3, #27
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ede:	0e1b      	lsrs	r3, r3, #24
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ef0:	0d5b      	lsrs	r3, r3, #21
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f02:	0c9b      	lsrs	r3, r3, #18
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f14:	0bdb      	lsrs	r3, r3, #15
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	7e1b      	ldrb	r3, [r3, #24]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	3302      	adds	r3, #2
 8004f38:	2201      	movs	r2, #1
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004f42:	fb03 f202 	mul.w	r2, r3, r2
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	7a1b      	ldrb	r3, [r3, #8]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004f64:	0a52      	lsrs	r2, r2, #9
 8004f66:	fb03 f202 	mul.w	r2, r3, r2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f74:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f76:	e031      	b.n	8004fdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11d      	bne.n	8004fbc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	431a      	orrs	r2, r3
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	029a      	lsls	r2, r3, #10
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fb0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	661a      	str	r2, [r3, #96]	@ 0x60
 8004fba:	e00f      	b.n	8004fdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a58      	ldr	r2, [pc, #352]	@ (8005124 <HAL_SD_GetCardCSD+0x344>)
 8004fc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e09d      	b.n	8005118 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe0:	0b9b      	lsrs	r3, r3, #14
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff2:	09db      	lsrs	r3, r3, #7
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800500a:	b2da      	uxtb	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005014:	0fdb      	lsrs	r3, r3, #31
 8005016:	b2da      	uxtb	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005020:	0f5b      	lsrs	r3, r3, #29
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	b2da      	uxtb	r2, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	0e9b      	lsrs	r3, r3, #26
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	b2da      	uxtb	r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	0d9b      	lsrs	r3, r3, #22
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	b2da      	uxtb	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005056:	0d5b      	lsrs	r3, r3, #21
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	0bdb      	lsrs	r3, r3, #15
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	b2da      	uxtb	r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	0b9b      	lsrs	r3, r3, #14
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	0b5b      	lsrs	r3, r3, #13
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	0b1b      	lsrs	r3, r3, #12
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	0a9b      	lsrs	r3, r3, #10
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005106:	b2da      	uxtb	r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	004005ff 	.word	0x004005ff

08005128 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa10 	bl	80055b8 <SD_SendStatus>
 8005198:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	0a5b      	lsrs	r3, r3, #9
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80051b6:	693b      	ldr	r3, [r7, #16]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051dc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	2b82      	cmp	r3, #130	@ 0x82
 80051fe:	d111      	bne.n	8005224 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f001 fc47 	bl	8006a98 <SDMMC_CmdStopTransfer>
 800520a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	431a      	orrs	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff fdd4 	bl	8004dcc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0208 	bic.w	r2, r2, #8
 8005232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f240 523a 	movw	r2, #1338	@ 0x53a
 800523c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f002 f84b 	bl	80072e8 <HAL_SD_RxCpltCallback>
#endif
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd f9ca 	bl	8002604 <HAL_DMA_GetError>
 8005270:	4603      	mov	r3, r0
 8005272:	2b02      	cmp	r3, #2
 8005274:	d03e      	beq.n	80052f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005284:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d002      	beq.n	8005292 <SD_DMAError+0x36>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d12d      	bne.n	80052ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <SD_DMAError+0xa0>)
 8005298:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80052a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7ff ff62 	bl	8005180 <HAL_SD_GetCardState>
 80052bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	d002      	beq.n	80052ca <SD_DMAError+0x6e>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d10a      	bne.n	80052e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fbe2 	bl	8006a98 <SDMMC_CmdStopTransfer>
 80052d4:	4602      	mov	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052da:	431a      	orrs	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80052ee:	6978      	ldr	r0, [r7, #20]
 80052f0:	f7ff fd6c 	bl	8004dcc <HAL_SD_ErrorCallback>
#endif
  }
}
 80052f4:	bf00      	nop
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	004005ff 	.word	0x004005ff

08005300 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b094      	sub	sp, #80	@ 0x50
 8005304:	af04      	add	r7, sp, #16
 8005306:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005308:	2301      	movs	r3, #1
 800530a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f001 fa92 	bl	800683a <SDIO_GetPowerState>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800531c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005320:	e0b8      	b.n	8005494 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	2b03      	cmp	r3, #3
 8005328:	d02f      	beq.n	800538a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f001 fc79 	bl	8006c26 <SDMMC_CmdSendCID>
 8005334:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <SD_InitCard+0x40>
    {
      return errorstate;
 800533c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800533e:	e0a9      	b.n	8005494 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fabc 	bl	80068c4 <SDIO_GetResponse>
 800534c:	4602      	mov	r2, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2104      	movs	r1, #4
 8005358:	4618      	mov	r0, r3
 800535a:	f001 fab3 	bl	80068c4 <SDIO_GetResponse>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2108      	movs	r1, #8
 800536a:	4618      	mov	r0, r3
 800536c:	f001 faaa 	bl	80068c4 <SDIO_GetResponse>
 8005370:	4602      	mov	r2, r0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	210c      	movs	r1, #12
 800537c:	4618      	mov	r0, r3
 800537e:	f001 faa1 	bl	80068c4 <SDIO_GetResponse>
 8005382:	4602      	mov	r2, r0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	2b03      	cmp	r3, #3
 8005390:	d00d      	beq.n	80053ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f107 020e 	add.w	r2, r7, #14
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fc7f 	bl	8006ca0 <SDMMC_CmdSetRelAdd>
 80053a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <SD_InitCard+0xae>
    {
      return errorstate;
 80053aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ac:	e072      	b.n	8005494 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d036      	beq.n	8005424 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80053b6:	89fb      	ldrh	r3, [r7, #14]
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f001 fc49 	bl	8006c62 <SDMMC_CmdSendCSD>
 80053d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80053d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053da:	e05b      	b.n	8005494 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fa6e 	bl	80068c4 <SDIO_GetResponse>
 80053e8:	4602      	mov	r2, r0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2104      	movs	r1, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 fa65 	bl	80068c4 <SDIO_GetResponse>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2108      	movs	r1, #8
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fa5c 	bl	80068c4 <SDIO_GetResponse>
 800540c:	4602      	mov	r2, r0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	210c      	movs	r1, #12
 8005418:	4618      	mov	r0, r3
 800541a:	f001 fa53 	bl	80068c4 <SDIO_GetResponse>
 800541e:	4602      	mov	r2, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2104      	movs	r1, #4
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fa4a 	bl	80068c4 <SDIO_GetResponse>
 8005430:	4603      	mov	r3, r0
 8005432:	0d1a      	lsrs	r2, r3, #20
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fcce 	bl	8004de0 <HAL_SD_GetCardCSD>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800544a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800544e:	e021      	b.n	8005494 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	2200      	movs	r2, #0
 800545c:	461c      	mov	r4, r3
 800545e:	4615      	mov	r5, r2
 8005460:	4622      	mov	r2, r4
 8005462:	462b      	mov	r3, r5
 8005464:	4608      	mov	r0, r1
 8005466:	f001 fb39 	bl	8006adc <SDMMC_CmdSelDesel>
 800546a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <SD_InitCard+0x176>
  {
    return errorstate;
 8005472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005474:	e00e      	b.n	8005494 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681d      	ldr	r5, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	466c      	mov	r4, sp
 800547e:	f103 0210 	add.w	r2, r3, #16
 8005482:	ca07      	ldmia	r2, {r0, r1, r2}
 8005484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005488:	3304      	adds	r3, #4
 800548a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800548c:	4628      	mov	r0, r5
 800548e:	f001 f99b 	bl	80067c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3740      	adds	r7, #64	@ 0x40
 8005498:	46bd      	mov	sp, r7
 800549a:	bdb0      	pop	{r4, r5, r7, pc}

0800549c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 fb34 	bl	8006b22 <SDMMC_CmdGoIdleState>
 80054ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	e072      	b.n	80055ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 fb47 	bl	8006b5e <SDMMC_CmdOperCond>
 80054d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 fb1d 	bl	8006b22 <SDMMC_CmdGoIdleState>
 80054e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	e05b      	b.n	80055ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d137      	bne.n	8005572 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f001 fb47 	bl	8006b9c <SDMMC_CmdAppCommand>
 800550e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02d      	beq.n	8005572 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005516:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800551a:	e047      	b.n	80055ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fb3a 	bl	8006b9c <SDMMC_CmdAppCommand>
 8005528:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <SD_PowerON+0x98>
    {
      return errorstate;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	e03b      	b.n	80055ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	491e      	ldr	r1, [pc, #120]	@ (80055b4 <SD_PowerON+0x118>)
 800553a:	4618      	mov	r0, r3
 800553c:	f001 fb50 	bl	8006be0 <SDMMC_CmdAppOperCommand>
 8005540:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005548:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800554c:	e02e      	b.n	80055ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2100      	movs	r1, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f001 f9b5 	bl	80068c4 <SDIO_GetResponse>
 800555a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	0fdb      	lsrs	r3, r3, #31
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <SD_PowerON+0xcc>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <SD_PowerON+0xce>
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]

    count++;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	3301      	adds	r3, #1
 8005570:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005578:	4293      	cmp	r3, r2
 800557a:	d802      	bhi.n	8005582 <SD_PowerON+0xe6>
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0cc      	beq.n	800551c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005588:	4293      	cmp	r3, r2
 800558a:	d902      	bls.n	8005592 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800558c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005590:	e00c      	b.n	80055ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80055a2:	e002      	b.n	80055aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	c1100000 	.word	0xc1100000

080055b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80055c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055cc:	e018      	b.n	8005600 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f001 fb81 	bl	8006ce2 <SDMMC_CmdSendStatus>
 80055e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	e009      	b.n	8005600 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 f966 	bl	80068c4 <SDIO_GetResponse>
 80055f8:	4602      	mov	r2, r0
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e041      	b.n	800569e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc fc7e 	bl	8001f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f000 fa7e 	bl	8005b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e04e      	b.n	800575e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a23      	ldr	r2, [pc, #140]	@ (800576c <HAL_TIM_Base_Start_IT+0xc4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d022      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ea:	d01d      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005770 <HAL_TIM_Base_Start_IT+0xc8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d018      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005774 <HAL_TIM_Base_Start_IT+0xcc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <HAL_TIM_Base_Start_IT+0xd0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00e      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <HAL_TIM_Base_Start_IT+0xd4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d009      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a19      	ldr	r2, [pc, #100]	@ (8005780 <HAL_TIM_Base_Start_IT+0xd8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a18      	ldr	r2, [pc, #96]	@ (8005784 <HAL_TIM_Base_Start_IT+0xdc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d111      	bne.n	800574c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b06      	cmp	r3, #6
 8005738:	d010      	beq.n	800575c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	e007      	b.n	800575c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40010400 	.word	0x40010400
 8005780:	40014000 	.word	0x40014000
 8005784:	40001800 	.word	0x40001800

08005788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d020      	beq.n	80057ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01b      	beq.n	80057ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0202 	mvn.w	r2, #2
 80057bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f999 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f98b 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f99c 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d020      	beq.n	8005838 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01b      	beq.n	8005838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0204 	mvn.w	r2, #4
 8005808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f973 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f965 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f976 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d020      	beq.n	8005884 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01b      	beq.n	8005884 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0208 	mvn.w	r2, #8
 8005854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2204      	movs	r2, #4
 800585a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f94d 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 8005870:	e005      	b.n	800587e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f93f 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f950 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	d020      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01b      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0210 	mvn.w	r2, #16
 80058a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2208      	movs	r2, #8
 80058a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f927 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 80058bc:	e005      	b.n	80058ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f919 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f92a 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0201 	mvn.w	r2, #1
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fc f838 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fae4 	bl	8005ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00c      	beq.n	800593c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f8fb 	bl	8005b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00c      	beq.n	8005960 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0220 	mvn.w	r2, #32
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fab6 	bl	8005ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIM_ConfigClockSource+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e0b4      	b.n	8005aee <HAL_TIM_ConfigClockSource+0x186>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059bc:	d03e      	beq.n	8005a3c <HAL_TIM_ConfigClockSource+0xd4>
 80059be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c2:	f200 8087 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ca:	f000 8086 	beq.w	8005ada <HAL_TIM_ConfigClockSource+0x172>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d87f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b70      	cmp	r3, #112	@ 0x70
 80059d6:	d01a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0xa6>
 80059d8:	2b70      	cmp	r3, #112	@ 0x70
 80059da:	d87b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b60      	cmp	r3, #96	@ 0x60
 80059de:	d050      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x11a>
 80059e0:	2b60      	cmp	r3, #96	@ 0x60
 80059e2:	d877      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b50      	cmp	r3, #80	@ 0x50
 80059e6:	d03c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0xfa>
 80059e8:	2b50      	cmp	r3, #80	@ 0x50
 80059ea:	d873      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d058      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d86f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b30      	cmp	r3, #48	@ 0x30
 80059f6:	d064      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80059f8:	2b30      	cmp	r3, #48	@ 0x30
 80059fa:	d86b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d060      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d867      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d05c      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d05a      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a0c:	e062      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a1e:	f000 f9b9 	bl	8005d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
      break;
 8005a3a:	e04f      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a4c:	f000 f9a2 	bl	8005d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a5e:	609a      	str	r2, [r3, #8]
      break;
 8005a60:	e03c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 f916 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2150      	movs	r1, #80	@ 0x50
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f96f 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005a80:	e02c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f000 f935 	bl	8005cfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2160      	movs	r1, #96	@ 0x60
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f95f 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005aa0:	e01c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 f8f6 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f94f 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e00c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f000 f946 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005ad2:	e003      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	e000      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a46      	ldr	r2, [pc, #280]	@ (8005c74 <TIM_Base_SetConfig+0x12c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b66:	d00f      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a43      	ldr	r2, [pc, #268]	@ (8005c78 <TIM_Base_SetConfig+0x130>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a42      	ldr	r2, [pc, #264]	@ (8005c7c <TIM_Base_SetConfig+0x134>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a41      	ldr	r2, [pc, #260]	@ (8005c80 <TIM_Base_SetConfig+0x138>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a40      	ldr	r2, [pc, #256]	@ (8005c84 <TIM_Base_SetConfig+0x13c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d108      	bne.n	8005b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a35      	ldr	r2, [pc, #212]	@ (8005c74 <TIM_Base_SetConfig+0x12c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d02b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba8:	d027      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a32      	ldr	r2, [pc, #200]	@ (8005c78 <TIM_Base_SetConfig+0x130>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d023      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a31      	ldr	r2, [pc, #196]	@ (8005c7c <TIM_Base_SetConfig+0x134>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01f      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a30      	ldr	r2, [pc, #192]	@ (8005c80 <TIM_Base_SetConfig+0x138>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8005c84 <TIM_Base_SetConfig+0x13c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d017      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8005c88 <TIM_Base_SetConfig+0x140>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c8c <TIM_Base_SetConfig+0x144>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00f      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005c90 <TIM_Base_SetConfig+0x148>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c94 <TIM_Base_SetConfig+0x14c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2a      	ldr	r2, [pc, #168]	@ (8005c98 <TIM_Base_SetConfig+0x150>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a29      	ldr	r2, [pc, #164]	@ (8005c9c <TIM_Base_SetConfig+0x154>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d108      	bne.n	8005c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a10      	ldr	r2, [pc, #64]	@ (8005c74 <TIM_Base_SetConfig+0x12c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0xf8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a12      	ldr	r2, [pc, #72]	@ (8005c84 <TIM_Base_SetConfig+0x13c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d103      	bne.n	8005c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d105      	bne.n	8005c66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	611a      	str	r2, [r3, #16]
  }
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800
 8005c80:	40000c00 	.word	0x40000c00
 8005c84:	40010400 	.word	0x40010400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40014400 	.word	0x40014400
 8005c90:	40014800 	.word	0x40014800
 8005c94:	40001800 	.word	0x40001800
 8005c98:	40001c00 	.word	0x40001c00
 8005c9c:	40002000 	.word	0x40002000

08005ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0201 	bic.w	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f023 030a 	bic.w	r3, r3, #10
 8005cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b087      	sub	sp, #28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f023 0210 	bic.w	r2, r3, #16
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	031b      	lsls	r3, r3, #12
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b085      	sub	sp, #20
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f043 0307 	orr.w	r3, r3, #7
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e05a      	b.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a21      	ldr	r2, [pc, #132]	@ (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d022      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e38:	d01d      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d018      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1a      	ldr	r2, [pc, #104]	@ (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00e      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a18      	ldr	r2, [pc, #96]	@ (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d009      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a17      	ldr	r2, [pc, #92]	@ (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d004      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d10c      	bne.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00
 8005ec0:	40010400 	.word	0x40010400
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40001800 	.word	0x40001800

08005ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e042      	b.n	8005f8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fc f85a 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2224      	movs	r2, #36	@ 0x24
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f9d1 	bl	80062e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	@ 0x28
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d175      	bne.n	80060a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_UART_Transmit+0x2c>
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e06e      	b.n	80060a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2221      	movs	r2, #33	@ 0x21
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd2:	f7fc f9ad 	bl	8002330 <HAL_GetTick>
 8005fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	88fa      	ldrh	r2, [r7, #6]
 8005fe2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fec:	d108      	bne.n	8006000 <HAL_UART_Transmit+0x6c>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d104      	bne.n	8006000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e003      	b.n	8006008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006008:	e02e      	b.n	8006068 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2200      	movs	r2, #0
 8006012:	2180      	movs	r1, #128	@ 0x80
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f86d 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e03a      	b.n	80060a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006040:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	3302      	adds	r3, #2
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	e007      	b.n	800605a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	781a      	ldrb	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	3301      	adds	r3, #1
 8006058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1cb      	bne.n	800600a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2200      	movs	r2, #0
 800607a:	2140      	movs	r1, #64	@ 0x40
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f839 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e006      	b.n	80060a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	4613      	mov	r3, r2
 80060b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d112      	bne.n	80060ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Receive_IT+0x26>
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e00b      	b.n	80060ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	461a      	mov	r2, r3
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f860 	bl	80061a6 <UART_Start_Receive_IT>
 80060e6:	4603      	mov	r3, r0
 80060e8:	e000      	b.n	80060ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80060ea:	2302      	movs	r3, #2
  }
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006104:	e03b      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d037      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fc f90f 	bl	8002330 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <UART_WaitOnFlagUntilTimeout+0x30>
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e03a      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d023      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b80      	cmp	r3, #128	@ 0x80
 800613a:	d020      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0x8a>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b40      	cmp	r3, #64	@ 0x40
 8006140:	d01d      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b08      	cmp	r3, #8
 800614e:	d116      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f857 	bl	800621a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2208      	movs	r2, #8
 8006170:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e00f      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4013      	ands	r3, r2
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	bf0c      	ite	eq
 800618e:	2301      	moveq	r3, #1
 8006190:	2300      	movne	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	429a      	cmp	r2, r3
 800619a:	d0b4      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	4613      	mov	r3, r2
 80061b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	88fa      	ldrh	r2, [r7, #6]
 80061be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2222      	movs	r2, #34	@ 0x22
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695a      	ldr	r2, [r3, #20]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0220 	orr.w	r2, r2, #32
 800620a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800621a:	b480      	push	{r7}
 800621c:	b095      	sub	sp, #84	@ 0x54
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	330c      	adds	r3, #12
 8006240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006242:	643a      	str	r2, [r7, #64]	@ 0x40
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e5      	bne.n	8006222 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3314      	adds	r3, #20
 800625c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	61fb      	str	r3, [r7, #28]
   return(result);
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3314      	adds	r3, #20
 8006274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800627c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e5      	bne.n	8006256 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628e:	2b01      	cmp	r3, #1
 8006290:	d119      	bne.n	80062c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f023 0310 	bic.w	r3, r3, #16
 80062a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b2:	61ba      	str	r2, [r7, #24]
 80062b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6979      	ldr	r1, [r7, #20]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	613b      	str	r3, [r7, #16]
   return(result);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062d4:	bf00      	nop
 80062d6:	3754      	adds	r7, #84	@ 0x54
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e4:	b0c0      	sub	sp, #256	@ 0x100
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	ea40 0301 	orr.w	r3, r0, r1
 8006308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	431a      	orrs	r2, r3
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	431a      	orrs	r2, r3
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006338:	f021 010c 	bic.w	r1, r1, #12
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006346:	430b      	orrs	r3, r1
 8006348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800634a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635a:	6999      	ldr	r1, [r3, #24]
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	ea40 0301 	orr.w	r3, r0, r1
 8006366:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b8f      	ldr	r3, [pc, #572]	@ (80065ac <UART_SetConfig+0x2cc>)
 8006370:	429a      	cmp	r2, r3
 8006372:	d005      	beq.n	8006380 <UART_SetConfig+0xa0>
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b8d      	ldr	r3, [pc, #564]	@ (80065b0 <UART_SetConfig+0x2d0>)
 800637c:	429a      	cmp	r2, r3
 800637e:	d104      	bne.n	800638a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006380:	f7fe f9d2 	bl	8004728 <HAL_RCC_GetPCLK2Freq>
 8006384:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006388:	e003      	b.n	8006392 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800638a:	f7fe f9b9 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 800638e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800639c:	f040 810c 	bne.w	80065b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063b2:	4622      	mov	r2, r4
 80063b4:	462b      	mov	r3, r5
 80063b6:	1891      	adds	r1, r2, r2
 80063b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063ba:	415b      	adcs	r3, r3
 80063bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063c2:	4621      	mov	r1, r4
 80063c4:	eb12 0801 	adds.w	r8, r2, r1
 80063c8:	4629      	mov	r1, r5
 80063ca:	eb43 0901 	adc.w	r9, r3, r1
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063e2:	4690      	mov	r8, r2
 80063e4:	4699      	mov	r9, r3
 80063e6:	4623      	mov	r3, r4
 80063e8:	eb18 0303 	adds.w	r3, r8, r3
 80063ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063f0:	462b      	mov	r3, r5
 80063f2:	eb49 0303 	adc.w	r3, r9, r3
 80063f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006406:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800640a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800640e:	460b      	mov	r3, r1
 8006410:	18db      	adds	r3, r3, r3
 8006412:	653b      	str	r3, [r7, #80]	@ 0x50
 8006414:	4613      	mov	r3, r2
 8006416:	eb42 0303 	adc.w	r3, r2, r3
 800641a:	657b      	str	r3, [r7, #84]	@ 0x54
 800641c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006424:	f7fa fc30 	bl	8000c88 <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4b61      	ldr	r3, [pc, #388]	@ (80065b4 <UART_SetConfig+0x2d4>)
 800642e:	fba3 2302 	umull	r2, r3, r3, r2
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	011c      	lsls	r4, r3, #4
 8006436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006440:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006450:	415b      	adcs	r3, r3
 8006452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006458:	4641      	mov	r1, r8
 800645a:	eb12 0a01 	adds.w	sl, r2, r1
 800645e:	4649      	mov	r1, r9
 8006460:	eb43 0b01 	adc.w	fp, r3, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006478:	4692      	mov	sl, r2
 800647a:	469b      	mov	fp, r3
 800647c:	4643      	mov	r3, r8
 800647e:	eb1a 0303 	adds.w	r3, sl, r3
 8006482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006486:	464b      	mov	r3, r9
 8006488:	eb4b 0303 	adc.w	r3, fp, r3
 800648c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800649c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064a4:	460b      	mov	r3, r1
 80064a6:	18db      	adds	r3, r3, r3
 80064a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80064aa:	4613      	mov	r3, r2
 80064ac:	eb42 0303 	adc.w	r3, r2, r3
 80064b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064ba:	f7fa fbe5 	bl	8000c88 <__aeabi_uldivmod>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4611      	mov	r1, r2
 80064c4:	4b3b      	ldr	r3, [pc, #236]	@ (80065b4 <UART_SetConfig+0x2d4>)
 80064c6:	fba3 2301 	umull	r2, r3, r3, r1
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2264      	movs	r2, #100	@ 0x64
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	1acb      	subs	r3, r1, r3
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064da:	4b36      	ldr	r3, [pc, #216]	@ (80065b4 <UART_SetConfig+0x2d4>)
 80064dc:	fba3 2302 	umull	r2, r3, r3, r2
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064e8:	441c      	add	r4, r3
 80064ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	1891      	adds	r1, r2, r2
 8006502:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006504:	415b      	adcs	r3, r3
 8006506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800650c:	4641      	mov	r1, r8
 800650e:	1851      	adds	r1, r2, r1
 8006510:	6339      	str	r1, [r7, #48]	@ 0x30
 8006512:	4649      	mov	r1, r9
 8006514:	414b      	adcs	r3, r1
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006524:	4659      	mov	r1, fp
 8006526:	00cb      	lsls	r3, r1, #3
 8006528:	4651      	mov	r1, sl
 800652a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652e:	4651      	mov	r1, sl
 8006530:	00ca      	lsls	r2, r1, #3
 8006532:	4610      	mov	r0, r2
 8006534:	4619      	mov	r1, r3
 8006536:	4603      	mov	r3, r0
 8006538:	4642      	mov	r2, r8
 800653a:	189b      	adds	r3, r3, r2
 800653c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006540:	464b      	mov	r3, r9
 8006542:	460a      	mov	r2, r1
 8006544:	eb42 0303 	adc.w	r3, r2, r3
 8006548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006558:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800655c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006560:	460b      	mov	r3, r1
 8006562:	18db      	adds	r3, r3, r3
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006566:	4613      	mov	r3, r2
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006576:	f7fa fb87 	bl	8000c88 <__aeabi_uldivmod>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <UART_SetConfig+0x2d4>)
 8006580:	fba3 1302 	umull	r1, r3, r3, r2
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	2164      	movs	r1, #100	@ 0x64
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	3332      	adds	r3, #50	@ 0x32
 8006592:	4a08      	ldr	r2, [pc, #32]	@ (80065b4 <UART_SetConfig+0x2d4>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f003 0207 	and.w	r2, r3, #7
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4422      	add	r2, r4
 80065a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a8:	e106      	b.n	80067b8 <UART_SetConfig+0x4d8>
 80065aa:	bf00      	nop
 80065ac:	40011000 	.word	0x40011000
 80065b0:	40011400 	.word	0x40011400
 80065b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065ca:	4642      	mov	r2, r8
 80065cc:	464b      	mov	r3, r9
 80065ce:	1891      	adds	r1, r2, r2
 80065d0:	6239      	str	r1, [r7, #32]
 80065d2:	415b      	adcs	r3, r3
 80065d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065da:	4641      	mov	r1, r8
 80065dc:	1854      	adds	r4, r2, r1
 80065de:	4649      	mov	r1, r9
 80065e0:	eb43 0501 	adc.w	r5, r3, r1
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	00eb      	lsls	r3, r5, #3
 80065ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065f2:	00e2      	lsls	r2, r4, #3
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	4643      	mov	r3, r8
 80065fa:	18e3      	adds	r3, r4, r3
 80065fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006600:	464b      	mov	r3, r9
 8006602:	eb45 0303 	adc.w	r3, r5, r3
 8006606:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006616:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006626:	4629      	mov	r1, r5
 8006628:	008b      	lsls	r3, r1, #2
 800662a:	4621      	mov	r1, r4
 800662c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006630:	4621      	mov	r1, r4
 8006632:	008a      	lsls	r2, r1, #2
 8006634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006638:	f7fa fb26 	bl	8000c88 <__aeabi_uldivmod>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4b60      	ldr	r3, [pc, #384]	@ (80067c4 <UART_SetConfig+0x4e4>)
 8006642:	fba3 2302 	umull	r2, r3, r3, r2
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	011c      	lsls	r4, r3, #4
 800664a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006654:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	61b9      	str	r1, [r7, #24]
 8006664:	415b      	adcs	r3, r3
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6139      	str	r1, [r7, #16]
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066a0:	464b      	mov	r3, r9
 80066a2:	460a      	mov	r2, r1
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066c4:	4649      	mov	r1, r9
 80066c6:	008b      	lsls	r3, r1, #2
 80066c8:	4641      	mov	r1, r8
 80066ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ce:	4641      	mov	r1, r8
 80066d0:	008a      	lsls	r2, r1, #2
 80066d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066d6:	f7fa fad7 	bl	8000c88 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	4b38      	ldr	r3, [pc, #224]	@ (80067c4 <UART_SetConfig+0x4e4>)
 80066e2:	fba3 2301 	umull	r2, r3, r3, r1
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	2264      	movs	r2, #100	@ 0x64
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	1acb      	subs	r3, r1, r3
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	3332      	adds	r3, #50	@ 0x32
 80066f4:	4a33      	ldr	r2, [pc, #204]	@ (80067c4 <UART_SetConfig+0x4e4>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006700:	441c      	add	r4, r3
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	673b      	str	r3, [r7, #112]	@ 0x70
 800670a:	677a      	str	r2, [r7, #116]	@ 0x74
 800670c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	1891      	adds	r1, r2, r2
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	415b      	adcs	r3, r3
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006720:	4641      	mov	r1, r8
 8006722:	1851      	adds	r1, r2, r1
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	4649      	mov	r1, r9
 8006728:	414b      	adcs	r3, r1
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006738:	4659      	mov	r1, fp
 800673a:	00cb      	lsls	r3, r1, #3
 800673c:	4651      	mov	r1, sl
 800673e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006742:	4651      	mov	r1, sl
 8006744:	00ca      	lsls	r2, r1, #3
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	4603      	mov	r3, r0
 800674c:	4642      	mov	r2, r8
 800674e:	189b      	adds	r3, r3, r2
 8006750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006752:	464b      	mov	r3, r9
 8006754:	460a      	mov	r2, r1
 8006756:	eb42 0303 	adc.w	r3, r2, r3
 800675a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	663b      	str	r3, [r7, #96]	@ 0x60
 8006766:	667a      	str	r2, [r7, #100]	@ 0x64
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006774:	4649      	mov	r1, r9
 8006776:	008b      	lsls	r3, r1, #2
 8006778:	4641      	mov	r1, r8
 800677a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800677e:	4641      	mov	r1, r8
 8006780:	008a      	lsls	r2, r1, #2
 8006782:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006786:	f7fa fa7f 	bl	8000c88 <__aeabi_uldivmod>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <UART_SetConfig+0x4e4>)
 8006790:	fba3 1302 	umull	r1, r3, r3, r2
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	2164      	movs	r1, #100	@ 0x64
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	3332      	adds	r3, #50	@ 0x32
 80067a2:	4a08      	ldr	r2, [pc, #32]	@ (80067c4 <UART_SetConfig+0x4e4>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	f003 020f 	and.w	r2, r3, #15
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4422      	add	r2, r4
 80067b6:	609a      	str	r2, [r3, #8]
}
 80067b8:	bf00      	nop
 80067ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067be:	46bd      	mov	sp, r7
 80067c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c4:	51eb851f 	.word	0x51eb851f

080067c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80067c8:	b084      	sub	sp, #16
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	f107 001c 	add.w	r0, r7, #28
 80067d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80067de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80067e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80067e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80067e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80067ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80067ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80067f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8006802:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	b004      	add	sp, #16
 800681c:	4770      	bx	lr

0800681e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2203      	movs	r2, #3
 800682a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0303 	and.w	r3, r3, #3
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006874:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800687a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006880:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006890:	f023 030f 	bic.w	r3, r3, #15
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	b2db      	uxtb	r3, r3
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3314      	adds	r3, #20
 80068d2:	461a      	mov	r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
}  
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006910:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006916:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800691c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006928:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006934:	2300      	movs	r3, #0

}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b088      	sub	sp, #32
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006950:	2310      	movs	r3, #16
 8006952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006954:	2340      	movs	r3, #64	@ 0x40
 8006956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800695c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006960:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff ff74 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800696e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006972:	2110      	movs	r1, #16
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f9d7 	bl	8006d28 <SDMMC_GetCmdResp1>
 800697a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800697c:	69fb      	ldr	r3, [r7, #28]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b088      	sub	sp, #32
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006994:	2311      	movs	r3, #17
 8006996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006998:	2340      	movs	r3, #64	@ 0x40
 800699a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a6:	f107 0308 	add.w	r3, r7, #8
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff52 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80069b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b6:	2111      	movs	r1, #17
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f9b5 	bl	8006d28 <SDMMC_GetCmdResp1>
 80069be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069c0:	69fb      	ldr	r3, [r7, #28]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b088      	sub	sp, #32
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80069d8:	2312      	movs	r3, #18
 80069da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069dc:	2340      	movs	r3, #64	@ 0x40
 80069de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069ea:	f107 0308 	add.w	r3, r7, #8
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ff30 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80069f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069fa:	2112      	movs	r1, #18
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f993 	bl	8006d28 <SDMMC_GetCmdResp1>
 8006a02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a04:	69fb      	ldr	r3, [r7, #28]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b088      	sub	sp, #32
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006a1c:	2318      	movs	r3, #24
 8006a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a20:	2340      	movs	r3, #64	@ 0x40
 8006a22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff0e 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a3e:	2118      	movs	r1, #24
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f971 	bl	8006d28 <SDMMC_GetCmdResp1>
 8006a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a48:	69fb      	ldr	r3, [r7, #28]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b088      	sub	sp, #32
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006a60:	2319      	movs	r3, #25
 8006a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a64:	2340      	movs	r3, #64	@ 0x40
 8006a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a72:	f107 0308 	add.w	r3, r7, #8
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff feec 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a82:	2119      	movs	r1, #25
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f94f 	bl	8006d28 <SDMMC_GetCmdResp1>
 8006a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006aa8:	2340      	movs	r3, #64	@ 0x40
 8006aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ab0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ab6:	f107 0308 	add.w	r3, r7, #8
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff feca 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006ac2:	4a05      	ldr	r2, [pc, #20]	@ (8006ad8 <SDMMC_CmdStopTransfer+0x40>)
 8006ac4:	210c      	movs	r1, #12
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f92e 	bl	8006d28 <SDMMC_GetCmdResp1>
 8006acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ace:	69fb      	ldr	r3, [r7, #28]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	05f5e100 	.word	0x05f5e100

08006adc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	@ 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006aec:	2307      	movs	r3, #7
 8006aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006af0:	2340      	movs	r3, #64	@ 0x40
 8006af2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006af8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006afc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006afe:	f107 0310 	add.w	r3, r7, #16
 8006b02:	4619      	mov	r1, r3
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff fea6 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b0e:	2107      	movs	r1, #7
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f909 	bl	8006d28 <SDMMC_GetCmdResp1>
 8006b16:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3728      	adds	r7, #40	@ 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b088      	sub	sp, #32
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006b32:	2300      	movs	r3, #0
 8006b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fe85 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fb23 	bl	8007198 <SDMMC_GetCmdError>
 8006b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b54:	69fb      	ldr	r3, [r7, #28]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b088      	sub	sp, #32
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006b66:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b70:	2340      	movs	r3, #64	@ 0x40
 8006b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b7e:	f107 0308 	add.w	r3, r7, #8
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fe66 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fab6 	bl	80070fc <SDMMC_GetCmdResp7>
 8006b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b92:	69fb      	ldr	r3, [r7, #28]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3720      	adds	r7, #32
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006baa:	2337      	movs	r3, #55	@ 0x37
 8006bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bae:	2340      	movs	r3, #64	@ 0x40
 8006bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bbc:	f107 0308 	add.w	r3, r7, #8
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fe47 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bcc:	2137      	movs	r1, #55	@ 0x37
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8aa 	bl	8006d28 <SDMMC_GetCmdResp1>
 8006bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006bf6:	2329      	movs	r3, #41	@ 0x29
 8006bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bfa:	2340      	movs	r3, #64	@ 0x40
 8006bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c08:	f107 0308 	add.w	r3, r7, #8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fe21 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f9bd 	bl	8006f94 <SDMMC_GetCmdResp3>
 8006c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b088      	sub	sp, #32
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006c32:	2302      	movs	r3, #2
 8006c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c36:	23c0      	movs	r3, #192	@ 0xc0
 8006c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c44:	f107 0308 	add.w	r3, r7, #8
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fe03 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f957 	bl	8006f04 <SDMMC_GetCmdResp2>
 8006c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c58:	69fb      	ldr	r3, [r7, #28]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b088      	sub	sp, #32
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006c70:	2309      	movs	r3, #9
 8006c72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c74:	23c0      	movs	r3, #192	@ 0xc0
 8006c76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c82:	f107 0308 	add.w	r3, r7, #8
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff fde4 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f938 	bl	8006f04 <SDMMC_GetCmdResp2>
 8006c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c96:	69fb      	ldr	r3, [r7, #28]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cb2:	2340      	movs	r3, #64	@ 0x40
 8006cb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cc0:	f107 0308 	add.w	r3, r7, #8
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fdc5 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	2103      	movs	r1, #3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f99d 	bl	8007010 <SDMMC_GetCmdResp6>
 8006cd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3720      	adds	r7, #32
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b088      	sub	sp, #32
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006cf0:	230d      	movs	r3, #13
 8006cf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cf4:	2340      	movs	r3, #64	@ 0x40
 8006cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d02:	f107 0308 	add.w	r3, r7, #8
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fda4 	bl	8006856 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d12:	210d      	movs	r1, #13
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f807 	bl	8006d28 <SDMMC_GetCmdResp1>
 8006d1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	460b      	mov	r3, r1
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d36:	4b70      	ldr	r3, [pc, #448]	@ (8006ef8 <SDMMC_GetCmdResp1+0x1d0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a70      	ldr	r2, [pc, #448]	@ (8006efc <SDMMC_GetCmdResp1+0x1d4>)
 8006d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d40:	0a5a      	lsrs	r2, r3, #9
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	fb02 f303 	mul.w	r3, r2, r3
 8006d48:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	1e5a      	subs	r2, r3, #1
 8006d4e:	61fa      	str	r2, [r7, #28]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d58:	e0c9      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d5e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0ef      	beq.n	8006d4a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ea      	bne.n	8006d4a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2204      	movs	r2, #4
 8006d84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d86:	2304      	movs	r3, #4
 8006d88:	e0b1      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0a6      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	22c5      	movs	r2, #197	@ 0xc5
 8006da4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff fd7f 	bl	80068aa <SDIO_GetCommandResponse>
 8006dac:	4603      	mov	r3, r0
 8006dae:	461a      	mov	r2, r3
 8006db0:	7afb      	ldrb	r3, [r7, #11]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d001      	beq.n	8006dba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e099      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006dba:	2100      	movs	r1, #0
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fd81 	bl	80068c4 <SDIO_GetResponse>
 8006dc2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8006f00 <SDMMC_GetCmdResp1+0x1d8>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e08d      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	da02      	bge.n	8006dde <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006dd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ddc:	e087      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006de8:	2340      	movs	r3, #64	@ 0x40
 8006dea:	e080      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006df6:	2380      	movs	r3, #128	@ 0x80
 8006df8:	e079      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e08:	e071      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e18:	e069      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006e24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e28:	e061      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006e38:	e059      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e48:	e051      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e58:	e049      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006e64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006e68:	e041      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006e74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e78:	e039      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006e84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e88:	e031      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006e98:	e029      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006ea4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006ea8:	e021      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006eb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006eb8:	e019      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ec4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006ec8:	e011      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ed4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006ed8:	e009      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006ee4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006ee8:	e001      	b.n	8006eee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006eea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000014 	.word	0x20000014
 8006efc:	10624dd3 	.word	0x10624dd3
 8006f00:	fdffe008 	.word	0xfdffe008

08006f04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006f8c <SDMMC_GetCmdResp2+0x88>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1f      	ldr	r2, [pc, #124]	@ (8006f90 <SDMMC_GetCmdResp2+0x8c>)
 8006f12:	fba2 2303 	umull	r2, r3, r2, r3
 8006f16:	0a5b      	lsrs	r3, r3, #9
 8006f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f1c:	fb02 f303 	mul.w	r3, r2, r3
 8006f20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1e5a      	subs	r2, r3, #1
 8006f26:	60fa      	str	r2, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006f30:	e026      	b.n	8006f80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0ef      	beq.n	8006f22 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ea      	bne.n	8006f22 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2204      	movs	r2, #4
 8006f5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f5e:	2304      	movs	r3, #4
 8006f60:	e00e      	b.n	8006f80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e003      	b.n	8006f80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	22c5      	movs	r2, #197	@ 0xc5
 8006f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	20000014 	.word	0x20000014
 8006f90:	10624dd3 	.word	0x10624dd3

08006f94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007008 <SDMMC_GetCmdResp3+0x74>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800700c <SDMMC_GetCmdResp3+0x78>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	0a5b      	lsrs	r3, r3, #9
 8006fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1e5a      	subs	r2, r3, #1
 8006fb6:	60fa      	str	r2, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006fc0:	e01b      	b.n	8006ffa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0ef      	beq.n	8006fb2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ea      	bne.n	8006fb2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2204      	movs	r2, #4
 8006fec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fee:	2304      	movs	r3, #4
 8006ff0:	e003      	b.n	8006ffa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	22c5      	movs	r2, #197	@ 0xc5
 8006ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000014 	.word	0x20000014
 800700c:	10624dd3 	.word	0x10624dd3

08007010 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	460b      	mov	r3, r1
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800701e:	4b35      	ldr	r3, [pc, #212]	@ (80070f4 <SDMMC_GetCmdResp6+0xe4>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a35      	ldr	r2, [pc, #212]	@ (80070f8 <SDMMC_GetCmdResp6+0xe8>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	0a5b      	lsrs	r3, r3, #9
 800702a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	1e5a      	subs	r2, r3, #1
 8007038:	61fa      	str	r2, [r7, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800703e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007042:	e052      	b.n	80070ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007048:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0ef      	beq.n	8007034 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1ea      	bne.n	8007034 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2204      	movs	r2, #4
 800706e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007070:	2304      	movs	r3, #4
 8007072:	e03a      	b.n	80070ea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007086:	2301      	movs	r3, #1
 8007088:	e02f      	b.n	80070ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fc0d 	bl	80068aa <SDIO_GetCommandResponse>
 8007090:	4603      	mov	r3, r0
 8007092:	461a      	mov	r2, r3
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	4293      	cmp	r3, r2
 8007098:	d001      	beq.n	800709e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800709a:	2301      	movs	r3, #1
 800709c:	e025      	b.n	80070ea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	22c5      	movs	r2, #197	@ 0xc5
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80070a4:	2100      	movs	r1, #0
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff fc0c 	bl	80068c4 <SDIO_GetResponse>
 80070ac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	0c1b      	lsrs	r3, r3, #16
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e011      	b.n	80070ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070d4:	e009      	b.n	80070ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80070e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80070e4:	e001      	b.n	80070ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3720      	adds	r7, #32
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000014 	.word	0x20000014
 80070f8:	10624dd3 	.word	0x10624dd3

080070fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007104:	4b22      	ldr	r3, [pc, #136]	@ (8007190 <SDMMC_GetCmdResp7+0x94>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a22      	ldr	r2, [pc, #136]	@ (8007194 <SDMMC_GetCmdResp7+0x98>)
 800710a:	fba2 2303 	umull	r2, r3, r2, r3
 800710e:	0a5b      	lsrs	r3, r3, #9
 8007110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007114:	fb02 f303 	mul.w	r3, r2, r3
 8007118:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1e5a      	subs	r2, r3, #1
 800711e:	60fa      	str	r2, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d102      	bne.n	800712a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007124:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007128:	e02c      	b.n	8007184 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800712e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0ef      	beq.n	800711a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1ea      	bne.n	800711a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2204      	movs	r2, #4
 8007154:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007156:	2304      	movs	r3, #4
 8007158:	e014      	b.n	8007184 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800716c:	2301      	movs	r3, #1
 800716e:	e009      	b.n	8007184 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2240      	movs	r2, #64	@ 0x40
 8007180:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007182:	2300      	movs	r3, #0
  
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	20000014 	.word	0x20000014
 8007194:	10624dd3 	.word	0x10624dd3

08007198 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071a0:	4b11      	ldr	r3, [pc, #68]	@ (80071e8 <SDMMC_GetCmdError+0x50>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a11      	ldr	r2, [pc, #68]	@ (80071ec <SDMMC_GetCmdError+0x54>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	0a5b      	lsrs	r3, r3, #9
 80071ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b0:	fb02 f303 	mul.w	r3, r2, r3
 80071b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1e5a      	subs	r2, r3, #1
 80071ba:	60fa      	str	r2, [r7, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80071c4:	e009      	b.n	80071da <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f1      	beq.n	80071b6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	22c5      	movs	r2, #197	@ 0xc5
 80071d6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000014 	.word	0x20000014
 80071ec:	10624dd3 	.word	0x10624dd3

080071f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80071f4:	4904      	ldr	r1, [pc, #16]	@ (8007208 <MX_FATFS_Init+0x18>)
 80071f6:	4805      	ldr	r0, [pc, #20]	@ (800720c <MX_FATFS_Init+0x1c>)
 80071f8:	f000 ff8c 	bl	8008114 <FATFS_LinkDriver>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
 8007200:	4b03      	ldr	r3, [pc, #12]	@ (8007210 <MX_FATFS_Init+0x20>)
 8007202:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007204:	bf00      	nop
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000c18 	.word	0x20000c18
 800720c:	080260d0 	.word	0x080260d0
 8007210:	20000c14 	.word	0x20000c14

08007214 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800721e:	f000 f86d 	bl	80072fc <BSP_SD_IsDetected>
 8007222:	4603      	mov	r3, r0
 8007224:	2b01      	cmp	r3, #1
 8007226:	d001      	beq.n	800722c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e005      	b.n	8007238 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800722c:	4804      	ldr	r0, [pc, #16]	@ (8007240 <BSP_SD_Init+0x2c>)
 800722e:	f7fd fb54 	bl	80048da <HAL_SD_Init>
 8007232:	4603      	mov	r3, r0
 8007234:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007236:	79fb      	ldrb	r3, [r7, #7]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000aac 	.word	0x20000aac

08007244 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	4806      	ldr	r0, [pc, #24]	@ (8007274 <BSP_SD_ReadBlocks_DMA+0x30>)
 800725c:	f7fd fbee 	bl	8004a3c <HAL_SD_ReadBlocks_DMA>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000aac 	.word	0x20000aac

08007278 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	68f9      	ldr	r1, [r7, #12]
 800728e:	4806      	ldr	r0, [pc, #24]	@ (80072a8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007290:	f7fd fcb6 	bl	8004c00 <HAL_SD_WriteBlocks_DMA>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000aac 	.word	0x20000aac

080072ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80072b0:	4805      	ldr	r0, [pc, #20]	@ (80072c8 <BSP_SD_GetCardState+0x1c>)
 80072b2:	f7fd ff65 	bl	8005180 <HAL_SD_GetCardState>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	bf14      	ite	ne
 80072bc:	2301      	movne	r3, #1
 80072be:	2300      	moveq	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000aac 	.word	0x20000aac

080072cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4803      	ldr	r0, [pc, #12]	@ (80072e4 <BSP_SD_GetCardInfo+0x18>)
 80072d8:	f7fd ff26 	bl	8005128 <HAL_SD_GetCardInfo>
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000aac 	.word	0x20000aac

080072e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80072f0:	f000 f986 	bl	8007600 <BSP_SD_ReadCpltCallback>
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007302:	2301      	movs	r3, #1
 8007304:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007306:	79fb      	ldrb	r3, [r7, #7]
 8007308:	b2db      	uxtb	r3, r3
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800731e:	f000 ffb9 	bl	8008294 <osKernelGetTickCount>
 8007322:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8007324:	e006      	b.n	8007334 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007326:	f7ff ffc1 	bl	80072ac <BSP_SD_GetCardState>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007330:	2300      	movs	r3, #0
 8007332:	e009      	b.n	8007348 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8007334:	f000 ffae 	bl	8008294 <osKernelGetTickCount>
 8007338:	4602      	mov	r2, r0
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d8f0      	bhi.n	8007326 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800735a:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <SD_CheckStatus+0x38>)
 800735c:	2201      	movs	r2, #1
 800735e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007360:	f7ff ffa4 	bl	80072ac <BSP_SD_GetCardState>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d107      	bne.n	800737a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800736a:	4b07      	ldr	r3, [pc, #28]	@ (8007388 <SD_CheckStatus+0x38>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	b2da      	uxtb	r2, r3
 8007376:	4b04      	ldr	r3, [pc, #16]	@ (8007388 <SD_CheckStatus+0x38>)
 8007378:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800737a:	4b03      	ldr	r3, [pc, #12]	@ (8007388 <SD_CheckStatus+0x38>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	b2db      	uxtb	r3, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	2000001d 	.word	0x2000001d

0800738c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007396:	4b1c      	ldr	r3, [pc, #112]	@ (8007408 <SD_initialize+0x7c>)
 8007398:	2201      	movs	r2, #1
 800739a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800739c:	f000 ff32 	bl	8008204 <osKernelGetState>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d129      	bne.n	80073fa <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80073a6:	f7ff ff35 	bl	8007214 <BSP_SD_Init>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d107      	bne.n	80073c0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff ffcc 	bl	8007350 <SD_CheckStatus>
 80073b8:	4603      	mov	r3, r0
 80073ba:	461a      	mov	r2, r3
 80073bc:	4b12      	ldr	r3, [pc, #72]	@ (8007408 <SD_initialize+0x7c>)
 80073be:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80073c0:	4b11      	ldr	r3, [pc, #68]	@ (8007408 <SD_initialize+0x7c>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d017      	beq.n	80073fa <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80073ca:	4b10      	ldr	r3, [pc, #64]	@ (800740c <SD_initialize+0x80>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d107      	bne.n	80073e2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80073d2:	2200      	movs	r2, #0
 80073d4:	2102      	movs	r1, #2
 80073d6:	200a      	movs	r0, #10
 80073d8:	f001 fa70 	bl	80088bc <osMessageQueueNew>
 80073dc:	4603      	mov	r3, r0
 80073de:	4a0b      	ldr	r2, [pc, #44]	@ (800740c <SD_initialize+0x80>)
 80073e0:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80073e2:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <SD_initialize+0x80>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d107      	bne.n	80073fa <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80073ea:	4b07      	ldr	r3, [pc, #28]	@ (8007408 <SD_initialize+0x7c>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f043 0301 	orr.w	r3, r3, #1
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	4b04      	ldr	r3, [pc, #16]	@ (8007408 <SD_initialize+0x7c>)
 80073f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80073fa:	4b03      	ldr	r3, [pc, #12]	@ (8007408 <SD_initialize+0x7c>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2db      	uxtb	r3, r3
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	2000001d 	.word	0x2000001d
 800740c:	20000c1c 	.word	0x20000c1c

08007410 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff ff97 	bl	8007350 <SD_CheckStatus>
 8007422:	4603      	mov	r3, r0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007440:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007444:	f7ff ff67 	bl	8007316 <SD_CheckStatusWithTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	da01      	bge.n	8007452 <SD_read+0x26>
  {
    return res;
 800744e:	7ffb      	ldrb	r3, [r7, #31]
 8007450:	e02f      	b.n	80074b2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	68b8      	ldr	r0, [r7, #8]
 8007458:	f7ff fef4 	bl	8007244 <BSP_SD_ReadBlocks_DMA>
 800745c:	4603      	mov	r3, r0
 800745e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8007460:	7fbb      	ldrb	r3, [r7, #30]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d124      	bne.n	80074b0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007466:	4b15      	ldr	r3, [pc, #84]	@ (80074bc <SD_read+0x90>)
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	f107 0112 	add.w	r1, r7, #18
 800746e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8007472:	2200      	movs	r2, #0
 8007474:	f001 faf6 	bl	8008a64 <osMessageQueueGet>
 8007478:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d117      	bne.n	80074b0 <SD_read+0x84>
 8007480:	8a7b      	ldrh	r3, [r7, #18]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d114      	bne.n	80074b0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8007486:	f000 ff05 	bl	8008294 <osKernelGetTickCount>
 800748a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800748c:	e007      	b.n	800749e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800748e:	f7ff ff0d 	bl	80072ac <BSP_SD_GetCardState>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <SD_read+0x72>
              {
                res = RES_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800749c:	e008      	b.n	80074b0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800749e:	f000 fef9 	bl	8008294 <osKernelGetTickCount>
 80074a2:	4602      	mov	r2, r0
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d9ee      	bls.n	800748e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80074b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3720      	adds	r7, #32
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000c1c 	.word	0x20000c1c

080074c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80074d4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80074d8:	f7ff ff1d 	bl	8007316 <SD_CheckStatusWithTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da01      	bge.n	80074e6 <SD_write+0x26>
  {
    return res;
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
 80074e4:	e02d      	b.n	8007542 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	68b8      	ldr	r0, [r7, #8]
 80074ec:	f7ff fec4 	bl	8007278 <BSP_SD_WriteBlocks_DMA>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d124      	bne.n	8007540 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80074f6:	4b15      	ldr	r3, [pc, #84]	@ (800754c <SD_write+0x8c>)
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	f107 0112 	add.w	r1, r7, #18
 80074fe:	f247 5330 	movw	r3, #30000	@ 0x7530
 8007502:	2200      	movs	r2, #0
 8007504:	f001 faae 	bl	8008a64 <osMessageQueueGet>
 8007508:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d117      	bne.n	8007540 <SD_write+0x80>
 8007510:	8a7b      	ldrh	r3, [r7, #18]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d114      	bne.n	8007540 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8007516:	f000 febd 	bl	8008294 <osKernelGetTickCount>
 800751a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800751c:	e007      	b.n	800752e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800751e:	f7ff fec5 	bl	80072ac <BSP_SD_GetCardState>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <SD_write+0x6e>
          {
            res = RES_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	77fb      	strb	r3, [r7, #31]
            break;
 800752c:	e008      	b.n	8007540 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800752e:	f000 feb1 	bl	8008294 <osKernelGetTickCount>
 8007532:	4602      	mov	r2, r0
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	f247 522f 	movw	r2, #29999	@ 0x752f
 800753c:	4293      	cmp	r3, r2
 800753e:	d9ee      	bls.n	800751e <SD_write+0x5e>
    }

  }
#endif

  return res;
 8007540:	7ffb      	ldrb	r3, [r7, #31]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000c1c 	.word	0x20000c1c

08007550 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08c      	sub	sp, #48	@ 0x30
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	603a      	str	r2, [r7, #0]
 800755a:	71fb      	strb	r3, [r7, #7]
 800755c:	460b      	mov	r3, r1
 800755e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007566:	4b25      	ldr	r3, [pc, #148]	@ (80075fc <SD_ioctl+0xac>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <SD_ioctl+0x28>
 8007574:	2303      	movs	r3, #3
 8007576:	e03c      	b.n	80075f2 <SD_ioctl+0xa2>

  switch (cmd)
 8007578:	79bb      	ldrb	r3, [r7, #6]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d834      	bhi.n	80075e8 <SD_ioctl+0x98>
 800757e:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <SD_ioctl+0x34>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	08007595 	.word	0x08007595
 8007588:	0800759d 	.word	0x0800759d
 800758c:	080075b5 	.word	0x080075b5
 8007590:	080075cf 	.word	0x080075cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800759a:	e028      	b.n	80075ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800759c:	f107 030c 	add.w	r3, r7, #12
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fe93 	bl	80072cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80075a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80075b2:	e01c      	b.n	80075ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80075b4:	f107 030c 	add.w	r3, r7, #12
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fe87 	bl	80072cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80075cc:	e00f      	b.n	80075ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80075ce:	f107 030c 	add.w	r3, r7, #12
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff fe7a 	bl	80072cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	0a5a      	lsrs	r2, r3, #9
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80075e6:	e002      	b.n	80075ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80075ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3730      	adds	r7, #48	@ 0x30
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	2000001d 	.word	0x2000001d

08007600 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8007606:	2301      	movs	r3, #1
 8007608:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800760a:	4b05      	ldr	r3, [pc, #20]	@ (8007620 <BSP_SD_ReadCpltCallback+0x20>)
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	1db9      	adds	r1, r7, #6
 8007610:	2300      	movs	r3, #0
 8007612:	2200      	movs	r2, #0
 8007614:	f001 f9c6 	bl	80089a4 <osMessageQueuePut>
#endif
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000c1c 	.word	0x20000c1c

08007624 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800762a:	2100      	movs	r1, #0
 800762c:	2000      	movs	r0, #0
 800762e:	f008 f8a3 	bl	800f778 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007632:	4b1c      	ldr	r3, [pc, #112]	@ (80076a4 <MX_LWIP_Init+0x80>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007638:	4b1b      	ldr	r3, [pc, #108]	@ (80076a8 <MX_LWIP_Init+0x84>)
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <MX_LWIP_Init+0x88>)
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007644:	4b1a      	ldr	r3, [pc, #104]	@ (80076b0 <MX_LWIP_Init+0x8c>)
 8007646:	9302      	str	r3, [sp, #8]
 8007648:	4b1a      	ldr	r3, [pc, #104]	@ (80076b4 <MX_LWIP_Init+0x90>)
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	2300      	movs	r3, #0
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <MX_LWIP_Init+0x88>)
 8007652:	4a15      	ldr	r2, [pc, #84]	@ (80076a8 <MX_LWIP_Init+0x84>)
 8007654:	4913      	ldr	r1, [pc, #76]	@ (80076a4 <MX_LWIP_Init+0x80>)
 8007656:	4818      	ldr	r0, [pc, #96]	@ (80076b8 <MX_LWIP_Init+0x94>)
 8007658:	f009 f946 	bl	80108e8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800765c:	4816      	ldr	r0, [pc, #88]	@ (80076b8 <MX_LWIP_Init+0x94>)
 800765e:	f009 fafd 	bl	8010c5c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007662:	4815      	ldr	r0, [pc, #84]	@ (80076b8 <MX_LWIP_Init+0x94>)
 8007664:	f009 fb0a 	bl	8010c7c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007668:	4914      	ldr	r1, [pc, #80]	@ (80076bc <MX_LWIP_Init+0x98>)
 800766a:	4813      	ldr	r0, [pc, #76]	@ (80076b8 <MX_LWIP_Init+0x94>)
 800766c:	f009 fc0c 	bl	8010e88 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007670:	2224      	movs	r2, #36	@ 0x24
 8007672:	2100      	movs	r1, #0
 8007674:	4812      	ldr	r0, [pc, #72]	@ (80076c0 <MX_LWIP_Init+0x9c>)
 8007676:	f017 f96e 	bl	801e956 <memset>
  attributes.name = "EthLink";
 800767a:	4b11      	ldr	r3, [pc, #68]	@ (80076c0 <MX_LWIP_Init+0x9c>)
 800767c:	4a11      	ldr	r2, [pc, #68]	@ (80076c4 <MX_LWIP_Init+0xa0>)
 800767e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007680:	4b0f      	ldr	r3, [pc, #60]	@ (80076c0 <MX_LWIP_Init+0x9c>)
 8007682:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007686:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007688:	4b0d      	ldr	r3, [pc, #52]	@ (80076c0 <MX_LWIP_Init+0x9c>)
 800768a:	2210      	movs	r2, #16
 800768c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800768e:	4a0c      	ldr	r2, [pc, #48]	@ (80076c0 <MX_LWIP_Init+0x9c>)
 8007690:	4909      	ldr	r1, [pc, #36]	@ (80076b8 <MX_LWIP_Init+0x94>)
 8007692:	480d      	ldr	r0, [pc, #52]	@ (80076c8 <MX_LWIP_Init+0xa4>)
 8007694:	f000 fe13 	bl	80082be <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007698:	4807      	ldr	r0, [pc, #28]	@ (80076b8 <MX_LWIP_Init+0x94>)
 800769a:	f011 fea7 	bl	80193ec <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800769e:	bf00      	nop
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000c58 	.word	0x20000c58
 80076a8:	20000c5c 	.word	0x20000c5c
 80076ac:	20000c60 	.word	0x20000c60
 80076b0:	0800f689 	.word	0x0800f689
 80076b4:	08007bb5 	.word	0x08007bb5
 80076b8:	20000c20 	.word	0x20000c20
 80076bc:	080076cd 	.word	0x080076cd
 80076c0:	20000c64 	.word	0x20000c64
 80076c4:	0802215c 	.word	0x0802215c
 80076c8:	08007e69 	.word	0x08007e69

080076cc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80076e8:	4b04      	ldr	r3, [pc, #16]	@ (80076fc <HAL_ETH_RxCpltCallback+0x1c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 f87d 	bl	80087ec <osSemaphoreRelease>
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20005754 	.word	0x20005754

08007700 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007708:	4b04      	ldr	r3, [pc, #16]	@ (800771c <HAL_ETH_TxCpltCallback+0x1c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f001 f86d 	bl	80087ec <osSemaphoreRelease>
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20005758 	.word	0x20005758

08007720 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fb fdee 	bl	800330a <HAL_ETH_GetDMAError>
 800772e:	4603      	mov	r3, r0
 8007730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007734:	2b80      	cmp	r3, #128	@ 0x80
 8007736:	d104      	bne.n	8007742 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007738:	4b04      	ldr	r3, [pc, #16]	@ (800774c <HAL_ETH_ErrorCallback+0x2c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4618      	mov	r0, r3
 800773e:	f001 f855 	bl	80087ec <osSemaphoreRelease>
  }
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20005754 	.word	0x20005754

08007750 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b0aa      	sub	sp, #168	@ 0xa8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800776a:	f107 0310 	add.w	r3, r7, #16
 800776e:	2264      	movs	r2, #100	@ 0x64
 8007770:	2100      	movs	r1, #0
 8007772:	4618      	mov	r0, r3
 8007774:	f017 f8ef 	bl	801e956 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007778:	4b89      	ldr	r3, [pc, #548]	@ (80079a0 <low_level_init+0x250>)
 800777a:	4a8a      	ldr	r2, [pc, #552]	@ (80079a4 <low_level_init+0x254>)
 800777c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800777e:	2300      	movs	r3, #0
 8007780:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007782:	2380      	movs	r3, #128	@ 0x80
 8007784:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007786:	23e1      	movs	r3, #225	@ 0xe1
 8007788:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800778a:	2300      	movs	r3, #0
 800778c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800778e:	2300      	movs	r3, #0
 8007790:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007792:	2300      	movs	r3, #0
 8007794:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007796:	4a82      	ldr	r2, [pc, #520]	@ (80079a0 <low_level_init+0x250>)
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800779e:	4b80      	ldr	r3, [pc, #512]	@ (80079a0 <low_level_init+0x250>)
 80077a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80077a4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80077a6:	4b7e      	ldr	r3, [pc, #504]	@ (80079a0 <low_level_init+0x250>)
 80077a8:	4a7f      	ldr	r2, [pc, #508]	@ (80079a8 <low_level_init+0x258>)
 80077aa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80077ac:	4b7c      	ldr	r3, [pc, #496]	@ (80079a0 <low_level_init+0x250>)
 80077ae:	4a7f      	ldr	r2, [pc, #508]	@ (80079ac <low_level_init+0x25c>)
 80077b0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80077b2:	4b7b      	ldr	r3, [pc, #492]	@ (80079a0 <low_level_init+0x250>)
 80077b4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80077b8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80077ba:	4879      	ldr	r0, [pc, #484]	@ (80079a0 <low_level_init+0x250>)
 80077bc:	f7fa ff5c 	bl	8002678 <HAL_ETH_Init>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80077c6:	2238      	movs	r2, #56	@ 0x38
 80077c8:	2100      	movs	r1, #0
 80077ca:	4879      	ldr	r0, [pc, #484]	@ (80079b0 <low_level_init+0x260>)
 80077cc:	f017 f8c3 	bl	801e956 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80077d0:	4b77      	ldr	r3, [pc, #476]	@ (80079b0 <low_level_init+0x260>)
 80077d2:	2221      	movs	r2, #33	@ 0x21
 80077d4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80077d6:	4b76      	ldr	r3, [pc, #472]	@ (80079b0 <low_level_init+0x260>)
 80077d8:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80077dc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80077de:	4b74      	ldr	r3, [pc, #464]	@ (80079b0 <low_level_init+0x260>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80077e4:	4873      	ldr	r0, [pc, #460]	@ (80079b4 <low_level_init+0x264>)
 80077e6:	f008 ff39 	bl	801065c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2206      	movs	r2, #6
 80077ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80077f2:	4b6b      	ldr	r3, [pc, #428]	@ (80079a0 <low_level_init+0x250>)
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80077fe:	4b68      	ldr	r3, [pc, #416]	@ (80079a0 <low_level_init+0x250>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	785a      	ldrb	r2, [r3, #1]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800780a:	4b65      	ldr	r3, [pc, #404]	@ (80079a0 <low_level_init+0x250>)
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	789a      	ldrb	r2, [r3, #2]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007816:	4b62      	ldr	r3, [pc, #392]	@ (80079a0 <low_level_init+0x250>)
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	78da      	ldrb	r2, [r3, #3]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007822:	4b5f      	ldr	r3, [pc, #380]	@ (80079a0 <low_level_init+0x250>)
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	791a      	ldrb	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800782e:	4b5c      	ldr	r3, [pc, #368]	@ (80079a0 <low_level_init+0x250>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	795a      	ldrb	r2, [r3, #5]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007840:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007848:	f043 030a 	orr.w	r3, r3, #10
 800784c:	b2da      	uxtb	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007854:	2200      	movs	r2, #0
 8007856:	2100      	movs	r1, #0
 8007858:	2001      	movs	r0, #1
 800785a:	f000 feec 	bl	8008636 <osSemaphoreNew>
 800785e:	4603      	mov	r3, r0
 8007860:	4a55      	ldr	r2, [pc, #340]	@ (80079b8 <low_level_init+0x268>)
 8007862:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007864:	2200      	movs	r2, #0
 8007866:	2100      	movs	r1, #0
 8007868:	2001      	movs	r0, #1
 800786a:	f000 fee4 	bl	8008636 <osSemaphoreNew>
 800786e:	4603      	mov	r3, r0
 8007870:	4a52      	ldr	r2, [pc, #328]	@ (80079bc <low_level_init+0x26c>)
 8007872:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007874:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007878:	2224      	movs	r2, #36	@ 0x24
 800787a:	2100      	movs	r1, #0
 800787c:	4618      	mov	r0, r3
 800787e:	f017 f86a 	bl	801e956 <memset>
  attributes.name = "EthIf";
 8007882:	4b4f      	ldr	r3, [pc, #316]	@ (80079c0 <low_level_init+0x270>)
 8007884:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007886:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800788a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800788e:	2330      	movs	r3, #48	@ 0x30
 8007890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8007894:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007898:	461a      	mov	r2, r3
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	4849      	ldr	r0, [pc, #292]	@ (80079c4 <low_level_init+0x274>)
 800789e:	f000 fd0e 	bl	80082be <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80078a2:	4949      	ldr	r1, [pc, #292]	@ (80079c8 <low_level_init+0x278>)
 80078a4:	4849      	ldr	r0, [pc, #292]	@ (80079cc <low_level_init+0x27c>)
 80078a6:	f7fa fc06 	bl	80020b6 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 80078aa:	4848      	ldr	r0, [pc, #288]	@ (80079cc <low_level_init+0x27c>)
 80078ac:	f7fa fc35 	bl	800211a <DP83848_Init>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d006      	beq.n	80078c4 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f009 fab6 	bl	8010e28 <netif_set_link_down>
    netif_set_down(netif);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f009 fa49 	bl	8010d54 <netif_set_down>
 80078c2:	e06a      	b.n	800799a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80078c4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d164      	bne.n	8007996 <low_level_init+0x246>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 80078cc:	483f      	ldr	r0, [pc, #252]	@ (80079cc <low_level_init+0x27c>)
 80078ce:	f7fa fc71 	bl	80021b4 <DP83848_GetLinkState>
 80078d2:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 80078d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078da:	2b01      	cmp	r3, #1
 80078dc:	dc06      	bgt.n	80078ec <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f009 faa2 	bl	8010e28 <netif_set_link_down>
      netif_set_down(netif);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f009 fa35 	bl	8010d54 <netif_set_down>
 80078ea:	e056      	b.n	800799a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 80078ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078f0:	3b02      	subs	r3, #2
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d82a      	bhi.n	800794c <low_level_init+0x1fc>
 80078f6:	a201      	add	r2, pc, #4	@ (adr r2, 80078fc <low_level_init+0x1ac>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	0800790d 	.word	0x0800790d
 8007900:	0800791f 	.word	0x0800791f
 8007904:	0800792f 	.word	0x0800792f
 8007908:	0800793f 	.word	0x0800793f
      {
      case DP83848_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800790c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007910:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007914:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007918:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800791c:	e01f      	b.n	800795e <low_level_init+0x20e>
      case DP83848_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800791e:	2300      	movs	r3, #0
 8007920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007924:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007928:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800792c:	e017      	b.n	800795e <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800792e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007936:	2300      	movs	r3, #0
 8007938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800793c:	e00f      	b.n	800795e <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800793e:	2300      	movs	r3, #0
 8007940:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007944:	2300      	movs	r3, #0
 8007946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800794a:	e008      	b.n	800795e <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800794c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007950:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007954:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800795c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800795e:	f107 0310 	add.w	r3, r7, #16
 8007962:	4619      	mov	r1, r3
 8007964:	480e      	ldr	r0, [pc, #56]	@ (80079a0 <low_level_init+0x250>)
 8007966:	f7fb fb6f 	bl	8003048 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800796a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800796e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8007970:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007976:	f107 0310 	add.w	r3, r7, #16
 800797a:	4619      	mov	r1, r3
 800797c:	4808      	ldr	r0, [pc, #32]	@ (80079a0 <low_level_init+0x250>)
 800797e:	f7fb fc5a 	bl	8003236 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8007982:	4807      	ldr	r0, [pc, #28]	@ (80079a0 <low_level_init+0x250>)
 8007984:	f7fa ff14 	bl	80027b0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f009 f977 	bl	8010c7c <netif_set_up>
    netif_set_link_up(netif);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f009 fa12 	bl	8010db8 <netif_set_link_up>
 8007994:	e001      	b.n	800799a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8007996:	f7f9 fff7 	bl	8001988 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800799a:	37a8      	adds	r7, #168	@ 0xa8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2000575c 	.word	0x2000575c
 80079a4:	40028000 	.word	0x40028000
 80079a8:	200056b4 	.word	0x200056b4
 80079ac:	20005614 	.word	0x20005614
 80079b0:	2000580c 	.word	0x2000580c
 80079b4:	080260e4 	.word	0x080260e4
 80079b8:	20005754 	.word	0x20005754
 80079bc:	20005758 	.word	0x20005758
 80079c0:	08022164 	.word	0x08022164
 80079c4:	08007b61 	.word	0x08007b61
 80079c8:	20000020 	.word	0x20000020
 80079cc:	20005844 	.word	0x20005844

080079d0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b092      	sub	sp, #72	@ 0x48
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80079e8:	f107 030c 	add.w	r3, r7, #12
 80079ec:	2230      	movs	r2, #48	@ 0x30
 80079ee:	2100      	movs	r1, #0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f016 ffb0 	bl	801e956 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80079f6:	f107 030c 	add.w	r3, r7, #12
 80079fa:	2230      	movs	r2, #48	@ 0x30
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f016 ffa9 	bl	801e956 <memset>

  for(q = p; q != NULL; q = q->next)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a08:	e045      	b.n	8007a96 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d902      	bls.n	8007a16 <low_level_output+0x46>
      return ERR_IF;
 8007a10:	f06f 030b 	mvn.w	r3, #11
 8007a14:	e07f      	b.n	8007b16 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8007a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a18:	6859      	ldr	r1, [r3, #4]
 8007a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	3348      	adds	r3, #72	@ 0x48
 8007a26:	443b      	add	r3, r7
 8007a28:	3b3c      	subs	r3, #60	@ 0x3c
 8007a2a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a2e:	895b      	ldrh	r3, [r3, #10]
 8007a30:	4619      	mov	r1, r3
 8007a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a34:	4613      	mov	r3, r2
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	3348      	adds	r3, #72	@ 0x48
 8007a3e:	443b      	add	r3, r7
 8007a40:	3b38      	subs	r3, #56	@ 0x38
 8007a42:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d011      	beq.n	8007a6e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a4c:	1e5a      	subs	r2, r3, #1
 8007a4e:	f107 000c 	add.w	r0, r7, #12
 8007a52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a54:	460b      	mov	r3, r1
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	440b      	add	r3, r1
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	18c1      	adds	r1, r0, r3
 8007a5e:	4613      	mov	r3, r2
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	3348      	adds	r3, #72	@ 0x48
 8007a68:	443b      	add	r3, r7
 8007a6a:	3b34      	subs	r3, #52	@ 0x34
 8007a6c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007a76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a78:	4613      	mov	r3, r2
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	3348      	adds	r3, #72	@ 0x48
 8007a82:	443b      	add	r3, r7
 8007a84:	3b34      	subs	r3, #52	@ 0x34
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1b6      	bne.n	8007a0a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	891b      	ldrh	r3, [r3, #8]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b20 <low_level_output+0x150>)
 8007aa4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b20 <low_level_output+0x150>)
 8007aa8:	f107 030c 	add.w	r3, r7, #12
 8007aac:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007aae:	4a1c      	ldr	r2, [pc, #112]	@ (8007b20 <low_level_output+0x150>)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8007ab4:	6838      	ldr	r0, [r7, #0]
 8007ab6:	f009 fe6d 	bl	8011794 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8007aba:	4919      	ldr	r1, [pc, #100]	@ (8007b20 <low_level_output+0x150>)
 8007abc:	4819      	ldr	r0, [pc, #100]	@ (8007b24 <low_level_output+0x154>)
 8007abe:	f7fa ff66 	bl	800298e <HAL_ETH_Transmit_IT>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d103      	bne.n	8007ad0 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007ace:	e01b      	b.n	8007b08 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8007ad0:	4814      	ldr	r0, [pc, #80]	@ (8007b24 <low_level_output+0x154>)
 8007ad2:	f7fb fc0d 	bl	80032f0 <HAL_ETH_GetError>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8007ae0:	4b11      	ldr	r3, [pc, #68]	@ (8007b28 <low_level_output+0x158>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fe2d 	bl	8008748 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8007aee:	480d      	ldr	r0, [pc, #52]	@ (8007b24 <low_level_output+0x154>)
 8007af0:	f7fb f8ec 	bl	8002ccc <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8007af4:	23fe      	movs	r3, #254	@ 0xfe
 8007af6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007afa:	e005      	b.n	8007b08 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8007afc:	6838      	ldr	r0, [r7, #0]
 8007afe:	f009 fda3 	bl	8011648 <pbuf_free>
        errval =  ERR_IF;
 8007b02:	23f4      	movs	r3, #244	@ 0xf4
 8007b04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8007b08:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007b0c:	f113 0f02 	cmn.w	r3, #2
 8007b10:	d0d3      	beq.n	8007aba <low_level_output+0xea>

  return errval;
 8007b12:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3748      	adds	r7, #72	@ 0x48
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000580c 	.word	0x2000580c
 8007b24:	2000575c 	.word	0x2000575c
 8007b28:	20005758 	.word	0x20005758

08007b2c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007b38:	4b07      	ldr	r3, [pc, #28]	@ (8007b58 <low_level_input+0x2c>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d105      	bne.n	8007b4c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007b40:	f107 030c 	add.w	r3, r7, #12
 8007b44:	4619      	mov	r1, r3
 8007b46:	4805      	ldr	r0, [pc, #20]	@ (8007b5c <low_level_input+0x30>)
 8007b48:	f7fa ff7d 	bl	8002a46 <HAL_ETH_ReadData>
  }

  return p;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20005610 	.word	0x20005610
 8007b5c:	2000575c 	.word	0x2000575c

08007b60 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007b70:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb0 <ethernetif_input+0x50>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f04f 31ff 	mov.w	r1, #4294967295
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fde5 	bl	8008748 <osSemaphoreAcquire>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1f5      	bne.n	8007b70 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007b84:	68b8      	ldr	r0, [r7, #8]
 8007b86:	f7ff ffd1 	bl	8007b2c <low_level_input>
 8007b8a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	68b9      	ldr	r1, [r7, #8]
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	4798      	blx	r3
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f009 fd50 	bl	8011648 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1ea      	bne.n	8007b84 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007bae:	e7df      	b.n	8007b70 <ethernetif_input+0x10>
 8007bb0:	20005754 	.word	0x20005754

08007bb4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <ethernetif_init+0x1c>
 8007bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007bfc <ethernetif_init+0x48>)
 8007bc4:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8007bc8:	490d      	ldr	r1, [pc, #52]	@ (8007c00 <ethernetif_init+0x4c>)
 8007bca:	480e      	ldr	r0, [pc, #56]	@ (8007c04 <ethernetif_init+0x50>)
 8007bcc:	f016 fe24 	bl	801e818 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2273      	movs	r2, #115	@ 0x73
 8007bd4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2274      	movs	r2, #116	@ 0x74
 8007bdc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a09      	ldr	r2, [pc, #36]	@ (8007c08 <ethernetif_init+0x54>)
 8007be4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a08      	ldr	r2, [pc, #32]	@ (8007c0c <ethernetif_init+0x58>)
 8007bea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff fdaf 	bl	8007750 <low_level_init>

  return ERR_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	0802216c 	.word	0x0802216c
 8007c00:	08022188 	.word	0x08022188
 8007c04:	08022198 	.word	0x08022198
 8007c08:	0801b30d 	.word	0x0801b30d
 8007c0c:	080079d1 	.word	0x080079d1

08007c10 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007c1c:	68f9      	ldr	r1, [r7, #12]
 8007c1e:	4809      	ldr	r0, [pc, #36]	@ (8007c44 <pbuf_free_custom+0x34>)
 8007c20:	f008 fe0c 	bl	801083c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007c24:	4b08      	ldr	r3, [pc, #32]	@ (8007c48 <pbuf_free_custom+0x38>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d107      	bne.n	8007c3c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <pbuf_free_custom+0x38>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007c32:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <pbuf_free_custom+0x3c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fdd8 	bl	80087ec <osSemaphoreRelease>
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	080260e4 	.word	0x080260e4
 8007c48:	20005610 	.word	0x20005610
 8007c4c:	20005754 	.word	0x20005754

08007c50 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007c54:	f7fa fb6c 	bl	8002330 <HAL_GetTick>
 8007c58:	4603      	mov	r3, r0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08e      	sub	sp, #56	@ 0x38
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	605a      	str	r2, [r3, #4]
 8007c72:	609a      	str	r2, [r3, #8]
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8007db8 <HAL_ETH_MspInit+0x158>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	f040 8095 	bne.w	8007dae <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007c84:	2300      	movs	r3, #0
 8007c86:	623b      	str	r3, [r7, #32]
 8007c88:	4b4c      	ldr	r3, [pc, #304]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007c8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c94:	4b49      	ldr	r3, [pc, #292]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c9c:	623b      	str	r3, [r7, #32]
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	4b45      	ldr	r3, [pc, #276]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca8:	4a44      	ldr	r2, [pc, #272]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007caa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cb0:	4b42      	ldr	r3, [pc, #264]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61bb      	str	r3, [r7, #24]
 8007cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007cc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	4b37      	ldr	r3, [pc, #220]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce0:	4a36      	ldr	r2, [pc, #216]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007ce2:	f043 0304 	orr.w	r3, r3, #4
 8007ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ce8:	4b34      	ldr	r3, [pc, #208]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	4b30      	ldr	r3, [pc, #192]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d04:	4b2d      	ldr	r3, [pc, #180]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	4b29      	ldr	r3, [pc, #164]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d18:	4a28      	ldr	r2, [pc, #160]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007d1a:	f043 0302 	orr.w	r3, r3, #2
 8007d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d20:	4b26      	ldr	r3, [pc, #152]	@ (8007dbc <HAL_ETH_MspInit+0x15c>)
 8007d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007d2c:	2332      	movs	r3, #50	@ 0x32
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d30:	2302      	movs	r3, #2
 8007d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d3c:	230b      	movs	r3, #11
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d44:	4619      	mov	r1, r3
 8007d46:	481e      	ldr	r0, [pc, #120]	@ (8007dc0 <HAL_ETH_MspInit+0x160>)
 8007d48:	f7fb ff0e 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007d4c:	2386      	movs	r3, #134	@ 0x86
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d50:	2302      	movs	r3, #2
 8007d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d5c:	230b      	movs	r3, #11
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d64:	4619      	mov	r1, r3
 8007d66:	4817      	ldr	r0, [pc, #92]	@ (8007dc4 <HAL_ETH_MspInit+0x164>)
 8007d68:	f7fb fefe 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007d6c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d72:	2302      	movs	r3, #2
 8007d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d7e:	230b      	movs	r3, #11
 8007d80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d86:	4619      	mov	r1, r3
 8007d88:	480f      	ldr	r0, [pc, #60]	@ (8007dc8 <HAL_ETH_MspInit+0x168>)
 8007d8a:	f7fb feed 	bl	8003b68 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2105      	movs	r1, #5
 8007d92:	203d      	movs	r0, #61	@ 0x3d
 8007d94:	f7fa fbb4 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007d98:	203d      	movs	r0, #61	@ 0x3d
 8007d9a:	f7fa fbcd 	bl	8002538 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2105      	movs	r1, #5
 8007da2:	203e      	movs	r0, #62	@ 0x3e
 8007da4:	f7fa fbac 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8007da8:	203e      	movs	r0, #62	@ 0x3e
 8007daa:	f7fa fbc5 	bl	8002538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007dae:	bf00      	nop
 8007db0:	3738      	adds	r7, #56	@ 0x38
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40028000 	.word	0x40028000
 8007dbc:	40023800 	.word	0x40023800
 8007dc0:	40020800 	.word	0x40020800
 8007dc4:	40020000 	.word	0x40020000
 8007dc8:	40020400 	.word	0x40020400

08007dcc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007dd0:	4802      	ldr	r0, [pc, #8]	@ (8007ddc <ETH_PHY_IO_Init+0x10>)
 8007dd2:	f7fb fa4b 	bl	800326c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	2000575c 	.word	0x2000575c

08007de0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
  return 0;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	68f9      	ldr	r1, [r7, #12]
 8007e02:	4807      	ldr	r0, [pc, #28]	@ (8007e20 <ETH_PHY_IO_ReadReg+0x30>)
 8007e04:	f7fb f88c 	bl	8002f20 <HAL_ETH_ReadPHYRegister>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e12:	e000      	b.n	8007e16 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	2000575c 	.word	0x2000575c

08007e24 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	68f9      	ldr	r1, [r7, #12]
 8007e36:	4807      	ldr	r0, [pc, #28]	@ (8007e54 <ETH_PHY_IO_WriteReg+0x30>)
 8007e38:	f7fb f8bd 	bl	8002fb6 <HAL_ETH_WritePHYRegister>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295
 8007e46:	e000      	b.n	8007e4a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	2000575c 	.word	0x2000575c

08007e58 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007e5c:	f7fa fa68 	bl	8002330 <HAL_GetTick>
 8007e60:	4603      	mov	r3, r0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b0a0      	sub	sp, #128	@ 0x80
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007e70:	f107 0308 	add.w	r3, r7, #8
 8007e74:	2264      	movs	r2, #100	@ 0x64
 8007e76:	2100      	movs	r1, #0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f016 fd6c 	bl	801e956 <memset>
  int32_t PHYLinkState = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e86:	2300      	movs	r3, #0
 8007e88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8007e92:	483a      	ldr	r0, [pc, #232]	@ (8007f7c <ethernet_link_thread+0x114>)
 8007e94:	f7fa f98e 	bl	80021b4 <DP83848_GetLinkState>
 8007e98:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8007e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007ea0:	089b      	lsrs	r3, r3, #2
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00c      	beq.n	8007ec6 <ethernet_link_thread+0x5e>
 8007eac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	dc09      	bgt.n	8007ec6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007eb2:	4833      	ldr	r0, [pc, #204]	@ (8007f80 <ethernet_link_thread+0x118>)
 8007eb4:	f7fa fcec 	bl	8002890 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007eb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007eba:	f008 ff4b 	bl	8010d54 <netif_set_down>
    netif_set_link_down(netif);
 8007ebe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ec0:	f008 ffb2 	bl	8010e28 <netif_set_link_down>
 8007ec4:	e055      	b.n	8007f72 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8007ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d14e      	bne.n	8007f72 <ethernet_link_thread+0x10a>
 8007ed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	dd4b      	ble.n	8007f72 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007edc:	3b02      	subs	r3, #2
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d82a      	bhi.n	8007f38 <ethernet_link_thread+0xd0>
 8007ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <ethernet_link_thread+0x80>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007f0b 	.word	0x08007f0b
 8007ef0:	08007f1b 	.word	0x08007f1b
 8007ef4:	08007f2b 	.word	0x08007f2b
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007ef8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007efc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007efe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f02:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007f04:	2301      	movs	r3, #1
 8007f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007f08:	e017      	b.n	8007f3a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007f0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f12:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007f14:	2301      	movs	r3, #1
 8007f16:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007f18:	e00f      	b.n	8007f3a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007f1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f1e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007f20:	2300      	movs	r3, #0
 8007f22:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007f24:	2301      	movs	r3, #1
 8007f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007f28:	e007      	b.n	8007f3a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007f32:	2301      	movs	r3, #1
 8007f34:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007f36:	e000      	b.n	8007f3a <ethernet_link_thread+0xd2>
    default:
      break;
 8007f38:	bf00      	nop
    }

    if(linkchanged)
 8007f3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d018      	beq.n	8007f72 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007f40:	f107 0308 	add.w	r3, r7, #8
 8007f44:	4619      	mov	r1, r3
 8007f46:	480e      	ldr	r0, [pc, #56]	@ (8007f80 <ethernet_link_thread+0x118>)
 8007f48:	f7fb f87e 	bl	8003048 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f4e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007f50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f52:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007f54:	f107 0308 	add.w	r3, r7, #8
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4809      	ldr	r0, [pc, #36]	@ (8007f80 <ethernet_link_thread+0x118>)
 8007f5c:	f7fb f96b 	bl	8003236 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007f60:	4807      	ldr	r0, [pc, #28]	@ (8007f80 <ethernet_link_thread+0x118>)
 8007f62:	f7fa fc25 	bl	80027b0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007f66:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f68:	f008 fe88 	bl	8010c7c <netif_set_up>
      netif_set_link_up(netif);
 8007f6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f6e:	f008 ff23 	bl	8010db8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007f72:	2064      	movs	r0, #100	@ 0x64
 8007f74:	f000 fa36 	bl	80083e4 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8007f78:	e78b      	b.n	8007e92 <ethernet_link_thread+0x2a>
 8007f7a:	bf00      	nop
 8007f7c:	20005844 	.word	0x20005844
 8007f80:	2000575c 	.word	0x2000575c

08007f84 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007f8c:	4812      	ldr	r0, [pc, #72]	@ (8007fd8 <HAL_ETH_RxAllocateCallback+0x54>)
 8007f8e:	f008 fbe1 	bl	8010754 <memp_malloc_pool>
 8007f92:	60f8      	str	r0, [r7, #12]
  if (p)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d014      	beq.n	8007fc4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f103 0220 	add.w	r2, r3, #32
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8007fdc <HAL_ETH_RxAllocateCallback+0x58>)
 8007fa8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007fb2:	9201      	str	r2, [sp, #4]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2241      	movs	r2, #65	@ 0x41
 8007fba:	2100      	movs	r1, #0
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f009 f957 	bl	8011270 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007fc2:	e005      	b.n	8007fd0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007fc4:	4b06      	ldr	r3, [pc, #24]	@ (8007fe0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	601a      	str	r2, [r3, #0]
}
 8007fd0:	bf00      	nop
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	080260e4 	.word	0x080260e4
 8007fdc:	08007c11 	.word	0x08007c11
 8007fe0:	20005610 	.word	0x20005610

08007fe4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b089      	sub	sp, #36	@ 0x24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3b20      	subs	r3, #32
 8008002:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	2200      	movs	r2, #0
 800800e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	887a      	ldrh	r2, [r7, #2]
 8008014:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e003      	b.n	800802e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e009      	b.n	8008050 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	891a      	ldrh	r2, [r3, #8]
 8008040:	887b      	ldrh	r3, [r7, #2]
 8008042:	4413      	add	r3, r2
 8008044:	b29a      	uxth	r2, r3
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	61fb      	str	r3, [r7, #28]
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f2      	bne.n	800803c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008056:	bf00      	nop
 8008058:	bf00      	nop
 800805a:	3724      	adds	r7, #36	@ 0x24
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f009 faeb 	bl	8011648 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800808a:	2301      	movs	r3, #1
 800808c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008092:	4b1f      	ldr	r3, [pc, #124]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 8008094:	7a5b      	ldrb	r3, [r3, #9]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d131      	bne.n	8008100 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800809c:	4b1c      	ldr	r3, [pc, #112]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 800809e:	7a5b      	ldrb	r3, [r3, #9]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	461a      	mov	r2, r3
 80080a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 80080a6:	2100      	movs	r1, #0
 80080a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80080aa:	4b19      	ldr	r3, [pc, #100]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 80080ac:	7a5b      	ldrb	r3, [r3, #9]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	4a17      	ldr	r2, [pc, #92]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80080ba:	4b15      	ldr	r3, [pc, #84]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 80080bc:	7a5b      	ldrb	r3, [r3, #9]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	461a      	mov	r2, r3
 80080c2:	4b13      	ldr	r3, [pc, #76]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 80080c4:	4413      	add	r3, r2
 80080c6:	79fa      	ldrb	r2, [r7, #7]
 80080c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80080ca:	4b11      	ldr	r3, [pc, #68]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 80080cc:	7a5b      	ldrb	r3, [r3, #9]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	b2d1      	uxtb	r1, r2
 80080d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008110 <FATFS_LinkDriverEx+0x94>)
 80080d6:	7251      	strb	r1, [r2, #9]
 80080d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80080da:	7dbb      	ldrb	r3, [r7, #22]
 80080dc:	3330      	adds	r3, #48	@ 0x30
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	3301      	adds	r3, #1
 80080e8:	223a      	movs	r2, #58	@ 0x3a
 80080ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3302      	adds	r3, #2
 80080f0:	222f      	movs	r2, #47	@ 0x2f
 80080f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3303      	adds	r3, #3
 80080f8:	2200      	movs	r2, #0
 80080fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
}
 8008102:	4618      	mov	r0, r3
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20005864 	.word	0x20005864

08008114 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800811e:	2200      	movs	r2, #0
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff ffaa 	bl	800807c <FATFS_LinkDriverEx>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <__NVIC_SetPriority>:
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db0a      	blt.n	800815e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	b2da      	uxtb	r2, r3
 800814c:	490c      	ldr	r1, [pc, #48]	@ (8008180 <__NVIC_SetPriority+0x4c>)
 800814e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008152:	0112      	lsls	r2, r2, #4
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	440b      	add	r3, r1
 8008158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800815c:	e00a      	b.n	8008174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	b2da      	uxtb	r2, r3
 8008162:	4908      	ldr	r1, [pc, #32]	@ (8008184 <__NVIC_SetPriority+0x50>)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	3b04      	subs	r3, #4
 800816c:	0112      	lsls	r2, r2, #4
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	440b      	add	r3, r1
 8008172:	761a      	strb	r2, [r3, #24]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	e000e100 	.word	0xe000e100
 8008184:	e000ed00 	.word	0xe000ed00

08008188 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800818c:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <SysTick_Handler+0x1c>)
 800818e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008190:	f002 fe20 	bl	800add4 <xTaskGetSchedulerState>
 8008194:	4603      	mov	r3, r0
 8008196:	2b01      	cmp	r3, #1
 8008198:	d001      	beq.n	800819e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800819a:	f003 fd75 	bl	800bc88 <xPortSysTickHandler>
  }
}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	e000e010 	.word	0xe000e010

080081a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081ac:	2100      	movs	r1, #0
 80081ae:	f06f 0004 	mvn.w	r0, #4
 80081b2:	f7ff ffbf 	bl	8008134 <__NVIC_SetPriority>
#endif
}
 80081b6:	bf00      	nop
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c2:	f3ef 8305 	mrs	r3, IPSR
 80081c6:	603b      	str	r3, [r7, #0]
  return(result);
 80081c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081ce:	f06f 0305 	mvn.w	r3, #5
 80081d2:	607b      	str	r3, [r7, #4]
 80081d4:	e00c      	b.n	80081f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008200 <osKernelInitialize+0x44>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081de:	4b08      	ldr	r3, [pc, #32]	@ (8008200 <osKernelInitialize+0x44>)
 80081e0:	2201      	movs	r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	607b      	str	r3, [r7, #4]
 80081e8:	e002      	b.n	80081f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081f0:	687b      	ldr	r3, [r7, #4]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20005870 	.word	0x20005870

08008204 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800820a:	f002 fde3 	bl	800add4 <xTaskGetSchedulerState>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <osKernelGetState+0x1a>
 8008214:	2b02      	cmp	r3, #2
 8008216:	d105      	bne.n	8008224 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8008218:	2302      	movs	r3, #2
 800821a:	607b      	str	r3, [r7, #4]
      break;
 800821c:	e00c      	b.n	8008238 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800821e:	2303      	movs	r3, #3
 8008220:	607b      	str	r3, [r7, #4]
      break;
 8008222:	e009      	b.n	8008238 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8008224:	4b07      	ldr	r3, [pc, #28]	@ (8008244 <osKernelGetState+0x40>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d102      	bne.n	8008232 <osKernelGetState+0x2e>
        state = osKernelReady;
 800822c:	2301      	movs	r3, #1
 800822e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8008230:	e001      	b.n	8008236 <osKernelGetState+0x32>
        state = osKernelInactive;
 8008232:	2300      	movs	r3, #0
 8008234:	607b      	str	r3, [r7, #4]
      break;
 8008236:	bf00      	nop
  }

  return (state);
 8008238:	687b      	ldr	r3, [r7, #4]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20005870 	.word	0x20005870

08008248 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800824e:	f3ef 8305 	mrs	r3, IPSR
 8008252:	603b      	str	r3, [r7, #0]
  return(result);
 8008254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <osKernelStart+0x1a>
    stat = osErrorISR;
 800825a:	f06f 0305 	mvn.w	r3, #5
 800825e:	607b      	str	r3, [r7, #4]
 8008260:	e010      	b.n	8008284 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008262:	4b0b      	ldr	r3, [pc, #44]	@ (8008290 <osKernelStart+0x48>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d109      	bne.n	800827e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800826a:	f7ff ff9d 	bl	80081a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800826e:	4b08      	ldr	r3, [pc, #32]	@ (8008290 <osKernelStart+0x48>)
 8008270:	2202      	movs	r2, #2
 8008272:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008274:	f002 f90c 	bl	800a490 <vTaskStartScheduler>
      stat = osOK;
 8008278:	2300      	movs	r3, #0
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	e002      	b.n	8008284 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008284:	687b      	ldr	r3, [r7, #4]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20005870 	.word	0x20005870

08008294 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800829a:	f3ef 8305 	mrs	r3, IPSR
 800829e:	603b      	str	r3, [r7, #0]
  return(result);
 80082a0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80082a6:	f002 fa21 	bl	800a6ec <xTaskGetTickCountFromISR>
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	e002      	b.n	80082b4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80082ae:	f002 fa0d 	bl	800a6cc <xTaskGetTickCount>
 80082b2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80082b4:	687b      	ldr	r3, [r7, #4]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082be:	b580      	push	{r7, lr}
 80082c0:	b08e      	sub	sp, #56	@ 0x38
 80082c2:	af04      	add	r7, sp, #16
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ce:	f3ef 8305 	mrs	r3, IPSR
 80082d2:	617b      	str	r3, [r7, #20]
  return(result);
 80082d4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d17f      	bne.n	80083da <osThreadNew+0x11c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d07c      	beq.n	80083da <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80082e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082e6:	2318      	movs	r3, #24
 80082e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295
 80082f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d045      	beq.n	8008386 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <osThreadNew+0x4a>
        name = attr->name;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d008      	beq.n	800832e <osThreadNew+0x70>
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	2b38      	cmp	r3, #56	@ 0x38
 8008320:	d805      	bhi.n	800832e <osThreadNew+0x70>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <osThreadNew+0x74>
        return (NULL);
 800832e:	2300      	movs	r3, #0
 8008330:	e054      	b.n	80083dc <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	089b      	lsrs	r3, r3, #2
 8008340:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00e      	beq.n	8008368 <osThreadNew+0xaa>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	2bab      	cmp	r3, #171	@ 0xab
 8008350:	d90a      	bls.n	8008368 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008356:	2b00      	cmp	r3, #0
 8008358:	d006      	beq.n	8008368 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <osThreadNew+0xaa>
        mem = 1;
 8008362:	2301      	movs	r3, #1
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	e010      	b.n	800838a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10c      	bne.n	800838a <osThreadNew+0xcc>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d108      	bne.n	800838a <osThreadNew+0xcc>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <osThreadNew+0xcc>
          mem = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	e001      	b.n	800838a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d110      	bne.n	80083b2 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008398:	9202      	str	r2, [sp, #8]
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	6a3a      	ldr	r2, [r7, #32]
 80083a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f001 fe08 	bl	8009fbc <xTaskCreateStatic>
 80083ac:	4603      	mov	r3, r0
 80083ae:	613b      	str	r3, [r7, #16]
 80083b0:	e013      	b.n	80083da <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d110      	bne.n	80083da <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	f107 0310 	add.w	r3, r7, #16
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f001 fe56 	bl	800a07c <xTaskCreate>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d001      	beq.n	80083da <osThreadNew+0x11c>
            hTask = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083da:	693b      	ldr	r3, [r7, #16]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3728      	adds	r7, #40	@ 0x28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ec:	f3ef 8305 	mrs	r3, IPSR
 80083f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80083f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <osDelay+0x1c>
    stat = osErrorISR;
 80083f8:	f06f 0305 	mvn.w	r3, #5
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	e007      	b.n	8008410 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <osDelay+0x2c>
      vTaskDelay(ticks);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f002 f80a 	bl	800a424 <vTaskDelay>
    }
  }

  return (stat);
 8008410:	68fb      	ldr	r3, [r7, #12]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800841a:	b580      	push	{r7, lr}
 800841c:	b088      	sub	sp, #32
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008426:	f3ef 8305 	mrs	r3, IPSR
 800842a:	60bb      	str	r3, [r7, #8]
  return(result);
 800842c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800842e:	2b00      	cmp	r3, #0
 8008430:	d174      	bne.n	800851c <osMutexNew+0x102>
    if (attr != NULL) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	61bb      	str	r3, [r7, #24]
 800843e:	e001      	b.n	8008444 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <osMutexNew+0x3a>
      rmtx = 1U;
 800844e:	2301      	movs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
 8008452:	e001      	b.n	8008458 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d15c      	bne.n	800851c <osMutexNew+0x102>
      mem = -1;
 8008462:	f04f 33ff 	mov.w	r3, #4294967295
 8008466:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d015      	beq.n	800849a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <osMutexNew+0x6a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2b4f      	cmp	r3, #79	@ 0x4f
 800847c:	d902      	bls.n	8008484 <osMutexNew+0x6a>
          mem = 1;
 800847e:	2301      	movs	r3, #1
 8008480:	613b      	str	r3, [r7, #16]
 8008482:	e00c      	b.n	800849e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <osMutexNew+0x84>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <osMutexNew+0x84>
            mem = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	e001      	b.n	800849e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d112      	bne.n	80084ca <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d007      	beq.n	80084ba <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	4619      	mov	r1, r3
 80084b0:	2004      	movs	r0, #4
 80084b2:	f000 fdd8 	bl	8009066 <xQueueCreateMutexStatic>
 80084b6:	61f8      	str	r0, [r7, #28]
 80084b8:	e016      	b.n	80084e8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	4619      	mov	r1, r3
 80084c0:	2001      	movs	r0, #1
 80084c2:	f000 fdd0 	bl	8009066 <xQueueCreateMutexStatic>
 80084c6:	61f8      	str	r0, [r7, #28]
 80084c8:	e00e      	b.n	80084e8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d004      	beq.n	80084e0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80084d6:	2004      	movs	r0, #4
 80084d8:	f000 fdad 	bl	8009036 <xQueueCreateMutex>
 80084dc:	61f8      	str	r0, [r7, #28]
 80084de:	e003      	b.n	80084e8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80084e0:	2001      	movs	r0, #1
 80084e2:	f000 fda8 	bl	8009036 <xQueueCreateMutex>
 80084e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <osMutexNew+0xee>
        if (attr != NULL) {
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <osMutexNew+0xe2>
          name = attr->name;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	e001      	b.n	8008500 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008500:	68f9      	ldr	r1, [r7, #12]
 8008502:	69f8      	ldr	r0, [r7, #28]
 8008504:	f001 fcd2 	bl	8009eac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d006      	beq.n	800851c <osMutexNew+0x102>
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f043 0301 	orr.w	r3, r3, #1
 800851a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800851c:	69fb      	ldr	r3, [r7, #28]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3720      	adds	r7, #32
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008526:	b580      	push	{r7, lr}
 8008528:	b086      	sub	sp, #24
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f023 0301 	bic.w	r3, r3, #1
 8008536:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008544:	f3ef 8305 	mrs	r3, IPSR
 8008548:	60bb      	str	r3, [r7, #8]
  return(result);
 800854a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008550:	f06f 0305 	mvn.w	r3, #5
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	e02c      	b.n	80085b2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800855e:	f06f 0303 	mvn.w	r3, #3
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	e025      	b.n	80085b2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d011      	beq.n	8008590 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6938      	ldr	r0, [r7, #16]
 8008570:	f000 fdc9 	bl	8009106 <xQueueTakeMutexRecursive>
 8008574:	4603      	mov	r3, r0
 8008576:	2b01      	cmp	r3, #1
 8008578:	d01b      	beq.n	80085b2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d003      	beq.n	8008588 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008580:	f06f 0301 	mvn.w	r3, #1
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	e014      	b.n	80085b2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008588:	f06f 0302 	mvn.w	r3, #2
 800858c:	617b      	str	r3, [r7, #20]
 800858e:	e010      	b.n	80085b2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6938      	ldr	r0, [r7, #16]
 8008594:	f001 f96e 	bl	8009874 <xQueueSemaphoreTake>
 8008598:	4603      	mov	r3, r0
 800859a:	2b01      	cmp	r3, #1
 800859c:	d009      	beq.n	80085b2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80085a4:	f06f 0301 	mvn.w	r3, #1
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	e002      	b.n	80085b2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80085ac:	f06f 0302 	mvn.w	r3, #2
 80085b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80085b2:	697b      	ldr	r3, [r7, #20]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f023 0301 	bic.w	r3, r3, #1
 80085ca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085d8:	f3ef 8305 	mrs	r3, IPSR
 80085dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80085de:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <osMutexRelease+0x30>
    stat = osErrorISR;
 80085e4:	f06f 0305 	mvn.w	r3, #5
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e01f      	b.n	800862c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d103      	bne.n	80085fa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80085f2:	f06f 0303 	mvn.w	r3, #3
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e018      	b.n	800862c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d009      	beq.n	8008614 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008600:	6938      	ldr	r0, [r7, #16]
 8008602:	f000 fd4b 	bl	800909c <xQueueGiveMutexRecursive>
 8008606:	4603      	mov	r3, r0
 8008608:	2b01      	cmp	r3, #1
 800860a:	d00f      	beq.n	800862c <osMutexRelease+0x70>
        stat = osErrorResource;
 800860c:	f06f 0302 	mvn.w	r3, #2
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	e00b      	b.n	800862c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008614:	2300      	movs	r3, #0
 8008616:	2200      	movs	r2, #0
 8008618:	2100      	movs	r1, #0
 800861a:	6938      	ldr	r0, [r7, #16]
 800861c:	f000 fe18 	bl	8009250 <xQueueGenericSend>
 8008620:	4603      	mov	r3, r0
 8008622:	2b01      	cmp	r3, #1
 8008624:	d002      	beq.n	800862c <osMutexRelease+0x70>
        stat = osErrorResource;
 8008626:	f06f 0302 	mvn.w	r3, #2
 800862a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800862c:	697b      	ldr	r3, [r7, #20]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008636:	b580      	push	{r7, lr}
 8008638:	b08a      	sub	sp, #40	@ 0x28
 800863a:	af02      	add	r7, sp, #8
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008646:	f3ef 8305 	mrs	r3, IPSR
 800864a:	613b      	str	r3, [r7, #16]
  return(result);
 800864c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800864e:	2b00      	cmp	r3, #0
 8008650:	d175      	bne.n	800873e <osSemaphoreNew+0x108>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d072      	beq.n	800873e <osSemaphoreNew+0x108>
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	429a      	cmp	r2, r3
 800865e:	d86e      	bhi.n	800873e <osSemaphoreNew+0x108>
    mem = -1;
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d015      	beq.n	8008698 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <osSemaphoreNew+0x4c>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b4f      	cmp	r3, #79	@ 0x4f
 800867a:	d902      	bls.n	8008682 <osSemaphoreNew+0x4c>
        mem = 1;
 800867c:	2301      	movs	r3, #1
 800867e:	61bb      	str	r3, [r7, #24]
 8008680:	e00c      	b.n	800869c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d108      	bne.n	800869c <osSemaphoreNew+0x66>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d104      	bne.n	800869c <osSemaphoreNew+0x66>
          mem = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	e001      	b.n	800869c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d04c      	beq.n	800873e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d128      	bne.n	80086fc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d10a      	bne.n	80086c6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	2203      	movs	r2, #3
 80086b6:	9200      	str	r2, [sp, #0]
 80086b8:	2200      	movs	r2, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	2001      	movs	r0, #1
 80086be:	f000 fbc5 	bl	8008e4c <xQueueGenericCreateStatic>
 80086c2:	61f8      	str	r0, [r7, #28]
 80086c4:	e005      	b.n	80086d2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80086c6:	2203      	movs	r2, #3
 80086c8:	2100      	movs	r1, #0
 80086ca:	2001      	movs	r0, #1
 80086cc:	f000 fc3b 	bl	8008f46 <xQueueGenericCreate>
 80086d0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d022      	beq.n	800871e <osSemaphoreNew+0xe8>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d01f      	beq.n	800871e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80086de:	2300      	movs	r3, #0
 80086e0:	2200      	movs	r2, #0
 80086e2:	2100      	movs	r1, #0
 80086e4:	69f8      	ldr	r0, [r7, #28]
 80086e6:	f000 fdb3 	bl	8009250 <xQueueGenericSend>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d016      	beq.n	800871e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80086f0:	69f8      	ldr	r0, [r7, #28]
 80086f2:	f001 fa8f 	bl	8009c14 <vQueueDelete>
            hSemaphore = NULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61fb      	str	r3, [r7, #28]
 80086fa:	e010      	b.n	800871e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d108      	bne.n	8008714 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	461a      	mov	r2, r3
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 fd32 	bl	8009174 <xQueueCreateCountingSemaphoreStatic>
 8008710:	61f8      	str	r0, [r7, #28]
 8008712:	e004      	b.n	800871e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fd65 	bl	80091e6 <xQueueCreateCountingSemaphore>
 800871c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00c      	beq.n	800873e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <osSemaphoreNew+0xfc>
          name = attr->name;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	e001      	b.n	8008736 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008736:	6979      	ldr	r1, [r7, #20]
 8008738:	69f8      	ldr	r0, [r7, #28]
 800873a:	f001 fbb7 	bl	8009eac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800873e:	69fb      	ldr	r3, [r7, #28]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008760:	f06f 0303 	mvn.w	r3, #3
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	e039      	b.n	80087dc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008768:	f3ef 8305 	mrs	r3, IPSR
 800876c:	60fb      	str	r3, [r7, #12]
  return(result);
 800876e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008770:	2b00      	cmp	r3, #0
 8008772:	d022      	beq.n	80087ba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800877a:	f06f 0303 	mvn.w	r3, #3
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	e02c      	b.n	80087dc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008782:	2300      	movs	r3, #0
 8008784:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008786:	f107 0308 	add.w	r3, r7, #8
 800878a:	461a      	mov	r2, r3
 800878c:	2100      	movs	r1, #0
 800878e:	6938      	ldr	r0, [r7, #16]
 8008790:	f001 f980 	bl	8009a94 <xQueueReceiveFromISR>
 8008794:	4603      	mov	r3, r0
 8008796:	2b01      	cmp	r3, #1
 8008798:	d003      	beq.n	80087a2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800879a:	f06f 0302 	mvn.w	r3, #2
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	e01c      	b.n	80087dc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d019      	beq.n	80087dc <osSemaphoreAcquire+0x94>
 80087a8:	4b0f      	ldr	r3, [pc, #60]	@ (80087e8 <osSemaphoreAcquire+0xa0>)
 80087aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	e010      	b.n	80087dc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6938      	ldr	r0, [r7, #16]
 80087be:	f001 f859 	bl	8009874 <xQueueSemaphoreTake>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d009      	beq.n	80087dc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80087ce:	f06f 0301 	mvn.w	r3, #1
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	e002      	b.n	80087dc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80087d6:	f06f 0302 	mvn.w	r3, #2
 80087da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80087dc:	697b      	ldr	r3, [r7, #20]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d103      	bne.n	800880a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008802:	f06f 0303 	mvn.w	r3, #3
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	e02c      	b.n	8008864 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800880a:	f3ef 8305 	mrs	r3, IPSR
 800880e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008810:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01a      	beq.n	800884c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800881a:	f107 0308 	add.w	r3, r7, #8
 800881e:	4619      	mov	r1, r3
 8008820:	6938      	ldr	r0, [r7, #16]
 8008822:	f000 feb5 	bl	8009590 <xQueueGiveFromISR>
 8008826:	4603      	mov	r3, r0
 8008828:	2b01      	cmp	r3, #1
 800882a:	d003      	beq.n	8008834 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800882c:	f06f 0302 	mvn.w	r3, #2
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	e017      	b.n	8008864 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d014      	beq.n	8008864 <osSemaphoreRelease+0x78>
 800883a:	4b0d      	ldr	r3, [pc, #52]	@ (8008870 <osSemaphoreRelease+0x84>)
 800883c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	e00b      	b.n	8008864 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800884c:	2300      	movs	r3, #0
 800884e:	2200      	movs	r2, #0
 8008850:	2100      	movs	r1, #0
 8008852:	6938      	ldr	r0, [r7, #16]
 8008854:	f000 fcfc 	bl	8009250 <xQueueGenericSend>
 8008858:	4603      	mov	r3, r0
 800885a:	2b01      	cmp	r3, #1
 800885c:	d002      	beq.n	8008864 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800885e:	f06f 0302 	mvn.w	r3, #2
 8008862:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008864:	697b      	ldr	r3, [r7, #20]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008880:	f3ef 8305 	mrs	r3, IPSR
 8008884:	60fb      	str	r3, [r7, #12]
  return(result);
 8008886:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800888c:	f06f 0305 	mvn.w	r3, #5
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	e00e      	b.n	80088b2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800889a:	f06f 0303 	mvn.w	r3, #3
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e007      	b.n	80088b2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80088a2:	6938      	ldr	r0, [r7, #16]
 80088a4:	f001 fb2c 	bl	8009f00 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80088ac:	6938      	ldr	r0, [r7, #16]
 80088ae:	f001 f9b1 	bl	8009c14 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80088b2:	697b      	ldr	r3, [r7, #20]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	@ 0x28
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088cc:	f3ef 8305 	mrs	r3, IPSR
 80088d0:	613b      	str	r3, [r7, #16]
  return(result);
 80088d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d15f      	bne.n	8008998 <osMessageQueueNew+0xdc>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d05c      	beq.n	8008998 <osMessageQueueNew+0xdc>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d059      	beq.n	8008998 <osMessageQueueNew+0xdc>
    mem = -1;
 80088e4:	f04f 33ff 	mov.w	r3, #4294967295
 80088e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d029      	beq.n	8008944 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d012      	beq.n	800891e <osMessageQueueNew+0x62>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80088fe:	d90e      	bls.n	800891e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00a      	beq.n	800891e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	695a      	ldr	r2, [r3, #20]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	fb01 f303 	mul.w	r3, r1, r3
 8008914:	429a      	cmp	r2, r3
 8008916:	d302      	bcc.n	800891e <osMessageQueueNew+0x62>
        mem = 1;
 8008918:	2301      	movs	r3, #1
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	e014      	b.n	8008948 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d110      	bne.n	8008948 <osMessageQueueNew+0x8c>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10c      	bne.n	8008948 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008932:	2b00      	cmp	r3, #0
 8008934:	d108      	bne.n	8008948 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d104      	bne.n	8008948 <osMessageQueueNew+0x8c>
          mem = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	61bb      	str	r3, [r7, #24]
 8008942:	e001      	b.n	8008948 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d10b      	bne.n	8008966 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691a      	ldr	r2, [r3, #16]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2100      	movs	r1, #0
 8008958:	9100      	str	r1, [sp, #0]
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 fa75 	bl	8008e4c <xQueueGenericCreateStatic>
 8008962:	61f8      	str	r0, [r7, #28]
 8008964:	e008      	b.n	8008978 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d105      	bne.n	8008978 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800896c:	2200      	movs	r2, #0
 800896e:	68b9      	ldr	r1, [r7, #8]
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fae8 	bl	8008f46 <xQueueGenericCreate>
 8008976:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00c      	beq.n	8008998 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d003      	beq.n	800898c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	617b      	str	r3, [r7, #20]
 800898a:	e001      	b.n	8008990 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008990:	6979      	ldr	r1, [r7, #20]
 8008992:	69f8      	ldr	r0, [r7, #28]
 8008994:	f001 fa8a 	bl	8009eac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008998:	69fb      	ldr	r3, [r7, #28]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	4613      	mov	r3, r2
 80089b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089bc:	f3ef 8305 	mrs	r3, IPSR
 80089c0:	617b      	str	r3, [r7, #20]
  return(result);
 80089c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d028      	beq.n	8008a1a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d005      	beq.n	80089da <osMessageQueuePut+0x36>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <osMessageQueuePut+0x36>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80089da:	f06f 0303 	mvn.w	r3, #3
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	e038      	b.n	8008a54 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80089e6:	f107 0210 	add.w	r2, r7, #16
 80089ea:	2300      	movs	r3, #0
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	69b8      	ldr	r0, [r7, #24]
 80089f0:	f000 fd30 	bl	8009454 <xQueueGenericSendFromISR>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d003      	beq.n	8008a02 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80089fa:	f06f 0302 	mvn.w	r3, #2
 80089fe:	61fb      	str	r3, [r7, #28]
 8008a00:	e028      	b.n	8008a54 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d025      	beq.n	8008a54 <osMessageQueuePut+0xb0>
 8008a08:	4b15      	ldr	r3, [pc, #84]	@ (8008a60 <osMessageQueuePut+0xbc>)
 8008a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	e01c      	b.n	8008a54 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <osMessageQueuePut+0x82>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d103      	bne.n	8008a2e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008a26:	f06f 0303 	mvn.w	r3, #3
 8008a2a:	61fb      	str	r3, [r7, #28]
 8008a2c:	e012      	b.n	8008a54 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a2e:	2300      	movs	r3, #0
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	69b8      	ldr	r0, [r7, #24]
 8008a36:	f000 fc0b 	bl	8009250 <xQueueGenericSend>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d009      	beq.n	8008a54 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008a46:	f06f 0301 	mvn.w	r3, #1
 8008a4a:	61fb      	str	r3, [r7, #28]
 8008a4c:	e002      	b.n	8008a54 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008a4e:	f06f 0302 	mvn.w	r3, #2
 8008a52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008a54:	69fb      	ldr	r3, [r7, #28]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a7a:	f3ef 8305 	mrs	r3, IPSR
 8008a7e:	617b      	str	r3, [r7, #20]
  return(result);
 8008a80:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d028      	beq.n	8008ad8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <osMessageQueueGet+0x34>
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <osMessageQueueGet+0x34>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008a98:	f06f 0303 	mvn.w	r3, #3
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	e037      	b.n	8008b10 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008aa4:	f107 0310 	add.w	r3, r7, #16
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	69b8      	ldr	r0, [r7, #24]
 8008aae:	f000 fff1 	bl	8009a94 <xQueueReceiveFromISR>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d003      	beq.n	8008ac0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008ab8:	f06f 0302 	mvn.w	r3, #2
 8008abc:	61fb      	str	r3, [r7, #28]
 8008abe:	e027      	b.n	8008b10 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d024      	beq.n	8008b10 <osMessageQueueGet+0xac>
 8008ac6:	4b15      	ldr	r3, [pc, #84]	@ (8008b1c <osMessageQueueGet+0xb8>)
 8008ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	e01b      	b.n	8008b10 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <osMessageQueueGet+0x80>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d103      	bne.n	8008aec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008ae4:	f06f 0303 	mvn.w	r3, #3
 8008ae8:	61fb      	str	r3, [r7, #28]
 8008aea:	e011      	b.n	8008b10 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	69b8      	ldr	r0, [r7, #24]
 8008af2:	f000 fddd 	bl	80096b0 <xQueueReceive>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d009      	beq.n	8008b10 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008b02:	f06f 0301 	mvn.w	r3, #1
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	e002      	b.n	8008b10 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008b0a:	f06f 0302 	mvn.w	r3, #2
 8008b0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008b10:	69fb      	ldr	r3, [r7, #28]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3720      	adds	r7, #32
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <osMessageQueueGetCount+0x18>
    count = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	e00e      	b.n	8008b56 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b38:	f3ef 8305 	mrs	r3, IPSR
 8008b3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d004      	beq.n	8008b4e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008b44:	6938      	ldr	r0, [r7, #16]
 8008b46:	f001 f846 	bl	8009bd6 <uxQueueMessagesWaitingFromISR>
 8008b4a:	6178      	str	r0, [r7, #20]
 8008b4c:	e003      	b.n	8008b56 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008b4e:	6938      	ldr	r0, [r7, #16]
 8008b50:	f001 f822 	bl	8009b98 <uxQueueMessagesWaiting>
 8008b54:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8008b56:	697b      	ldr	r3, [r7, #20]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b6c:	f3ef 8305 	mrs	r3, IPSR
 8008b70:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b72:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8008b78:	f06f 0305 	mvn.w	r3, #5
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e00e      	b.n	8008b9e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d103      	bne.n	8008b8e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8008b86:	f06f 0303 	mvn.w	r3, #3
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	e007      	b.n	8008b9e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8008b8e:	6938      	ldr	r0, [r7, #16]
 8008b90:	f001 f9b6 	bl	8009f00 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8008b98:	6938      	ldr	r0, [r7, #16]
 8008b9a:	f001 f83b 	bl	8009c14 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008b9e:	697b      	ldr	r3, [r7, #20]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4a07      	ldr	r2, [pc, #28]	@ (8008bd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008bb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4a06      	ldr	r2, [pc, #24]	@ (8008bd8 <vApplicationGetIdleTaskMemory+0x30>)
 8008bbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bc6:	601a      	str	r2, [r3, #0]
}
 8008bc8:	bf00      	nop
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20005874 	.word	0x20005874
 8008bd8:	20005920 	.word	0x20005920

08008bdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4a07      	ldr	r2, [pc, #28]	@ (8008c08 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	4a06      	ldr	r2, [pc, #24]	@ (8008c0c <vApplicationGetTimerTaskMemory+0x30>)
 8008bf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008bfa:	601a      	str	r2, [r3, #0]
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	20006120 	.word	0x20006120
 8008c0c:	200061cc 	.word	0x200061cc

08008c10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f103 0208 	add.w	r2, r3, #8
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f04f 32ff 	mov.w	r2, #4294967295
 8008c28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f103 0208 	add.w	r2, r3, #8
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f103 0208 	add.w	r2, r3, #8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	601a      	str	r2, [r3, #0]
}
 8008ca6:	bf00      	nop
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d103      	bne.n	8008cd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e00c      	b.n	8008cec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e002      	b.n	8008ce0 <vListInsert+0x2e>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d2f6      	bcs.n	8008cda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	601a      	str	r2, [r3, #0]
}
 8008d18:	bf00      	nop
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6892      	ldr	r2, [r2, #8]
 8008d3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6852      	ldr	r2, [r2, #4]
 8008d44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d103      	bne.n	8008d58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	1e5a      	subs	r2, r3, #1
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10b      	bne.n	8008da4 <xQueueGenericReset+0x2c>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	60bb      	str	r3, [r7, #8]
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	e7fd      	b.n	8008da0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008da4:	f002 fee0 	bl	800bb68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db0:	68f9      	ldr	r1, [r7, #12]
 8008db2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	441a      	add	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	68f9      	ldr	r1, [r7, #12]
 8008dd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008dda:	fb01 f303 	mul.w	r3, r1, r3
 8008dde:	441a      	add	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	22ff      	movs	r2, #255	@ 0xff
 8008de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	22ff      	movs	r2, #255	@ 0xff
 8008df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d114      	bne.n	8008e24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01a      	beq.n	8008e38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3310      	adds	r3, #16
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fe0e 	bl	800aa28 <xTaskRemoveFromEventList>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d012      	beq.n	8008e38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <xQueueGenericReset+0xd0>)
 8008e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	e009      	b.n	8008e38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3310      	adds	r3, #16
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff fef1 	bl	8008c10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3324      	adds	r3, #36	@ 0x24
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff feec 	bl	8008c10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e38:	f002 fec8 	bl	800bbcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e3c:	2301      	movs	r3, #1
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08e      	sub	sp, #56	@ 0x38
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10b      	bne.n	8008e78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	e7fd      	b.n	8008e74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10b      	bne.n	8008e96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	e7fd      	b.n	8008e92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <xQueueGenericCreateStatic+0x56>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <xQueueGenericCreateStatic+0x5a>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <xQueueGenericCreateStatic+0x5c>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10b      	bne.n	8008ec4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	623b      	str	r3, [r7, #32]
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	e7fd      	b.n	8008ec0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <xQueueGenericCreateStatic+0x84>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <xQueueGenericCreateStatic+0x88>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e000      	b.n	8008ed6 <xQueueGenericCreateStatic+0x8a>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10b      	bne.n	8008ef2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	61fb      	str	r3, [r7, #28]
}
 8008eec:	bf00      	nop
 8008eee:	bf00      	nop
 8008ef0:	e7fd      	b.n	8008eee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ef2:	2350      	movs	r3, #80	@ 0x50
 8008ef4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b50      	cmp	r3, #80	@ 0x50
 8008efa:	d00b      	beq.n	8008f14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	61bb      	str	r3, [r7, #24]
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	e7fd      	b.n	8008f10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00d      	beq.n	8008f3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 f840 	bl	8008fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3730      	adds	r7, #48	@ 0x30
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b08a      	sub	sp, #40	@ 0x28
 8008f4a:	af02      	add	r7, sp, #8
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	4613      	mov	r3, r2
 8008f52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10b      	bne.n	8008f72 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	613b      	str	r3, [r7, #16]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	fb02 f303 	mul.w	r3, r2, r3
 8008f7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	3350      	adds	r3, #80	@ 0x50
 8008f80:	4618      	mov	r0, r3
 8008f82:	f002 ff13 	bl	800bdac <pvPortMalloc>
 8008f86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d011      	beq.n	8008fb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	3350      	adds	r3, #80	@ 0x50
 8008f96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fa0:	79fa      	ldrb	r2, [r7, #7]
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	68b9      	ldr	r1, [r7, #8]
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f805 	bl	8008fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
	}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3720      	adds	r7, #32
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e002      	b.n	8008fde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fea:	2101      	movs	r1, #1
 8008fec:	69b8      	ldr	r0, [r7, #24]
 8008fee:	f7ff fec3 	bl	8008d78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	78fa      	ldrb	r2, [r7, #3]
 8008ff6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00e      	beq.n	800902e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009022:	2300      	movs	r3, #0
 8009024:	2200      	movs	r2, #0
 8009026:	2100      	movs	r1, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f911 	bl	8009250 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009036:	b580      	push	{r7, lr}
 8009038:	b086      	sub	sp, #24
 800903a:	af00      	add	r7, sp, #0
 800903c:	4603      	mov	r3, r0
 800903e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009040:	2301      	movs	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	2300      	movs	r3, #0
 8009046:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	461a      	mov	r2, r3
 800904c:	6939      	ldr	r1, [r7, #16]
 800904e:	6978      	ldr	r0, [r7, #20]
 8009050:	f7ff ff79 	bl	8008f46 <xQueueGenericCreate>
 8009054:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f7ff ffd3 	bl	8009002 <prvInitialiseMutex>

		return xNewQueue;
 800905c:	68fb      	ldr	r3, [r7, #12]
	}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009066:	b580      	push	{r7, lr}
 8009068:	b088      	sub	sp, #32
 800906a:	af02      	add	r7, sp, #8
 800906c:	4603      	mov	r3, r0
 800906e:	6039      	str	r1, [r7, #0]
 8009070:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009072:	2301      	movs	r3, #1
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2200      	movs	r2, #0
 8009082:	6939      	ldr	r1, [r7, #16]
 8009084:	6978      	ldr	r0, [r7, #20]
 8009086:	f7ff fee1 	bl	8008e4c <xQueueGenericCreateStatic>
 800908a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff ffb8 	bl	8009002 <prvInitialiseMutex>

		return xNewQueue;
 8009092:	68fb      	ldr	r3, [r7, #12]
	}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800909c:	b590      	push	{r4, r7, lr}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10b      	bne.n	80090c6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	60fb      	str	r3, [r7, #12]
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	e7fd      	b.n	80090c2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	689c      	ldr	r4, [r3, #8]
 80090ca:	f001 fe73 	bl	800adb4 <xTaskGetCurrentTaskHandle>
 80090ce:	4603      	mov	r3, r0
 80090d0:	429c      	cmp	r4, r3
 80090d2:	d111      	bne.n	80090f8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80090e6:	2300      	movs	r3, #0
 80090e8:	2200      	movs	r2, #0
 80090ea:	2100      	movs	r1, #0
 80090ec:	6938      	ldr	r0, [r7, #16]
 80090ee:	f000 f8af 	bl	8009250 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80090f2:	2301      	movs	r3, #1
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	e001      	b.n	80090fc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80090fc:	697b      	ldr	r3, [r7, #20]
	}
 80090fe:	4618      	mov	r0, r3
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	bd90      	pop	{r4, r7, pc}

08009106 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009106:	b590      	push	{r4, r7, lr}
 8009108:	b087      	sub	sp, #28
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	60fb      	str	r3, [r7, #12]
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	e7fd      	b.n	800912e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	689c      	ldr	r4, [r3, #8]
 8009136:	f001 fe3d 	bl	800adb4 <xTaskGetCurrentTaskHandle>
 800913a:	4603      	mov	r3, r0
 800913c:	429c      	cmp	r4, r3
 800913e:	d107      	bne.n	8009150 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800914a:	2301      	movs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	e00c      	b.n	800916a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6938      	ldr	r0, [r7, #16]
 8009154:	f000 fb8e 	bl	8009874 <xQueueSemaphoreTake>
 8009158:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d004      	beq.n	800916a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800916a:	697b      	ldr	r3, [r7, #20]
	}
 800916c:	4618      	mov	r0, r3
 800916e:	371c      	adds	r7, #28
 8009170:	46bd      	mov	sp, r7
 8009172:	bd90      	pop	{r4, r7, pc}

08009174 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08a      	sub	sp, #40	@ 0x28
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	61bb      	str	r3, [r7, #24]
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d90b      	bls.n	80091be <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	617b      	str	r3, [r7, #20]
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
 80091bc:	e7fd      	b.n	80091ba <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80091be:	2302      	movs	r3, #2
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	2100      	movs	r1, #0
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7ff fe3f 	bl	8008e4c <xQueueGenericCreateStatic>
 80091ce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80091dc:	69fb      	ldr	r3, [r7, #28]
	}
 80091de:	4618      	mov	r0, r3
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10b      	bne.n	800920e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	613b      	str	r3, [r7, #16]
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	e7fd      	b.n	800920a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	429a      	cmp	r2, r3
 8009214:	d90b      	bls.n	800922e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	60fb      	str	r3, [r7, #12]
}
 8009228:	bf00      	nop
 800922a:	bf00      	nop
 800922c:	e7fd      	b.n	800922a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800922e:	2202      	movs	r2, #2
 8009230:	2100      	movs	r1, #0
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fe87 	bl	8008f46 <xQueueGenericCreate>
 8009238:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009246:	697b      	ldr	r3, [r7, #20]
	}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08e      	sub	sp, #56	@ 0x38
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800925e:	2300      	movs	r3, #0
 8009260:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10b      	bne.n	8009284 <xQueueGenericSend+0x34>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800927e:	bf00      	nop
 8009280:	bf00      	nop
 8009282:	e7fd      	b.n	8009280 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d103      	bne.n	8009292 <xQueueGenericSend+0x42>
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <xQueueGenericSend+0x46>
 8009292:	2301      	movs	r3, #1
 8009294:	e000      	b.n	8009298 <xQueueGenericSend+0x48>
 8009296:	2300      	movs	r3, #0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10b      	bne.n	80092b4 <xQueueGenericSend+0x64>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d103      	bne.n	80092c2 <xQueueGenericSend+0x72>
 80092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <xQueueGenericSend+0x76>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e000      	b.n	80092c8 <xQueueGenericSend+0x78>
 80092c6:	2300      	movs	r3, #0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10b      	bne.n	80092e4 <xQueueGenericSend+0x94>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	623b      	str	r3, [r7, #32]
}
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	e7fd      	b.n	80092e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092e4:	f001 fd76 	bl	800add4 <xTaskGetSchedulerState>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <xQueueGenericSend+0xa4>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <xQueueGenericSend+0xa8>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e000      	b.n	80092fa <xQueueGenericSend+0xaa>
 80092f8:	2300      	movs	r3, #0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10b      	bne.n	8009316 <xQueueGenericSend+0xc6>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	61fb      	str	r3, [r7, #28]
}
 8009310:	bf00      	nop
 8009312:	bf00      	nop
 8009314:	e7fd      	b.n	8009312 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009316:	f002 fc27 	bl	800bb68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009322:	429a      	cmp	r2, r3
 8009324:	d302      	bcc.n	800932c <xQueueGenericSend+0xdc>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d129      	bne.n	8009380 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009332:	f000 fcab 	bl	8009c8c <prvCopyDataToQueue>
 8009336:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933c:	2b00      	cmp	r3, #0
 800933e:	d010      	beq.n	8009362 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009342:	3324      	adds	r3, #36	@ 0x24
 8009344:	4618      	mov	r0, r3
 8009346:	f001 fb6f 	bl	800aa28 <xTaskRemoveFromEventList>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d013      	beq.n	8009378 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009350:	4b3f      	ldr	r3, [pc, #252]	@ (8009450 <xQueueGenericSend+0x200>)
 8009352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	e00a      	b.n	8009378 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d007      	beq.n	8009378 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009368:	4b39      	ldr	r3, [pc, #228]	@ (8009450 <xQueueGenericSend+0x200>)
 800936a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009378:	f002 fc28 	bl	800bbcc <vPortExitCritical>
				return pdPASS;
 800937c:	2301      	movs	r3, #1
 800937e:	e063      	b.n	8009448 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d103      	bne.n	800938e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009386:	f002 fc21 	bl	800bbcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800938a:	2300      	movs	r3, #0
 800938c:	e05c      	b.n	8009448 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800938e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009390:	2b00      	cmp	r3, #0
 8009392:	d106      	bne.n	80093a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009394:	f107 0314 	add.w	r3, r7, #20
 8009398:	4618      	mov	r0, r3
 800939a:	f001 fba9 	bl	800aaf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800939e:	2301      	movs	r3, #1
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093a2:	f002 fc13 	bl	800bbcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093a6:	f001 f8e5 	bl	800a574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093aa:	f002 fbdd 	bl	800bb68 <vPortEnterCritical>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d103      	bne.n	80093c4 <xQueueGenericSend+0x174>
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093ca:	b25b      	sxtb	r3, r3
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d0:	d103      	bne.n	80093da <xQueueGenericSend+0x18a>
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093da:	f002 fbf7 	bl	800bbcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093de:	1d3a      	adds	r2, r7, #4
 80093e0:	f107 0314 	add.w	r3, r7, #20
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 fb98 	bl	800ab1c <xTaskCheckForTimeOut>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d124      	bne.n	800943c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093f4:	f000 fd42 	bl	8009e7c <prvIsQueueFull>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d018      	beq.n	8009430 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	3310      	adds	r3, #16
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f001 fabc 	bl	800a984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800940c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800940e:	f000 fccd 	bl	8009dac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009412:	f001 f8bd 	bl	800a590 <xTaskResumeAll>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	f47f af7c 	bne.w	8009316 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800941e:	4b0c      	ldr	r3, [pc, #48]	@ (8009450 <xQueueGenericSend+0x200>)
 8009420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	e772      	b.n	8009316 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009432:	f000 fcbb 	bl	8009dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009436:	f001 f8ab 	bl	800a590 <xTaskResumeAll>
 800943a:	e76c      	b.n	8009316 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800943c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800943e:	f000 fcb5 	bl	8009dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009442:	f001 f8a5 	bl	800a590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009448:	4618      	mov	r0, r3
 800944a:	3738      	adds	r7, #56	@ 0x38
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	e000ed04 	.word	0xe000ed04

08009454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b090      	sub	sp, #64	@ 0x40
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10b      	bne.n	8009484 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800947e:	bf00      	nop
 8009480:	bf00      	nop
 8009482:	e7fd      	b.n	8009480 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d103      	bne.n	8009492 <xQueueGenericSendFromISR+0x3e>
 800948a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <xQueueGenericSendFromISR+0x42>
 8009492:	2301      	movs	r3, #1
 8009494:	e000      	b.n	8009498 <xQueueGenericSendFromISR+0x44>
 8009496:	2300      	movs	r3, #0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10b      	bne.n	80094b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094ae:	bf00      	nop
 80094b0:	bf00      	nop
 80094b2:	e7fd      	b.n	80094b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d103      	bne.n	80094c2 <xQueueGenericSendFromISR+0x6e>
 80094ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d101      	bne.n	80094c6 <xQueueGenericSendFromISR+0x72>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e000      	b.n	80094c8 <xQueueGenericSendFromISR+0x74>
 80094c6:	2300      	movs	r3, #0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10b      	bne.n	80094e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	623b      	str	r3, [r7, #32]
}
 80094de:	bf00      	nop
 80094e0:	bf00      	nop
 80094e2:	e7fd      	b.n	80094e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094e4:	f002 fc20 	bl	800bd28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094e8:	f3ef 8211 	mrs	r2, BASEPRI
 80094ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	61fa      	str	r2, [r7, #28]
 80094fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009500:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009502:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950c:	429a      	cmp	r2, r3
 800950e:	d302      	bcc.n	8009516 <xQueueGenericSendFromISR+0xc2>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d12f      	bne.n	8009576 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800951c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009524:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800952c:	f000 fbae 	bl	8009c8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009530:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d112      	bne.n	8009560 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800953a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953e:	2b00      	cmp	r3, #0
 8009540:	d016      	beq.n	8009570 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009544:	3324      	adds	r3, #36	@ 0x24
 8009546:	4618      	mov	r0, r3
 8009548:	f001 fa6e 	bl	800aa28 <xTaskRemoveFromEventList>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00e      	beq.n	8009570 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e007      	b.n	8009570 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009560:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009564:	3301      	adds	r3, #1
 8009566:	b2db      	uxtb	r3, r3
 8009568:	b25a      	sxtb	r2, r3
 800956a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009570:	2301      	movs	r3, #1
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009574:	e001      	b.n	800957a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009576:	2300      	movs	r3, #0
 8009578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800957a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009584:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009588:	4618      	mov	r0, r3
 800958a:	3740      	adds	r7, #64	@ 0x40
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08e      	sub	sp, #56	@ 0x38
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10b      	bne.n	80095bc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	623b      	str	r3, [r7, #32]
}
 80095b6:	bf00      	nop
 80095b8:	bf00      	nop
 80095ba:	e7fd      	b.n	80095b8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	61fb      	str	r3, [r7, #28]
}
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
 80095da:	e7fd      	b.n	80095d8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d103      	bne.n	80095ec <xQueueGiveFromISR+0x5c>
 80095e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <xQueueGiveFromISR+0x60>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e000      	b.n	80095f2 <xQueueGiveFromISR+0x62>
 80095f0:	2300      	movs	r3, #0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10b      	bne.n	800960e <xQueueGiveFromISR+0x7e>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	61bb      	str	r3, [r7, #24]
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800960e:	f002 fb8b 	bl	800bd28 <vPortValidateInterruptPriority>
	__asm volatile
 8009612:	f3ef 8211 	mrs	r2, BASEPRI
 8009616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	617a      	str	r2, [r7, #20]
 8009628:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800962a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800962c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009632:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800963a:	429a      	cmp	r2, r3
 800963c:	d22b      	bcs.n	8009696 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009650:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009658:	d112      	bne.n	8009680 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800965a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	d016      	beq.n	8009690 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009664:	3324      	adds	r3, #36	@ 0x24
 8009666:	4618      	mov	r0, r3
 8009668:	f001 f9de 	bl	800aa28 <xTaskRemoveFromEventList>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00e      	beq.n	8009690 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00b      	beq.n	8009690 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2201      	movs	r2, #1
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e007      	b.n	8009690 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009684:	3301      	adds	r3, #1
 8009686:	b2db      	uxtb	r3, r3
 8009688:	b25a      	sxtb	r2, r3
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009690:	2301      	movs	r3, #1
 8009692:	637b      	str	r3, [r7, #52]	@ 0x34
 8009694:	e001      	b.n	800969a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009696:	2300      	movs	r3, #0
 8009698:	637b      	str	r3, [r7, #52]	@ 0x34
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f383 8811 	msr	BASEPRI, r3
}
 80096a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3738      	adds	r7, #56	@ 0x38
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08c      	sub	sp, #48	@ 0x30
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096bc:	2300      	movs	r3, #0
 80096be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10b      	bne.n	80096e2 <xQueueReceive+0x32>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	623b      	str	r3, [r7, #32]
}
 80096dc:	bf00      	nop
 80096de:	bf00      	nop
 80096e0:	e7fd      	b.n	80096de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d103      	bne.n	80096f0 <xQueueReceive+0x40>
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <xQueueReceive+0x44>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e000      	b.n	80096f6 <xQueueReceive+0x46>
 80096f4:	2300      	movs	r3, #0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <xQueueReceive+0x62>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	61fb      	str	r3, [r7, #28]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009712:	f001 fb5f 	bl	800add4 <xTaskGetSchedulerState>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d102      	bne.n	8009722 <xQueueReceive+0x72>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <xQueueReceive+0x76>
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <xQueueReceive+0x78>
 8009726:	2300      	movs	r3, #0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10b      	bne.n	8009744 <xQueueReceive+0x94>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	61bb      	str	r3, [r7, #24]
}
 800973e:	bf00      	nop
 8009740:	bf00      	nop
 8009742:	e7fd      	b.n	8009740 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009744:	f002 fa10 	bl	800bb68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01f      	beq.n	8009794 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009754:	68b9      	ldr	r1, [r7, #8]
 8009756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009758:	f000 fb02 	bl	8009d60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	1e5a      	subs	r2, r3, #1
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00f      	beq.n	800978c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	3310      	adds	r3, #16
 8009770:	4618      	mov	r0, r3
 8009772:	f001 f959 	bl	800aa28 <xTaskRemoveFromEventList>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800977c:	4b3c      	ldr	r3, [pc, #240]	@ (8009870 <xQueueReceive+0x1c0>)
 800977e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800978c:	f002 fa1e 	bl	800bbcc <vPortExitCritical>
				return pdPASS;
 8009790:	2301      	movs	r3, #1
 8009792:	e069      	b.n	8009868 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d103      	bne.n	80097a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800979a:	f002 fa17 	bl	800bbcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800979e:	2300      	movs	r3, #0
 80097a0:	e062      	b.n	8009868 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d106      	bne.n	80097b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097a8:	f107 0310 	add.w	r3, r7, #16
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 f99f 	bl	800aaf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097b2:	2301      	movs	r3, #1
 80097b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097b6:	f002 fa09 	bl	800bbcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097ba:	f000 fedb 	bl	800a574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097be:	f002 f9d3 	bl	800bb68 <vPortEnterCritical>
 80097c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097c8:	b25b      	sxtb	r3, r3
 80097ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ce:	d103      	bne.n	80097d8 <xQueueReceive+0x128>
 80097d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097de:	b25b      	sxtb	r3, r3
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e4:	d103      	bne.n	80097ee <xQueueReceive+0x13e>
 80097e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097ee:	f002 f9ed 	bl	800bbcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097f2:	1d3a      	adds	r2, r7, #4
 80097f4:	f107 0310 	add.w	r3, r7, #16
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f001 f98e 	bl	800ab1c <xTaskCheckForTimeOut>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d123      	bne.n	800984e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009808:	f000 fb22 	bl	8009e50 <prvIsQueueEmpty>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d017      	beq.n	8009842 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009814:	3324      	adds	r3, #36	@ 0x24
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f001 f8b2 	bl	800a984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009820:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009822:	f000 fac3 	bl	8009dac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009826:	f000 feb3 	bl	800a590 <xTaskResumeAll>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d189      	bne.n	8009744 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009830:	4b0f      	ldr	r3, [pc, #60]	@ (8009870 <xQueueReceive+0x1c0>)
 8009832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	e780      	b.n	8009744 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009844:	f000 fab2 	bl	8009dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009848:	f000 fea2 	bl	800a590 <xTaskResumeAll>
 800984c:	e77a      	b.n	8009744 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800984e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009850:	f000 faac 	bl	8009dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009854:	f000 fe9c 	bl	800a590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800985a:	f000 faf9 	bl	8009e50 <prvIsQueueEmpty>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	f43f af6f 	beq.w	8009744 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009866:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009868:	4618      	mov	r0, r3
 800986a:	3730      	adds	r7, #48	@ 0x30
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08e      	sub	sp, #56	@ 0x38
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009886:	2300      	movs	r3, #0
 8009888:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800988a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	623b      	str	r3, [r7, #32]
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00b      	beq.n	80098c8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	61fb      	str	r3, [r7, #28]
}
 80098c2:	bf00      	nop
 80098c4:	bf00      	nop
 80098c6:	e7fd      	b.n	80098c4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098c8:	f001 fa84 	bl	800add4 <xTaskGetSchedulerState>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d102      	bne.n	80098d8 <xQueueSemaphoreTake+0x64>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <xQueueSemaphoreTake+0x68>
 80098d8:	2301      	movs	r3, #1
 80098da:	e000      	b.n	80098de <xQueueSemaphoreTake+0x6a>
 80098dc:	2300      	movs	r3, #0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10b      	bne.n	80098fa <xQueueSemaphoreTake+0x86>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	61bb      	str	r3, [r7, #24]
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	e7fd      	b.n	80098f6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098fa:	f002 f935 	bl	800bb68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80098fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009902:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009906:	2b00      	cmp	r3, #0
 8009908:	d024      	beq.n	8009954 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800990a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990c:	1e5a      	subs	r2, r3, #1
 800990e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009910:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d104      	bne.n	8009924 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800991a:	f001 fbd5 	bl	800b0c8 <pvTaskIncrementMutexHeldCount>
 800991e:	4602      	mov	r2, r0
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00f      	beq.n	800994c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	3310      	adds	r3, #16
 8009930:	4618      	mov	r0, r3
 8009932:	f001 f879 	bl	800aa28 <xTaskRemoveFromEventList>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d007      	beq.n	800994c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800993c:	4b54      	ldr	r3, [pc, #336]	@ (8009a90 <xQueueSemaphoreTake+0x21c>)
 800993e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800994c:	f002 f93e 	bl	800bbcc <vPortExitCritical>
				return pdPASS;
 8009950:	2301      	movs	r3, #1
 8009952:	e098      	b.n	8009a86 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d112      	bne.n	8009980 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	617b      	str	r3, [r7, #20]
}
 8009972:	bf00      	nop
 8009974:	bf00      	nop
 8009976:	e7fd      	b.n	8009974 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009978:	f002 f928 	bl	800bbcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800997c:	2300      	movs	r3, #0
 800997e:	e082      	b.n	8009a86 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009986:	f107 030c 	add.w	r3, r7, #12
 800998a:	4618      	mov	r0, r3
 800998c:	f001 f8b0 	bl	800aaf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009990:	2301      	movs	r3, #1
 8009992:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009994:	f002 f91a 	bl	800bbcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009998:	f000 fdec 	bl	800a574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800999c:	f002 f8e4 	bl	800bb68 <vPortEnterCritical>
 80099a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099a6:	b25b      	sxtb	r3, r3
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ac:	d103      	bne.n	80099b6 <xQueueSemaphoreTake+0x142>
 80099ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099bc:	b25b      	sxtb	r3, r3
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d103      	bne.n	80099cc <xQueueSemaphoreTake+0x158>
 80099c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099cc:	f002 f8fe 	bl	800bbcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099d0:	463a      	mov	r2, r7
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 f89f 	bl	800ab1c <xTaskCheckForTimeOut>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d132      	bne.n	8009a4a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099e6:	f000 fa33 	bl	8009e50 <prvIsQueueEmpty>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d026      	beq.n	8009a3e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80099f8:	f002 f8b6 	bl	800bb68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f001 fa05 	bl	800ae10 <xTaskPriorityInherit>
 8009a06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009a08:	f002 f8e0 	bl	800bbcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	3324      	adds	r3, #36	@ 0x24
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 ffb5 	bl	800a984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a1c:	f000 f9c6 	bl	8009dac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a20:	f000 fdb6 	bl	800a590 <xTaskResumeAll>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f47f af67 	bne.w	80098fa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009a2c:	4b18      	ldr	r3, [pc, #96]	@ (8009a90 <xQueueSemaphoreTake+0x21c>)
 8009a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	e75d      	b.n	80098fa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a40:	f000 f9b4 	bl	8009dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a44:	f000 fda4 	bl	800a590 <xTaskResumeAll>
 8009a48:	e757      	b.n	80098fa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a4c:	f000 f9ae 	bl	8009dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a50:	f000 fd9e 	bl	800a590 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a56:	f000 f9fb 	bl	8009e50 <prvIsQueueEmpty>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f43f af4c 	beq.w	80098fa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00d      	beq.n	8009a84 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009a68:	f002 f87e 	bl	800bb68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a6e:	f000 f8f5 	bl	8009c5c <prvGetDisinheritPriorityAfterTimeout>
 8009a72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 faa0 	bl	800afc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a80:	f002 f8a4 	bl	800bbcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3738      	adds	r7, #56	@ 0x38
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08e      	sub	sp, #56	@ 0x38
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10b      	bne.n	8009ac2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	623b      	str	r3, [r7, #32]
}
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	e7fd      	b.n	8009abe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d103      	bne.n	8009ad0 <xQueueReceiveFromISR+0x3c>
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <xQueueReceiveFromISR+0x40>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e000      	b.n	8009ad6 <xQueueReceiveFromISR+0x42>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10b      	bne.n	8009af2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	61fb      	str	r3, [r7, #28]
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	e7fd      	b.n	8009aee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009af2:	f002 f919 	bl	800bd28 <vPortValidateInterruptPriority>
	__asm volatile
 8009af6:	f3ef 8211 	mrs	r2, BASEPRI
 8009afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	61ba      	str	r2, [r7, #24]
 8009b0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d02f      	beq.n	8009b7e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b2c:	f000 f918 	bl	8009d60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	1e5a      	subs	r2, r3, #1
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b40:	d112      	bne.n	8009b68 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d016      	beq.n	8009b78 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	3310      	adds	r3, #16
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 ff6a 	bl	800aa28 <xTaskRemoveFromEventList>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00e      	beq.n	8009b78 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e007      	b.n	8009b78 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	b25a      	sxtb	r2, r3
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7c:	e001      	b.n	8009b82 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f383 8811 	msr	BASEPRI, r3
}
 8009b8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3738      	adds	r7, #56	@ 0x38
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	60bb      	str	r3, [r7, #8]
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	e7fd      	b.n	8009bba <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009bbe:	f001 ffd3 	bl	800bb68 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009bc8:	f002 f800 	bl	800bbcc <vPortExitCritical>

	return uxReturn;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b087      	sub	sp, #28
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10b      	bne.n	8009c00 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	60fb      	str	r3, [r7, #12]
}
 8009bfa:	bf00      	nop
 8009bfc:	bf00      	nop
 8009bfe:	e7fd      	b.n	8009bfc <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c04:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009c06:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009c08:	4618      	mov	r0, r3
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10b      	bne.n	8009c3e <vQueueDelete+0x2a>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	60bb      	str	r3, [r7, #8]
}
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	e7fd      	b.n	8009c3a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 f95e 	bl	8009f00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f002 f97a 	bl	800bf48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d006      	beq.n	8009c7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	e001      	b.n	8009c7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
	}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10d      	bne.n	8009cc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d14d      	bne.n	8009d4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f001 f912 	bl	800aee0 <xTaskPriorityDisinherit>
 8009cbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	609a      	str	r2, [r3, #8]
 8009cc4:	e043      	b.n	8009d4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d119      	bne.n	8009d00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6858      	ldr	r0, [r3, #4]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	68b9      	ldr	r1, [r7, #8]
 8009cd8:	f014 ff3f 	bl	801eb5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce4:	441a      	add	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d32b      	bcc.n	8009d4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	605a      	str	r2, [r3, #4]
 8009cfe:	e026      	b.n	8009d4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68d8      	ldr	r0, [r3, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d08:	461a      	mov	r2, r3
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	f014 ff25 	bl	801eb5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d18:	425b      	negs	r3, r3
 8009d1a:	441a      	add	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d207      	bcs.n	8009d3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d34:	425b      	negs	r3, r3
 8009d36:	441a      	add	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d105      	bne.n	8009d4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d56:	697b      	ldr	r3, [r7, #20]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d018      	beq.n	8009da4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68da      	ldr	r2, [r3, #12]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d7a:	441a      	add	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68da      	ldr	r2, [r3, #12]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d303      	bcc.n	8009d94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68d9      	ldr	r1, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6838      	ldr	r0, [r7, #0]
 8009da0:	f014 fedb 	bl	801eb5a <memcpy>
	}
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009db4:	f001 fed8 	bl	800bb68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dc0:	e011      	b.n	8009de6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d012      	beq.n	8009df0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3324      	adds	r3, #36	@ 0x24
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fe2a 	bl	800aa28 <xTaskRemoveFromEventList>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009dda:	f000 ff03 	bl	800abe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	3b01      	subs	r3, #1
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dce9      	bgt.n	8009dc2 <prvUnlockQueue+0x16>
 8009dee:	e000      	b.n	8009df2 <prvUnlockQueue+0x46>
					break;
 8009df0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	22ff      	movs	r2, #255	@ 0xff
 8009df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009dfa:	f001 fee7 	bl	800bbcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009dfe:	f001 feb3 	bl	800bb68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e0a:	e011      	b.n	8009e30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d012      	beq.n	8009e3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3310      	adds	r3, #16
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fe05 	bl	800aa28 <xTaskRemoveFromEventList>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e24:	f000 fede 	bl	800abe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dce9      	bgt.n	8009e0c <prvUnlockQueue+0x60>
 8009e38:	e000      	b.n	8009e3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	22ff      	movs	r2, #255	@ 0xff
 8009e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e44:	f001 fec2 	bl	800bbcc <vPortExitCritical>
}
 8009e48:	bf00      	nop
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e58:	f001 fe86 	bl	800bb68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d102      	bne.n	8009e6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e64:	2301      	movs	r3, #1
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	e001      	b.n	8009e6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e6e:	f001 fead 	bl	800bbcc <vPortExitCritical>

	return xReturn;
 8009e72:	68fb      	ldr	r3, [r7, #12]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e84:	f001 fe70 	bl	800bb68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d102      	bne.n	8009e9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	e001      	b.n	8009e9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e9e:	f001 fe95 	bl	800bbcc <vPortExitCritical>

	return xReturn;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	e014      	b.n	8009ee6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8009efc <vQueueAddToRegistry+0x50>)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10b      	bne.n	8009ee0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ec8:	490c      	ldr	r1, [pc, #48]	@ (8009efc <vQueueAddToRegistry+0x50>)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8009efc <vQueueAddToRegistry+0x50>)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	4413      	add	r3, r2
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ede:	e006      	b.n	8009eee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b07      	cmp	r3, #7
 8009eea:	d9e7      	bls.n	8009ebc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009eec:	bf00      	nop
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	200071cc 	.word	0x200071cc

08009f00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e016      	b.n	8009f3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009f0e:	4a10      	ldr	r2, [pc, #64]	@ (8009f50 <vQueueUnregisterQueue+0x50>)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	4413      	add	r3, r2
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d10b      	bne.n	8009f36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8009f50 <vQueueUnregisterQueue+0x50>)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2100      	movs	r1, #0
 8009f24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009f28:	4a09      	ldr	r2, [pc, #36]	@ (8009f50 <vQueueUnregisterQueue+0x50>)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	4413      	add	r3, r2
 8009f30:	2200      	movs	r2, #0
 8009f32:	605a      	str	r2, [r3, #4]
				break;
 8009f34:	e006      	b.n	8009f44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b07      	cmp	r3, #7
 8009f40:	d9e5      	bls.n	8009f0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009f42:	bf00      	nop
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	200071cc 	.word	0x200071cc

08009f54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f64:	f001 fe00 	bl	800bb68 <vPortEnterCritical>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f6e:	b25b      	sxtb	r3, r3
 8009f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f74:	d103      	bne.n	8009f7e <vQueueWaitForMessageRestricted+0x2a>
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f84:	b25b      	sxtb	r3, r3
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8a:	d103      	bne.n	8009f94 <vQueueWaitForMessageRestricted+0x40>
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f94:	f001 fe1a 	bl	800bbcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d106      	bne.n	8009fae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	3324      	adds	r3, #36	@ 0x24
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f000 fd11 	bl	800a9d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009fae:	6978      	ldr	r0, [r7, #20]
 8009fb0:	f7ff fefc 	bl	8009dac <prvUnlockQueue>
	}
 8009fb4:	bf00      	nop
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	@ 0x38
 8009fc0:	af04      	add	r7, sp, #16
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10b      	bne.n	8009fe8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	623b      	str	r3, [r7, #32]
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	e7fd      	b.n	8009fe4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10b      	bne.n	800a006 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	61fb      	str	r3, [r7, #28]
}
 800a000:	bf00      	nop
 800a002:	bf00      	nop
 800a004:	e7fd      	b.n	800a002 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a006:	23ac      	movs	r3, #172	@ 0xac
 800a008:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2bac      	cmp	r3, #172	@ 0xac
 800a00e:	d00b      	beq.n	800a028 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	61bb      	str	r3, [r7, #24]
}
 800a022:	bf00      	nop
 800a024:	bf00      	nop
 800a026:	e7fd      	b.n	800a024 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a028:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01e      	beq.n	800a06e <xTaskCreateStatic+0xb2>
 800a030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01b      	beq.n	800a06e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a038:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a03e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	2202      	movs	r2, #2
 800a044:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a048:	2300      	movs	r3, #0
 800a04a:	9303      	str	r3, [sp, #12]
 800a04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04e:	9302      	str	r3, [sp, #8]
 800a050:	f107 0314 	add.w	r3, r7, #20
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	68b9      	ldr	r1, [r7, #8]
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 f851 	bl	800a108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a066:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a068:	f000 f8f8 	bl	800a25c <prvAddNewTaskToReadyList>
 800a06c:	e001      	b.n	800a072 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a072:	697b      	ldr	r3, [r7, #20]
	}
 800a074:	4618      	mov	r0, r3
 800a076:	3728      	adds	r7, #40	@ 0x28
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08c      	sub	sp, #48	@ 0x30
 800a080:	af04      	add	r7, sp, #16
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	4613      	mov	r3, r2
 800a08a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a08c:	88fb      	ldrh	r3, [r7, #6]
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4618      	mov	r0, r3
 800a092:	f001 fe8b 	bl	800bdac <pvPortMalloc>
 800a096:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00e      	beq.n	800a0bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a09e:	20ac      	movs	r0, #172	@ 0xac
 800a0a0:	f001 fe84 	bl	800bdac <pvPortMalloc>
 800a0a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d003      	beq.n	800a0b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800a0b2:	e005      	b.n	800a0c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0b4:	6978      	ldr	r0, [r7, #20]
 800a0b6:	f001 ff47 	bl	800bf48 <vPortFree>
 800a0ba:	e001      	b.n	800a0c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d017      	beq.n	800a0f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0ce:	88fa      	ldrh	r2, [r7, #6]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	9303      	str	r3, [sp, #12]
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	9302      	str	r3, [sp, #8]
 800a0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 f80f 	bl	800a108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0ea:	69f8      	ldr	r0, [r7, #28]
 800a0ec:	f000 f8b6 	bl	800a25c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	61bb      	str	r3, [r7, #24]
 800a0f4:	e002      	b.n	800a0fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0fc:	69bb      	ldr	r3, [r7, #24]
	}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3720      	adds	r7, #32
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	461a      	mov	r2, r3
 800a120:	21a5      	movs	r1, #165	@ 0xa5
 800a122:	f014 fc18 	bl	801e956 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a130:	3b01      	subs	r3, #1
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f023 0307 	bic.w	r3, r3, #7
 800a13e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00b      	beq.n	800a162 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	617b      	str	r3, [r7, #20]
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	e7fd      	b.n	800a15e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01f      	beq.n	800a1a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a168:	2300      	movs	r3, #0
 800a16a:	61fb      	str	r3, [r7, #28]
 800a16c:	e012      	b.n	800a194 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	4413      	add	r3, r2
 800a174:	7819      	ldrb	r1, [r3, #0]
 800a176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	4413      	add	r3, r2
 800a17c:	3334      	adds	r3, #52	@ 0x34
 800a17e:	460a      	mov	r2, r1
 800a180:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	4413      	add	r3, r2
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d006      	beq.n	800a19c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	3301      	adds	r3, #1
 800a192:	61fb      	str	r3, [r7, #28]
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	2b0f      	cmp	r3, #15
 800a198:	d9e9      	bls.n	800a16e <prvInitialiseNewTask+0x66>
 800a19a:	e000      	b.n	800a19e <prvInitialiseNewTask+0x96>
			{
				break;
 800a19c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a1a6:	e003      	b.n	800a1b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b2:	2b37      	cmp	r3, #55	@ 0x37
 800a1b4:	d901      	bls.n	800a1ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1b6:	2337      	movs	r3, #55	@ 0x37
 800a1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe fd3d 	bl	8008c50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	3318      	adds	r3, #24
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe fd38 	bl	8008c50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a206:	2200      	movs	r2, #0
 800a208:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20e:	3358      	adds	r3, #88	@ 0x58
 800a210:	224c      	movs	r2, #76	@ 0x4c
 800a212:	2100      	movs	r1, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f014 fb9e 	bl	801e956 <memset>
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	4a0c      	ldr	r2, [pc, #48]	@ (800a250 <prvInitialiseNewTask+0x148>)
 800a21e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a222:	4a0c      	ldr	r2, [pc, #48]	@ (800a254 <prvInitialiseNewTask+0x14c>)
 800a224:	661a      	str	r2, [r3, #96]	@ 0x60
 800a226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a228:	4a0b      	ldr	r2, [pc, #44]	@ (800a258 <prvInitialiseNewTask+0x150>)
 800a22a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	68f9      	ldr	r1, [r7, #12]
 800a230:	69b8      	ldr	r0, [r7, #24]
 800a232:	f001 fb6b 	bl	800b90c <pxPortInitialiseStack>
 800a236:	4602      	mov	r2, r0
 800a238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a246:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a248:	bf00      	nop
 800a24a:	3720      	adds	r7, #32
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	2000f624 	.word	0x2000f624
 800a254:	2000f68c 	.word	0x2000f68c
 800a258:	2000f6f4 	.word	0x2000f6f4

0800a25c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a264:	f001 fc80 	bl	800bb68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a268:	4b2d      	ldr	r3, [pc, #180]	@ (800a320 <prvAddNewTaskToReadyList+0xc4>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3301      	adds	r3, #1
 800a26e:	4a2c      	ldr	r2, [pc, #176]	@ (800a320 <prvAddNewTaskToReadyList+0xc4>)
 800a270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a272:	4b2c      	ldr	r3, [pc, #176]	@ (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d109      	bne.n	800a28e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a27a:	4a2a      	ldr	r2, [pc, #168]	@ (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a280:	4b27      	ldr	r3, [pc, #156]	@ (800a320 <prvAddNewTaskToReadyList+0xc4>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d110      	bne.n	800a2aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a288:	f000 fcd0 	bl	800ac2c <prvInitialiseTaskLists>
 800a28c:	e00d      	b.n	800a2aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a28e:	4b26      	ldr	r3, [pc, #152]	@ (800a328 <prvAddNewTaskToReadyList+0xcc>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d109      	bne.n	800a2aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a296:	4b23      	ldr	r3, [pc, #140]	@ (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d802      	bhi.n	800a2aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a2a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a2aa:	4b20      	ldr	r3, [pc, #128]	@ (800a32c <prvAddNewTaskToReadyList+0xd0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a32c <prvAddNewTaskToReadyList+0xd0>)
 800a2b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a32c <prvAddNewTaskToReadyList+0xd0>)
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a330 <prvAddNewTaskToReadyList+0xd4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d903      	bls.n	800a2d0 <prvAddNewTaskToReadyList+0x74>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2cc:	4a18      	ldr	r2, [pc, #96]	@ (800a330 <prvAddNewTaskToReadyList+0xd4>)
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4a15      	ldr	r2, [pc, #84]	@ (800a334 <prvAddNewTaskToReadyList+0xd8>)
 800a2de:	441a      	add	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f7fe fcbf 	bl	8008c6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2ec:	f001 fc6e 	bl	800bbcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <prvAddNewTaskToReadyList+0xcc>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00e      	beq.n	800a316 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a324 <prvAddNewTaskToReadyList+0xc8>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a302:	429a      	cmp	r2, r3
 800a304:	d207      	bcs.n	800a316 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a306:	4b0c      	ldr	r3, [pc, #48]	@ (800a338 <prvAddNewTaskToReadyList+0xdc>)
 800a308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a30c:	601a      	str	r2, [r3, #0]
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	200076e0 	.word	0x200076e0
 800a324:	2000720c 	.word	0x2000720c
 800a328:	200076ec 	.word	0x200076ec
 800a32c:	200076fc 	.word	0x200076fc
 800a330:	200076e8 	.word	0x200076e8
 800a334:	20007210 	.word	0x20007210
 800a338:	e000ed04 	.word	0xe000ed04

0800a33c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a344:	f001 fc10 	bl	800bb68 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <vTaskDelete+0x18>
 800a34e:	4b2d      	ldr	r3, [pc, #180]	@ (800a404 <vTaskDelete+0xc8>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	e000      	b.n	800a356 <vTaskDelete+0x1a>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fe fce1 	bl	8008d24 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a366:	2b00      	cmp	r3, #0
 800a368:	d004      	beq.n	800a374 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3318      	adds	r3, #24
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe fcd8 	bl	8008d24 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a374:	4b24      	ldr	r3, [pc, #144]	@ (800a408 <vTaskDelete+0xcc>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3301      	adds	r3, #1
 800a37a:	4a23      	ldr	r2, [pc, #140]	@ (800a408 <vTaskDelete+0xcc>)
 800a37c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a37e:	4b21      	ldr	r3, [pc, #132]	@ (800a404 <vTaskDelete+0xc8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	429a      	cmp	r2, r3
 800a386:	d10b      	bne.n	800a3a0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3304      	adds	r3, #4
 800a38c:	4619      	mov	r1, r3
 800a38e:	481f      	ldr	r0, [pc, #124]	@ (800a40c <vTaskDelete+0xd0>)
 800a390:	f7fe fc6b 	bl	8008c6a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a394:	4b1e      	ldr	r3, [pc, #120]	@ (800a410 <vTaskDelete+0xd4>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3301      	adds	r3, #1
 800a39a:	4a1d      	ldr	r2, [pc, #116]	@ (800a410 <vTaskDelete+0xd4>)
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	e009      	b.n	800a3b4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a3a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a414 <vTaskDelete+0xd8>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	4a1b      	ldr	r2, [pc, #108]	@ (800a414 <vTaskDelete+0xd8>)
 800a3a8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 fcac 	bl	800ad08 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a3b0:	f000 fce0 	bl	800ad74 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800a3b4:	f001 fc0a 	bl	800bbcc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a3b8:	4b17      	ldr	r3, [pc, #92]	@ (800a418 <vTaskDelete+0xdc>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01c      	beq.n	800a3fa <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800a3c0:	4b10      	ldr	r3, [pc, #64]	@ (800a404 <vTaskDelete+0xc8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d117      	bne.n	800a3fa <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a3ca:	4b14      	ldr	r3, [pc, #80]	@ (800a41c <vTaskDelete+0xe0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <vTaskDelete+0xae>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	60bb      	str	r3, [r7, #8]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a420 <vTaskDelete+0xe4>)
 800a3ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3fa:	bf00      	nop
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	2000720c 	.word	0x2000720c
 800a408:	200076fc 	.word	0x200076fc
 800a40c:	200076b4 	.word	0x200076b4
 800a410:	200076c8 	.word	0x200076c8
 800a414:	200076e0 	.word	0x200076e0
 800a418:	200076ec 	.word	0x200076ec
 800a41c:	20007708 	.word	0x20007708
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a42c:	2300      	movs	r3, #0
 800a42e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d018      	beq.n	800a468 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a436:	4b14      	ldr	r3, [pc, #80]	@ (800a488 <vTaskDelay+0x64>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <vTaskDelay+0x32>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	60bb      	str	r3, [r7, #8]
}
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	e7fd      	b.n	800a452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a456:	f000 f88d 	bl	800a574 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a45a:	2100      	movs	r1, #0
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fea7 	bl	800b1b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a462:	f000 f895 	bl	800a590 <xTaskResumeAll>
 800a466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d107      	bne.n	800a47e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a46e:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <vTaskDelay+0x68>)
 800a470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20007708 	.word	0x20007708
 800a48c:	e000ed04 	.word	0xe000ed04

0800a490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	@ 0x28
 800a494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a496:	2300      	movs	r3, #0
 800a498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a49e:	463a      	mov	r2, r7
 800a4a0:	1d39      	adds	r1, r7, #4
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe fb7e 	bl	8008ba8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	9202      	str	r2, [sp, #8]
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	460a      	mov	r2, r1
 800a4be:	4925      	ldr	r1, [pc, #148]	@ (800a554 <vTaskStartScheduler+0xc4>)
 800a4c0:	4825      	ldr	r0, [pc, #148]	@ (800a558 <vTaskStartScheduler+0xc8>)
 800a4c2:	f7ff fd7b 	bl	8009fbc <xTaskCreateStatic>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	4a24      	ldr	r2, [pc, #144]	@ (800a55c <vTaskStartScheduler+0xcc>)
 800a4ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a4cc:	4b23      	ldr	r3, [pc, #140]	@ (800a55c <vTaskStartScheduler+0xcc>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	e001      	b.n	800a4de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d102      	bne.n	800a4ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4e4:	f000 feb8 	bl	800b258 <xTimerCreateTimerTask>
 800a4e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d11d      	bne.n	800a52c <vTaskStartScheduler+0x9c>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	613b      	str	r3, [r7, #16]
}
 800a502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a504:	4b16      	ldr	r3, [pc, #88]	@ (800a560 <vTaskStartScheduler+0xd0>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3358      	adds	r3, #88	@ 0x58
 800a50a:	4a16      	ldr	r2, [pc, #88]	@ (800a564 <vTaskStartScheduler+0xd4>)
 800a50c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a50e:	4b16      	ldr	r3, [pc, #88]	@ (800a568 <vTaskStartScheduler+0xd8>)
 800a510:	f04f 32ff 	mov.w	r2, #4294967295
 800a514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a516:	4b15      	ldr	r3, [pc, #84]	@ (800a56c <vTaskStartScheduler+0xdc>)
 800a518:	2201      	movs	r2, #1
 800a51a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a51c:	4b14      	ldr	r3, [pc, #80]	@ (800a570 <vTaskStartScheduler+0xe0>)
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a522:	f7f7 f857 	bl	80015d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a526:	f001 fa7b 	bl	800ba20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a52a:	e00f      	b.n	800a54c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a532:	d10b      	bne.n	800a54c <vTaskStartScheduler+0xbc>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	60fb      	str	r3, [r7, #12]
}
 800a546:	bf00      	nop
 800a548:	bf00      	nop
 800a54a:	e7fd      	b.n	800a548 <vTaskStartScheduler+0xb8>
}
 800a54c:	bf00      	nop
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	080221c0 	.word	0x080221c0
 800a558:	0800abfd 	.word	0x0800abfd
 800a55c:	20007704 	.word	0x20007704
 800a560:	2000720c 	.word	0x2000720c
 800a564:	20000054 	.word	0x20000054
 800a568:	20007700 	.word	0x20007700
 800a56c:	200076ec 	.word	0x200076ec
 800a570:	200076e4 	.word	0x200076e4

0800a574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a578:	4b04      	ldr	r3, [pc, #16]	@ (800a58c <vTaskSuspendAll+0x18>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3301      	adds	r3, #1
 800a57e:	4a03      	ldr	r2, [pc, #12]	@ (800a58c <vTaskSuspendAll+0x18>)
 800a580:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a582:	bf00      	nop
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20007708 	.word	0x20007708

0800a590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a59e:	4b42      	ldr	r3, [pc, #264]	@ (800a6a8 <xTaskResumeAll+0x118>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <xTaskResumeAll+0x2e>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	603b      	str	r3, [r7, #0]
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	e7fd      	b.n	800a5ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5be:	f001 fad3 	bl	800bb68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5c2:	4b39      	ldr	r3, [pc, #228]	@ (800a6a8 <xTaskResumeAll+0x118>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	4a37      	ldr	r2, [pc, #220]	@ (800a6a8 <xTaskResumeAll+0x118>)
 800a5ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5cc:	4b36      	ldr	r3, [pc, #216]	@ (800a6a8 <xTaskResumeAll+0x118>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d162      	bne.n	800a69a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5d4:	4b35      	ldr	r3, [pc, #212]	@ (800a6ac <xTaskResumeAll+0x11c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d05e      	beq.n	800a69a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5dc:	e02f      	b.n	800a63e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5de:	4b34      	ldr	r3, [pc, #208]	@ (800a6b0 <xTaskResumeAll+0x120>)
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3318      	adds	r3, #24
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fb9a 	bl	8008d24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fe fb95 	bl	8008d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fe:	4b2d      	ldr	r3, [pc, #180]	@ (800a6b4 <xTaskResumeAll+0x124>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d903      	bls.n	800a60e <xTaskResumeAll+0x7e>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60a:	4a2a      	ldr	r2, [pc, #168]	@ (800a6b4 <xTaskResumeAll+0x124>)
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a612:	4613      	mov	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4a27      	ldr	r2, [pc, #156]	@ (800a6b8 <xTaskResumeAll+0x128>)
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3304      	adds	r3, #4
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7fe fb20 	bl	8008c6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62e:	4b23      	ldr	r3, [pc, #140]	@ (800a6bc <xTaskResumeAll+0x12c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a634:	429a      	cmp	r2, r3
 800a636:	d302      	bcc.n	800a63e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a638:	4b21      	ldr	r3, [pc, #132]	@ (800a6c0 <xTaskResumeAll+0x130>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a63e:	4b1c      	ldr	r3, [pc, #112]	@ (800a6b0 <xTaskResumeAll+0x120>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1cb      	bne.n	800a5de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a64c:	f000 fb92 	bl	800ad74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a650:	4b1c      	ldr	r3, [pc, #112]	@ (800a6c4 <xTaskResumeAll+0x134>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d010      	beq.n	800a67e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a65c:	f000 f858 	bl	800a710 <xTaskIncrementTick>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a666:	4b16      	ldr	r3, [pc, #88]	@ (800a6c0 <xTaskResumeAll+0x130>)
 800a668:	2201      	movs	r2, #1
 800a66a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3b01      	subs	r3, #1
 800a670:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1f1      	bne.n	800a65c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a678:	4b12      	ldr	r3, [pc, #72]	@ (800a6c4 <xTaskResumeAll+0x134>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a67e:	4b10      	ldr	r3, [pc, #64]	@ (800a6c0 <xTaskResumeAll+0x130>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a686:	2301      	movs	r3, #1
 800a688:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a68a:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c8 <xTaskResumeAll+0x138>)
 800a68c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a69a:	f001 fa97 	bl	800bbcc <vPortExitCritical>

	return xAlreadyYielded;
 800a69e:	68bb      	ldr	r3, [r7, #8]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20007708 	.word	0x20007708
 800a6ac:	200076e0 	.word	0x200076e0
 800a6b0:	200076a0 	.word	0x200076a0
 800a6b4:	200076e8 	.word	0x200076e8
 800a6b8:	20007210 	.word	0x20007210
 800a6bc:	2000720c 	.word	0x2000720c
 800a6c0:	200076f4 	.word	0x200076f4
 800a6c4:	200076f0 	.word	0x200076f0
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6d2:	4b05      	ldr	r3, [pc, #20]	@ (800a6e8 <xTaskGetTickCount+0x1c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6d8:	687b      	ldr	r3, [r7, #4]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	200076e4 	.word	0x200076e4

0800a6ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6f2:	f001 fb19 	bl	800bd28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a6fa:	4b04      	ldr	r3, [pc, #16]	@ (800a70c <xTaskGetTickCountFromISR+0x20>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a700:	683b      	ldr	r3, [r7, #0]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	200076e4 	.word	0x200076e4

0800a710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a716:	2300      	movs	r3, #0
 800a718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a71a:	4b4f      	ldr	r3, [pc, #316]	@ (800a858 <xTaskIncrementTick+0x148>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f040 8090 	bne.w	800a844 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a724:	4b4d      	ldr	r3, [pc, #308]	@ (800a85c <xTaskIncrementTick+0x14c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3301      	adds	r3, #1
 800a72a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a72c:	4a4b      	ldr	r2, [pc, #300]	@ (800a85c <xTaskIncrementTick+0x14c>)
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d121      	bne.n	800a77c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a738:	4b49      	ldr	r3, [pc, #292]	@ (800a860 <xTaskIncrementTick+0x150>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00b      	beq.n	800a75a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	603b      	str	r3, [r7, #0]
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	e7fd      	b.n	800a756 <xTaskIncrementTick+0x46>
 800a75a:	4b41      	ldr	r3, [pc, #260]	@ (800a860 <xTaskIncrementTick+0x150>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]
 800a760:	4b40      	ldr	r3, [pc, #256]	@ (800a864 <xTaskIncrementTick+0x154>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a3e      	ldr	r2, [pc, #248]	@ (800a860 <xTaskIncrementTick+0x150>)
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	4a3e      	ldr	r2, [pc, #248]	@ (800a864 <xTaskIncrementTick+0x154>)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	4b3e      	ldr	r3, [pc, #248]	@ (800a868 <xTaskIncrementTick+0x158>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	4a3c      	ldr	r2, [pc, #240]	@ (800a868 <xTaskIncrementTick+0x158>)
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	f000 fafc 	bl	800ad74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a77c:	4b3b      	ldr	r3, [pc, #236]	@ (800a86c <xTaskIncrementTick+0x15c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	429a      	cmp	r2, r3
 800a784:	d349      	bcc.n	800a81a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a786:	4b36      	ldr	r3, [pc, #216]	@ (800a860 <xTaskIncrementTick+0x150>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a790:	4b36      	ldr	r3, [pc, #216]	@ (800a86c <xTaskIncrementTick+0x15c>)
 800a792:	f04f 32ff 	mov.w	r2, #4294967295
 800a796:	601a      	str	r2, [r3, #0]
					break;
 800a798:	e03f      	b.n	800a81a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79a:	4b31      	ldr	r3, [pc, #196]	@ (800a860 <xTaskIncrementTick+0x150>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d203      	bcs.n	800a7ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7b2:	4a2e      	ldr	r2, [pc, #184]	@ (800a86c <xTaskIncrementTick+0x15c>)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7b8:	e02f      	b.n	800a81a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fe fab0 	bl	8008d24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	3318      	adds	r3, #24
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe faa7 	bl	8008d24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7da:	4b25      	ldr	r3, [pc, #148]	@ (800a870 <xTaskIncrementTick+0x160>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d903      	bls.n	800a7ea <xTaskIncrementTick+0xda>
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e6:	4a22      	ldr	r2, [pc, #136]	@ (800a870 <xTaskIncrementTick+0x160>)
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4a1f      	ldr	r2, [pc, #124]	@ (800a874 <xTaskIncrementTick+0x164>)
 800a7f8:	441a      	add	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4619      	mov	r1, r3
 800a800:	4610      	mov	r0, r2
 800a802:	f7fe fa32 	bl	8008c6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80a:	4b1b      	ldr	r3, [pc, #108]	@ (800a878 <xTaskIncrementTick+0x168>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a810:	429a      	cmp	r2, r3
 800a812:	d3b8      	bcc.n	800a786 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a818:	e7b5      	b.n	800a786 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a81a:	4b17      	ldr	r3, [pc, #92]	@ (800a878 <xTaskIncrementTick+0x168>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a820:	4914      	ldr	r1, [pc, #80]	@ (800a874 <xTaskIncrementTick+0x164>)
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	440b      	add	r3, r1
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d901      	bls.n	800a836 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a832:	2301      	movs	r3, #1
 800a834:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a836:	4b11      	ldr	r3, [pc, #68]	@ (800a87c <xTaskIncrementTick+0x16c>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d007      	beq.n	800a84e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a83e:	2301      	movs	r3, #1
 800a840:	617b      	str	r3, [r7, #20]
 800a842:	e004      	b.n	800a84e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a844:	4b0e      	ldr	r3, [pc, #56]	@ (800a880 <xTaskIncrementTick+0x170>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3301      	adds	r3, #1
 800a84a:	4a0d      	ldr	r2, [pc, #52]	@ (800a880 <xTaskIncrementTick+0x170>)
 800a84c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a84e:	697b      	ldr	r3, [r7, #20]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20007708 	.word	0x20007708
 800a85c:	200076e4 	.word	0x200076e4
 800a860:	20007698 	.word	0x20007698
 800a864:	2000769c 	.word	0x2000769c
 800a868:	200076f8 	.word	0x200076f8
 800a86c:	20007700 	.word	0x20007700
 800a870:	200076e8 	.word	0x200076e8
 800a874:	20007210 	.word	0x20007210
 800a878:	2000720c 	.word	0x2000720c
 800a87c:	200076f4 	.word	0x200076f4
 800a880:	200076f0 	.word	0x200076f0

0800a884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a88a:	4b36      	ldr	r3, [pc, #216]	@ (800a964 <vTaskSwitchContext+0xe0>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d003      	beq.n	800a89a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a892:	4b35      	ldr	r3, [pc, #212]	@ (800a968 <vTaskSwitchContext+0xe4>)
 800a894:	2201      	movs	r2, #1
 800a896:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a898:	e060      	b.n	800a95c <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800a89a:	4b33      	ldr	r3, [pc, #204]	@ (800a968 <vTaskSwitchContext+0xe4>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a8a0:	f7f6 fe9f 	bl	80015e2 <getRunTimeCounterValue>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4a31      	ldr	r2, [pc, #196]	@ (800a96c <vTaskSwitchContext+0xe8>)
 800a8a8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a8aa:	4b30      	ldr	r3, [pc, #192]	@ (800a96c <vTaskSwitchContext+0xe8>)
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	4b30      	ldr	r3, [pc, #192]	@ (800a970 <vTaskSwitchContext+0xec>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d909      	bls.n	800a8ca <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a8b6:	4b2f      	ldr	r3, [pc, #188]	@ (800a974 <vTaskSwitchContext+0xf0>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a8bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a96c <vTaskSwitchContext+0xe8>)
 800a8be:	6810      	ldr	r0, [r2, #0]
 800a8c0:	4a2b      	ldr	r2, [pc, #172]	@ (800a970 <vTaskSwitchContext+0xec>)
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	1a82      	subs	r2, r0, r2
 800a8c6:	440a      	add	r2, r1
 800a8c8:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a8ca:	4b28      	ldr	r3, [pc, #160]	@ (800a96c <vTaskSwitchContext+0xe8>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a28      	ldr	r2, [pc, #160]	@ (800a970 <vTaskSwitchContext+0xec>)
 800a8d0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d2:	4b29      	ldr	r3, [pc, #164]	@ (800a978 <vTaskSwitchContext+0xf4>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	e011      	b.n	800a8fe <vTaskSwitchContext+0x7a>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10b      	bne.n	800a8f8 <vTaskSwitchContext+0x74>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	607b      	str	r3, [r7, #4]
}
 800a8f2:	bf00      	nop
 800a8f4:	bf00      	nop
 800a8f6:	e7fd      	b.n	800a8f4 <vTaskSwitchContext+0x70>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	491f      	ldr	r1, [pc, #124]	@ (800a97c <vTaskSwitchContext+0xf8>)
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4613      	mov	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	4413      	add	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	440b      	add	r3, r1
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0e3      	beq.n	800a8da <vTaskSwitchContext+0x56>
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	4613      	mov	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4a17      	ldr	r2, [pc, #92]	@ (800a97c <vTaskSwitchContext+0xf8>)
 800a91e:	4413      	add	r3, r2
 800a920:	60bb      	str	r3, [r7, #8]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	605a      	str	r2, [r3, #4]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	3308      	adds	r3, #8
 800a934:	429a      	cmp	r2, r3
 800a936:	d104      	bne.n	800a942 <vTaskSwitchContext+0xbe>
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	4a0a      	ldr	r2, [pc, #40]	@ (800a974 <vTaskSwitchContext+0xf0>)
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	4a0a      	ldr	r2, [pc, #40]	@ (800a978 <vTaskSwitchContext+0xf4>)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a952:	4b08      	ldr	r3, [pc, #32]	@ (800a974 <vTaskSwitchContext+0xf0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3358      	adds	r3, #88	@ 0x58
 800a958:	4a09      	ldr	r2, [pc, #36]	@ (800a980 <vTaskSwitchContext+0xfc>)
 800a95a:	6013      	str	r3, [r2, #0]
}
 800a95c:	bf00      	nop
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20007708 	.word	0x20007708
 800a968:	200076f4 	.word	0x200076f4
 800a96c:	20007710 	.word	0x20007710
 800a970:	2000770c 	.word	0x2000770c
 800a974:	2000720c 	.word	0x2000720c
 800a978:	200076e8 	.word	0x200076e8
 800a97c:	20007210 	.word	0x20007210
 800a980:	20000054 	.word	0x20000054

0800a984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10b      	bne.n	800a9ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	60fb      	str	r3, [r7, #12]
}
 800a9a6:	bf00      	nop
 800a9a8:	bf00      	nop
 800a9aa:	e7fd      	b.n	800a9a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9ac:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <vTaskPlaceOnEventList+0x48>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3318      	adds	r3, #24
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7fe f97c 	bl	8008cb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	6838      	ldr	r0, [r7, #0]
 800a9be:	f000 fbf7 	bl	800b1b0 <prvAddCurrentTaskToDelayedList>
}
 800a9c2:	bf00      	nop
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	2000720c 	.word	0x2000720c

0800a9d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10b      	bne.n	800a9fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	617b      	str	r3, [r7, #20]
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop
 800a9f8:	e7fd      	b.n	800a9f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800aa24 <vTaskPlaceOnEventListRestricted+0x54>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3318      	adds	r3, #24
 800aa00:	4619      	mov	r1, r3
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7fe f931 	bl	8008c6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa0e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	68b8      	ldr	r0, [r7, #8]
 800aa18:	f000 fbca 	bl	800b1b0 <prvAddCurrentTaskToDelayedList>
	}
 800aa1c:	bf00      	nop
 800aa1e:	3718      	adds	r7, #24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	2000720c 	.word	0x2000720c

0800aa28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	60fb      	str	r3, [r7, #12]
}
 800aa50:	bf00      	nop
 800aa52:	bf00      	nop
 800aa54:	e7fd      	b.n	800aa52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3318      	adds	r3, #24
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe f962 	bl	8008d24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa60:	4b1d      	ldr	r3, [pc, #116]	@ (800aad8 <xTaskRemoveFromEventList+0xb0>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d11d      	bne.n	800aaa4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe f959 	bl	8008d24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa76:	4b19      	ldr	r3, [pc, #100]	@ (800aadc <xTaskRemoveFromEventList+0xb4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d903      	bls.n	800aa86 <xTaskRemoveFromEventList+0x5e>
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa82:	4a16      	ldr	r2, [pc, #88]	@ (800aadc <xTaskRemoveFromEventList+0xb4>)
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4a13      	ldr	r2, [pc, #76]	@ (800aae0 <xTaskRemoveFromEventList+0xb8>)
 800aa94:	441a      	add	r2, r3
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	3304      	adds	r3, #4
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f7fe f8e4 	bl	8008c6a <vListInsertEnd>
 800aaa2:	e005      	b.n	800aab0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	3318      	adds	r3, #24
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	480e      	ldr	r0, [pc, #56]	@ (800aae4 <xTaskRemoveFromEventList+0xbc>)
 800aaac:	f7fe f8dd 	bl	8008c6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab4:	4b0c      	ldr	r3, [pc, #48]	@ (800aae8 <xTaskRemoveFromEventList+0xc0>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d905      	bls.n	800aaca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aabe:	2301      	movs	r3, #1
 800aac0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aac2:	4b0a      	ldr	r3, [pc, #40]	@ (800aaec <xTaskRemoveFromEventList+0xc4>)
 800aac4:	2201      	movs	r2, #1
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	e001      	b.n	800aace <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aaca:	2300      	movs	r3, #0
 800aacc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aace:	697b      	ldr	r3, [r7, #20]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20007708 	.word	0x20007708
 800aadc:	200076e8 	.word	0x200076e8
 800aae0:	20007210 	.word	0x20007210
 800aae4:	200076a0 	.word	0x200076a0
 800aae8:	2000720c 	.word	0x2000720c
 800aaec:	200076f4 	.word	0x200076f4

0800aaf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aaf8:	4b06      	ldr	r3, [pc, #24]	@ (800ab14 <vTaskInternalSetTimeOutState+0x24>)
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab00:	4b05      	ldr	r3, [pc, #20]	@ (800ab18 <vTaskInternalSetTimeOutState+0x28>)
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	605a      	str	r2, [r3, #4]
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	200076f8 	.word	0x200076f8
 800ab18:	200076e4 	.word	0x200076e4

0800ab1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10b      	bne.n	800ab44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	613b      	str	r3, [r7, #16]
}
 800ab3e:	bf00      	nop
 800ab40:	bf00      	nop
 800ab42:	e7fd      	b.n	800ab40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10b      	bne.n	800ab62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	60fb      	str	r3, [r7, #12]
}
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
 800ab60:	e7fd      	b.n	800ab5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ab62:	f001 f801 	bl	800bb68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab66:	4b1d      	ldr	r3, [pc, #116]	@ (800abdc <xTaskCheckForTimeOut+0xc0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7e:	d102      	bne.n	800ab86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	61fb      	str	r3, [r7, #28]
 800ab84:	e023      	b.n	800abce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	4b15      	ldr	r3, [pc, #84]	@ (800abe0 <xTaskCheckForTimeOut+0xc4>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d007      	beq.n	800aba2 <xTaskCheckForTimeOut+0x86>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d302      	bcc.n	800aba2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	61fb      	str	r3, [r7, #28]
 800aba0:	e015      	b.n	800abce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d20b      	bcs.n	800abc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	1ad2      	subs	r2, r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff ff99 	bl	800aaf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abbe:	2300      	movs	r3, #0
 800abc0:	61fb      	str	r3, [r7, #28]
 800abc2:	e004      	b.n	800abce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abca:	2301      	movs	r3, #1
 800abcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abce:	f000 fffd 	bl	800bbcc <vPortExitCritical>

	return xReturn;
 800abd2:	69fb      	ldr	r3, [r7, #28]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3720      	adds	r7, #32
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	200076e4 	.word	0x200076e4
 800abe0:	200076f8 	.word	0x200076f8

0800abe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abe4:	b480      	push	{r7}
 800abe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abe8:	4b03      	ldr	r3, [pc, #12]	@ (800abf8 <vTaskMissedYield+0x14>)
 800abea:	2201      	movs	r2, #1
 800abec:	601a      	str	r2, [r3, #0]
}
 800abee:	bf00      	nop
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	200076f4 	.word	0x200076f4

0800abfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac04:	f000 f852 	bl	800acac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac08:	4b06      	ldr	r3, [pc, #24]	@ (800ac24 <prvIdleTask+0x28>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d9f9      	bls.n	800ac04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac10:	4b05      	ldr	r3, [pc, #20]	@ (800ac28 <prvIdleTask+0x2c>)
 800ac12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac20:	e7f0      	b.n	800ac04 <prvIdleTask+0x8>
 800ac22:	bf00      	nop
 800ac24:	20007210 	.word	0x20007210
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac32:	2300      	movs	r3, #0
 800ac34:	607b      	str	r3, [r7, #4]
 800ac36:	e00c      	b.n	800ac52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4a12      	ldr	r2, [pc, #72]	@ (800ac8c <prvInitialiseTaskLists+0x60>)
 800ac44:	4413      	add	r3, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fd ffe2 	bl	8008c10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	607b      	str	r3, [r7, #4]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b37      	cmp	r3, #55	@ 0x37
 800ac56:	d9ef      	bls.n	800ac38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac58:	480d      	ldr	r0, [pc, #52]	@ (800ac90 <prvInitialiseTaskLists+0x64>)
 800ac5a:	f7fd ffd9 	bl	8008c10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac5e:	480d      	ldr	r0, [pc, #52]	@ (800ac94 <prvInitialiseTaskLists+0x68>)
 800ac60:	f7fd ffd6 	bl	8008c10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac64:	480c      	ldr	r0, [pc, #48]	@ (800ac98 <prvInitialiseTaskLists+0x6c>)
 800ac66:	f7fd ffd3 	bl	8008c10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac6a:	480c      	ldr	r0, [pc, #48]	@ (800ac9c <prvInitialiseTaskLists+0x70>)
 800ac6c:	f7fd ffd0 	bl	8008c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac70:	480b      	ldr	r0, [pc, #44]	@ (800aca0 <prvInitialiseTaskLists+0x74>)
 800ac72:	f7fd ffcd 	bl	8008c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac76:	4b0b      	ldr	r3, [pc, #44]	@ (800aca4 <prvInitialiseTaskLists+0x78>)
 800ac78:	4a05      	ldr	r2, [pc, #20]	@ (800ac90 <prvInitialiseTaskLists+0x64>)
 800ac7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aca8 <prvInitialiseTaskLists+0x7c>)
 800ac7e:	4a05      	ldr	r2, [pc, #20]	@ (800ac94 <prvInitialiseTaskLists+0x68>)
 800ac80:	601a      	str	r2, [r3, #0]
}
 800ac82:	bf00      	nop
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20007210 	.word	0x20007210
 800ac90:	20007670 	.word	0x20007670
 800ac94:	20007684 	.word	0x20007684
 800ac98:	200076a0 	.word	0x200076a0
 800ac9c:	200076b4 	.word	0x200076b4
 800aca0:	200076cc 	.word	0x200076cc
 800aca4:	20007698 	.word	0x20007698
 800aca8:	2000769c 	.word	0x2000769c

0800acac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acb2:	e019      	b.n	800ace8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acb4:	f000 ff58 	bl	800bb68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acb8:	4b10      	ldr	r3, [pc, #64]	@ (800acfc <prvCheckTasksWaitingTermination+0x50>)
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3304      	adds	r3, #4
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe f82d 	bl	8008d24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acca:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <prvCheckTasksWaitingTermination+0x54>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3b01      	subs	r3, #1
 800acd0:	4a0b      	ldr	r2, [pc, #44]	@ (800ad00 <prvCheckTasksWaitingTermination+0x54>)
 800acd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acd4:	4b0b      	ldr	r3, [pc, #44]	@ (800ad04 <prvCheckTasksWaitingTermination+0x58>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3b01      	subs	r3, #1
 800acda:	4a0a      	ldr	r2, [pc, #40]	@ (800ad04 <prvCheckTasksWaitingTermination+0x58>)
 800acdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acde:	f000 ff75 	bl	800bbcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f810 	bl	800ad08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ace8:	4b06      	ldr	r3, [pc, #24]	@ (800ad04 <prvCheckTasksWaitingTermination+0x58>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e1      	bne.n	800acb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	200076b4 	.word	0x200076b4
 800ad00:	200076e0 	.word	0x200076e0
 800ad04:	200076c8 	.word	0x200076c8

0800ad08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3358      	adds	r3, #88	@ 0x58
 800ad14:	4618      	mov	r0, r3
 800ad16:	f013 fe5f 	bl	801e9d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d108      	bne.n	800ad36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f001 f90d 	bl	800bf48 <vPortFree>
				vPortFree( pxTCB );
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f001 f90a 	bl	800bf48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad34:	e019      	b.n	800ad6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d103      	bne.n	800ad48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 f901 	bl	800bf48 <vPortFree>
	}
 800ad46:	e010      	b.n	800ad6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d00b      	beq.n	800ad6a <prvDeleteTCB+0x62>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	60fb      	str	r3, [r7, #12]
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop
 800ad68:	e7fd      	b.n	800ad66 <prvDeleteTCB+0x5e>
	}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad7a:	4b0c      	ldr	r3, [pc, #48]	@ (800adac <prvResetNextTaskUnblockTime+0x38>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad84:	4b0a      	ldr	r3, [pc, #40]	@ (800adb0 <prvResetNextTaskUnblockTime+0x3c>)
 800ad86:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad8c:	e008      	b.n	800ada0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad8e:	4b07      	ldr	r3, [pc, #28]	@ (800adac <prvResetNextTaskUnblockTime+0x38>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4a04      	ldr	r2, [pc, #16]	@ (800adb0 <prvResetNextTaskUnblockTime+0x3c>)
 800ad9e:	6013      	str	r3, [r2, #0]
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20007698 	.word	0x20007698
 800adb0:	20007700 	.word	0x20007700

0800adb4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800adba:	4b05      	ldr	r3, [pc, #20]	@ (800add0 <xTaskGetCurrentTaskHandle+0x1c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	607b      	str	r3, [r7, #4]

		return xReturn;
 800adc0:	687b      	ldr	r3, [r7, #4]
	}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	2000720c 	.word	0x2000720c

0800add4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adda:	4b0b      	ldr	r3, [pc, #44]	@ (800ae08 <xTaskGetSchedulerState+0x34>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ade2:	2301      	movs	r3, #1
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	e008      	b.n	800adfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade8:	4b08      	ldr	r3, [pc, #32]	@ (800ae0c <xTaskGetSchedulerState+0x38>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d102      	bne.n	800adf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adf0:	2302      	movs	r3, #2
 800adf2:	607b      	str	r3, [r7, #4]
 800adf4:	e001      	b.n	800adfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adf6:	2300      	movs	r3, #0
 800adf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adfa:	687b      	ldr	r3, [r7, #4]
	}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	200076ec 	.word	0x200076ec
 800ae0c:	20007708 	.word	0x20007708

0800ae10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d051      	beq.n	800aeca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae2a:	4b2a      	ldr	r3, [pc, #168]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d241      	bcs.n	800aeb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	db06      	blt.n	800ae4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3c:	4b25      	ldr	r3, [pc, #148]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6959      	ldr	r1, [r3, #20]
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4a1f      	ldr	r2, [pc, #124]	@ (800aed8 <xTaskPriorityInherit+0xc8>)
 800ae5c:	4413      	add	r3, r2
 800ae5e:	4299      	cmp	r1, r3
 800ae60:	d122      	bne.n	800aea8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fd ff5c 	bl	8008d24 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae6c:	4b19      	ldr	r3, [pc, #100]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae7a:	4b18      	ldr	r3, [pc, #96]	@ (800aedc <xTaskPriorityInherit+0xcc>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d903      	bls.n	800ae8a <xTaskPriorityInherit+0x7a>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae86:	4a15      	ldr	r2, [pc, #84]	@ (800aedc <xTaskPriorityInherit+0xcc>)
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4a10      	ldr	r2, [pc, #64]	@ (800aed8 <xTaskPriorityInherit+0xc8>)
 800ae98:	441a      	add	r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f7fd fee2 	bl	8008c6a <vListInsertEnd>
 800aea6:	e004      	b.n	800aeb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aea8:	4b0a      	ldr	r3, [pc, #40]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	e008      	b.n	800aeca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aebc:	4b05      	ldr	r3, [pc, #20]	@ (800aed4 <xTaskPriorityInherit+0xc4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d201      	bcs.n	800aeca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aec6:	2301      	movs	r3, #1
 800aec8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aeca:	68fb      	ldr	r3, [r7, #12]
	}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	2000720c 	.word	0x2000720c
 800aed8:	20007210 	.word	0x20007210
 800aedc:	200076e8 	.word	0x200076e8

0800aee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aeec:	2300      	movs	r3, #0
 800aeee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d058      	beq.n	800afa8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aef6:	4b2f      	ldr	r3, [pc, #188]	@ (800afb4 <xTaskPriorityDisinherit+0xd4>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d00b      	beq.n	800af18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60fb      	str	r3, [r7, #12]
}
 800af12:	bf00      	nop
 800af14:	bf00      	nop
 800af16:	e7fd      	b.n	800af14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10b      	bne.n	800af38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	60bb      	str	r3, [r7, #8]
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	e7fd      	b.n	800af34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d02c      	beq.n	800afa8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af52:	2b00      	cmp	r3, #0
 800af54:	d128      	bne.n	800afa8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	3304      	adds	r3, #4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fd fee2 	bl	8008d24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af78:	4b0f      	ldr	r3, [pc, #60]	@ (800afb8 <xTaskPriorityDisinherit+0xd8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d903      	bls.n	800af88 <xTaskPriorityDisinherit+0xa8>
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af84:	4a0c      	ldr	r2, [pc, #48]	@ (800afb8 <xTaskPriorityDisinherit+0xd8>)
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af8c:	4613      	mov	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4a09      	ldr	r2, [pc, #36]	@ (800afbc <xTaskPriorityDisinherit+0xdc>)
 800af96:	441a      	add	r2, r3
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	3304      	adds	r3, #4
 800af9c:	4619      	mov	r1, r3
 800af9e:	4610      	mov	r0, r2
 800afa0:	f7fd fe63 	bl	8008c6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afa8:	697b      	ldr	r3, [r7, #20]
	}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	2000720c 	.word	0x2000720c
 800afb8:	200076e8 	.word	0x200076e8
 800afbc:	20007210 	.word	0x20007210

0800afc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800afce:	2301      	movs	r3, #1
 800afd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d06c      	beq.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10b      	bne.n	800aff8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	60fb      	str	r3, [r7, #12]
}
 800aff2:	bf00      	nop
 800aff4:	bf00      	nop
 800aff6:	e7fd      	b.n	800aff4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d902      	bls.n	800b008 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	61fb      	str	r3, [r7, #28]
 800b006:	e002      	b.n	800b00e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b00c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	429a      	cmp	r2, r3
 800b016:	d04c      	beq.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d147      	bne.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b022:	4b26      	ldr	r3, [pc, #152]	@ (800b0bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d10b      	bne.n	800b044 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	60bb      	str	r3, [r7, #8]
}
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
 800b042:	e7fd      	b.n	800b040 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b048:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	69fa      	ldr	r2, [r7, #28]
 800b04e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	db04      	blt.n	800b062 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	6959      	ldr	r1, [r3, #20]
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a13      	ldr	r2, [pc, #76]	@ (800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b072:	4413      	add	r3, r2
 800b074:	4299      	cmp	r1, r3
 800b076:	d11c      	bne.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	3304      	adds	r3, #4
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fd fe51 	bl	8008d24 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b086:	4b0f      	ldr	r3, [pc, #60]	@ (800b0c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d903      	bls.n	800b096 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b092:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09a:	4613      	mov	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4a07      	ldr	r2, [pc, #28]	@ (800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b0a4:	441a      	add	r2, r3
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f7fd fddc 	bl	8008c6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0b2:	bf00      	nop
 800b0b4:	3720      	adds	r7, #32
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	2000720c 	.word	0x2000720c
 800b0c0:	20007210 	.word	0x20007210
 800b0c4:	200076e8 	.word	0x200076e8

0800b0c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b0cc:	4b07      	ldr	r3, [pc, #28]	@ (800b0ec <pvTaskIncrementMutexHeldCount+0x24>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d004      	beq.n	800b0de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b0d4:	4b05      	ldr	r3, [pc, #20]	@ (800b0ec <pvTaskIncrementMutexHeldCount+0x24>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0da:	3201      	adds	r2, #1
 800b0dc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b0de:	4b03      	ldr	r3, [pc, #12]	@ (800b0ec <pvTaskIncrementMutexHeldCount+0x24>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
	}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	2000720c 	.word	0x2000720c

0800b0f0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b0fe:	f000 fd33 	bl	800bb68 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b102:	4b29      	ldr	r3, [pc, #164]	@ (800b1a8 <xTaskNotifyWait+0xb8>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d01c      	beq.n	800b14a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b110:	4b25      	ldr	r3, [pc, #148]	@ (800b1a8 <xTaskNotifyWait+0xb8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	43d2      	mvns	r2, r2
 800b11c:	400a      	ands	r2, r1
 800b11e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b122:	4b21      	ldr	r3, [pc, #132]	@ (800b1a8 <xTaskNotifyWait+0xb8>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00b      	beq.n	800b14a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b132:	2101      	movs	r1, #1
 800b134:	6838      	ldr	r0, [r7, #0]
 800b136:	f000 f83b 	bl	800b1b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b13a:	4b1c      	ldr	r3, [pc, #112]	@ (800b1ac <xTaskNotifyWait+0xbc>)
 800b13c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b14a:	f000 fd3f 	bl	800bbcc <vPortExitCritical>

		taskENTER_CRITICAL();
 800b14e:	f000 fd0b 	bl	800bb68 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d005      	beq.n	800b164 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b158:	4b13      	ldr	r3, [pc, #76]	@ (800b1a8 <xTaskNotifyWait+0xb8>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b164:	4b10      	ldr	r3, [pc, #64]	@ (800b1a8 <xTaskNotifyWait+0xb8>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d002      	beq.n	800b178 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b172:	2300      	movs	r3, #0
 800b174:	617b      	str	r3, [r7, #20]
 800b176:	e00a      	b.n	800b18e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b178:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a8 <xTaskNotifyWait+0xb8>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	43d2      	mvns	r2, r2
 800b184:	400a      	ands	r2, r1
 800b186:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdTRUE;
 800b18a:	2301      	movs	r3, #1
 800b18c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b18e:	4b06      	ldr	r3, [pc, #24]	@ (800b1a8 <xTaskNotifyWait+0xb8>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 800b198:	f000 fd18 	bl	800bbcc <vPortExitCritical>

		return xReturn;
 800b19c:	697b      	ldr	r3, [r7, #20]
	}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	2000720c 	.word	0x2000720c
 800b1ac:	e000ed04 	.word	0xe000ed04

0800b1b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1ba:	4b21      	ldr	r3, [pc, #132]	@ (800b240 <prvAddCurrentTaskToDelayedList+0x90>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1c0:	4b20      	ldr	r3, [pc, #128]	@ (800b244 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fd fdac 	bl	8008d24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d2:	d10a      	bne.n	800b1ea <prvAddCurrentTaskToDelayedList+0x3a>
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d007      	beq.n	800b1ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1da:	4b1a      	ldr	r3, [pc, #104]	@ (800b244 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4819      	ldr	r0, [pc, #100]	@ (800b248 <prvAddCurrentTaskToDelayedList+0x98>)
 800b1e4:	f7fd fd41 	bl	8008c6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1e8:	e026      	b.n	800b238 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1f2:	4b14      	ldr	r3, [pc, #80]	@ (800b244 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d209      	bcs.n	800b216 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b202:	4b12      	ldr	r3, [pc, #72]	@ (800b24c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	4b0f      	ldr	r3, [pc, #60]	@ (800b244 <prvAddCurrentTaskToDelayedList+0x94>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3304      	adds	r3, #4
 800b20c:	4619      	mov	r1, r3
 800b20e:	4610      	mov	r0, r2
 800b210:	f7fd fd4f 	bl	8008cb2 <vListInsert>
}
 800b214:	e010      	b.n	800b238 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b216:	4b0e      	ldr	r3, [pc, #56]	@ (800b250 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	4b0a      	ldr	r3, [pc, #40]	@ (800b244 <prvAddCurrentTaskToDelayedList+0x94>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3304      	adds	r3, #4
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f7fd fd45 	bl	8008cb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b228:	4b0a      	ldr	r3, [pc, #40]	@ (800b254 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d202      	bcs.n	800b238 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b232:	4a08      	ldr	r2, [pc, #32]	@ (800b254 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	6013      	str	r3, [r2, #0]
}
 800b238:	bf00      	nop
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	200076e4 	.word	0x200076e4
 800b244:	2000720c 	.word	0x2000720c
 800b248:	200076cc 	.word	0x200076cc
 800b24c:	2000769c 	.word	0x2000769c
 800b250:	20007698 	.word	0x20007698
 800b254:	20007700 	.word	0x20007700

0800b258 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08a      	sub	sp, #40	@ 0x28
 800b25c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b262:	f000 fb13 	bl	800b88c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b266:	4b1d      	ldr	r3, [pc, #116]	@ (800b2dc <xTimerCreateTimerTask+0x84>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d021      	beq.n	800b2b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b276:	1d3a      	adds	r2, r7, #4
 800b278:	f107 0108 	add.w	r1, r7, #8
 800b27c:	f107 030c 	add.w	r3, r7, #12
 800b280:	4618      	mov	r0, r3
 800b282:	f7fd fcab 	bl	8008bdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	9202      	str	r2, [sp, #8]
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	2302      	movs	r3, #2
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	2300      	movs	r3, #0
 800b296:	460a      	mov	r2, r1
 800b298:	4911      	ldr	r1, [pc, #68]	@ (800b2e0 <xTimerCreateTimerTask+0x88>)
 800b29a:	4812      	ldr	r0, [pc, #72]	@ (800b2e4 <xTimerCreateTimerTask+0x8c>)
 800b29c:	f7fe fe8e 	bl	8009fbc <xTaskCreateStatic>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	4a11      	ldr	r2, [pc, #68]	@ (800b2e8 <xTimerCreateTimerTask+0x90>)
 800b2a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2a6:	4b10      	ldr	r3, [pc, #64]	@ (800b2e8 <xTimerCreateTimerTask+0x90>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10b      	bne.n	800b2d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	613b      	str	r3, [r7, #16]
}
 800b2ca:	bf00      	nop
 800b2cc:	bf00      	nop
 800b2ce:	e7fd      	b.n	800b2cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b2d0:	697b      	ldr	r3, [r7, #20]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20007744 	.word	0x20007744
 800b2e0:	080221f0 	.word	0x080221f0
 800b2e4:	0800b425 	.word	0x0800b425
 800b2e8:	20007748 	.word	0x20007748

0800b2ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08a      	sub	sp, #40	@ 0x28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10b      	bne.n	800b31c <xTimerGenericCommand+0x30>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	623b      	str	r3, [r7, #32]
}
 800b316:	bf00      	nop
 800b318:	bf00      	nop
 800b31a:	e7fd      	b.n	800b318 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b31c:	4b19      	ldr	r3, [pc, #100]	@ (800b384 <xTimerGenericCommand+0x98>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d02a      	beq.n	800b37a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2b05      	cmp	r3, #5
 800b334:	dc18      	bgt.n	800b368 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b336:	f7ff fd4d 	bl	800add4 <xTaskGetSchedulerState>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d109      	bne.n	800b354 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b340:	4b10      	ldr	r3, [pc, #64]	@ (800b384 <xTimerGenericCommand+0x98>)
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	f107 0110 	add.w	r1, r7, #16
 800b348:	2300      	movs	r3, #0
 800b34a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b34c:	f7fd ff80 	bl	8009250 <xQueueGenericSend>
 800b350:	6278      	str	r0, [r7, #36]	@ 0x24
 800b352:	e012      	b.n	800b37a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b354:	4b0b      	ldr	r3, [pc, #44]	@ (800b384 <xTimerGenericCommand+0x98>)
 800b356:	6818      	ldr	r0, [r3, #0]
 800b358:	f107 0110 	add.w	r1, r7, #16
 800b35c:	2300      	movs	r3, #0
 800b35e:	2200      	movs	r2, #0
 800b360:	f7fd ff76 	bl	8009250 <xQueueGenericSend>
 800b364:	6278      	str	r0, [r7, #36]	@ 0x24
 800b366:	e008      	b.n	800b37a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b368:	4b06      	ldr	r3, [pc, #24]	@ (800b384 <xTimerGenericCommand+0x98>)
 800b36a:	6818      	ldr	r0, [r3, #0]
 800b36c:	f107 0110 	add.w	r1, r7, #16
 800b370:	2300      	movs	r3, #0
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	f7fe f86e 	bl	8009454 <xQueueGenericSendFromISR>
 800b378:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3728      	adds	r7, #40	@ 0x28
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20007744 	.word	0x20007744

0800b388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b392:	4b23      	ldr	r3, [pc, #140]	@ (800b420 <prvProcessExpiredTimer+0x98>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fd fcbf 	bl	8008d24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d023      	beq.n	800b3fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	699a      	ldr	r2, [r3, #24]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	18d1      	adds	r1, r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	6978      	ldr	r0, [r7, #20]
 800b3c2:	f000 f8d5 	bl	800b570 <prvInsertTimerInActiveList>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d020      	beq.n	800b40e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	6978      	ldr	r0, [r7, #20]
 800b3d8:	f7ff ff88 	bl	800b2ec <xTimerGenericCommand>
 800b3dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d114      	bne.n	800b40e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	60fb      	str	r3, [r7, #12]
}
 800b3f6:	bf00      	nop
 800b3f8:	bf00      	nop
 800b3fa:	e7fd      	b.n	800b3f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b402:	f023 0301 	bic.w	r3, r3, #1
 800b406:	b2da      	uxtb	r2, r3
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	6978      	ldr	r0, [r7, #20]
 800b414:	4798      	blx	r3
}
 800b416:	bf00      	nop
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	2000773c 	.word	0x2000773c

0800b424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b42c:	f107 0308 	add.w	r3, r7, #8
 800b430:	4618      	mov	r0, r3
 800b432:	f000 f859 	bl	800b4e8 <prvGetNextExpireTime>
 800b436:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	4619      	mov	r1, r3
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f000 f805 	bl	800b44c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b442:	f000 f8d7 	bl	800b5f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b446:	bf00      	nop
 800b448:	e7f0      	b.n	800b42c <prvTimerTask+0x8>
	...

0800b44c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b456:	f7ff f88d 	bl	800a574 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b45a:	f107 0308 	add.w	r3, r7, #8
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 f866 	bl	800b530 <prvSampleTimeNow>
 800b464:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d130      	bne.n	800b4ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <prvProcessTimerOrBlockTask+0x3c>
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	429a      	cmp	r2, r3
 800b478:	d806      	bhi.n	800b488 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b47a:	f7ff f889 	bl	800a590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff ff81 	bl	800b388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b486:	e024      	b.n	800b4d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d008      	beq.n	800b4a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b48e:	4b13      	ldr	r3, [pc, #76]	@ (800b4dc <prvProcessTimerOrBlockTask+0x90>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <prvProcessTimerOrBlockTask+0x50>
 800b498:	2301      	movs	r3, #1
 800b49a:	e000      	b.n	800b49e <prvProcessTimerOrBlockTask+0x52>
 800b49c:	2300      	movs	r3, #0
 800b49e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e0 <prvProcessTimerOrBlockTask+0x94>)
 800b4a2:	6818      	ldr	r0, [r3, #0]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	f7fe fd51 	bl	8009f54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4b2:	f7ff f86d 	bl	800a590 <xTaskResumeAll>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b4bc:	4b09      	ldr	r3, [pc, #36]	@ (800b4e4 <prvProcessTimerOrBlockTask+0x98>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	f3bf 8f6f 	isb	sy
}
 800b4cc:	e001      	b.n	800b4d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b4ce:	f7ff f85f 	bl	800a590 <xTaskResumeAll>
}
 800b4d2:	bf00      	nop
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20007740 	.word	0x20007740
 800b4e0:	20007744 	.word	0x20007744
 800b4e4:	e000ed04 	.word	0xe000ed04

0800b4e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b52c <prvGetNextExpireTime+0x44>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <prvGetNextExpireTime+0x16>
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	e000      	b.n	800b500 <prvGetNextExpireTime+0x18>
 800b4fe:	2200      	movs	r2, #0
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d105      	bne.n	800b518 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b50c:	4b07      	ldr	r3, [pc, #28]	@ (800b52c <prvGetNextExpireTime+0x44>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	60fb      	str	r3, [r7, #12]
 800b516:	e001      	b.n	800b51c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b51c:	68fb      	ldr	r3, [r7, #12]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	2000773c 	.word	0x2000773c

0800b530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b538:	f7ff f8c8 	bl	800a6cc <xTaskGetTickCount>
 800b53c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b53e:	4b0b      	ldr	r3, [pc, #44]	@ (800b56c <prvSampleTimeNow+0x3c>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	429a      	cmp	r2, r3
 800b546:	d205      	bcs.n	800b554 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b548:	f000 f93a 	bl	800b7c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	e002      	b.n	800b55a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b55a:	4a04      	ldr	r2, [pc, #16]	@ (800b56c <prvSampleTimeNow+0x3c>)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b560:	68fb      	ldr	r3, [r7, #12]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	2000774c 	.word	0x2000774c

0800b570 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
 800b57c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b57e:	2300      	movs	r3, #0
 800b580:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	429a      	cmp	r2, r3
 800b594:	d812      	bhi.n	800b5bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	1ad2      	subs	r2, r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d302      	bcc.n	800b5aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	617b      	str	r3, [r7, #20]
 800b5a8:	e01b      	b.n	800b5e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5aa:	4b10      	ldr	r3, [pc, #64]	@ (800b5ec <prvInsertTimerInActiveList+0x7c>)
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f7fd fb7c 	bl	8008cb2 <vListInsert>
 800b5ba:	e012      	b.n	800b5e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d206      	bcs.n	800b5d2 <prvInsertTimerInActiveList+0x62>
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d302      	bcc.n	800b5d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	617b      	str	r3, [r7, #20]
 800b5d0:	e007      	b.n	800b5e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5d2:	4b07      	ldr	r3, [pc, #28]	@ (800b5f0 <prvInsertTimerInActiveList+0x80>)
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	3304      	adds	r3, #4
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4610      	mov	r0, r2
 800b5de:	f7fd fb68 	bl	8008cb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5e2:	697b      	ldr	r3, [r7, #20]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20007740 	.word	0x20007740
 800b5f0:	2000773c 	.word	0x2000773c

0800b5f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08e      	sub	sp, #56	@ 0x38
 800b5f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5fa:	e0ce      	b.n	800b79a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	da19      	bge.n	800b636 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b602:	1d3b      	adds	r3, r7, #4
 800b604:	3304      	adds	r3, #4
 800b606:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10b      	bne.n	800b626 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	61fb      	str	r3, [r7, #28]
}
 800b620:	bf00      	nop
 800b622:	bf00      	nop
 800b624:	e7fd      	b.n	800b622 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b62c:	6850      	ldr	r0, [r2, #4]
 800b62e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b630:	6892      	ldr	r2, [r2, #8]
 800b632:	4611      	mov	r1, r2
 800b634:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f2c0 80ae 	blt.w	800b79a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d004      	beq.n	800b654 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b64c:	3304      	adds	r3, #4
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fd fb68 	bl	8008d24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b654:	463b      	mov	r3, r7
 800b656:	4618      	mov	r0, r3
 800b658:	f7ff ff6a 	bl	800b530 <prvSampleTimeNow>
 800b65c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b09      	cmp	r3, #9
 800b662:	f200 8097 	bhi.w	800b794 <prvProcessReceivedCommands+0x1a0>
 800b666:	a201      	add	r2, pc, #4	@ (adr r2, 800b66c <prvProcessReceivedCommands+0x78>)
 800b668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66c:	0800b695 	.word	0x0800b695
 800b670:	0800b695 	.word	0x0800b695
 800b674:	0800b695 	.word	0x0800b695
 800b678:	0800b70b 	.word	0x0800b70b
 800b67c:	0800b71f 	.word	0x0800b71f
 800b680:	0800b76b 	.word	0x0800b76b
 800b684:	0800b695 	.word	0x0800b695
 800b688:	0800b695 	.word	0x0800b695
 800b68c:	0800b70b 	.word	0x0800b70b
 800b690:	0800b71f 	.word	0x0800b71f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b69a:	f043 0301 	orr.w	r3, r3, #1
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	18d1      	adds	r1, r2, r3
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6b4:	f7ff ff5c 	bl	800b570 <prvInsertTimerInActiveList>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d06c      	beq.n	800b798 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6cc:	f003 0304 	and.w	r3, r3, #4
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d061      	beq.n	800b798 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	441a      	add	r2, r3
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6e6:	f7ff fe01 	bl	800b2ec <xTimerGenericCommand>
 800b6ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b6ec:	6a3b      	ldr	r3, [r7, #32]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d152      	bne.n	800b798 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	61bb      	str	r3, [r7, #24]
}
 800b704:	bf00      	nop
 800b706:	bf00      	nop
 800b708:	e7fd      	b.n	800b706 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b70c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b710:	f023 0301 	bic.w	r3, r3, #1
 800b714:	b2da      	uxtb	r2, r3
 800b716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b718:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b71c:	e03d      	b.n	800b79a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b724:	f043 0301 	orr.w	r3, r3, #1
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b734:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10b      	bne.n	800b756 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	617b      	str	r3, [r7, #20]
}
 800b750:	bf00      	nop
 800b752:	bf00      	nop
 800b754:	e7fd      	b.n	800b752 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b758:	699a      	ldr	r2, [r3, #24]
 800b75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75c:	18d1      	adds	r1, r2, r3
 800b75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b764:	f7ff ff04 	bl	800b570 <prvInsertTimerInActiveList>
					break;
 800b768:	e017      	b.n	800b79a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b770:	f003 0302 	and.w	r3, r3, #2
 800b774:	2b00      	cmp	r3, #0
 800b776:	d103      	bne.n	800b780 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b77a:	f000 fbe5 	bl	800bf48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b77e:	e00c      	b.n	800b79a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b782:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b786:	f023 0301 	bic.w	r3, r3, #1
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b792:	e002      	b.n	800b79a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b794:	bf00      	nop
 800b796:	e000      	b.n	800b79a <prvProcessReceivedCommands+0x1a6>
					break;
 800b798:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b79a:	4b08      	ldr	r3, [pc, #32]	@ (800b7bc <prvProcessReceivedCommands+0x1c8>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	1d39      	adds	r1, r7, #4
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd ff84 	bl	80096b0 <xQueueReceive>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f47f af26 	bne.w	800b5fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b7b0:	bf00      	nop
 800b7b2:	bf00      	nop
 800b7b4:	3730      	adds	r7, #48	@ 0x30
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20007744 	.word	0x20007744

0800b7c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7c6:	e049      	b.n	800b85c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7c8:	4b2e      	ldr	r3, [pc, #184]	@ (800b884 <prvSwitchTimerLists+0xc4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d2:	4b2c      	ldr	r3, [pc, #176]	@ (800b884 <prvSwitchTimerLists+0xc4>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fd fa9f 	bl	8008d24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d02f      	beq.n	800b85c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	4413      	add	r3, r2
 800b804:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d90e      	bls.n	800b82c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b81a:	4b1a      	ldr	r3, [pc, #104]	@ (800b884 <prvSwitchTimerLists+0xc4>)
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3304      	adds	r3, #4
 800b822:	4619      	mov	r1, r3
 800b824:	4610      	mov	r0, r2
 800b826:	f7fd fa44 	bl	8008cb2 <vListInsert>
 800b82a:	e017      	b.n	800b85c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b82c:	2300      	movs	r3, #0
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	2300      	movs	r3, #0
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	2100      	movs	r1, #0
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f7ff fd58 	bl	800b2ec <xTimerGenericCommand>
 800b83c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10b      	bne.n	800b85c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	603b      	str	r3, [r7, #0]
}
 800b856:	bf00      	nop
 800b858:	bf00      	nop
 800b85a:	e7fd      	b.n	800b858 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b85c:	4b09      	ldr	r3, [pc, #36]	@ (800b884 <prvSwitchTimerLists+0xc4>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1b0      	bne.n	800b7c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b866:	4b07      	ldr	r3, [pc, #28]	@ (800b884 <prvSwitchTimerLists+0xc4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b86c:	4b06      	ldr	r3, [pc, #24]	@ (800b888 <prvSwitchTimerLists+0xc8>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a04      	ldr	r2, [pc, #16]	@ (800b884 <prvSwitchTimerLists+0xc4>)
 800b872:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b874:	4a04      	ldr	r2, [pc, #16]	@ (800b888 <prvSwitchTimerLists+0xc8>)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	6013      	str	r3, [r2, #0]
}
 800b87a:	bf00      	nop
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	2000773c 	.word	0x2000773c
 800b888:	20007740 	.word	0x20007740

0800b88c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b892:	f000 f969 	bl	800bb68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b896:	4b15      	ldr	r3, [pc, #84]	@ (800b8ec <prvCheckForValidListAndQueue+0x60>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d120      	bne.n	800b8e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b89e:	4814      	ldr	r0, [pc, #80]	@ (800b8f0 <prvCheckForValidListAndQueue+0x64>)
 800b8a0:	f7fd f9b6 	bl	8008c10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8a4:	4813      	ldr	r0, [pc, #76]	@ (800b8f4 <prvCheckForValidListAndQueue+0x68>)
 800b8a6:	f7fd f9b3 	bl	8008c10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8aa:	4b13      	ldr	r3, [pc, #76]	@ (800b8f8 <prvCheckForValidListAndQueue+0x6c>)
 800b8ac:	4a10      	ldr	r2, [pc, #64]	@ (800b8f0 <prvCheckForValidListAndQueue+0x64>)
 800b8ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8b0:	4b12      	ldr	r3, [pc, #72]	@ (800b8fc <prvCheckForValidListAndQueue+0x70>)
 800b8b2:	4a10      	ldr	r2, [pc, #64]	@ (800b8f4 <prvCheckForValidListAndQueue+0x68>)
 800b8b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	4b11      	ldr	r3, [pc, #68]	@ (800b900 <prvCheckForValidListAndQueue+0x74>)
 800b8bc:	4a11      	ldr	r2, [pc, #68]	@ (800b904 <prvCheckForValidListAndQueue+0x78>)
 800b8be:	2110      	movs	r1, #16
 800b8c0:	200a      	movs	r0, #10
 800b8c2:	f7fd fac3 	bl	8008e4c <xQueueGenericCreateStatic>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	4a08      	ldr	r2, [pc, #32]	@ (800b8ec <prvCheckForValidListAndQueue+0x60>)
 800b8ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b8cc:	4b07      	ldr	r3, [pc, #28]	@ (800b8ec <prvCheckForValidListAndQueue+0x60>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d005      	beq.n	800b8e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b8d4:	4b05      	ldr	r3, [pc, #20]	@ (800b8ec <prvCheckForValidListAndQueue+0x60>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	490b      	ldr	r1, [pc, #44]	@ (800b908 <prvCheckForValidListAndQueue+0x7c>)
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fae6 	bl	8009eac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8e0:	f000 f974 	bl	800bbcc <vPortExitCritical>
}
 800b8e4:	bf00      	nop
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20007744 	.word	0x20007744
 800b8f0:	20007714 	.word	0x20007714
 800b8f4:	20007728 	.word	0x20007728
 800b8f8:	2000773c 	.word	0x2000773c
 800b8fc:	20007740 	.word	0x20007740
 800b900:	200077f0 	.word	0x200077f0
 800b904:	20007750 	.word	0x20007750
 800b908:	080221f8 	.word	0x080221f8

0800b90c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3b04      	subs	r3, #4
 800b91c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3b04      	subs	r3, #4
 800b92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f023 0201 	bic.w	r2, r3, #1
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3b04      	subs	r3, #4
 800b93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b93c:	4a0c      	ldr	r2, [pc, #48]	@ (800b970 <pxPortInitialiseStack+0x64>)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3b14      	subs	r3, #20
 800b946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3b04      	subs	r3, #4
 800b952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f06f 0202 	mvn.w	r2, #2
 800b95a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3b20      	subs	r3, #32
 800b960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b962:	68fb      	ldr	r3, [r7, #12]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	0800b975 	.word	0x0800b975

0800b974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b97e:	4b13      	ldr	r3, [pc, #76]	@ (800b9cc <prvTaskExitError+0x58>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b986:	d00b      	beq.n	800b9a0 <prvTaskExitError+0x2c>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	60fb      	str	r3, [r7, #12]
}
 800b99a:	bf00      	nop
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <prvTaskExitError+0x28>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	60bb      	str	r3, [r7, #8]
}
 800b9b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9b4:	bf00      	nop
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d0fc      	beq.n	800b9b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9bc:	bf00      	nop
 800b9be:	bf00      	nop
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20000034 	.word	0x20000034

0800b9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9d0:	4b07      	ldr	r3, [pc, #28]	@ (800b9f0 <pxCurrentTCBConst2>)
 800b9d2:	6819      	ldr	r1, [r3, #0]
 800b9d4:	6808      	ldr	r0, [r1, #0]
 800b9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9da:	f380 8809 	msr	PSP, r0
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f04f 0000 	mov.w	r0, #0
 800b9e6:	f380 8811 	msr	BASEPRI, r0
 800b9ea:	4770      	bx	lr
 800b9ec:	f3af 8000 	nop.w

0800b9f0 <pxCurrentTCBConst2>:
 800b9f0:	2000720c 	.word	0x2000720c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop

0800b9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9f8:	4808      	ldr	r0, [pc, #32]	@ (800ba1c <prvPortStartFirstTask+0x24>)
 800b9fa:	6800      	ldr	r0, [r0, #0]
 800b9fc:	6800      	ldr	r0, [r0, #0]
 800b9fe:	f380 8808 	msr	MSP, r0
 800ba02:	f04f 0000 	mov.w	r0, #0
 800ba06:	f380 8814 	msr	CONTROL, r0
 800ba0a:	b662      	cpsie	i
 800ba0c:	b661      	cpsie	f
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	df00      	svc	0
 800ba18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba1a:	bf00      	nop
 800ba1c:	e000ed08 	.word	0xe000ed08

0800ba20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba26:	4b47      	ldr	r3, [pc, #284]	@ (800bb44 <xPortStartScheduler+0x124>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a47      	ldr	r2, [pc, #284]	@ (800bb48 <xPortStartScheduler+0x128>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d10b      	bne.n	800ba48 <xPortStartScheduler+0x28>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	613b      	str	r3, [r7, #16]
}
 800ba42:	bf00      	nop
 800ba44:	bf00      	nop
 800ba46:	e7fd      	b.n	800ba44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba48:	4b3e      	ldr	r3, [pc, #248]	@ (800bb44 <xPortStartScheduler+0x124>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a3f      	ldr	r2, [pc, #252]	@ (800bb4c <xPortStartScheduler+0x12c>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d10b      	bne.n	800ba6a <xPortStartScheduler+0x4a>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60fb      	str	r3, [r7, #12]
}
 800ba64:	bf00      	nop
 800ba66:	bf00      	nop
 800ba68:	e7fd      	b.n	800ba66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba6a:	4b39      	ldr	r3, [pc, #228]	@ (800bb50 <xPortStartScheduler+0x130>)
 800ba6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	22ff      	movs	r2, #255	@ 0xff
 800ba7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba84:	78fb      	ldrb	r3, [r7, #3]
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	4b31      	ldr	r3, [pc, #196]	@ (800bb54 <xPortStartScheduler+0x134>)
 800ba90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba92:	4b31      	ldr	r3, [pc, #196]	@ (800bb58 <xPortStartScheduler+0x138>)
 800ba94:	2207      	movs	r2, #7
 800ba96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba98:	e009      	b.n	800baae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ba9a:	4b2f      	ldr	r3, [pc, #188]	@ (800bb58 <xPortStartScheduler+0x138>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	4a2d      	ldr	r2, [pc, #180]	@ (800bb58 <xPortStartScheduler+0x138>)
 800baa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800baa4:	78fb      	ldrb	r3, [r7, #3]
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bab6:	2b80      	cmp	r3, #128	@ 0x80
 800bab8:	d0ef      	beq.n	800ba9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800baba:	4b27      	ldr	r3, [pc, #156]	@ (800bb58 <xPortStartScheduler+0x138>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f1c3 0307 	rsb	r3, r3, #7
 800bac2:	2b04      	cmp	r3, #4
 800bac4:	d00b      	beq.n	800bade <xPortStartScheduler+0xbe>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	60bb      	str	r3, [r7, #8]
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	e7fd      	b.n	800bada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bade:	4b1e      	ldr	r3, [pc, #120]	@ (800bb58 <xPortStartScheduler+0x138>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	021b      	lsls	r3, r3, #8
 800bae4:	4a1c      	ldr	r2, [pc, #112]	@ (800bb58 <xPortStartScheduler+0x138>)
 800bae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bae8:	4b1b      	ldr	r3, [pc, #108]	@ (800bb58 <xPortStartScheduler+0x138>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800baf0:	4a19      	ldr	r2, [pc, #100]	@ (800bb58 <xPortStartScheduler+0x138>)
 800baf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bafc:	4b17      	ldr	r3, [pc, #92]	@ (800bb5c <xPortStartScheduler+0x13c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a16      	ldr	r2, [pc, #88]	@ (800bb5c <xPortStartScheduler+0x13c>)
 800bb02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bb06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb08:	4b14      	ldr	r3, [pc, #80]	@ (800bb5c <xPortStartScheduler+0x13c>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a13      	ldr	r2, [pc, #76]	@ (800bb5c <xPortStartScheduler+0x13c>)
 800bb0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bb12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb14:	f000 f8da 	bl	800bccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb18:	4b11      	ldr	r3, [pc, #68]	@ (800bb60 <xPortStartScheduler+0x140>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb1e:	f000 f8f9 	bl	800bd14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb22:	4b10      	ldr	r3, [pc, #64]	@ (800bb64 <xPortStartScheduler+0x144>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a0f      	ldr	r2, [pc, #60]	@ (800bb64 <xPortStartScheduler+0x144>)
 800bb28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bb2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb2e:	f7ff ff63 	bl	800b9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb32:	f7fe fea7 	bl	800a884 <vTaskSwitchContext>
	prvTaskExitError();
 800bb36:	f7ff ff1d 	bl	800b974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	e000ed00 	.word	0xe000ed00
 800bb48:	410fc271 	.word	0x410fc271
 800bb4c:	410fc270 	.word	0x410fc270
 800bb50:	e000e400 	.word	0xe000e400
 800bb54:	20007840 	.word	0x20007840
 800bb58:	20007844 	.word	0x20007844
 800bb5c:	e000ed20 	.word	0xe000ed20
 800bb60:	20000034 	.word	0x20000034
 800bb64:	e000ef34 	.word	0xe000ef34

0800bb68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	607b      	str	r3, [r7, #4]
}
 800bb80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb82:	4b10      	ldr	r3, [pc, #64]	@ (800bbc4 <vPortEnterCritical+0x5c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3301      	adds	r3, #1
 800bb88:	4a0e      	ldr	r2, [pc, #56]	@ (800bbc4 <vPortEnterCritical+0x5c>)
 800bb8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc4 <vPortEnterCritical+0x5c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d110      	bne.n	800bbb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb94:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc8 <vPortEnterCritical+0x60>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00b      	beq.n	800bbb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	603b      	str	r3, [r7, #0]
}
 800bbb0:	bf00      	nop
 800bbb2:	bf00      	nop
 800bbb4:	e7fd      	b.n	800bbb2 <vPortEnterCritical+0x4a>
	}
}
 800bbb6:	bf00      	nop
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	20000034 	.word	0x20000034
 800bbc8:	e000ed04 	.word	0xe000ed04

0800bbcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbd2:	4b12      	ldr	r3, [pc, #72]	@ (800bc1c <vPortExitCritical+0x50>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10b      	bne.n	800bbf2 <vPortExitCritical+0x26>
	__asm volatile
 800bbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	607b      	str	r3, [r7, #4]
}
 800bbec:	bf00      	nop
 800bbee:	bf00      	nop
 800bbf0:	e7fd      	b.n	800bbee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbf2:	4b0a      	ldr	r3, [pc, #40]	@ (800bc1c <vPortExitCritical+0x50>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	4a08      	ldr	r2, [pc, #32]	@ (800bc1c <vPortExitCritical+0x50>)
 800bbfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbfc:	4b07      	ldr	r3, [pc, #28]	@ (800bc1c <vPortExitCritical+0x50>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d105      	bne.n	800bc10 <vPortExitCritical+0x44>
 800bc04:	2300      	movs	r3, #0
 800bc06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	f383 8811 	msr	BASEPRI, r3
}
 800bc0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	20000034 	.word	0x20000034

0800bc20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc20:	f3ef 8009 	mrs	r0, PSP
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	4b15      	ldr	r3, [pc, #84]	@ (800bc80 <pxCurrentTCBConst>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	f01e 0f10 	tst.w	lr, #16
 800bc30:	bf08      	it	eq
 800bc32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3a:	6010      	str	r0, [r2, #0]
 800bc3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bc44:	f380 8811 	msr	BASEPRI, r0
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f7fe fe18 	bl	800a884 <vTaskSwitchContext>
 800bc54:	f04f 0000 	mov.w	r0, #0
 800bc58:	f380 8811 	msr	BASEPRI, r0
 800bc5c:	bc09      	pop	{r0, r3}
 800bc5e:	6819      	ldr	r1, [r3, #0]
 800bc60:	6808      	ldr	r0, [r1, #0]
 800bc62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc66:	f01e 0f10 	tst.w	lr, #16
 800bc6a:	bf08      	it	eq
 800bc6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc70:	f380 8809 	msr	PSP, r0
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w

0800bc80 <pxCurrentTCBConst>:
 800bc80:	2000720c 	.word	0x2000720c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop

0800bc88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	607b      	str	r3, [r7, #4]
}
 800bca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bca2:	f7fe fd35 	bl	800a710 <xTaskIncrementTick>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcac:	4b06      	ldr	r3, [pc, #24]	@ (800bcc8 <xPortSysTickHandler+0x40>)
 800bcae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f383 8811 	msr	BASEPRI, r3
}
 800bcbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	e000ed04 	.word	0xe000ed04

0800bccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	@ (800bd00 <vPortSetupTimerInterrupt+0x34>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd04 <vPortSetupTimerInterrupt+0x38>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	@ (800bd08 <vPortSetupTimerInterrupt+0x3c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a0a      	ldr	r2, [pc, #40]	@ (800bd0c <vPortSetupTimerInterrupt+0x40>)
 800bce2:	fba2 2303 	umull	r2, r3, r2, r3
 800bce6:	099b      	lsrs	r3, r3, #6
 800bce8:	4a09      	ldr	r2, [pc, #36]	@ (800bd10 <vPortSetupTimerInterrupt+0x44>)
 800bcea:	3b01      	subs	r3, #1
 800bcec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcee:	4b04      	ldr	r3, [pc, #16]	@ (800bd00 <vPortSetupTimerInterrupt+0x34>)
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	601a      	str	r2, [r3, #0]
}
 800bcf4:	bf00      	nop
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	e000e010 	.word	0xe000e010
 800bd04:	e000e018 	.word	0xe000e018
 800bd08:	20000014 	.word	0x20000014
 800bd0c:	10624dd3 	.word	0x10624dd3
 800bd10:	e000e014 	.word	0xe000e014

0800bd14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bd24 <vPortEnableVFP+0x10>
 800bd18:	6801      	ldr	r1, [r0, #0]
 800bd1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bd1e:	6001      	str	r1, [r0, #0]
 800bd20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd22:	bf00      	nop
 800bd24:	e000ed88 	.word	0xe000ed88

0800bd28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd2e:	f3ef 8305 	mrs	r3, IPSR
 800bd32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b0f      	cmp	r3, #15
 800bd38:	d915      	bls.n	800bd66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd3a:	4a18      	ldr	r2, [pc, #96]	@ (800bd9c <vPortValidateInterruptPriority+0x74>)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4413      	add	r3, r2
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd44:	4b16      	ldr	r3, [pc, #88]	@ (800bda0 <vPortValidateInterruptPriority+0x78>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	7afa      	ldrb	r2, [r7, #11]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d20b      	bcs.n	800bd66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
 800bd62:	bf00      	nop
 800bd64:	e7fd      	b.n	800bd62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd66:	4b0f      	ldr	r3, [pc, #60]	@ (800bda4 <vPortValidateInterruptPriority+0x7c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bd6e:	4b0e      	ldr	r3, [pc, #56]	@ (800bda8 <vPortValidateInterruptPriority+0x80>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d90b      	bls.n	800bd8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	603b      	str	r3, [r7, #0]
}
 800bd88:	bf00      	nop
 800bd8a:	bf00      	nop
 800bd8c:	e7fd      	b.n	800bd8a <vPortValidateInterruptPriority+0x62>
	}
 800bd8e:	bf00      	nop
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	e000e3f0 	.word	0xe000e3f0
 800bda0:	20007840 	.word	0x20007840
 800bda4:	e000ed0c 	.word	0xe000ed0c
 800bda8:	20007844 	.word	0x20007844

0800bdac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b08a      	sub	sp, #40	@ 0x28
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bdb8:	f7fe fbdc 	bl	800a574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bdbc:	4b5c      	ldr	r3, [pc, #368]	@ (800bf30 <pvPortMalloc+0x184>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d101      	bne.n	800bdc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bdc4:	f000 f924 	bl	800c010 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bdc8:	4b5a      	ldr	r3, [pc, #360]	@ (800bf34 <pvPortMalloc+0x188>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4013      	ands	r3, r2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f040 8095 	bne.w	800bf00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01e      	beq.n	800be1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bddc:	2208      	movs	r2, #8
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4413      	add	r3, r2
 800bde2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f003 0307 	and.w	r3, r3, #7
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d015      	beq.n	800be1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f023 0307 	bic.w	r3, r3, #7
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f003 0307 	and.w	r3, r3, #7
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00b      	beq.n	800be1a <pvPortMalloc+0x6e>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	617b      	str	r3, [r7, #20]
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	e7fd      	b.n	800be16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d06f      	beq.n	800bf00 <pvPortMalloc+0x154>
 800be20:	4b45      	ldr	r3, [pc, #276]	@ (800bf38 <pvPortMalloc+0x18c>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	429a      	cmp	r2, r3
 800be28:	d86a      	bhi.n	800bf00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be2a:	4b44      	ldr	r3, [pc, #272]	@ (800bf3c <pvPortMalloc+0x190>)
 800be2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be2e:	4b43      	ldr	r3, [pc, #268]	@ (800bf3c <pvPortMalloc+0x190>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be34:	e004      	b.n	800be40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800be36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	429a      	cmp	r2, r3
 800be48:	d903      	bls.n	800be52 <pvPortMalloc+0xa6>
 800be4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1f1      	bne.n	800be36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be52:	4b37      	ldr	r3, [pc, #220]	@ (800bf30 <pvPortMalloc+0x184>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be58:	429a      	cmp	r2, r3
 800be5a:	d051      	beq.n	800bf00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2208      	movs	r2, #8
 800be62:	4413      	add	r3, r2
 800be64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	1ad2      	subs	r2, r2, r3
 800be76:	2308      	movs	r3, #8
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d920      	bls.n	800bec0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4413      	add	r3, r2
 800be84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	f003 0307 	and.w	r3, r3, #7
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <pvPortMalloc+0xfc>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	613b      	str	r3, [r7, #16]
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	e7fd      	b.n	800bea4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800beb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800beba:	69b8      	ldr	r0, [r7, #24]
 800bebc:	f000 f90a 	bl	800c0d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bec0:	4b1d      	ldr	r3, [pc, #116]	@ (800bf38 <pvPortMalloc+0x18c>)
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	4a1b      	ldr	r2, [pc, #108]	@ (800bf38 <pvPortMalloc+0x18c>)
 800becc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bece:	4b1a      	ldr	r3, [pc, #104]	@ (800bf38 <pvPortMalloc+0x18c>)
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf40 <pvPortMalloc+0x194>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d203      	bcs.n	800bee2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800beda:	4b17      	ldr	r3, [pc, #92]	@ (800bf38 <pvPortMalloc+0x18c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a18      	ldr	r2, [pc, #96]	@ (800bf40 <pvPortMalloc+0x194>)
 800bee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	4b13      	ldr	r3, [pc, #76]	@ (800bf34 <pvPortMalloc+0x188>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	431a      	orrs	r2, r3
 800beec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bef6:	4b13      	ldr	r3, [pc, #76]	@ (800bf44 <pvPortMalloc+0x198>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	3301      	adds	r3, #1
 800befc:	4a11      	ldr	r2, [pc, #68]	@ (800bf44 <pvPortMalloc+0x198>)
 800befe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf00:	f7fe fb46 	bl	800a590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00b      	beq.n	800bf26 <pvPortMalloc+0x17a>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	60fb      	str	r3, [r7, #12]
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	e7fd      	b.n	800bf22 <pvPortMalloc+0x176>
	return pvReturn;
 800bf26:	69fb      	ldr	r3, [r7, #28]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3728      	adds	r7, #40	@ 0x28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	2000b6d0 	.word	0x2000b6d0
 800bf34:	2000b6e4 	.word	0x2000b6e4
 800bf38:	2000b6d4 	.word	0x2000b6d4
 800bf3c:	2000b6c8 	.word	0x2000b6c8
 800bf40:	2000b6d8 	.word	0x2000b6d8
 800bf44:	2000b6dc 	.word	0x2000b6dc

0800bf48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d04f      	beq.n	800bffa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf5a:	2308      	movs	r3, #8
 800bf5c:	425b      	negs	r3, r3
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	4413      	add	r3, r2
 800bf62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	4b25      	ldr	r3, [pc, #148]	@ (800c004 <vPortFree+0xbc>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4013      	ands	r3, r2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10b      	bne.n	800bf8e <vPortFree+0x46>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	60fb      	str	r3, [r7, #12]
}
 800bf88:	bf00      	nop
 800bf8a:	bf00      	nop
 800bf8c:	e7fd      	b.n	800bf8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <vPortFree+0x66>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	60bb      	str	r3, [r7, #8]
}
 800bfa8:	bf00      	nop
 800bfaa:	bf00      	nop
 800bfac:	e7fd      	b.n	800bfaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	4b14      	ldr	r3, [pc, #80]	@ (800c004 <vPortFree+0xbc>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d01e      	beq.n	800bffa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d11a      	bne.n	800bffa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	4b0e      	ldr	r3, [pc, #56]	@ (800c004 <vPortFree+0xbc>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	43db      	mvns	r3, r3
 800bfce:	401a      	ands	r2, r3
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bfd4:	f7fe face 	bl	800a574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	4b0a      	ldr	r3, [pc, #40]	@ (800c008 <vPortFree+0xc0>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	4a09      	ldr	r2, [pc, #36]	@ (800c008 <vPortFree+0xc0>)
 800bfe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bfe6:	6938      	ldr	r0, [r7, #16]
 800bfe8:	f000 f874 	bl	800c0d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bfec:	4b07      	ldr	r3, [pc, #28]	@ (800c00c <vPortFree+0xc4>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	3301      	adds	r3, #1
 800bff2:	4a06      	ldr	r2, [pc, #24]	@ (800c00c <vPortFree+0xc4>)
 800bff4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bff6:	f7fe facb 	bl	800a590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bffa:	bf00      	nop
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	2000b6e4 	.word	0x2000b6e4
 800c008:	2000b6d4 	.word	0x2000b6d4
 800c00c:	2000b6e0 	.word	0x2000b6e0

0800c010 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c016:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800c01a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c01c:	4b27      	ldr	r3, [pc, #156]	@ (800c0bc <prvHeapInit+0xac>)
 800c01e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f003 0307 	and.w	r3, r3, #7
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00c      	beq.n	800c044 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3307      	adds	r3, #7
 800c02e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f023 0307 	bic.w	r3, r3, #7
 800c036:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	4a1f      	ldr	r2, [pc, #124]	@ (800c0bc <prvHeapInit+0xac>)
 800c040:	4413      	add	r3, r2
 800c042:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c048:	4a1d      	ldr	r2, [pc, #116]	@ (800c0c0 <prvHeapInit+0xb0>)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c04e:	4b1c      	ldr	r3, [pc, #112]	@ (800c0c0 <prvHeapInit+0xb0>)
 800c050:	2200      	movs	r2, #0
 800c052:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	4413      	add	r3, r2
 800c05a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c05c:	2208      	movs	r2, #8
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	1a9b      	subs	r3, r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0307 	bic.w	r3, r3, #7
 800c06a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4a15      	ldr	r2, [pc, #84]	@ (800c0c4 <prvHeapInit+0xb4>)
 800c070:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c072:	4b14      	ldr	r3, [pc, #80]	@ (800c0c4 <prvHeapInit+0xb4>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2200      	movs	r2, #0
 800c078:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c07a:	4b12      	ldr	r3, [pc, #72]	@ (800c0c4 <prvHeapInit+0xb4>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2200      	movs	r2, #0
 800c080:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	1ad2      	subs	r2, r2, r3
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c090:	4b0c      	ldr	r3, [pc, #48]	@ (800c0c4 <prvHeapInit+0xb4>)
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	4a0a      	ldr	r2, [pc, #40]	@ (800c0c8 <prvHeapInit+0xb8>)
 800c09e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	4a09      	ldr	r2, [pc, #36]	@ (800c0cc <prvHeapInit+0xbc>)
 800c0a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0a8:	4b09      	ldr	r3, [pc, #36]	@ (800c0d0 <prvHeapInit+0xc0>)
 800c0aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c0ae:	601a      	str	r2, [r3, #0]
}
 800c0b0:	bf00      	nop
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	20007848 	.word	0x20007848
 800c0c0:	2000b6c8 	.word	0x2000b6c8
 800c0c4:	2000b6d0 	.word	0x2000b6d0
 800c0c8:	2000b6d8 	.word	0x2000b6d8
 800c0cc:	2000b6d4 	.word	0x2000b6d4
 800c0d0:	2000b6e4 	.word	0x2000b6e4

0800c0d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0dc:	4b28      	ldr	r3, [pc, #160]	@ (800c180 <prvInsertBlockIntoFreeList+0xac>)
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	e002      	b.n	800c0e8 <prvInsertBlockIntoFreeList+0x14>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d8f7      	bhi.n	800c0e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d108      	bne.n	800c116 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	441a      	add	r2, r3
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	441a      	add	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	429a      	cmp	r2, r3
 800c128:	d118      	bne.n	800c15c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	4b15      	ldr	r3, [pc, #84]	@ (800c184 <prvInsertBlockIntoFreeList+0xb0>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	429a      	cmp	r2, r3
 800c134:	d00d      	beq.n	800c152 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	685a      	ldr	r2, [r3, #4]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	441a      	add	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	e008      	b.n	800c164 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c152:	4b0c      	ldr	r3, [pc, #48]	@ (800c184 <prvInsertBlockIntoFreeList+0xb0>)
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	e003      	b.n	800c164 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c164:	68fa      	ldr	r2, [r7, #12]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d002      	beq.n	800c172 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c172:	bf00      	nop
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	2000b6c8 	.word	0x2000b6c8
 800c184:	2000b6d0 	.word	0x2000b6d0

0800c188 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	330c      	adds	r3, #12
 800c198:	461a      	mov	r2, r3
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f003 fad5 	bl	800f74c <tcpip_send_msg_wait_sem>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d103      	bne.n	800c1b6 <netconn_apimsg+0x2e>
    return apimsg->err;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c1b4:	e001      	b.n	800c1ba <netconn_apimsg+0x32>
  }
  return err;
 800c1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08c      	sub	sp, #48	@ 0x30
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	603a      	str	r2, [r7, #0]
 800c1ce:	71fb      	strb	r3, [r7, #7]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c1d4:	79fb      	ldrb	r3, [r7, #7]
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f001 f859 	bl	800d290 <netconn_alloc>
 800c1de:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800c1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d054      	beq.n	800c290 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c1e6:	79bb      	ldrb	r3, [r7, #6]
 800c1e8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ec:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c1ee:	f107 0308 	add.w	r3, r7, #8
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4829      	ldr	r0, [pc, #164]	@ (800c29c <netconn_new_with_proto_and_callback+0xd8>)
 800c1f6:	f7ff ffc7 	bl	800c188 <netconn_apimsg>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800c200:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800c204:	2b00      	cmp	r3, #0
 800c206:	d043      	beq.n	800c290 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <netconn_new_with_proto_and_callback+0x58>
 800c210:	4b23      	ldr	r3, [pc, #140]	@ (800c2a0 <netconn_new_with_proto_and_callback+0xdc>)
 800c212:	22a3      	movs	r2, #163	@ 0xa3
 800c214:	4923      	ldr	r1, [pc, #140]	@ (800c2a4 <netconn_new_with_proto_and_callback+0xe0>)
 800c216:	4824      	ldr	r0, [pc, #144]	@ (800c2a8 <netconn_new_with_proto_and_callback+0xe4>)
 800c218:	f012 fafe 	bl	801e818 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c21e:	3310      	adds	r3, #16
 800c220:	4618      	mov	r0, r3
 800c222:	f011 f8c3 	bl	801d3ac <sys_mbox_valid>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d105      	bne.n	800c238 <netconn_new_with_proto_and_callback+0x74>
 800c22c:	4b1c      	ldr	r3, [pc, #112]	@ (800c2a0 <netconn_new_with_proto_and_callback+0xdc>)
 800c22e:	22a4      	movs	r2, #164	@ 0xa4
 800c230:	491e      	ldr	r1, [pc, #120]	@ (800c2ac <netconn_new_with_proto_and_callback+0xe8>)
 800c232:	481d      	ldr	r0, [pc, #116]	@ (800c2a8 <netconn_new_with_proto_and_callback+0xe4>)
 800c234:	f012 faf0 	bl	801e818 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23a:	3314      	adds	r3, #20
 800c23c:	4618      	mov	r0, r3
 800c23e:	f011 f8b5 	bl	801d3ac <sys_mbox_valid>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d005      	beq.n	800c254 <netconn_new_with_proto_and_callback+0x90>
 800c248:	4b15      	ldr	r3, [pc, #84]	@ (800c2a0 <netconn_new_with_proto_and_callback+0xdc>)
 800c24a:	22a6      	movs	r2, #166	@ 0xa6
 800c24c:	4918      	ldr	r1, [pc, #96]	@ (800c2b0 <netconn_new_with_proto_and_callback+0xec>)
 800c24e:	4816      	ldr	r0, [pc, #88]	@ (800c2a8 <netconn_new_with_proto_and_callback+0xe4>)
 800c250:	f012 fae2 	bl	801e818 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c256:	330c      	adds	r3, #12
 800c258:	4618      	mov	r0, r3
 800c25a:	f011 f935 	bl	801d4c8 <sys_sem_valid>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d105      	bne.n	800c270 <netconn_new_with_proto_and_callback+0xac>
 800c264:	4b0e      	ldr	r3, [pc, #56]	@ (800c2a0 <netconn_new_with_proto_and_callback+0xdc>)
 800c266:	22a9      	movs	r2, #169	@ 0xa9
 800c268:	4912      	ldr	r1, [pc, #72]	@ (800c2b4 <netconn_new_with_proto_and_callback+0xf0>)
 800c26a:	480f      	ldr	r0, [pc, #60]	@ (800c2a8 <netconn_new_with_proto_and_callback+0xe4>)
 800c26c:	f012 fad4 	bl	801e818 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c272:	330c      	adds	r3, #12
 800c274:	4618      	mov	r0, r3
 800c276:	f011 f91a 	bl	801d4ae <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c27c:	3310      	adds	r3, #16
 800c27e:	4618      	mov	r0, r3
 800c280:	f011 f820 	bl	801d2c4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c286:	2007      	movs	r0, #7
 800c288:	f004 fafc 	bl	8010884 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c28c:	2300      	movs	r3, #0
 800c28e:	e000      	b.n	800c292 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c292:	4618      	mov	r0, r3
 800c294:	3730      	adds	r7, #48	@ 0x30
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	0800d265 	.word	0x0800d265
 800c2a0:	08022200 	.word	0x08022200
 800c2a4:	08022234 	.word	0x08022234
 800c2a8:	08022258 	.word	0x08022258
 800c2ac:	08022280 	.word	0x08022280
 800c2b0:	08022298 	.word	0x08022298
 800c2b4:	080222bc 	.word	0x080222bc

0800c2b8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08c      	sub	sp, #48	@ 0x30
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d101      	bne.n	800c2ca <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e014      	b.n	800c2f4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c2ce:	2329      	movs	r3, #41	@ 0x29
 800c2d0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c2d2:	f107 030c 	add.w	r3, r7, #12
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	4808      	ldr	r0, [pc, #32]	@ (800c2fc <netconn_prepare_delete+0x44>)
 800c2da:	f7ff ff55 	bl	800c188 <netconn_apimsg>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c2e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <netconn_prepare_delete+0x3a>
    return err;
 800c2ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c2f0:	e000      	b.n	800c2f4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3730      	adds	r7, #48	@ 0x30
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	0800d7d1 	.word	0x0800d7d1

0800c300 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <netconn_delete+0x12>
    return ERR_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	e00d      	b.n	800c32e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff ffd0 	bl	800c2b8 <netconn_prepare_delete>
 800c318:	4603      	mov	r3, r0
 800c31a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d102      	bne.n	800c32a <netconn_delete+0x2a>
    netconn_free(conn);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f001 f821 	bl	800d36c <netconn_free>
  }
  return err;
 800c32a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08e      	sub	sp, #56	@ 0x38
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d109      	bne.n	800c360 <netconn_getaddr+0x28>
 800c34c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3c4 <netconn_getaddr+0x8c>)
 800c34e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c352:	491d      	ldr	r1, [pc, #116]	@ (800c3c8 <netconn_getaddr+0x90>)
 800c354:	481d      	ldr	r0, [pc, #116]	@ (800c3cc <netconn_getaddr+0x94>)
 800c356:	f012 fa5f 	bl	801e818 <iprintf>
 800c35a:	f06f 030f 	mvn.w	r3, #15
 800c35e:	e02d      	b.n	800c3bc <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <netconn_getaddr+0x42>
 800c366:	4b17      	ldr	r3, [pc, #92]	@ (800c3c4 <netconn_getaddr+0x8c>)
 800c368:	f240 1213 	movw	r2, #275	@ 0x113
 800c36c:	4918      	ldr	r1, [pc, #96]	@ (800c3d0 <netconn_getaddr+0x98>)
 800c36e:	4817      	ldr	r0, [pc, #92]	@ (800c3cc <netconn_getaddr+0x94>)
 800c370:	f012 fa52 	bl	801e818 <iprintf>
 800c374:	f06f 030f 	mvn.w	r3, #15
 800c378:	e020      	b.n	800c3bc <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d109      	bne.n	800c394 <netconn_getaddr+0x5c>
 800c380:	4b10      	ldr	r3, [pc, #64]	@ (800c3c4 <netconn_getaddr+0x8c>)
 800c382:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800c386:	4913      	ldr	r1, [pc, #76]	@ (800c3d4 <netconn_getaddr+0x9c>)
 800c388:	4810      	ldr	r0, [pc, #64]	@ (800c3cc <netconn_getaddr+0x94>)
 800c38a:	f012 fa45 	bl	801e818 <iprintf>
 800c38e:	f06f 030f 	mvn.w	r3, #15
 800c392:	e013      	b.n	800c3bc <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800c398:	78fb      	ldrb	r3, [r7, #3]
 800c39a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800c3a6:	f107 0314 	add.w	r3, r7, #20
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	480a      	ldr	r0, [pc, #40]	@ (800c3d8 <netconn_getaddr+0xa0>)
 800c3ae:	f7ff feeb 	bl	800c188 <netconn_apimsg>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800c3b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3738      	adds	r7, #56	@ 0x38
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	08022200 	.word	0x08022200
 800c3c8:	080222d8 	.word	0x080222d8
 800c3cc:	08022258 	.word	0x08022258
 800c3d0:	080222f8 	.word	0x080222f8
 800c3d4:	08022318 	.word	0x08022318
 800c3d8:	0800e225 	.word	0x0800e225

0800c3dc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b08e      	sub	sp, #56	@ 0x38
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d109      	bne.n	800c404 <netconn_connect+0x28>
 800c3f0:	4b11      	ldr	r3, [pc, #68]	@ (800c438 <netconn_connect+0x5c>)
 800c3f2:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 800c3f6:	4911      	ldr	r1, [pc, #68]	@ (800c43c <netconn_connect+0x60>)
 800c3f8:	4811      	ldr	r0, [pc, #68]	@ (800c440 <netconn_connect+0x64>)
 800c3fa:	f012 fa0d 	bl	801e818 <iprintf>
 800c3fe:	f06f 030f 	mvn.w	r3, #15
 800c402:	e015      	b.n	800c430 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d101      	bne.n	800c40e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800c40a:	4b0e      	ldr	r3, [pc, #56]	@ (800c444 <netconn_connect+0x68>)
 800c40c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c416:	88fb      	ldrh	r3, [r7, #6]
 800c418:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800c41a:	f107 0314 	add.w	r3, r7, #20
 800c41e:	4619      	mov	r1, r3
 800c420:	4809      	ldr	r0, [pc, #36]	@ (800c448 <netconn_connect+0x6c>)
 800c422:	f7ff feb1 	bl	800c188 <netconn_apimsg>
 800c426:	4603      	mov	r3, r0
 800c428:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c42c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c430:	4618      	mov	r0, r3
 800c432:	3738      	adds	r7, #56	@ 0x38
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	08022200 	.word	0x08022200
 800c43c:	08022374 	.word	0x08022374
 800c440:	08022258 	.word	0x08022258
 800c444:	08026270 	.word	0x08026270
 800c448:	0800dab9 	.word	0x0800dab9

0800c44c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b08c      	sub	sp, #48	@ 0x30
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d109      	bne.n	800c46e <netconn_disconnect+0x22>
 800c45a:	4b0d      	ldr	r3, [pc, #52]	@ (800c490 <netconn_disconnect+0x44>)
 800c45c:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800c460:	490c      	ldr	r1, [pc, #48]	@ (800c494 <netconn_disconnect+0x48>)
 800c462:	480d      	ldr	r0, [pc, #52]	@ (800c498 <netconn_disconnect+0x4c>)
 800c464:	f012 f9d8 	bl	801e818 <iprintf>
 800c468:	f06f 030f 	mvn.w	r3, #15
 800c46c:	e00c      	b.n	800c488 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800c472:	f107 030c 	add.w	r3, r7, #12
 800c476:	4619      	mov	r1, r3
 800c478:	4808      	ldr	r0, [pc, #32]	@ (800c49c <netconn_disconnect+0x50>)
 800c47a:	f7ff fe85 	bl	800c188 <netconn_apimsg>
 800c47e:	4603      	mov	r3, r0
 800c480:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c484:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3730      	adds	r7, #48	@ 0x30
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	08022200 	.word	0x08022200
 800c494:	08022394 	.word	0x08022394
 800c498:	08022258 	.word	0x08022258
 800c49c:	0800dc35 	.word	0x0800dc35

0800c4a0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b088      	sub	sp, #32
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d109      	bne.n	800c4cc <netconn_recv_data+0x2c>
 800c4b8:	4b58      	ldr	r3, [pc, #352]	@ (800c61c <netconn_recv_data+0x17c>)
 800c4ba:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800c4be:	4958      	ldr	r1, [pc, #352]	@ (800c620 <netconn_recv_data+0x180>)
 800c4c0:	4858      	ldr	r0, [pc, #352]	@ (800c624 <netconn_recv_data+0x184>)
 800c4c2:	f012 f9a9 	bl	801e818 <iprintf>
 800c4c6:	f06f 030f 	mvn.w	r3, #15
 800c4ca:	e0a2      	b.n	800c612 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <netconn_recv_data+0x4c>
 800c4d8:	4b50      	ldr	r3, [pc, #320]	@ (800c61c <netconn_recv_data+0x17c>)
 800c4da:	f240 224a 	movw	r2, #586	@ 0x24a
 800c4de:	4952      	ldr	r1, [pc, #328]	@ (800c628 <netconn_recv_data+0x188>)
 800c4e0:	4850      	ldr	r0, [pc, #320]	@ (800c624 <netconn_recv_data+0x184>)
 800c4e2:	f012 f999 	bl	801e818 <iprintf>
 800c4e6:	f06f 030f 	mvn.w	r3, #15
 800c4ea:	e092      	b.n	800c612 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	3310      	adds	r3, #16
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f010 ff5b 	bl	801d3ac <sys_mbox_valid>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10e      	bne.n	800c51a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f000 fb01 	bl	800cb04 <netconn_err>
 800c502:	4603      	mov	r3, r0
 800c504:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800c506:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800c50e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c512:	e07e      	b.n	800c612 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800c514:	f06f 030a 	mvn.w	r3, #10
 800c518:	e07b      	b.n	800c612 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	7f1b      	ldrb	r3, [r3, #28]
 800c51e:	f003 0302 	and.w	r3, r3, #2
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10f      	bne.n	800c546 <netconn_recv_data+0xa6>
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	f003 0304 	and.w	r3, r3, #4
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10a      	bne.n	800c546 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	7f1b      	ldrb	r3, [r3, #28]
 800c534:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d104      	bne.n	800c546 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d023      	beq.n	800c58e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	3310      	adds	r3, #16
 800c54a:	f107 0218 	add.w	r2, r7, #24
 800c54e:	4611      	mov	r1, r2
 800c550:	4618      	mov	r0, r3
 800c552:	f010 ff14 	bl	801d37e <sys_arch_mbox_tryfetch>
 800c556:	4603      	mov	r3, r0
 800c558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55c:	d11f      	bne.n	800c59e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f000 fad0 	bl	800cb04 <netconn_err>
 800c564:	4603      	mov	r3, r0
 800c566:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800c568:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800c570:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c574:	e04d      	b.n	800c612 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	7f1b      	ldrb	r3, [r3, #28]
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d002      	beq.n	800c588 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c582:	f06f 030a 	mvn.w	r3, #10
 800c586:	e044      	b.n	800c612 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c588:	f06f 0306 	mvn.w	r3, #6
 800c58c:	e041      	b.n	800c612 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3310      	adds	r3, #16
 800c592:	f107 0118 	add.w	r1, r7, #24
 800c596:	2200      	movs	r2, #0
 800c598:	4618      	mov	r0, r3
 800c59a:	f010 febf 	bl	801d31c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c5a6:	2b10      	cmp	r3, #16
 800c5a8:	d117      	bne.n	800c5da <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	f107 0217 	add.w	r2, r7, #23
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 faf8 	bl	800cba8 <lwip_netconn_is_err_msg>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5c2:	f113 0f0f 	cmn.w	r3, #15
 800c5c6:	d101      	bne.n	800c5cc <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	e022      	b.n	800c612 <netconn_recv_data+0x172>
      }
      return err;
 800c5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5d0:	e01f      	b.n	800c612 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	891b      	ldrh	r3, [r3, #8]
 800c5d6:	83fb      	strh	r3, [r7, #30]
 800c5d8:	e00d      	b.n	800c5f6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d106      	bne.n	800c5ee <netconn_recv_data+0x14e>
 800c5e0:	4b0e      	ldr	r3, [pc, #56]	@ (800c61c <netconn_recv_data+0x17c>)
 800c5e2:	f240 2291 	movw	r2, #657	@ 0x291
 800c5e6:	4911      	ldr	r1, [pc, #68]	@ (800c62c <netconn_recv_data+0x18c>)
 800c5e8:	480e      	ldr	r0, [pc, #56]	@ (800c624 <netconn_recv_data+0x184>)
 800c5ea:	f012 f915 	bl	801e818 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	891b      	ldrh	r3, [r3, #8]
 800c5f4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d005      	beq.n	800c60a <netconn_recv_data+0x16a>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c602:	8bfa      	ldrh	r2, [r7, #30]
 800c604:	2101      	movs	r1, #1
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c60a:	69ba      	ldr	r2, [r7, #24]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3720      	adds	r7, #32
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	08022200 	.word	0x08022200
 800c620:	08022418 	.word	0x08022418
 800c624:	08022258 	.word	0x08022258
 800c628:	08022438 	.word	0x08022438
 800c62c:	08022454 	.word	0x08022454

0800c630 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d005      	beq.n	800c64e <netconn_tcp_recvd_msg+0x1e>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c64a:	2b10      	cmp	r3, #16
 800c64c:	d009      	beq.n	800c662 <netconn_tcp_recvd_msg+0x32>
 800c64e:	4b0c      	ldr	r3, [pc, #48]	@ (800c680 <netconn_tcp_recvd_msg+0x50>)
 800c650:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800c654:	490b      	ldr	r1, [pc, #44]	@ (800c684 <netconn_tcp_recvd_msg+0x54>)
 800c656:	480c      	ldr	r0, [pc, #48]	@ (800c688 <netconn_tcp_recvd_msg+0x58>)
 800c658:	f012 f8de 	bl	801e818 <iprintf>
 800c65c:	f06f 030f 	mvn.w	r3, #15
 800c660:	e00a      	b.n	800c678 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	4806      	ldr	r0, [pc, #24]	@ (800c68c <netconn_tcp_recvd_msg+0x5c>)
 800c672:	f7ff fd89 	bl	800c188 <netconn_apimsg>
 800c676:	4603      	mov	r3, r0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	08022200 	.word	0x08022200
 800c684:	08022460 	.word	0x08022460
 800c688:	08022258 	.word	0x08022258
 800c68c:	0800dd0b 	.word	0x0800dd0b

0800c690 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08c      	sub	sp, #48	@ 0x30
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d005      	beq.n	800c6ac <netconn_tcp_recvd+0x1c>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6a8:	2b10      	cmp	r3, #16
 800c6aa:	d009      	beq.n	800c6c0 <netconn_tcp_recvd+0x30>
 800c6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e0 <netconn_tcp_recvd+0x50>)
 800c6ae:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800c6b2:	490c      	ldr	r1, [pc, #48]	@ (800c6e4 <netconn_tcp_recvd+0x54>)
 800c6b4:	480c      	ldr	r0, [pc, #48]	@ (800c6e8 <netconn_tcp_recvd+0x58>)
 800c6b6:	f012 f8af 	bl	801e818 <iprintf>
 800c6ba:	f06f 030f 	mvn.w	r3, #15
 800c6be:	e00b      	b.n	800c6d8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800c6c0:	f107 030c 	add.w	r3, r7, #12
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	6839      	ldr	r1, [r7, #0]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff ffb1 	bl	800c630 <netconn_tcp_recvd_msg>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800c6d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3730      	adds	r7, #48	@ 0x30
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	08022200 	.word	0x08022200
 800c6e4:	08022460 	.word	0x08022460
 800c6e8:	08022258 	.word	0x08022258

0800c6ec <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b090      	sub	sp, #64	@ 0x40
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3310      	adds	r3, #16
 800c6fe:	4618      	mov	r0, r3
 800c700:	f010 fe54 	bl	801d3ac <sys_mbox_valid>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d102      	bne.n	800c710 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c70a:	f06f 030a 	mvn.w	r3, #10
 800c70e:	e06d      	b.n	800c7ec <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	7f1b      	ldrb	r3, [r3, #28]
 800c714:	b25b      	sxtb	r3, r3
 800c716:	2b00      	cmp	r3, #0
 800c718:	da07      	bge.n	800c72a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	7f1b      	ldrb	r3, [r3, #28]
 800c71e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c722:	b2da      	uxtb	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800c728:	e039      	b.n	800c79e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c72a:	79fb      	ldrb	r3, [r7, #7]
 800c72c:	461a      	mov	r2, r3
 800c72e:	68b9      	ldr	r1, [r7, #8]
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f7ff feb5 	bl	800c4a0 <netconn_recv_data>
 800c736:	4603      	mov	r3, r0
 800c738:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800c73c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c744:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c748:	e050      	b.n	800c7ec <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c750:	79fb      	ldrb	r3, [r7, #7]
 800c752:	f003 0308 	and.w	r3, r3, #8
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10e      	bne.n	800c778 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <netconn_recv_data_tcp+0x7a>
 800c760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c762:	891b      	ldrh	r3, [r3, #8]
 800c764:	e000      	b.n	800c768 <netconn_recv_data_tcp+0x7c>
 800c766:	2301      	movs	r3, #1
 800c768:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c76a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c76c:	f107 0214 	add.w	r2, r7, #20
 800c770:	4619      	mov	r1, r3
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7ff ff5c 	bl	800c630 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d134      	bne.n	800c7e8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	f003 0310 	and.w	r3, r3, #16
 800c784:	2b00      	cmp	r3, #0
 800c786:	d009      	beq.n	800c79c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	7f1b      	ldrb	r3, [r3, #28]
 800c78c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c790:	b2da      	uxtb	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800c796:	f06f 0306 	mvn.w	r3, #6
 800c79a:	e027      	b.n	800c7ec <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c79c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d005      	beq.n	800c7b2 <netconn_recv_data_tcp+0xc6>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10f      	bne.n	800c7da <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 f9a2 	bl	800cb04 <netconn_err>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800c7c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <netconn_recv_data_tcp+0xe8>
          return err;
 800c7ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c7d2:	e00b      	b.n	800c7ec <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c7d4:	f06f 030d 	mvn.w	r3, #13
 800c7d8:	e008      	b.n	800c7ec <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c7da:	2101      	movs	r1, #1
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 f961 	bl	800caa4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c7e2:	f06f 030e 	mvn.w	r3, #14
 800c7e6:	e001      	b.n	800c7ec <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c7e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3740      	adds	r7, #64	@ 0x40
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	4613      	mov	r3, r2
 800c800:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d005      	beq.n	800c814 <netconn_recv_tcp_pbuf_flags+0x20>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c810:	2b10      	cmp	r3, #16
 800c812:	d009      	beq.n	800c828 <netconn_recv_tcp_pbuf_flags+0x34>
 800c814:	4b0a      	ldr	r3, [pc, #40]	@ (800c840 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800c816:	f240 3225 	movw	r2, #805	@ 0x325
 800c81a:	490a      	ldr	r1, [pc, #40]	@ (800c844 <netconn_recv_tcp_pbuf_flags+0x50>)
 800c81c:	480a      	ldr	r0, [pc, #40]	@ (800c848 <netconn_recv_tcp_pbuf_flags+0x54>)
 800c81e:	f011 fffb 	bl	801e818 <iprintf>
 800c822:	f06f 030f 	mvn.w	r3, #15
 800c826:	e006      	b.n	800c836 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	461a      	mov	r2, r3
 800c82c:	68b9      	ldr	r1, [r7, #8]
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7ff ff5c 	bl	800c6ec <netconn_recv_data_tcp>
 800c834:	4603      	mov	r3, r0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	08022200 	.word	0x08022200
 800c844:	08022460 	.word	0x08022460
 800c848:	08022258 	.word	0x08022258

0800c84c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d005      	beq.n	800c86c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c868:	2b10      	cmp	r3, #16
 800c86a:	d109      	bne.n	800c880 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800c86c:	4b0a      	ldr	r3, [pc, #40]	@ (800c898 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800c86e:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800c872:	490a      	ldr	r1, [pc, #40]	@ (800c89c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800c874:	480a      	ldr	r0, [pc, #40]	@ (800c8a0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800c876:	f011 ffcf 	bl	801e818 <iprintf>
 800c87a:	f06f 030f 	mvn.w	r3, #15
 800c87e:	e006      	b.n	800c88e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	461a      	mov	r2, r3
 800c884:	68b9      	ldr	r1, [r7, #8]
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f7ff fe0a 	bl	800c4a0 <netconn_recv_data>
 800c88c:	4603      	mov	r3, r0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	08022200 	.word	0x08022200
 800c89c:	08022484 	.word	0x08022484
 800c8a0:	08022258 	.word	0x08022258

0800c8a4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08c      	sub	sp, #48	@ 0x30
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d109      	bne.n	800c8c8 <netconn_send+0x24>
 800c8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f0 <netconn_send+0x4c>)
 800c8b6:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800c8ba:	490e      	ldr	r1, [pc, #56]	@ (800c8f4 <netconn_send+0x50>)
 800c8bc:	480e      	ldr	r0, [pc, #56]	@ (800c8f8 <netconn_send+0x54>)
 800c8be:	f011 ffab 	bl	801e818 <iprintf>
 800c8c2:	f06f 030f 	mvn.w	r3, #15
 800c8c6:	e00e      	b.n	800c8e6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800c8d0:	f107 030c 	add.w	r3, r7, #12
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4809      	ldr	r0, [pc, #36]	@ (800c8fc <netconn_send+0x58>)
 800c8d8:	f7ff fc56 	bl	800c188 <netconn_apimsg>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c8e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3730      	adds	r7, #48	@ 0x30
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	08022200 	.word	0x08022200
 800c8f4:	080224bc 	.word	0x080224bc
 800c8f8:	08022258 	.word	0x08022258
 800c8fc:	0800dc71 	.word	0x0800dc71

0800c900 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b088      	sub	sp, #32
 800c904:	af02      	add	r7, sp, #8
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
 800c90c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c916:	78fa      	ldrb	r2, [r7, #3]
 800c918:	f107 0110 	add.w	r1, r7, #16
 800c91c:	6a3b      	ldr	r3, [r7, #32]
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	4613      	mov	r3, r2
 800c922:	2201      	movs	r2, #1
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f000 f805 	bl	800c934 <netconn_write_vectors_partly>
 800c92a:	4603      	mov	r3, r0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3718      	adds	r7, #24
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b092      	sub	sp, #72	@ 0x48
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	4611      	mov	r1, r2
 800c940:	461a      	mov	r2, r3
 800c942:	460b      	mov	r3, r1
 800c944:	80fb      	strh	r3, [r7, #6]
 800c946:	4613      	mov	r3, r2
 800c948:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d109      	bne.n	800c964 <netconn_write_vectors_partly+0x30>
 800c950:	4b4e      	ldr	r3, [pc, #312]	@ (800ca8c <netconn_write_vectors_partly+0x158>)
 800c952:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c956:	494e      	ldr	r1, [pc, #312]	@ (800ca90 <netconn_write_vectors_partly+0x15c>)
 800c958:	484e      	ldr	r0, [pc, #312]	@ (800ca94 <netconn_write_vectors_partly+0x160>)
 800c95a:	f011 ff5d 	bl	801e818 <iprintf>
 800c95e:	f06f 030f 	mvn.w	r3, #15
 800c962:	e08e      	b.n	800ca82 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c96c:	2b10      	cmp	r3, #16
 800c96e:	d009      	beq.n	800c984 <netconn_write_vectors_partly+0x50>
 800c970:	4b46      	ldr	r3, [pc, #280]	@ (800ca8c <netconn_write_vectors_partly+0x158>)
 800c972:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800c976:	4948      	ldr	r1, [pc, #288]	@ (800ca98 <netconn_write_vectors_partly+0x164>)
 800c978:	4846      	ldr	r0, [pc, #280]	@ (800ca94 <netconn_write_vectors_partly+0x160>)
 800c97a:	f011 ff4d 	bl	801e818 <iprintf>
 800c97e:	f06f 0305 	mvn.w	r3, #5
 800c982:	e07e      	b.n	800ca82 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	7f1b      	ldrb	r3, [r3, #28]
 800c988:	f003 0302 	and.w	r3, r3, #2
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d104      	bne.n	800c99a <netconn_write_vectors_partly+0x66>
 800c990:	797b      	ldrb	r3, [r7, #5]
 800c992:	f003 0304 	and.w	r3, r3, #4
 800c996:	2b00      	cmp	r3, #0
 800c998:	d001      	beq.n	800c99e <netconn_write_vectors_partly+0x6a>
 800c99a:	2301      	movs	r3, #1
 800c99c:	e000      	b.n	800c9a0 <netconn_write_vectors_partly+0x6c>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c9a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d005      	beq.n	800c9b8 <netconn_write_vectors_partly+0x84>
 800c9ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d102      	bne.n	800c9b8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c9b2:	f06f 0305 	mvn.w	r3, #5
 800c9b6:	e064      	b.n	800ca82 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c9bc:	2300      	movs	r3, #0
 800c9be:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9c0:	e015      	b.n	800c9ee <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c9c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9c4:	00db      	lsls	r3, r3, #3
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9ce:	4413      	add	r3, r2
 800c9d0:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800c9d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	4413      	add	r3, r2
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d202      	bcs.n	800c9e8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c9e2:	f06f 0305 	mvn.w	r3, #5
 800c9e6:	e04c      	b.n	800ca82 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	dbe5      	blt.n	800c9c2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c9f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e040      	b.n	800ca82 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ca00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	da0a      	bge.n	800ca1c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ca06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d102      	bne.n	800ca12 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ca0c:	f06f 0305 	mvn.w	r3, #5
 800ca10:	e037      	b.n	800ca82 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ca12:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ca16:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800ca18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1a:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ca24:	88fb      	ldrh	r3, [r7, #6]
 800ca26:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ca2c:	797b      	ldrb	r3, [r7, #5]
 800ca2e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ca32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca34:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ca36:	2300      	movs	r3, #0
 800ca38:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ca3a:	f107 0314 	add.w	r3, r7, #20
 800ca3e:	4619      	mov	r1, r3
 800ca40:	4816      	ldr	r0, [pc, #88]	@ (800ca9c <netconn_write_vectors_partly+0x168>)
 800ca42:	f7ff fba1 	bl	800c188 <netconn_apimsg>
 800ca46:	4603      	mov	r3, r0
 800ca48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800ca4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d114      	bne.n	800ca7e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ca54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ca5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca5e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ca60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10a      	bne.n	800ca7e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ca68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d006      	beq.n	800ca7e <netconn_write_vectors_partly+0x14a>
 800ca70:	4b06      	ldr	r3, [pc, #24]	@ (800ca8c <netconn_write_vectors_partly+0x158>)
 800ca72:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ca76:	490a      	ldr	r1, [pc, #40]	@ (800caa0 <netconn_write_vectors_partly+0x16c>)
 800ca78:	4806      	ldr	r0, [pc, #24]	@ (800ca94 <netconn_write_vectors_partly+0x160>)
 800ca7a:	f011 fecd 	bl	801e818 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ca7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3748      	adds	r7, #72	@ 0x48
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	08022200 	.word	0x08022200
 800ca90:	080224d8 	.word	0x080224d8
 800ca94:	08022258 	.word	0x08022258
 800ca98:	080224f4 	.word	0x080224f4
 800ca9c:	0800e10d 	.word	0x0800e10d
 800caa0:	08022518 	.word	0x08022518

0800caa4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08c      	sub	sp, #48	@ 0x30
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	460b      	mov	r3, r1
 800caae:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d109      	bne.n	800caca <netconn_close_shutdown+0x26>
 800cab6:	4b0f      	ldr	r3, [pc, #60]	@ (800caf4 <netconn_close_shutdown+0x50>)
 800cab8:	f240 4247 	movw	r2, #1095	@ 0x447
 800cabc:	490e      	ldr	r1, [pc, #56]	@ (800caf8 <netconn_close_shutdown+0x54>)
 800cabe:	480f      	ldr	r0, [pc, #60]	@ (800cafc <netconn_close_shutdown+0x58>)
 800cac0:	f011 feaa 	bl	801e818 <iprintf>
 800cac4:	f06f 030f 	mvn.w	r3, #15
 800cac8:	e010      	b.n	800caec <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800cace:	78fb      	ldrb	r3, [r7, #3]
 800cad0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800cad2:	2329      	movs	r3, #41	@ 0x29
 800cad4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800cad6:	f107 030c 	add.w	r3, r7, #12
 800cada:	4619      	mov	r1, r3
 800cadc:	4808      	ldr	r0, [pc, #32]	@ (800cb00 <netconn_close_shutdown+0x5c>)
 800cade:	f7ff fb53 	bl	800c188 <netconn_apimsg>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800cae8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800caec:	4618      	mov	r0, r3
 800caee:	3730      	adds	r7, #48	@ 0x30
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	08022200 	.word	0x08022200
 800caf8:	0802253c 	.word	0x0802253c
 800cafc:	08022258 	.word	0x08022258
 800cb00:	0800e331 	.word	0x0800e331

0800cb04 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <netconn_err+0x12>
    return ERR_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	e00d      	b.n	800cb32 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800cb16:	f010 fd53 	bl	801d5c0 <sys_arch_protect>
 800cb1a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	7a1b      	ldrb	r3, [r3, #8]
 800cb20:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f010 fd57 	bl	801d5dc <sys_arch_unprotect>
  return err;
 800cb2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	4603      	mov	r3, r0
 800cb44:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800cb46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb4a:	f113 0f0d 	cmn.w	r3, #13
 800cb4e:	d009      	beq.n	800cb64 <lwip_netconn_err_to_msg+0x28>
 800cb50:	f113 0f0d 	cmn.w	r3, #13
 800cb54:	dc0c      	bgt.n	800cb70 <lwip_netconn_err_to_msg+0x34>
 800cb56:	f113 0f0f 	cmn.w	r3, #15
 800cb5a:	d007      	beq.n	800cb6c <lwip_netconn_err_to_msg+0x30>
 800cb5c:	f113 0f0e 	cmn.w	r3, #14
 800cb60:	d002      	beq.n	800cb68 <lwip_netconn_err_to_msg+0x2c>
 800cb62:	e005      	b.n	800cb70 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800cb64:	4b0a      	ldr	r3, [pc, #40]	@ (800cb90 <lwip_netconn_err_to_msg+0x54>)
 800cb66:	e00e      	b.n	800cb86 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800cb68:	4b0a      	ldr	r3, [pc, #40]	@ (800cb94 <lwip_netconn_err_to_msg+0x58>)
 800cb6a:	e00c      	b.n	800cb86 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb98 <lwip_netconn_err_to_msg+0x5c>)
 800cb6e:	e00a      	b.n	800cb86 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800cb70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d005      	beq.n	800cb84 <lwip_netconn_err_to_msg+0x48>
 800cb78:	4b08      	ldr	r3, [pc, #32]	@ (800cb9c <lwip_netconn_err_to_msg+0x60>)
 800cb7a:	227d      	movs	r2, #125	@ 0x7d
 800cb7c:	4908      	ldr	r1, [pc, #32]	@ (800cba0 <lwip_netconn_err_to_msg+0x64>)
 800cb7e:	4809      	ldr	r0, [pc, #36]	@ (800cba4 <lwip_netconn_err_to_msg+0x68>)
 800cb80:	f011 fe4a 	bl	801e818 <iprintf>
      return NULL;
 800cb84:	2300      	movs	r3, #0
  }
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	080260f0 	.word	0x080260f0
 800cb94:	080260f1 	.word	0x080260f1
 800cb98:	080260f2 	.word	0x080260f2
 800cb9c:	080225a0 	.word	0x080225a0
 800cba0:	080225d4 	.word	0x080225d4
 800cba4:	080225e4 	.word	0x080225e4

0800cba8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d105      	bne.n	800cbc4 <lwip_netconn_is_err_msg+0x1c>
 800cbb8:	4b12      	ldr	r3, [pc, #72]	@ (800cc04 <lwip_netconn_is_err_msg+0x5c>)
 800cbba:	2285      	movs	r2, #133	@ 0x85
 800cbbc:	4912      	ldr	r1, [pc, #72]	@ (800cc08 <lwip_netconn_is_err_msg+0x60>)
 800cbbe:	4813      	ldr	r0, [pc, #76]	@ (800cc0c <lwip_netconn_is_err_msg+0x64>)
 800cbc0:	f011 fe2a 	bl	801e818 <iprintf>

  if (msg == &netconn_aborted) {
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a12      	ldr	r2, [pc, #72]	@ (800cc10 <lwip_netconn_is_err_msg+0x68>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d104      	bne.n	800cbd6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	22f3      	movs	r2, #243	@ 0xf3
 800cbd0:	701a      	strb	r2, [r3, #0]
    return 1;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e012      	b.n	800cbfc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a0e      	ldr	r2, [pc, #56]	@ (800cc14 <lwip_netconn_is_err_msg+0x6c>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d104      	bne.n	800cbe8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	22f2      	movs	r2, #242	@ 0xf2
 800cbe2:	701a      	strb	r2, [r3, #0]
    return 1;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e009      	b.n	800cbfc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4a0b      	ldr	r2, [pc, #44]	@ (800cc18 <lwip_netconn_is_err_msg+0x70>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d104      	bne.n	800cbfa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	22f1      	movs	r2, #241	@ 0xf1
 800cbf4:	701a      	strb	r2, [r3, #0]
    return 1;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e000      	b.n	800cbfc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	080225a0 	.word	0x080225a0
 800cc08:	0802260c 	.word	0x0802260c
 800cc0c:	080225e4 	.word	0x080225e4
 800cc10:	080260f0 	.word	0x080260f0
 800cc14:	080260f1 	.word	0x080260f1
 800cc18:	080260f2 	.word	0x080260f2

0800cc1c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
 800cc28:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d105      	bne.n	800cc3c <recv_udp+0x20>
 800cc30:	4b34      	ldr	r3, [pc, #208]	@ (800cd04 <recv_udp+0xe8>)
 800cc32:	22e5      	movs	r2, #229	@ 0xe5
 800cc34:	4934      	ldr	r1, [pc, #208]	@ (800cd08 <recv_udp+0xec>)
 800cc36:	4835      	ldr	r0, [pc, #212]	@ (800cd0c <recv_udp+0xf0>)
 800cc38:	f011 fdee 	bl	801e818 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d105      	bne.n	800cc4e <recv_udp+0x32>
 800cc42:	4b30      	ldr	r3, [pc, #192]	@ (800cd04 <recv_udp+0xe8>)
 800cc44:	22e6      	movs	r2, #230	@ 0xe6
 800cc46:	4932      	ldr	r1, [pc, #200]	@ (800cd10 <recv_udp+0xf4>)
 800cc48:	4830      	ldr	r0, [pc, #192]	@ (800cd0c <recv_udp+0xf0>)
 800cc4a:	f011 fde5 	bl	801e818 <iprintf>
  conn = (struct netconn *)arg;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d103      	bne.n	800cc60 <recv_udp+0x44>
    pbuf_free(p);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f004 fcf5 	bl	8011648 <pbuf_free>
    return;
 800cc5e:	e04d      	b.n	800ccfc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d005      	beq.n	800cc76 <recv_udp+0x5a>
 800cc6a:	4b26      	ldr	r3, [pc, #152]	@ (800cd04 <recv_udp+0xe8>)
 800cc6c:	22ee      	movs	r2, #238	@ 0xee
 800cc6e:	4929      	ldr	r1, [pc, #164]	@ (800cd14 <recv_udp+0xf8>)
 800cc70:	4826      	ldr	r0, [pc, #152]	@ (800cd0c <recv_udp+0xf0>)
 800cc72:	f011 fdd1 	bl	801e818 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	3310      	adds	r3, #16
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f010 fb96 	bl	801d3ac <sys_mbox_valid>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d103      	bne.n	800cc8e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f004 fcde 	bl	8011648 <pbuf_free>
    return;
 800cc8c:	e036      	b.n	800ccfc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cc8e:	2006      	movs	r0, #6
 800cc90:	f003 fd82 	bl	8010798 <memp_malloc>
 800cc94:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d103      	bne.n	800cca4 <recv_udp+0x88>
    pbuf_free(p);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f004 fcd3 	bl	8011648 <pbuf_free>
    return;
 800cca2:	e02b      	b.n	800ccfc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d002      	beq.n	800ccbc <recv_udp+0xa0>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	e000      	b.n	800ccbe <recv_udp+0xa2>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	69ba      	ldr	r2, [r7, #24]
 800ccc0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ccc6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	891b      	ldrh	r3, [r3, #8]
 800cccc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	3310      	adds	r3, #16
 800ccd2:	69b9      	ldr	r1, [r7, #24]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f010 fb07 	bl	801d2e8 <sys_mbox_trypost>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800cce0:	69b8      	ldr	r0, [r7, #24]
 800cce2:	f001 fbcf 	bl	800e484 <netbuf_delete>
    return;
 800cce6:	e009      	b.n	800ccfc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d005      	beq.n	800ccfc <recv_udp+0xe0>
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf4:	8afa      	ldrh	r2, [r7, #22]
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	69f8      	ldr	r0, [r7, #28]
 800ccfa:	4798      	blx	r3
  }
}
 800ccfc:	3720      	adds	r7, #32
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	080225a0 	.word	0x080225a0
 800cd08:	08022618 	.word	0x08022618
 800cd0c:	080225e4 	.word	0x080225e4
 800cd10:	0802263c 	.word	0x0802263c
 800cd14:	0802265c 	.word	0x0802265c

0800cd18 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d106      	bne.n	800cd3a <recv_tcp+0x22>
 800cd2c:	4b36      	ldr	r3, [pc, #216]	@ (800ce08 <recv_tcp+0xf0>)
 800cd2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800cd32:	4936      	ldr	r1, [pc, #216]	@ (800ce0c <recv_tcp+0xf4>)
 800cd34:	4836      	ldr	r0, [pc, #216]	@ (800ce10 <recv_tcp+0xf8>)
 800cd36:	f011 fd6f 	bl	801e818 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <recv_tcp+0x36>
 800cd40:	4b31      	ldr	r3, [pc, #196]	@ (800ce08 <recv_tcp+0xf0>)
 800cd42:	f240 122d 	movw	r2, #301	@ 0x12d
 800cd46:	4933      	ldr	r1, [pc, #204]	@ (800ce14 <recv_tcp+0xfc>)
 800cd48:	4831      	ldr	r0, [pc, #196]	@ (800ce10 <recv_tcp+0xf8>)
 800cd4a:	f011 fd65 	bl	801e818 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800cd4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d006      	beq.n	800cd64 <recv_tcp+0x4c>
 800cd56:	4b2c      	ldr	r3, [pc, #176]	@ (800ce08 <recv_tcp+0xf0>)
 800cd58:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800cd5c:	492e      	ldr	r1, [pc, #184]	@ (800ce18 <recv_tcp+0x100>)
 800cd5e:	482c      	ldr	r0, [pc, #176]	@ (800ce10 <recv_tcp+0xf8>)
 800cd60:	f011 fd5a 	bl	801e818 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d102      	bne.n	800cd74 <recv_tcp+0x5c>
    return ERR_VAL;
 800cd6e:	f06f 0305 	mvn.w	r3, #5
 800cd72:	e045      	b.n	800ce00 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d006      	beq.n	800cd8c <recv_tcp+0x74>
 800cd7e:	4b22      	ldr	r3, [pc, #136]	@ (800ce08 <recv_tcp+0xf0>)
 800cd80:	f240 1235 	movw	r2, #309	@ 0x135
 800cd84:	4925      	ldr	r1, [pc, #148]	@ (800ce1c <recv_tcp+0x104>)
 800cd86:	4822      	ldr	r0, [pc, #136]	@ (800ce10 <recv_tcp+0xf8>)
 800cd88:	f011 fd46 	bl	801e818 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	3310      	adds	r3, #16
 800cd90:	4618      	mov	r0, r3
 800cd92:	f010 fb0b 	bl	801d3ac <sys_mbox_valid>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10d      	bne.n	800cdb8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d008      	beq.n	800cdb4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	891b      	ldrh	r3, [r3, #8]
 800cda6:	4619      	mov	r1, r3
 800cda8:	68b8      	ldr	r0, [r7, #8]
 800cdaa:	f005 fc0d 	bl	80125c8 <tcp_recved>
      pbuf_free(p);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f004 fc4a 	bl	8011648 <pbuf_free>
    }
    return ERR_OK;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	e023      	b.n	800ce00 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d005      	beq.n	800cdca <recv_tcp+0xb2>
    msg = p;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	891b      	ldrh	r3, [r3, #8]
 800cdc6:	83fb      	strh	r3, [r7, #30]
 800cdc8:	e003      	b.n	800cdd2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800cdca:	4b15      	ldr	r3, [pc, #84]	@ (800ce20 <recv_tcp+0x108>)
 800cdcc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	3310      	adds	r3, #16
 800cdd6:	69b9      	ldr	r1, [r7, #24]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f010 fa85 	bl	801d2e8 <sys_mbox_trypost>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800cde4:	f04f 33ff 	mov.w	r3, #4294967295
 800cde8:	e00a      	b.n	800ce00 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d005      	beq.n	800cdfe <recv_tcp+0xe6>
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf6:	8bfa      	ldrh	r2, [r7, #30]
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	6978      	ldr	r0, [r7, #20]
 800cdfc:	4798      	blx	r3
  }

  return ERR_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3720      	adds	r7, #32
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	080225a0 	.word	0x080225a0
 800ce0c:	0802267c 	.word	0x0802267c
 800ce10:	080225e4 	.word	0x080225e4
 800ce14:	080226a0 	.word	0x080226a0
 800ce18:	080226c0 	.word	0x080226c0
 800ce1c:	080226d8 	.word	0x080226d8
 800ce20:	080260f2 	.word	0x080260f2

0800ce24 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d106      	bne.n	800ce46 <poll_tcp+0x22>
 800ce38:	4b29      	ldr	r3, [pc, #164]	@ (800cee0 <poll_tcp+0xbc>)
 800ce3a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800ce3e:	4929      	ldr	r1, [pc, #164]	@ (800cee4 <poll_tcp+0xc0>)
 800ce40:	4829      	ldr	r0, [pc, #164]	@ (800cee8 <poll_tcp+0xc4>)
 800ce42:	f011 fce9 	bl	801e818 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	785b      	ldrb	r3, [r3, #1]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d104      	bne.n	800ce58 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ce4e:	2101      	movs	r1, #1
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f000 ff8f 	bl	800dd74 <lwip_netconn_do_writemore>
 800ce56:	e016      	b.n	800ce86 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	785b      	ldrb	r3, [r3, #1]
 800ce5c:	2b04      	cmp	r3, #4
 800ce5e:	d112      	bne.n	800ce86 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6a1b      	ldr	r3, [r3, #32]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00a      	beq.n	800ce7e <poll_tcp+0x5a>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	7a5b      	ldrb	r3, [r3, #9]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d005      	beq.n	800ce7e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6a1b      	ldr	r3, [r3, #32]
 800ce76:	7a5a      	ldrb	r2, [r3, #9]
 800ce78:	3a01      	subs	r2, #1
 800ce7a:	b2d2      	uxtb	r2, r2
 800ce7c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ce7e:	2101      	movs	r1, #1
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f000 fb3b 	bl	800d4fc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	7f1b      	ldrb	r3, [r3, #28]
 800ce8a:	f003 0310 	and.w	r3, r3, #16
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d021      	beq.n	800ced6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d01d      	beq.n	800ced6 <poll_tcp+0xb2>
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cea2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800cea6:	d316      	bcc.n	800ced6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ceb0:	2b04      	cmp	r3, #4
 800ceb2:	d810      	bhi.n	800ced6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	7f1b      	ldrb	r3, [r3, #28]
 800ceb8:	f023 0310 	bic.w	r3, r3, #16
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d005      	beq.n	800ced6 <poll_tcp+0xb2>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cece:	2200      	movs	r2, #0
 800ced0:	2102      	movs	r1, #2
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	080225a0 	.word	0x080225a0
 800cee4:	080226f8 	.word	0x080226f8
 800cee8:	080225e4 	.word	0x080225e4

0800ceec <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	4613      	mov	r3, r2
 800cef8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d106      	bne.n	800cf12 <sent_tcp+0x26>
 800cf04:	4b20      	ldr	r3, [pc, #128]	@ (800cf88 <sent_tcp+0x9c>)
 800cf06:	f240 1293 	movw	r2, #403	@ 0x193
 800cf0a:	4920      	ldr	r1, [pc, #128]	@ (800cf8c <sent_tcp+0xa0>)
 800cf0c:	4820      	ldr	r0, [pc, #128]	@ (800cf90 <sent_tcp+0xa4>)
 800cf0e:	f011 fc83 	bl	801e818 <iprintf>

  if (conn) {
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d032      	beq.n	800cf7e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	785b      	ldrb	r3, [r3, #1]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d104      	bne.n	800cf2a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cf20:	2101      	movs	r1, #1
 800cf22:	6978      	ldr	r0, [r7, #20]
 800cf24:	f000 ff26 	bl	800dd74 <lwip_netconn_do_writemore>
 800cf28:	e007      	b.n	800cf3a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	785b      	ldrb	r3, [r3, #1]
 800cf2e:	2b04      	cmp	r3, #4
 800cf30:	d103      	bne.n	800cf3a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cf32:	2101      	movs	r1, #1
 800cf34:	6978      	ldr	r0, [r7, #20]
 800cf36:	f000 fae1 	bl	800d4fc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d01d      	beq.n	800cf7e <sent_tcp+0x92>
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cf4a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800cf4e:	d316      	bcc.n	800cf7e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cf58:	2b04      	cmp	r3, #4
 800cf5a:	d810      	bhi.n	800cf7e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	7f1b      	ldrb	r3, [r3, #28]
 800cf60:	f023 0310 	bic.w	r3, r3, #16
 800cf64:	b2da      	uxtb	r2, r3
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d005      	beq.n	800cf7e <sent_tcp+0x92>
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf76:	88fa      	ldrh	r2, [r7, #6]
 800cf78:	2102      	movs	r1, #2
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3718      	adds	r7, #24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	080225a0 	.word	0x080225a0
 800cf8c:	080226f8 	.word	0x080226f8
 800cf90:	080225e4 	.word	0x080225e4

0800cf94 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <err_tcp+0x24>
 800cfaa:	4b5f      	ldr	r3, [pc, #380]	@ (800d128 <err_tcp+0x194>)
 800cfac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800cfb0:	495e      	ldr	r1, [pc, #376]	@ (800d12c <err_tcp+0x198>)
 800cfb2:	485f      	ldr	r0, [pc, #380]	@ (800d130 <err_tcp+0x19c>)
 800cfb4:	f011 fc30 	bl	801e818 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800cfb8:	f010 fb02 	bl	801d5c0 <sys_arch_protect>
 800cfbc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	78fa      	ldrb	r2, [r7, #3]
 800cfc8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	7f1b      	ldrb	r3, [r3, #28]
 800cfce:	f043 0301 	orr.w	r3, r3, #1
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800cfe4:	69b8      	ldr	r0, [r7, #24]
 800cfe6:	f010 faf9 	bl	801d5dc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d005      	beq.n	800cffe <err_tcp+0x6a>
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff6:	2200      	movs	r2, #0
 800cff8:	2104      	movs	r1, #4
 800cffa:	69f8      	ldr	r0, [r7, #28]
 800cffc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d002:	2b00      	cmp	r3, #0
 800d004:	d005      	beq.n	800d012 <err_tcp+0x7e>
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d00a:	2200      	movs	r2, #0
 800d00c:	2100      	movs	r1, #0
 800d00e:	69f8      	ldr	r0, [r7, #28]
 800d010:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d016:	2b00      	cmp	r3, #0
 800d018:	d005      	beq.n	800d026 <err_tcp+0x92>
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01e:	2200      	movs	r2, #0
 800d020:	2102      	movs	r1, #2
 800d022:	69f8      	ldr	r0, [r7, #28]
 800d024:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff fd86 	bl	800cb3c <lwip_netconn_err_to_msg>
 800d030:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	3310      	adds	r3, #16
 800d036:	4618      	mov	r0, r3
 800d038:	f010 f9b8 	bl	801d3ac <sys_mbox_valid>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d005      	beq.n	800d04e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	3310      	adds	r3, #16
 800d046:	6939      	ldr	r1, [r7, #16]
 800d048:	4618      	mov	r0, r3
 800d04a:	f010 f94d 	bl	801d2e8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	3314      	adds	r3, #20
 800d052:	4618      	mov	r0, r3
 800d054:	f010 f9aa 	bl	801d3ac <sys_mbox_valid>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	3314      	adds	r3, #20
 800d062:	6939      	ldr	r1, [r7, #16]
 800d064:	4618      	mov	r0, r3
 800d066:	f010 f93f 	bl	801d2e8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d005      	beq.n	800d07c <err_tcp+0xe8>
 800d070:	7dfb      	ldrb	r3, [r7, #23]
 800d072:	2b04      	cmp	r3, #4
 800d074:	d002      	beq.n	800d07c <err_tcp+0xe8>
 800d076:	7dfb      	ldrb	r3, [r7, #23]
 800d078:	2b03      	cmp	r3, #3
 800d07a:	d143      	bne.n	800d104 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	7f1b      	ldrb	r3, [r3, #28]
 800d080:	f003 0304 	and.w	r3, r3, #4
 800d084:	2b00      	cmp	r3, #0
 800d086:	bf14      	ite	ne
 800d088:	2301      	movne	r3, #1
 800d08a:	2300      	moveq	r3, #0
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	7f1b      	ldrb	r3, [r3, #28]
 800d094:	f023 0304 	bic.w	r3, r3, #4
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d13b      	bne.n	800d11c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	6a1b      	ldr	r3, [r3, #32]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <err_tcp+0x126>
 800d0ac:	4b1e      	ldr	r3, [pc, #120]	@ (800d128 <err_tcp+0x194>)
 800d0ae:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d0b2:	4920      	ldr	r1, [pc, #128]	@ (800d134 <err_tcp+0x1a0>)
 800d0b4:	481e      	ldr	r0, [pc, #120]	@ (800d130 <err_tcp+0x19c>)
 800d0b6:	f011 fbaf 	bl	801e818 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d0ba:	7dfb      	ldrb	r3, [r7, #23]
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	d104      	bne.n	800d0ca <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	6a1b      	ldr	r3, [r3, #32]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	711a      	strb	r2, [r3, #4]
 800d0c8:	e003      	b.n	800d0d2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	78fa      	ldrb	r2, [r7, #3]
 800d0d0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	6a1b      	ldr	r3, [r3, #32]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	330c      	adds	r3, #12
 800d0da:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d0dc:	68b8      	ldr	r0, [r7, #8]
 800d0de:	f010 f9f3 	bl	801d4c8 <sys_sem_valid>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d106      	bne.n	800d0f6 <err_tcp+0x162>
 800d0e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d128 <err_tcp+0x194>)
 800d0ea:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800d0ee:	4912      	ldr	r1, [pc, #72]	@ (800d138 <err_tcp+0x1a4>)
 800d0f0:	480f      	ldr	r0, [pc, #60]	@ (800d130 <err_tcp+0x19c>)
 800d0f2:	f011 fb91 	bl	801e818 <iprintf>
      conn->current_msg = NULL;
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d0fc:	68b8      	ldr	r0, [r7, #8]
 800d0fe:	f010 f9c9 	bl	801d494 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d102:	e00b      	b.n	800d11c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	6a1b      	ldr	r3, [r3, #32]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d008      	beq.n	800d11e <err_tcp+0x18a>
 800d10c:	4b06      	ldr	r3, [pc, #24]	@ (800d128 <err_tcp+0x194>)
 800d10e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800d112:	490a      	ldr	r1, [pc, #40]	@ (800d13c <err_tcp+0x1a8>)
 800d114:	4806      	ldr	r0, [pc, #24]	@ (800d130 <err_tcp+0x19c>)
 800d116:	f011 fb7f 	bl	801e818 <iprintf>
  }
}
 800d11a:	e000      	b.n	800d11e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d11c:	bf00      	nop
}
 800d11e:	bf00      	nop
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	080225a0 	.word	0x080225a0
 800d12c:	080226f8 	.word	0x080226f8
 800d130:	080225e4 	.word	0x080225e4
 800d134:	08022708 	.word	0x08022708
 800d138:	08022724 	.word	0x08022724
 800d13c:	08022740 	.word	0x08022740

0800d140 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d14e:	6879      	ldr	r1, [r7, #4]
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f006 fa19 	bl	8013588 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d156:	490a      	ldr	r1, [pc, #40]	@ (800d180 <setup_tcp+0x40>)
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f006 fa27 	bl	80135ac <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d15e:	4909      	ldr	r1, [pc, #36]	@ (800d184 <setup_tcp+0x44>)
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f006 fa45 	bl	80135f0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d166:	2202      	movs	r2, #2
 800d168:	4907      	ldr	r1, [pc, #28]	@ (800d188 <setup_tcp+0x48>)
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f006 fa9c 	bl	80136a8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d170:	4906      	ldr	r1, [pc, #24]	@ (800d18c <setup_tcp+0x4c>)
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f006 fa5e 	bl	8013634 <tcp_err>
}
 800d178:	bf00      	nop
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	0800cd19 	.word	0x0800cd19
 800d184:	0800ceed 	.word	0x0800ceed
 800d188:	0800ce25 	.word	0x0800ce25
 800d18c:	0800cf95 	.word	0x0800cf95

0800d190 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d190:	b590      	push	{r4, r7, lr}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d198:	2300      	movs	r3, #0
 800d19a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d006      	beq.n	800d1b4 <pcb_new+0x24>
 800d1a6:	4b2b      	ldr	r3, [pc, #172]	@ (800d254 <pcb_new+0xc4>)
 800d1a8:	f240 2265 	movw	r2, #613	@ 0x265
 800d1ac:	492a      	ldr	r1, [pc, #168]	@ (800d258 <pcb_new+0xc8>)
 800d1ae:	482b      	ldr	r0, [pc, #172]	@ (800d25c <pcb_new+0xcc>)
 800d1b0:	f011 fb32 	bl	801e818 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d1be:	2b10      	cmp	r3, #16
 800d1c0:	d022      	beq.n	800d208 <pcb_new+0x78>
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	d133      	bne.n	800d22e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681c      	ldr	r4, [r3, #0]
 800d1ca:	7bfb      	ldrb	r3, [r7, #15]
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f00b fd34 	bl	8018c3a <udp_new_ip_type>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d02a      	beq.n	800d236 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	2b22      	cmp	r3, #34	@ 0x22
 800d1e8:	d104      	bne.n	800d1f4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6858      	ldr	r0, [r3, #4]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	4917      	ldr	r1, [pc, #92]	@ (800d260 <pcb_new+0xd0>)
 800d202:	f00b fca1 	bl	8018b48 <udp_recv>
      }
      break;
 800d206:	e016      	b.n	800d236 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681c      	ldr	r4, [r3, #0]
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	4618      	mov	r0, r3
 800d210:	f006 f9ac 	bl	801356c <tcp_new_ip_type>
 800d214:	4603      	mov	r3, r0
 800d216:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00b      	beq.n	800d23a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff ff8a 	bl	800d140 <setup_tcp>
      }
      break;
 800d22c:	e005      	b.n	800d23a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	22fa      	movs	r2, #250	@ 0xfa
 800d232:	711a      	strb	r2, [r3, #4]
      return;
 800d234:	e00a      	b.n	800d24c <pcb_new+0xbc>
      break;
 800d236:	bf00      	nop
 800d238:	e000      	b.n	800d23c <pcb_new+0xac>
      break;
 800d23a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	22ff      	movs	r2, #255	@ 0xff
 800d24a:	711a      	strb	r2, [r3, #4]
  }
}
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd90      	pop	{r4, r7, pc}
 800d252:	bf00      	nop
 800d254:	080225a0 	.word	0x080225a0
 800d258:	08022784 	.word	0x08022784
 800d25c:	080225e4 	.word	0x080225e4
 800d260:	0800cc1d 	.word	0x0800cc1d

0800d264 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d102      	bne.n	800d286 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7ff ff85 	bl	800d190 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d286:	bf00      	nop
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
	...

0800d290 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	4603      	mov	r3, r0
 800d298:	6039      	str	r1, [r7, #0]
 800d29a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d2a0:	2007      	movs	r0, #7
 800d2a2:	f003 fa79 	bl	8010798 <memp_malloc>
 800d2a6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <netconn_alloc+0x22>
    return NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e052      	b.n	800d358 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	79fa      	ldrb	r2, [r7, #7]
 800d2bc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d2c4:	79fb      	ldrb	r3, [r7, #7]
 800d2c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d2ca:	2b10      	cmp	r3, #16
 800d2cc:	d004      	beq.n	800d2d8 <netconn_alloc+0x48>
 800d2ce:	2b20      	cmp	r3, #32
 800d2d0:	d105      	bne.n	800d2de <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d2d2:	2306      	movs	r3, #6
 800d2d4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d2d6:	e00a      	b.n	800d2ee <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d2d8:	2306      	movs	r3, #6
 800d2da:	617b      	str	r3, [r7, #20]
      break;
 800d2dc:	e007      	b.n	800d2ee <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d2de:	4b20      	ldr	r3, [pc, #128]	@ (800d360 <netconn_alloc+0xd0>)
 800d2e0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800d2e4:	491f      	ldr	r1, [pc, #124]	@ (800d364 <netconn_alloc+0xd4>)
 800d2e6:	4820      	ldr	r0, [pc, #128]	@ (800d368 <netconn_alloc+0xd8>)
 800d2e8:	f011 fa96 	bl	801e818 <iprintf>
      goto free_and_return;
 800d2ec:	e02f      	b.n	800d34e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3310      	adds	r3, #16
 800d2f2:	6979      	ldr	r1, [r7, #20]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f00f ffcb 	bl	801d290 <sys_mbox_new>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d125      	bne.n	800d34c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	330c      	adds	r3, #12
 800d304:	2100      	movs	r1, #0
 800d306:	4618      	mov	r0, r3
 800d308:	f010 f86e 	bl	801d3e8 <sys_sem_new>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d005      	beq.n	800d31e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	3310      	adds	r3, #16
 800d316:	4618      	mov	r0, r3
 800d318:	f00f ffd4 	bl	801d2c4 <sys_mbox_free>
    goto free_and_return;
 800d31c:	e017      	b.n	800d34e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	3314      	adds	r3, #20
 800d322:	4618      	mov	r0, r3
 800d324:	f010 f853 	bl	801d3ce <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f04f 32ff 	mov.w	r2, #4294967295
 800d334:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	7cfa      	ldrb	r2, [r7, #19]
 800d346:	771a      	strb	r2, [r3, #28]
  return conn;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	e005      	b.n	800d358 <netconn_alloc+0xc8>
    goto free_and_return;
 800d34c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d34e:	68f9      	ldr	r1, [r7, #12]
 800d350:	2007      	movs	r0, #7
 800d352:	f003 fa97 	bl	8010884 <memp_free>
  return NULL;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	080225a0 	.word	0x080225a0
 800d364:	080227a4 	.word	0x080227a4
 800d368:	080225e4 	.word	0x080225e4

0800d36c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d006      	beq.n	800d38a <netconn_free+0x1e>
 800d37c:	4b1b      	ldr	r3, [pc, #108]	@ (800d3ec <netconn_free+0x80>)
 800d37e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d382:	491b      	ldr	r1, [pc, #108]	@ (800d3f0 <netconn_free+0x84>)
 800d384:	481b      	ldr	r0, [pc, #108]	@ (800d3f4 <netconn_free+0x88>)
 800d386:	f011 fa47 	bl	801e818 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	3310      	adds	r3, #16
 800d38e:	4618      	mov	r0, r3
 800d390:	f010 f80c 	bl	801d3ac <sys_mbox_valid>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d006      	beq.n	800d3a8 <netconn_free+0x3c>
 800d39a:	4b14      	ldr	r3, [pc, #80]	@ (800d3ec <netconn_free+0x80>)
 800d39c:	f240 3223 	movw	r2, #803	@ 0x323
 800d3a0:	4915      	ldr	r1, [pc, #84]	@ (800d3f8 <netconn_free+0x8c>)
 800d3a2:	4814      	ldr	r0, [pc, #80]	@ (800d3f4 <netconn_free+0x88>)
 800d3a4:	f011 fa38 	bl	801e818 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	3314      	adds	r3, #20
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f00f fffd 	bl	801d3ac <sys_mbox_valid>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <netconn_free+0x5a>
 800d3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800d3ec <netconn_free+0x80>)
 800d3ba:	f240 3226 	movw	r2, #806	@ 0x326
 800d3be:	490f      	ldr	r1, [pc, #60]	@ (800d3fc <netconn_free+0x90>)
 800d3c0:	480c      	ldr	r0, [pc, #48]	@ (800d3f4 <netconn_free+0x88>)
 800d3c2:	f011 fa29 	bl	801e818 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	330c      	adds	r3, #12
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f010 f86f 	bl	801d4ae <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	330c      	adds	r3, #12
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f010 f888 	bl	801d4ea <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d3da:	6879      	ldr	r1, [r7, #4]
 800d3dc:	2007      	movs	r0, #7
 800d3de:	f003 fa51 	bl	8010884 <memp_free>
}
 800d3e2:	bf00      	nop
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	080225a0 	.word	0x080225a0
 800d3f0:	080227cc 	.word	0x080227cc
 800d3f4:	080225e4 	.word	0x080225e4
 800d3f8:	080227fc 	.word	0x080227fc
 800d3fc:	08022838 	.word	0x08022838

0800d400 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	3310      	adds	r3, #16
 800d40c:	4618      	mov	r0, r3
 800d40e:	f00f ffcd 	bl	801d3ac <sys_mbox_valid>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d02f      	beq.n	800d478 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d418:	e018      	b.n	800d44c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d422:	2b10      	cmp	r3, #16
 800d424:	d10e      	bne.n	800d444 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	f107 020f 	add.w	r2, r7, #15
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff fbba 	bl	800cba8 <lwip_netconn_is_err_msg>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d108      	bne.n	800d44c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f004 f903 	bl	8011648 <pbuf_free>
 800d442:	e003      	b.n	800d44c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	4618      	mov	r0, r3
 800d448:	f001 f81c 	bl	800e484 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3310      	adds	r3, #16
 800d450:	f107 0210 	add.w	r2, r7, #16
 800d454:	4611      	mov	r1, r2
 800d456:	4618      	mov	r0, r3
 800d458:	f00f ff91 	bl	801d37e <sys_arch_mbox_tryfetch>
 800d45c:	4603      	mov	r3, r0
 800d45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d462:	d1da      	bne.n	800d41a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3310      	adds	r3, #16
 800d468:	4618      	mov	r0, r3
 800d46a:	f00f ff2b 	bl	801d2c4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	3310      	adds	r3, #16
 800d472:	4618      	mov	r0, r3
 800d474:	f00f ffab 	bl	801d3ce <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3314      	adds	r3, #20
 800d47c:	4618      	mov	r0, r3
 800d47e:	f00f ff95 	bl	801d3ac <sys_mbox_valid>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d034      	beq.n	800d4f2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d488:	e01d      	b.n	800d4c6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	f107 020e 	add.w	r2, r7, #14
 800d490:	4611      	mov	r1, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f7ff fb88 	bl	800cba8 <lwip_netconn_is_err_msg>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d113      	bne.n	800d4c6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d4a2:	6978      	ldr	r0, [r7, #20]
 800d4a4:	f7ff ffac 	bl	800d400 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d007      	beq.n	800d4c0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f005 f821 	bl	80124fc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d4c0:	6978      	ldr	r0, [r7, #20]
 800d4c2:	f7ff ff53 	bl	800d36c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3314      	adds	r3, #20
 800d4ca:	f107 0210 	add.w	r2, r7, #16
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f00f ff54 	bl	801d37e <sys_arch_mbox_tryfetch>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4dc:	d1d5      	bne.n	800d48a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	3314      	adds	r3, #20
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f00f feee 	bl	801d2c4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	3314      	adds	r3, #20
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f00f ff6e 	bl	801d3ce <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d4f2:	bf00      	nop
 800d4f4:	3718      	adds	r7, #24
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
	...

0800d4fc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	460b      	mov	r3, r1
 800d506:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d508:	2300      	movs	r3, #0
 800d50a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <lwip_netconn_do_close_internal+0x24>
 800d512:	4b87      	ldr	r3, [pc, #540]	@ (800d730 <lwip_netconn_do_close_internal+0x234>)
 800d514:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800d518:	4986      	ldr	r1, [pc, #536]	@ (800d734 <lwip_netconn_do_close_internal+0x238>)
 800d51a:	4887      	ldr	r0, [pc, #540]	@ (800d738 <lwip_netconn_do_close_internal+0x23c>)
 800d51c:	f011 f97c 	bl	801e818 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d528:	2b10      	cmp	r3, #16
 800d52a:	d006      	beq.n	800d53a <lwip_netconn_do_close_internal+0x3e>
 800d52c:	4b80      	ldr	r3, [pc, #512]	@ (800d730 <lwip_netconn_do_close_internal+0x234>)
 800d52e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800d532:	4982      	ldr	r1, [pc, #520]	@ (800d73c <lwip_netconn_do_close_internal+0x240>)
 800d534:	4880      	ldr	r0, [pc, #512]	@ (800d738 <lwip_netconn_do_close_internal+0x23c>)
 800d536:	f011 f96f 	bl	801e818 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	785b      	ldrb	r3, [r3, #1]
 800d53e:	2b04      	cmp	r3, #4
 800d540:	d006      	beq.n	800d550 <lwip_netconn_do_close_internal+0x54>
 800d542:	4b7b      	ldr	r3, [pc, #492]	@ (800d730 <lwip_netconn_do_close_internal+0x234>)
 800d544:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800d548:	497d      	ldr	r1, [pc, #500]	@ (800d740 <lwip_netconn_do_close_internal+0x244>)
 800d54a:	487b      	ldr	r0, [pc, #492]	@ (800d738 <lwip_netconn_do_close_internal+0x23c>)
 800d54c:	f011 f964 	bl	801e818 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d106      	bne.n	800d566 <lwip_netconn_do_close_internal+0x6a>
 800d558:	4b75      	ldr	r3, [pc, #468]	@ (800d730 <lwip_netconn_do_close_internal+0x234>)
 800d55a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800d55e:	4979      	ldr	r1, [pc, #484]	@ (800d744 <lwip_netconn_do_close_internal+0x248>)
 800d560:	4875      	ldr	r0, [pc, #468]	@ (800d738 <lwip_netconn_do_close_internal+0x23c>)
 800d562:	f011 f959 	bl	801e818 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a1b      	ldr	r3, [r3, #32]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d106      	bne.n	800d57c <lwip_netconn_do_close_internal+0x80>
 800d56e:	4b70      	ldr	r3, [pc, #448]	@ (800d730 <lwip_netconn_do_close_internal+0x234>)
 800d570:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d574:	4974      	ldr	r1, [pc, #464]	@ (800d748 <lwip_netconn_do_close_internal+0x24c>)
 800d576:	4870      	ldr	r0, [pc, #448]	@ (800d738 <lwip_netconn_do_close_internal+0x23c>)
 800d578:	f011 f94e 	bl	801e818 <iprintf>

  tpcb = conn->pcb.tcp;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	7a1b      	ldrb	r3, [r3, #8]
 800d588:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d58a:	7bfb      	ldrb	r3, [r7, #15]
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d592:	7bfb      	ldrb	r3, [r7, #15]
 800d594:	f003 0302 	and.w	r3, r3, #2
 800d598:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	2b03      	cmp	r3, #3
 800d59e:	d102      	bne.n	800d5a6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	75bb      	strb	r3, [r7, #22]
 800d5a4:	e01f      	b.n	800d5e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d5a6:	7bbb      	ldrb	r3, [r7, #14]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00e      	beq.n	800d5ca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d5b0:	2b05      	cmp	r3, #5
 800d5b2:	d007      	beq.n	800d5c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d5b8:	2b06      	cmp	r3, #6
 800d5ba:	d003      	beq.n	800d5c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d5c0:	2b08      	cmp	r3, #8
 800d5c2:	d102      	bne.n	800d5ca <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	75bb      	strb	r3, [r7, #22]
 800d5c8:	e00d      	b.n	800d5e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d5ca:	7b7b      	ldrb	r3, [r7, #13]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d008      	beq.n	800d5e2 <lwip_netconn_do_close_internal+0xe6>
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	8b5b      	ldrh	r3, [r3, #26]
 800d5d4:	f003 0310 	and.w	r3, r3, #16
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	75bb      	strb	r3, [r7, #22]
 800d5e0:	e001      	b.n	800d5e6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d5e6:	7dbb      	ldrb	r3, [r7, #22]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d003      	beq.n	800d5f4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	6938      	ldr	r0, [r7, #16]
 800d5f0:	f005 ffca 	bl	8013588 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	7d1b      	ldrb	r3, [r3, #20]
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d104      	bne.n	800d606 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	6938      	ldr	r0, [r7, #16]
 800d600:	f006 f83a 	bl	8013678 <tcp_accept>
 800d604:	e01d      	b.n	800d642 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d606:	7bbb      	ldrb	r3, [r7, #14]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d60c:	2100      	movs	r1, #0
 800d60e:	6938      	ldr	r0, [r7, #16]
 800d610:	f005 ffcc 	bl	80135ac <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d614:	2100      	movs	r1, #0
 800d616:	6938      	ldr	r0, [r7, #16]
 800d618:	f006 f82e 	bl	8013678 <tcp_accept>
    }
    if (shut_tx) {
 800d61c:	7b7b      	ldrb	r3, [r7, #13]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d622:	2100      	movs	r1, #0
 800d624:	6938      	ldr	r0, [r7, #16]
 800d626:	f005 ffe3 	bl	80135f0 <tcp_sent>
    }
    if (shut_close) {
 800d62a:	7dbb      	ldrb	r3, [r7, #22]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d008      	beq.n	800d642 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d630:	2200      	movs	r2, #0
 800d632:	2100      	movs	r1, #0
 800d634:	6938      	ldr	r0, [r7, #16]
 800d636:	f006 f837 	bl	80136a8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d63a:	2100      	movs	r1, #0
 800d63c:	6938      	ldr	r0, [r7, #16]
 800d63e:	f005 fff9 	bl	8013634 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d642:	7dbb      	ldrb	r3, [r7, #22]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d005      	beq.n	800d654 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d648:	6938      	ldr	r0, [r7, #16]
 800d64a:	f004 fe11 	bl	8012270 <tcp_close>
 800d64e:	4603      	mov	r3, r0
 800d650:	75fb      	strb	r3, [r7, #23]
 800d652:	e007      	b.n	800d664 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d654:	7bbb      	ldrb	r3, [r7, #14]
 800d656:	7b7a      	ldrb	r2, [r7, #13]
 800d658:	4619      	mov	r1, r3
 800d65a:	6938      	ldr	r0, [r7, #16]
 800d65c:	f004 fe34 	bl	80122c8 <tcp_shutdown>
 800d660:	4603      	mov	r3, r0
 800d662:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d664:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d66c:	2301      	movs	r3, #1
 800d66e:	757b      	strb	r3, [r7, #21]
 800d670:	e016      	b.n	800d6a0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67a:	d10f      	bne.n	800d69c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	7a5b      	ldrb	r3, [r3, #9]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10c      	bne.n	800d6a0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d686:	2301      	movs	r3, #1
 800d688:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d68a:	7dbb      	ldrb	r3, [r7, #22]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d007      	beq.n	800d6a0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d690:	6938      	ldr	r0, [r7, #16]
 800d692:	f004 ff33 	bl	80124fc <tcp_abort>
          err = ERR_OK;
 800d696:	2300      	movs	r3, #0
 800d698:	75fb      	strb	r3, [r7, #23]
 800d69a:	e001      	b.n	800d6a0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d69c:	2301      	movs	r3, #1
 800d69e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d6a0:	7d7b      	ldrb	r3, [r7, #21]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d052      	beq.n	800d74c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a1b      	ldr	r3, [r3, #32]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	330c      	adds	r3, #12
 800d6ae:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a1b      	ldr	r3, [r3, #32]
 800d6b4:	7dfa      	ldrb	r2, [r7, #23]
 800d6b6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d6c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d129      	bne.n	800d720 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d6cc:	7dbb      	ldrb	r3, [r7, #22]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00c      	beq.n	800d6ec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d005      	beq.n	800d6ec <lwip_netconn_do_close_internal+0x1f0>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2104      	movs	r1, #4
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	4798      	blx	r3
      }
      if (shut_rx) {
 800d6ec:	7bbb      	ldrb	r3, [r7, #14]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d009      	beq.n	800d706 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d005      	beq.n	800d706 <lwip_netconn_do_close_internal+0x20a>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6fe:	2200      	movs	r2, #0
 800d700:	2100      	movs	r1, #0
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	4798      	blx	r3
      }
      if (shut_tx) {
 800d706:	7b7b      	ldrb	r3, [r7, #13]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d009      	beq.n	800d720 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d710:	2b00      	cmp	r3, #0
 800d712:	d005      	beq.n	800d720 <lwip_netconn_do_close_internal+0x224>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d718:	2200      	movs	r2, #0
 800d71a:	2102      	movs	r1, #2
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d720:	78fb      	ldrb	r3, [r7, #3]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d726:	68b8      	ldr	r0, [r7, #8]
 800d728:	f00f feb4 	bl	801d494 <sys_sem_signal>
    }
    return ERR_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	e03c      	b.n	800d7aa <lwip_netconn_do_close_internal+0x2ae>
 800d730:	080225a0 	.word	0x080225a0
 800d734:	08022874 	.word	0x08022874
 800d738:	080225e4 	.word	0x080225e4
 800d73c:	08022884 	.word	0x08022884
 800d740:	080228a4 	.word	0x080228a4
 800d744:	080228c8 	.word	0x080228c8
 800d748:	08022708 	.word	0x08022708
  }
  if (!close_finished) {
 800d74c:	7d7b      	ldrb	r3, [r7, #21]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d11e      	bne.n	800d790 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	7d1b      	ldrb	r3, [r3, #20]
 800d756:	2b01      	cmp	r3, #1
 800d758:	d106      	bne.n	800d768 <lwip_netconn_do_close_internal+0x26c>
 800d75a:	4b16      	ldr	r3, [pc, #88]	@ (800d7b4 <lwip_netconn_do_close_internal+0x2b8>)
 800d75c:	f240 4241 	movw	r2, #1089	@ 0x441
 800d760:	4915      	ldr	r1, [pc, #84]	@ (800d7b8 <lwip_netconn_do_close_internal+0x2bc>)
 800d762:	4816      	ldr	r0, [pc, #88]	@ (800d7bc <lwip_netconn_do_close_internal+0x2c0>)
 800d764:	f011 f858 	bl	801e818 <iprintf>
    if (shut_tx) {
 800d768:	7b7b      	ldrb	r3, [r7, #13]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d003      	beq.n	800d776 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800d76e:	4914      	ldr	r1, [pc, #80]	@ (800d7c0 <lwip_netconn_do_close_internal+0x2c4>)
 800d770:	6938      	ldr	r0, [r7, #16]
 800d772:	f005 ff3d 	bl	80135f0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d776:	2201      	movs	r2, #1
 800d778:	4912      	ldr	r1, [pc, #72]	@ (800d7c4 <lwip_netconn_do_close_internal+0x2c8>)
 800d77a:	6938      	ldr	r0, [r7, #16]
 800d77c:	f005 ff94 	bl	80136a8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d780:	4911      	ldr	r1, [pc, #68]	@ (800d7c8 <lwip_netconn_do_close_internal+0x2cc>)
 800d782:	6938      	ldr	r0, [r7, #16]
 800d784:	f005 ff56 	bl	8013634 <tcp_err>
    tcp_arg(tpcb, conn);
 800d788:	6879      	ldr	r1, [r7, #4]
 800d78a:	6938      	ldr	r0, [r7, #16]
 800d78c:	f005 fefc 	bl	8013588 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d790:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d106      	bne.n	800d7a6 <lwip_netconn_do_close_internal+0x2aa>
 800d798:	4b06      	ldr	r3, [pc, #24]	@ (800d7b4 <lwip_netconn_do_close_internal+0x2b8>)
 800d79a:	f240 424d 	movw	r2, #1101	@ 0x44d
 800d79e:	490b      	ldr	r1, [pc, #44]	@ (800d7cc <lwip_netconn_do_close_internal+0x2d0>)
 800d7a0:	4806      	ldr	r0, [pc, #24]	@ (800d7bc <lwip_netconn_do_close_internal+0x2c0>)
 800d7a2:	f011 f839 	bl	801e818 <iprintf>
  return err;
 800d7a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	080225a0 	.word	0x080225a0
 800d7b8:	080228dc 	.word	0x080228dc
 800d7bc:	080225e4 	.word	0x080225e4
 800d7c0:	0800ceed 	.word	0x0800ceed
 800d7c4:	0800ce25 	.word	0x0800ce25
 800d7c8:	0800cf95 	.word	0x0800cf95
 800d7cc:	08022900 	.word	0x08022900

0800d7d0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	785b      	ldrb	r3, [r3, #1]
 800d7e2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d7e4:	7afb      	ldrb	r3, [r7, #11]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00d      	beq.n	800d806 <lwip_netconn_do_delconn+0x36>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d7f4:	2b10      	cmp	r3, #16
 800d7f6:	d006      	beq.n	800d806 <lwip_netconn_do_delconn+0x36>
 800d7f8:	4b60      	ldr	r3, [pc, #384]	@ (800d97c <lwip_netconn_do_delconn+0x1ac>)
 800d7fa:	f240 425e 	movw	r2, #1118	@ 0x45e
 800d7fe:	4960      	ldr	r1, [pc, #384]	@ (800d980 <lwip_netconn_do_delconn+0x1b0>)
 800d800:	4860      	ldr	r0, [pc, #384]	@ (800d984 <lwip_netconn_do_delconn+0x1b4>)
 800d802:	f011 f809 	bl	801e818 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d806:	7afb      	ldrb	r3, [r7, #11]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d005      	beq.n	800d818 <lwip_netconn_do_delconn+0x48>
 800d80c:	7afb      	ldrb	r3, [r7, #11]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d002      	beq.n	800d818 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d812:	7afb      	ldrb	r3, [r7, #11]
 800d814:	2b03      	cmp	r3, #3
 800d816:	d109      	bne.n	800d82c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d818:	7afb      	ldrb	r3, [r7, #11]
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d10a      	bne.n	800d834 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	7f1b      	ldrb	r3, [r3, #28]
 800d824:	f003 0304 	and.w	r3, r3, #4
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d103      	bne.n	800d834 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	22fb      	movs	r2, #251	@ 0xfb
 800d830:	711a      	strb	r2, [r3, #4]
 800d832:	e097      	b.n	800d964 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d834:	7afb      	ldrb	r3, [r7, #11]
 800d836:	2b03      	cmp	r3, #3
 800d838:	d10d      	bne.n	800d856 <lwip_netconn_do_delconn+0x86>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	7f1b      	ldrb	r3, [r3, #28]
 800d840:	f003 0304 	and.w	r3, r3, #4
 800d844:	2b00      	cmp	r3, #0
 800d846:	d106      	bne.n	800d856 <lwip_netconn_do_delconn+0x86>
 800d848:	4b4c      	ldr	r3, [pc, #304]	@ (800d97c <lwip_netconn_do_delconn+0x1ac>)
 800d84a:	f240 427a 	movw	r2, #1146	@ 0x47a
 800d84e:	494e      	ldr	r1, [pc, #312]	@ (800d988 <lwip_netconn_do_delconn+0x1b8>)
 800d850:	484c      	ldr	r0, [pc, #304]	@ (800d984 <lwip_netconn_do_delconn+0x1b4>)
 800d852:	f010 ffe1 	bl	801e818 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2200      	movs	r2, #0
 800d85a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff fdcd 	bl	800d400 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d05f      	beq.n	800d930 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d87a:	2b10      	cmp	r3, #16
 800d87c:	d00d      	beq.n	800d89a <lwip_netconn_do_delconn+0xca>
 800d87e:	2b20      	cmp	r3, #32
 800d880:	d151      	bne.n	800d926 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	4618      	mov	r0, r3
 800d894:	f00b f978 	bl	8018b88 <udp_remove>
          break;
 800d898:	e046      	b.n	800d928 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6a1b      	ldr	r3, [r3, #32]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d006      	beq.n	800d8b2 <lwip_netconn_do_delconn+0xe2>
 800d8a4:	4b35      	ldr	r3, [pc, #212]	@ (800d97c <lwip_netconn_do_delconn+0x1ac>)
 800d8a6:	f240 4294 	movw	r2, #1172	@ 0x494
 800d8aa:	4938      	ldr	r1, [pc, #224]	@ (800d98c <lwip_netconn_do_delconn+0x1bc>)
 800d8ac:	4835      	ldr	r0, [pc, #212]	@ (800d984 <lwip_netconn_do_delconn+0x1b4>)
 800d8ae:	f010 ffb3 	bl	801e818 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2204      	movs	r2, #4
 800d8b8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2203      	movs	r2, #3
 800d8be:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7ff fe14 	bl	800d4fc <lwip_netconn_do_close_internal>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d04b      	beq.n	800d972 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	785b      	ldrb	r3, [r3, #1]
 800d8e0:	2b04      	cmp	r3, #4
 800d8e2:	d006      	beq.n	800d8f2 <lwip_netconn_do_delconn+0x122>
 800d8e4:	4b25      	ldr	r3, [pc, #148]	@ (800d97c <lwip_netconn_do_delconn+0x1ac>)
 800d8e6:	f240 429a 	movw	r2, #1178	@ 0x49a
 800d8ea:	4929      	ldr	r1, [pc, #164]	@ (800d990 <lwip_netconn_do_delconn+0x1c0>)
 800d8ec:	4825      	ldr	r0, [pc, #148]	@ (800d984 <lwip_netconn_do_delconn+0x1b4>)
 800d8ee:	f010 ff93 	bl	801e818 <iprintf>
            UNLOCK_TCPIP_CORE();
 800d8f2:	4828      	ldr	r0, [pc, #160]	@ (800d994 <lwip_netconn_do_delconn+0x1c4>)
 800d8f4:	f00f fe37 	bl	801d566 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	330c      	adds	r3, #12
 800d8fe:	2100      	movs	r1, #0
 800d900:	4618      	mov	r0, r3
 800d902:	f00f fd96 	bl	801d432 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d906:	4823      	ldr	r0, [pc, #140]	@ (800d994 <lwip_netconn_do_delconn+0x1c4>)
 800d908:	f00f fe1e 	bl	801d548 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	785b      	ldrb	r3, [r3, #1]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d02d      	beq.n	800d972 <lwip_netconn_do_delconn+0x1a2>
 800d916:	4b19      	ldr	r3, [pc, #100]	@ (800d97c <lwip_netconn_do_delconn+0x1ac>)
 800d918:	f240 429e 	movw	r2, #1182	@ 0x49e
 800d91c:	491c      	ldr	r1, [pc, #112]	@ (800d990 <lwip_netconn_do_delconn+0x1c0>)
 800d91e:	4819      	ldr	r0, [pc, #100]	@ (800d984 <lwip_netconn_do_delconn+0x1b4>)
 800d920:	f010 ff7a 	bl	801e818 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d924:	e025      	b.n	800d972 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800d926:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2200      	movs	r2, #0
 800d92e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d936:	2b00      	cmp	r3, #0
 800d938:	d007      	beq.n	800d94a <lwip_netconn_do_delconn+0x17a>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	6810      	ldr	r0, [r2, #0]
 800d944:	2200      	movs	r2, #0
 800d946:	2100      	movs	r1, #0
 800d948:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d950:	2b00      	cmp	r3, #0
 800d952:	d007      	beq.n	800d964 <lwip_netconn_do_delconn+0x194>
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	6810      	ldr	r0, [r2, #0]
 800d95e:	2200      	movs	r2, #0
 800d960:	2102      	movs	r1, #2
 800d962:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	330c      	adds	r3, #12
 800d96a:	4618      	mov	r0, r3
 800d96c:	f00f fdac 	bl	801d4c8 <sys_sem_valid>
 800d970:	e000      	b.n	800d974 <lwip_netconn_do_delconn+0x1a4>
          return;
 800d972:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	080225a0 	.word	0x080225a0
 800d980:	08022910 	.word	0x08022910
 800d984:	080225e4 	.word	0x080225e4
 800d988:	08022924 	.word	0x08022924
 800d98c:	08022944 	.word	0x08022944
 800d990:	08022960 	.word	0x08022960
 800d994:	2000b738 	.word	0x2000b738

0800d998 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b088      	sub	sp, #32
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800d9b4:	f06f 0305 	mvn.w	r3, #5
 800d9b8:	e070      	b.n	800da9c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	785b      	ldrb	r3, [r3, #1]
 800d9be:	2b03      	cmp	r3, #3
 800d9c0:	d006      	beq.n	800d9d0 <lwip_netconn_do_connected+0x38>
 800d9c2:	4b38      	ldr	r3, [pc, #224]	@ (800daa4 <lwip_netconn_do_connected+0x10c>)
 800d9c4:	f240 5223 	movw	r2, #1315	@ 0x523
 800d9c8:	4937      	ldr	r1, [pc, #220]	@ (800daa8 <lwip_netconn_do_connected+0x110>)
 800d9ca:	4838      	ldr	r0, [pc, #224]	@ (800daac <lwip_netconn_do_connected+0x114>)
 800d9cc:	f010 ff24 	bl	801e818 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	6a1b      	ldr	r3, [r3, #32]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10c      	bne.n	800d9f2 <lwip_netconn_do_connected+0x5a>
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	7f1b      	ldrb	r3, [r3, #28]
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <lwip_netconn_do_connected+0x5a>
 800d9e4:	4b2f      	ldr	r3, [pc, #188]	@ (800daa4 <lwip_netconn_do_connected+0x10c>)
 800d9e6:	f240 5224 	movw	r2, #1316	@ 0x524
 800d9ea:	4931      	ldr	r1, [pc, #196]	@ (800dab0 <lwip_netconn_do_connected+0x118>)
 800d9ec:	482f      	ldr	r0, [pc, #188]	@ (800daac <lwip_netconn_do_connected+0x114>)
 800d9ee:	f010 ff13 	bl	801e818 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	6a1b      	ldr	r3, [r3, #32]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d008      	beq.n	800da0c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	79fa      	ldrb	r2, [r7, #7]
 800da00:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	330c      	adds	r3, #12
 800da0a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da14:	2b10      	cmp	r3, #16
 800da16:	d106      	bne.n	800da26 <lwip_netconn_do_connected+0x8e>
 800da18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d102      	bne.n	800da26 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800da20:	69b8      	ldr	r0, [r7, #24]
 800da22:	f7ff fb8d 	bl	800d140 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	7f1b      	ldrb	r3, [r3, #28]
 800da2a:	f003 0304 	and.w	r3, r3, #4
 800da2e:	2b00      	cmp	r3, #0
 800da30:	bf0c      	ite	eq
 800da32:	2301      	moveq	r3, #1
 800da34:	2300      	movne	r3, #0
 800da36:	b2db      	uxtb	r3, r3
 800da38:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	7f1b      	ldrb	r3, [r3, #28]
 800da3e:	f023 0304 	bic.w	r3, r3, #4
 800da42:	b2da      	uxtb	r2, r3
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d002      	beq.n	800da54 <lwip_netconn_do_connected+0xbc>
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10c      	bne.n	800da6e <lwip_netconn_do_connected+0xd6>
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d102      	bne.n	800da60 <lwip_netconn_do_connected+0xc8>
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <lwip_netconn_do_connected+0xd6>
 800da60:	4b10      	ldr	r3, [pc, #64]	@ (800daa4 <lwip_netconn_do_connected+0x10c>)
 800da62:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800da66:	4913      	ldr	r1, [pc, #76]	@ (800dab4 <lwip_netconn_do_connected+0x11c>)
 800da68:	4810      	ldr	r0, [pc, #64]	@ (800daac <lwip_netconn_do_connected+0x114>)
 800da6a:	f010 fed5 	bl	801e818 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	2200      	movs	r2, #0
 800da72:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	2200      	movs	r2, #0
 800da78:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d005      	beq.n	800da8e <lwip_netconn_do_connected+0xf6>
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da86:	2200      	movs	r2, #0
 800da88:	2102      	movs	r1, #2
 800da8a:	69b8      	ldr	r0, [r7, #24]
 800da8c:	4798      	blx	r3

  if (was_blocking) {
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800da94:	69f8      	ldr	r0, [r7, #28]
 800da96:	f00f fcfd 	bl	801d494 <sys_sem_signal>
  }
  return ERR_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3720      	adds	r7, #32
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	080225a0 	.word	0x080225a0
 800daa8:	08022968 	.word	0x08022968
 800daac:	080225e4 	.word	0x080225e4
 800dab0:	08022988 	.word	0x08022988
 800dab4:	080229c8 	.word	0x080229c8

0800dab8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d102      	bne.n	800dad4 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800dace:	23f1      	movs	r3, #241	@ 0xf1
 800dad0:	75fb      	strb	r3, [r7, #23]
 800dad2:	e09b      	b.n	800dc0c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dade:	2b10      	cmp	r3, #16
 800dae0:	d00f      	beq.n	800db02 <lwip_netconn_do_connect+0x4a>
 800dae2:	2b20      	cmp	r3, #32
 800dae4:	f040 8087 	bne.w	800dbf6 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6858      	ldr	r0, [r3, #4]
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	6899      	ldr	r1, [r3, #8]
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	899b      	ldrh	r3, [r3, #12]
 800daf6:	461a      	mov	r2, r3
 800daf8:	f00a ff90 	bl	8018a1c <udp_connect>
 800dafc:	4603      	mov	r3, r0
 800dafe:	75fb      	strb	r3, [r7, #23]
        break;
 800db00:	e084      	b.n	800dc0c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	785b      	ldrb	r3, [r3, #1]
 800db08:	2b03      	cmp	r3, #3
 800db0a:	d102      	bne.n	800db12 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800db0c:	23f7      	movs	r3, #247	@ 0xf7
 800db0e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800db10:	e07b      	b.n	800dc0a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	785b      	ldrb	r3, [r3, #1]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d002      	beq.n	800db22 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800db1c:	23f6      	movs	r3, #246	@ 0xf6
 800db1e:	75fb      	strb	r3, [r7, #23]
        break;
 800db20:	e073      	b.n	800dc0a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff fb0a 	bl	800d140 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6858      	ldr	r0, [r3, #4]
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	6899      	ldr	r1, [r3, #8]
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	899a      	ldrh	r2, [r3, #12]
 800db3a:	4b38      	ldr	r3, [pc, #224]	@ (800dc1c <lwip_netconn_do_connect+0x164>)
 800db3c:	f004 fdda 	bl	80126f4 <tcp_connect>
 800db40:	4603      	mov	r3, r0
 800db42:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800db44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d15e      	bne.n	800dc0a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	7f1b      	ldrb	r3, [r3, #28]
 800db52:	f003 0302 	and.w	r3, r3, #2
 800db56:	2b00      	cmp	r3, #0
 800db58:	bf14      	ite	ne
 800db5a:	2301      	movne	r3, #1
 800db5c:	2300      	moveq	r3, #0
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2203      	movs	r2, #3
 800db68:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d009      	beq.n	800db84 <lwip_netconn_do_connect+0xcc>
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	7f1a      	ldrb	r2, [r3, #28]
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f042 0204 	orr.w	r2, r2, #4
 800db7e:	b2d2      	uxtb	r2, r2
 800db80:	771a      	strb	r2, [r3, #28]
 800db82:	e008      	b.n	800db96 <lwip_netconn_do_connect+0xde>
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	7f1a      	ldrb	r2, [r3, #28]
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f022 0204 	bic.w	r2, r2, #4
 800db92:	b2d2      	uxtb	r2, r2
 800db94:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800db9c:	23fb      	movs	r3, #251	@ 0xfb
 800db9e:	75fb      	strb	r3, [r7, #23]
        break;
 800dba0:	e033      	b.n	800dc0a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	785b      	ldrb	r3, [r3, #1]
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d006      	beq.n	800dbc2 <lwip_netconn_do_connect+0x10a>
 800dbb4:	4b1a      	ldr	r3, [pc, #104]	@ (800dc20 <lwip_netconn_do_connect+0x168>)
 800dbb6:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800dbba:	491a      	ldr	r1, [pc, #104]	@ (800dc24 <lwip_netconn_do_connect+0x16c>)
 800dbbc:	481a      	ldr	r0, [pc, #104]	@ (800dc28 <lwip_netconn_do_connect+0x170>)
 800dbbe:	f010 fe2b 	bl	801e818 <iprintf>
              UNLOCK_TCPIP_CORE();
 800dbc2:	481a      	ldr	r0, [pc, #104]	@ (800dc2c <lwip_netconn_do_connect+0x174>)
 800dbc4:	f00f fccf 	bl	801d566 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	330c      	adds	r3, #12
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f00f fc2e 	bl	801d432 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800dbd6:	4815      	ldr	r0, [pc, #84]	@ (800dc2c <lwip_netconn_do_connect+0x174>)
 800dbd8:	f00f fcb6 	bl	801d548 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d116      	bne.n	800dc14 <lwip_netconn_do_connect+0x15c>
 800dbe6:	4b0e      	ldr	r3, [pc, #56]	@ (800dc20 <lwip_netconn_do_connect+0x168>)
 800dbe8:	f240 5274 	movw	r2, #1396	@ 0x574
 800dbec:	490d      	ldr	r1, [pc, #52]	@ (800dc24 <lwip_netconn_do_connect+0x16c>)
 800dbee:	480e      	ldr	r0, [pc, #56]	@ (800dc28 <lwip_netconn_do_connect+0x170>)
 800dbf0:	f010 fe12 	bl	801e818 <iprintf>
              return;
 800dbf4:	e00e      	b.n	800dc14 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800dbf6:	4b0a      	ldr	r3, [pc, #40]	@ (800dc20 <lwip_netconn_do_connect+0x168>)
 800dbf8:	f240 527d 	movw	r2, #1405	@ 0x57d
 800dbfc:	490c      	ldr	r1, [pc, #48]	@ (800dc30 <lwip_netconn_do_connect+0x178>)
 800dbfe:	480a      	ldr	r0, [pc, #40]	@ (800dc28 <lwip_netconn_do_connect+0x170>)
 800dc00:	f010 fe0a 	bl	801e818 <iprintf>
 800dc04:	23fa      	movs	r3, #250	@ 0xfa
 800dc06:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800dc08:	e000      	b.n	800dc0c <lwip_netconn_do_connect+0x154>
        break;
 800dc0a:	bf00      	nop
    }
  }
  msg->err = err;
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	7dfa      	ldrb	r2, [r7, #23]
 800dc10:	711a      	strb	r2, [r3, #4]
 800dc12:	e000      	b.n	800dc16 <lwip_netconn_do_connect+0x15e>
              return;
 800dc14:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	0800d999 	.word	0x0800d999
 800dc20:	080225a0 	.word	0x080225a0
 800dc24:	08022960 	.word	0x08022960
 800dc28:	080225e4 	.word	0x080225e4
 800dc2c:	2000b738 	.word	0x2000b738
 800dc30:	080229e8 	.word	0x080229e8

0800dc34 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc4a:	2b20      	cmp	r3, #32
 800dc4c:	d109      	bne.n	800dc62 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f00a ff4f 	bl	8018af8 <udp_disconnect>
    msg->err = ERR_OK;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dc60:	e002      	b.n	800dc68 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	22fa      	movs	r2, #250	@ 0xfa
 800dc66:	711a      	strb	r2, [r3, #4]
}
 800dc68:	bf00      	nop
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fe ff3f 	bl	800cb04 <netconn_err>
 800dc86:	4603      	mov	r3, r0
 800dc88:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800dc8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d134      	bne.n	800dcfc <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d02d      	beq.n	800dcf8 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dca6:	2b20      	cmp	r3, #32
 800dca8:	d123      	bne.n	800dcf2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d10c      	bne.n	800dcce <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	685a      	ldr	r2, [r3, #4]
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	f00a fc38 	bl	8018538 <udp_send>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800dccc:	e016      	b.n	800dcfc <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	6858      	ldr	r0, [r3, #4]
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	6819      	ldr	r1, [r3, #0]
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	689b      	ldr	r3, [r3, #8]
 800dcde:	f103 0208 	add.w	r2, r3, #8
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	899b      	ldrh	r3, [r3, #12]
 800dce8:	f00a fc5a 	bl	80185a0 <udp_sendto>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]
          break;
 800dcf0:	e004      	b.n	800dcfc <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800dcf2:	23f5      	movs	r3, #245	@ 0xf5
 800dcf4:	73fb      	strb	r3, [r7, #15]
          break;
 800dcf6:	e001      	b.n	800dcfc <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800dcf8:	23f5      	movs	r3, #245	@ 0xf5
 800dcfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	7bfa      	ldrb	r2, [r7, #15]
 800dd00:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800dd02:	bf00      	nop
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b086      	sub	sp, #24
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d022      	beq.n	800dd6c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd30:	2b10      	cmp	r3, #16
 800dd32:	d11b      	bne.n	800dd6c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd40:	d202      	bcs.n	800dd48 <lwip_netconn_do_recv+0x3e>
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	e001      	b.n	800dd4c <lwip_netconn_do_recv+0x42>
 800dd48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd4c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	89fa      	ldrh	r2, [r7, #14]
 800dd56:	4611      	mov	r1, r2
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f004 fc35 	bl	80125c8 <tcp_recved>
        remaining -= recved;
 800dd5e:	89fb      	ldrh	r3, [r7, #14]
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1e6      	bne.n	800dd3a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dd6c:	bf00      	nop
 800dd6e:	3718      	adds	r7, #24
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b088      	sub	sp, #32
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d106      	bne.n	800dd98 <lwip_netconn_do_writemore+0x24>
 800dd8a:	4b96      	ldr	r3, [pc, #600]	@ (800dfe4 <lwip_netconn_do_writemore+0x270>)
 800dd8c:	f240 6273 	movw	r2, #1651	@ 0x673
 800dd90:	4995      	ldr	r1, [pc, #596]	@ (800dfe8 <lwip_netconn_do_writemore+0x274>)
 800dd92:	4896      	ldr	r0, [pc, #600]	@ (800dfec <lwip_netconn_do_writemore+0x278>)
 800dd94:	f010 fd40 	bl	801e818 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	785b      	ldrb	r3, [r3, #1]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d006      	beq.n	800ddae <lwip_netconn_do_writemore+0x3a>
 800dda0:	4b90      	ldr	r3, [pc, #576]	@ (800dfe4 <lwip_netconn_do_writemore+0x270>)
 800dda2:	f240 6274 	movw	r2, #1652	@ 0x674
 800dda6:	4992      	ldr	r1, [pc, #584]	@ (800dff0 <lwip_netconn_do_writemore+0x27c>)
 800dda8:	4890      	ldr	r0, [pc, #576]	@ (800dfec <lwip_netconn_do_writemore+0x278>)
 800ddaa:	f010 fd35 	bl	801e818 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d106      	bne.n	800ddc4 <lwip_netconn_do_writemore+0x50>
 800ddb6:	4b8b      	ldr	r3, [pc, #556]	@ (800dfe4 <lwip_netconn_do_writemore+0x270>)
 800ddb8:	f240 6275 	movw	r2, #1653	@ 0x675
 800ddbc:	498d      	ldr	r1, [pc, #564]	@ (800dff4 <lwip_netconn_do_writemore+0x280>)
 800ddbe:	488b      	ldr	r0, [pc, #556]	@ (800dfec <lwip_netconn_do_writemore+0x278>)
 800ddc0:	f010 fd2a 	bl	801e818 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d106      	bne.n	800ddda <lwip_netconn_do_writemore+0x66>
 800ddcc:	4b85      	ldr	r3, [pc, #532]	@ (800dfe4 <lwip_netconn_do_writemore+0x270>)
 800ddce:	f240 6276 	movw	r2, #1654	@ 0x676
 800ddd2:	4989      	ldr	r1, [pc, #548]	@ (800dff8 <lwip_netconn_do_writemore+0x284>)
 800ddd4:	4885      	ldr	r0, [pc, #532]	@ (800dfec <lwip_netconn_do_writemore+0x278>)
 800ddd6:	f010 fd1f 	bl	801e818 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a1b      	ldr	r3, [r3, #32]
 800ddde:	699a      	ldr	r2, [r3, #24]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a1b      	ldr	r3, [r3, #32]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d306      	bcc.n	800ddf8 <lwip_netconn_do_writemore+0x84>
 800ddea:	4b7e      	ldr	r3, [pc, #504]	@ (800dfe4 <lwip_netconn_do_writemore+0x270>)
 800ddec:	f240 6277 	movw	r2, #1655	@ 0x677
 800ddf0:	4982      	ldr	r1, [pc, #520]	@ (800dffc <lwip_netconn_do_writemore+0x288>)
 800ddf2:	487e      	ldr	r0, [pc, #504]	@ (800dfec <lwip_netconn_do_writemore+0x278>)
 800ddf4:	f010 fd10 	bl	801e818 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a1b      	ldr	r3, [r3, #32]
 800ddfc:	899b      	ldrh	r3, [r3, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d106      	bne.n	800de10 <lwip_netconn_do_writemore+0x9c>
 800de02:	4b78      	ldr	r3, [pc, #480]	@ (800dfe4 <lwip_netconn_do_writemore+0x270>)
 800de04:	f240 6279 	movw	r2, #1657	@ 0x679
 800de08:	497d      	ldr	r1, [pc, #500]	@ (800e000 <lwip_netconn_do_writemore+0x28c>)
 800de0a:	4878      	ldr	r0, [pc, #480]	@ (800dfec <lwip_netconn_do_writemore+0x278>)
 800de0c:	f010 fd04 	bl	801e818 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6a1b      	ldr	r3, [r3, #32]
 800de14:	7f1b      	ldrb	r3, [r3, #28]
 800de16:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	7f1b      	ldrb	r3, [r3, #28]
 800de1c:	f003 0302 	and.w	r3, r3, #2
 800de20:	2b00      	cmp	r3, #0
 800de22:	d104      	bne.n	800de2e <lwip_netconn_do_writemore+0xba>
 800de24:	7ebb      	ldrb	r3, [r7, #26]
 800de26:	f003 0304 	and.w	r3, r3, #4
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <lwip_netconn_do_writemore+0xbe>
 800de2e:	2301      	movs	r3, #1
 800de30:	e000      	b.n	800de34 <lwip_netconn_do_writemore+0xc0>
 800de32:	2300      	movs	r3, #0
 800de34:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a1b      	ldr	r3, [r3, #32]
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	4413      	add	r3, r2
 800de46:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	685a      	ldr	r2, [r3, #4]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a1b      	ldr	r3, [r3, #32]
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de60:	d307      	bcc.n	800de72 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800de62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de66:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800de68:	7ebb      	ldrb	r3, [r7, #26]
 800de6a:	f043 0302 	orr.w	r3, r3, #2
 800de6e:	76bb      	strb	r3, [r7, #26]
 800de70:	e001      	b.n	800de76 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800de7e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800de80:	89fa      	ldrh	r2, [r7, #14]
 800de82:	8bbb      	ldrh	r3, [r7, #28]
 800de84:	429a      	cmp	r2, r3
 800de86:	d216      	bcs.n	800deb6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800de88:	89fb      	ldrh	r3, [r7, #14]
 800de8a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800de8c:	7e3b      	ldrb	r3, [r7, #24]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00d      	beq.n	800deae <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800de92:	8bbb      	ldrh	r3, [r7, #28]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10e      	bne.n	800deb6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	699b      	ldr	r3, [r3, #24]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <lwip_netconn_do_writemore+0x134>
 800dea2:	f06f 0306 	mvn.w	r3, #6
 800dea6:	e000      	b.n	800deaa <lwip_netconn_do_writemore+0x136>
 800dea8:	2300      	movs	r3, #0
 800deaa:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800deac:	e07d      	b.n	800dfaa <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800deae:	7ebb      	ldrb	r3, [r7, #26]
 800deb0:	f043 0302 	orr.w	r3, r3, #2
 800deb4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	691a      	ldr	r2, [r3, #16]
 800debc:	8bbb      	ldrh	r3, [r7, #28]
 800debe:	441a      	add	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6a1b      	ldr	r3, [r3, #32]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d906      	bls.n	800deda <lwip_netconn_do_writemore+0x166>
 800decc:	4b45      	ldr	r3, [pc, #276]	@ (800dfe4 <lwip_netconn_do_writemore+0x270>)
 800dece:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800ded2:	494c      	ldr	r1, [pc, #304]	@ (800e004 <lwip_netconn_do_writemore+0x290>)
 800ded4:	4845      	ldr	r0, [pc, #276]	@ (800dfec <lwip_netconn_do_writemore+0x278>)
 800ded6:	f010 fc9f 	bl	801e818 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800deda:	8bbb      	ldrh	r3, [r7, #28]
 800dedc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d103      	bne.n	800deec <lwip_netconn_do_writemore+0x178>
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800deea:	d209      	bcs.n	800df00 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800def0:	8bba      	ldrh	r2, [r7, #28]
 800def2:	429a      	cmp	r2, r3
 800def4:	d10b      	bne.n	800df0e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6a1b      	ldr	r3, [r3, #32]
 800defa:	899b      	ldrh	r3, [r3, #12]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d906      	bls.n	800df0e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800df00:	2301      	movs	r3, #1
 800df02:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800df04:	7ebb      	ldrb	r3, [r7, #26]
 800df06:	f043 0302 	orr.w	r3, r3, #2
 800df0a:	76bb      	strb	r3, [r7, #26]
 800df0c:	e001      	b.n	800df12 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6858      	ldr	r0, [r3, #4]
 800df16:	7ebb      	ldrb	r3, [r7, #26]
 800df18:	8bba      	ldrh	r2, [r7, #28]
 800df1a:	6979      	ldr	r1, [r7, #20]
 800df1c:	f008 fa70 	bl	8016400 <tcp_write>
 800df20:	4603      	mov	r3, r0
 800df22:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800df24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d12c      	bne.n	800df86 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6a1b      	ldr	r3, [r3, #32]
 800df30:	6999      	ldr	r1, [r3, #24]
 800df32:	8bba      	ldrh	r2, [r7, #28]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6a1b      	ldr	r3, [r3, #32]
 800df38:	440a      	add	r2, r1
 800df3a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a1b      	ldr	r3, [r3, #32]
 800df40:	6919      	ldr	r1, [r3, #16]
 800df42:	8bba      	ldrh	r2, [r7, #28]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6a1b      	ldr	r3, [r3, #32]
 800df48:	440a      	add	r2, r1
 800df4a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a1b      	ldr	r3, [r3, #32]
 800df50:	691a      	ldr	r2, [r3, #16]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d113      	bne.n	800df86 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	899a      	ldrh	r2, [r3, #12]
 800df64:	3a01      	subs	r2, #1
 800df66:	b292      	uxth	r2, r2
 800df68:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	899b      	ldrh	r3, [r3, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d008      	beq.n	800df86 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a1b      	ldr	r3, [r3, #32]
 800df78:	689a      	ldr	r2, [r3, #8]
 800df7a:	3208      	adds	r2, #8
 800df7c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a1b      	ldr	r3, [r3, #32]
 800df82:	2200      	movs	r2, #0
 800df84:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800df86:	7e7b      	ldrb	r3, [r7, #25]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d004      	beq.n	800df96 <lwip_netconn_do_writemore+0x222>
 800df8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df90:	2b00      	cmp	r3, #0
 800df92:	f43f af50 	beq.w	800de36 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800df96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d004      	beq.n	800dfa8 <lwip_netconn_do_writemore+0x234>
 800df9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa6:	d146      	bne.n	800e036 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800dfa8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800dfaa:	7e3b      	ldrb	r3, [r7, #24]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d02b      	beq.n	800e008 <lwip_netconn_do_writemore+0x294>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	699a      	ldr	r2, [r3, #24]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a1b      	ldr	r3, [r3, #32]
 800dfba:	695b      	ldr	r3, [r3, #20]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d223      	bcs.n	800e008 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d005      	beq.n	800dfd4 <lwip_netconn_do_writemore+0x260>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfcc:	2200      	movs	r2, #0
 800dfce:	2103      	movs	r1, #3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	7f1b      	ldrb	r3, [r3, #28]
 800dfd8:	f043 0310 	orr.w	r3, r3, #16
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	771a      	strb	r2, [r3, #28]
 800dfe2:	e028      	b.n	800e036 <lwip_netconn_do_writemore+0x2c2>
 800dfe4:	080225a0 	.word	0x080225a0
 800dfe8:	080226f8 	.word	0x080226f8
 800dfec:	080225e4 	.word	0x080225e4
 800dff0:	08022a00 	.word	0x08022a00
 800dff4:	08022708 	.word	0x08022708
 800dff8:	08022a20 	.word	0x08022a20
 800dffc:	08022a38 	.word	0x08022a38
 800e000:	08022a78 	.word	0x08022a78
 800e004:	08022aa0 	.word	0x08022aa0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e010:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800e014:	d305      	bcc.n	800e022 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e01e:	2b04      	cmp	r3, #4
 800e020:	d909      	bls.n	800e036 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e026:	2b00      	cmp	r3, #0
 800e028:	d005      	beq.n	800e036 <lwip_netconn_do_writemore+0x2c2>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e02e:	2200      	movs	r2, #0
 800e030:	2103      	movs	r1, #3
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e036:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d11d      	bne.n	800e07a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a1b      	ldr	r3, [r3, #32]
 800e042:	699a      	ldr	r2, [r3, #24]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6a1b      	ldr	r3, [r3, #32]
 800e048:	695b      	ldr	r3, [r3, #20]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d002      	beq.n	800e054 <lwip_netconn_do_writemore+0x2e0>
 800e04e:	7e3b      	ldrb	r3, [r7, #24]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e054:	2301      	movs	r3, #1
 800e056:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f008 ffb9 	bl	8016fd4 <tcp_output>
 800e062:	4603      	mov	r3, r0
 800e064:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e066:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e06a:	f113 0f04 	cmn.w	r3, #4
 800e06e:	d12c      	bne.n	800e0ca <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e070:	7b3b      	ldrb	r3, [r7, #12]
 800e072:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e074:	2301      	movs	r3, #1
 800e076:	76fb      	strb	r3, [r7, #27]
 800e078:	e027      	b.n	800e0ca <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e07a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e082:	d120      	bne.n	800e0c6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	4618      	mov	r0, r3
 800e08a:	f008 ffa3 	bl	8016fd4 <tcp_output>
 800e08e:	4603      	mov	r3, r0
 800e090:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e092:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e096:	f113 0f04 	cmn.w	r3, #4
 800e09a:	d104      	bne.n	800e0a6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e09c:	7b7b      	ldrb	r3, [r7, #13]
 800e09e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	76fb      	strb	r3, [r7, #27]
 800e0a4:	e011      	b.n	800e0ca <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e0a6:	7e3b      	ldrb	r3, [r7, #24]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00e      	beq.n	800e0ca <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6a1b      	ldr	r3, [r3, #32]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d102      	bne.n	800e0bc <lwip_netconn_do_writemore+0x348>
 800e0b6:	f06f 0306 	mvn.w	r3, #6
 800e0ba:	e000      	b.n	800e0be <lwip_netconn_do_writemore+0x34a>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	76fb      	strb	r3, [r7, #27]
 800e0c4:	e001      	b.n	800e0ca <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e0ca:	7efb      	ldrb	r3, [r7, #27]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d015      	beq.n	800e0fc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a1b      	ldr	r3, [r3, #32]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	330c      	adds	r3, #12
 800e0d8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	7ffa      	ldrb	r2, [r7, #31]
 800e0e0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e0ee:	78fb      	ldrb	r3, [r7, #3]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d006      	beq.n	800e102 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e0f4:	68b8      	ldr	r0, [r7, #8]
 800e0f6:	f00f f9cd 	bl	801d494 <sys_sem_signal>
 800e0fa:	e002      	b.n	800e102 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e100:	e000      	b.n	800e104 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3720      	adds	r7, #32
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fcf1 	bl	800cb04 <netconn_err>
 800e122:	4603      	mov	r3, r0
 800e124:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d166      	bne.n	800e1fc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e138:	2b10      	cmp	r3, #16
 800e13a:	d15d      	bne.n	800e1f8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	785b      	ldrb	r3, [r3, #1]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d002      	beq.n	800e14c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e146:	23fb      	movs	r3, #251	@ 0xfb
 800e148:	73fb      	strb	r3, [r7, #15]
 800e14a:	e057      	b.n	800e1fc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d04d      	beq.n	800e1f2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2201      	movs	r2, #1
 800e15c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6a1b      	ldr	r3, [r3, #32]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d006      	beq.n	800e176 <lwip_netconn_do_write+0x6a>
 800e168:	4b28      	ldr	r3, [pc, #160]	@ (800e20c <lwip_netconn_do_write+0x100>)
 800e16a:	f240 7223 	movw	r2, #1827	@ 0x723
 800e16e:	4928      	ldr	r1, [pc, #160]	@ (800e210 <lwip_netconn_do_write+0x104>)
 800e170:	4828      	ldr	r0, [pc, #160]	@ (800e214 <lwip_netconn_do_write+0x108>)
 800e172:	f010 fb51 	bl	801e818 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d106      	bne.n	800e18c <lwip_netconn_do_write+0x80>
 800e17e:	4b23      	ldr	r3, [pc, #140]	@ (800e20c <lwip_netconn_do_write+0x100>)
 800e180:	f240 7224 	movw	r2, #1828	@ 0x724
 800e184:	4924      	ldr	r1, [pc, #144]	@ (800e218 <lwip_netconn_do_write+0x10c>)
 800e186:	4823      	ldr	r0, [pc, #140]	@ (800e214 <lwip_netconn_do_write+0x108>)
 800e188:	f010 fb46 	bl	801e818 <iprintf>
        msg->conn->current_msg = msg;
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2100      	movs	r1, #0
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7ff fdea 	bl	800dd74 <lwip_netconn_do_writemore>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d02e      	beq.n	800e204 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	785b      	ldrb	r3, [r3, #1]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d006      	beq.n	800e1be <lwip_netconn_do_write+0xb2>
 800e1b0:	4b16      	ldr	r3, [pc, #88]	@ (800e20c <lwip_netconn_do_write+0x100>)
 800e1b2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800e1b6:	4919      	ldr	r1, [pc, #100]	@ (800e21c <lwip_netconn_do_write+0x110>)
 800e1b8:	4816      	ldr	r0, [pc, #88]	@ (800e214 <lwip_netconn_do_write+0x108>)
 800e1ba:	f010 fb2d 	bl	801e818 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e1be:	4818      	ldr	r0, [pc, #96]	@ (800e220 <lwip_netconn_do_write+0x114>)
 800e1c0:	f00f f9d1 	bl	801d566 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	330c      	adds	r3, #12
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f00f f930 	bl	801d432 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e1d2:	4813      	ldr	r0, [pc, #76]	@ (800e220 <lwip_netconn_do_write+0x114>)
 800e1d4:	f00f f9b8 	bl	801d548 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	785b      	ldrb	r3, [r3, #1]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d110      	bne.n	800e204 <lwip_netconn_do_write+0xf8>
 800e1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e20c <lwip_netconn_do_write+0x100>)
 800e1e4:	f240 722c 	movw	r2, #1836	@ 0x72c
 800e1e8:	490c      	ldr	r1, [pc, #48]	@ (800e21c <lwip_netconn_do_write+0x110>)
 800e1ea:	480a      	ldr	r0, [pc, #40]	@ (800e214 <lwip_netconn_do_write+0x108>)
 800e1ec:	f010 fb14 	bl	801e818 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e1f0:	e008      	b.n	800e204 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e1f2:	23f5      	movs	r3, #245	@ 0xf5
 800e1f4:	73fb      	strb	r3, [r7, #15]
 800e1f6:	e001      	b.n	800e1fc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e1f8:	23fa      	movs	r3, #250	@ 0xfa
 800e1fa:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	7bfa      	ldrb	r2, [r7, #15]
 800e200:	711a      	strb	r2, [r3, #4]
 800e202:	e000      	b.n	800e206 <lwip_netconn_do_write+0xfa>
        return;
 800e204:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	080225a0 	.word	0x080225a0
 800e210:	08022944 	.word	0x08022944
 800e214:	080225e4 	.word	0x080225e4
 800e218:	08022acc 	.word	0x08022acc
 800e21c:	08022960 	.word	0x08022960
 800e220:	2000b738 	.word	0x2000b738

0800e224 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d06b      	beq.n	800e312 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	7c1b      	ldrb	r3, [r3, #16]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d007      	beq.n	800e252 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	685a      	ldr	r2, [r3, #4]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	6812      	ldr	r2, [r2, #0]
 800e24e:	601a      	str	r2, [r3, #0]
 800e250:	e006      	b.n	800e260 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	6852      	ldr	r2, [r2, #4]
 800e25e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2200      	movs	r2, #0
 800e264:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e270:	2b10      	cmp	r3, #16
 800e272:	d021      	beq.n	800e2b8 <lwip_netconn_do_getaddr+0x94>
 800e274:	2b20      	cmp	r3, #32
 800e276:	d144      	bne.n	800e302 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	7c1b      	ldrb	r3, [r3, #16]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d007      	beq.n	800e290 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	685a      	ldr	r2, [r3, #4]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	8a52      	ldrh	r2, [r2, #18]
 800e28c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800e28e:	e044      	b.n	800e31a <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	7c1b      	ldrb	r3, [r3, #16]
 800e298:	f003 0304 	and.w	r3, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d103      	bne.n	800e2a8 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	22f5      	movs	r2, #245	@ 0xf5
 800e2a4:	711a      	strb	r2, [r3, #4]
        break;
 800e2a6:	e038      	b.n	800e31a <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	8a92      	ldrh	r2, [r2, #20]
 800e2b4:	801a      	strh	r2, [r3, #0]
        break;
 800e2b6:	e030      	b.n	800e31a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	7c1b      	ldrb	r3, [r3, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10f      	bne.n	800e2e0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d005      	beq.n	800e2d8 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	7d1b      	ldrb	r3, [r3, #20]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d103      	bne.n	800e2e0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	22f5      	movs	r2, #245	@ 0xf5
 800e2dc:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800e2de:	e01c      	b.n	800e31a <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	7c1b      	ldrb	r3, [r3, #16]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d004      	beq.n	800e2f2 <lwip_netconn_do_getaddr+0xce>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	8adb      	ldrh	r3, [r3, #22]
 800e2f0:	e003      	b.n	800e2fa <lwip_netconn_do_getaddr+0xd6>
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	8b1b      	ldrh	r3, [r3, #24]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	68d2      	ldr	r2, [r2, #12]
 800e2fe:	8013      	strh	r3, [r2, #0]
        break;
 800e300:	e00b      	b.n	800e31a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800e302:	4b08      	ldr	r3, [pc, #32]	@ (800e324 <lwip_netconn_do_getaddr+0x100>)
 800e304:	f240 727d 	movw	r2, #1917	@ 0x77d
 800e308:	4907      	ldr	r1, [pc, #28]	@ (800e328 <lwip_netconn_do_getaddr+0x104>)
 800e30a:	4808      	ldr	r0, [pc, #32]	@ (800e32c <lwip_netconn_do_getaddr+0x108>)
 800e30c:	f010 fa84 	bl	801e818 <iprintf>
        break;
 800e310:	e003      	b.n	800e31a <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	22f5      	movs	r2, #245	@ 0xf5
 800e316:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	080225a0 	.word	0x080225a0
 800e328:	08022ae0 	.word	0x08022ae0
 800e32c:	080225e4 	.word	0x080225e4

0800e330 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	785b      	ldrb	r3, [r3, #1]
 800e342:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d069      	beq.n	800e422 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e358:	2b10      	cmp	r3, #16
 800e35a:	d162      	bne.n	800e422 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e360:	2b03      	cmp	r3, #3
 800e362:	d002      	beq.n	800e36a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e364:	7afb      	ldrb	r3, [r7, #11]
 800e366:	2b02      	cmp	r3, #2
 800e368:	d05b      	beq.n	800e422 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e36a:	7afb      	ldrb	r3, [r7, #11]
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d103      	bne.n	800e378 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	22f5      	movs	r2, #245	@ 0xf5
 800e374:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e376:	e059      	b.n	800e42c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e378:	7afb      	ldrb	r3, [r7, #11]
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d103      	bne.n	800e386 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	22fb      	movs	r2, #251	@ 0xfb
 800e382:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e384:	e052      	b.n	800e42c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	7a1b      	ldrb	r3, [r3, #8]
 800e38a:	f003 0301 	and.w	r3, r3, #1
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d004      	beq.n	800e39c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4618      	mov	r0, r3
 800e398:	f7ff f832 	bl	800d400 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d006      	beq.n	800e3b4 <lwip_netconn_do_close+0x84>
 800e3a6:	4b23      	ldr	r3, [pc, #140]	@ (800e434 <lwip_netconn_do_close+0x104>)
 800e3a8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800e3ac:	4922      	ldr	r1, [pc, #136]	@ (800e438 <lwip_netconn_do_close+0x108>)
 800e3ae:	4823      	ldr	r0, [pc, #140]	@ (800e43c <lwip_netconn_do_close+0x10c>)
 800e3b0:	f010 fa32 	bl	801e818 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2204      	movs	r2, #4
 800e3ba:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7ff f896 	bl	800d4fc <lwip_netconn_do_close_internal>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d029      	beq.n	800e42a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	785b      	ldrb	r3, [r3, #1]
 800e3dc:	2b04      	cmp	r3, #4
 800e3de:	d006      	beq.n	800e3ee <lwip_netconn_do_close+0xbe>
 800e3e0:	4b14      	ldr	r3, [pc, #80]	@ (800e434 <lwip_netconn_do_close+0x104>)
 800e3e2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800e3e6:	4916      	ldr	r1, [pc, #88]	@ (800e440 <lwip_netconn_do_close+0x110>)
 800e3e8:	4814      	ldr	r0, [pc, #80]	@ (800e43c <lwip_netconn_do_close+0x10c>)
 800e3ea:	f010 fa15 	bl	801e818 <iprintf>
        UNLOCK_TCPIP_CORE();
 800e3ee:	4815      	ldr	r0, [pc, #84]	@ (800e444 <lwip_netconn_do_close+0x114>)
 800e3f0:	f00f f8b9 	bl	801d566 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	330c      	adds	r3, #12
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f00f f818 	bl	801d432 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e402:	4810      	ldr	r0, [pc, #64]	@ (800e444 <lwip_netconn_do_close+0x114>)
 800e404:	f00f f8a0 	bl	801d548 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	785b      	ldrb	r3, [r3, #1]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00b      	beq.n	800e42a <lwip_netconn_do_close+0xfa>
 800e412:	4b08      	ldr	r3, [pc, #32]	@ (800e434 <lwip_netconn_do_close+0x104>)
 800e414:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800e418:	4909      	ldr	r1, [pc, #36]	@ (800e440 <lwip_netconn_do_close+0x110>)
 800e41a:	4808      	ldr	r0, [pc, #32]	@ (800e43c <lwip_netconn_do_close+0x10c>)
 800e41c:	f010 f9fc 	bl	801e818 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e420:	e003      	b.n	800e42a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	22f5      	movs	r2, #245	@ 0xf5
 800e426:	711a      	strb	r2, [r3, #4]
 800e428:	e000      	b.n	800e42c <lwip_netconn_do_close+0xfc>
      return;
 800e42a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	080225a0 	.word	0x080225a0
 800e438:	08022944 	.word	0x08022944
 800e43c:	080225e4 	.word	0x080225e4
 800e440:	08022960 	.word	0x08022960
 800e444:	2000b738 	.word	0x2000b738

0800e448 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800e452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e456:	2b00      	cmp	r3, #0
 800e458:	dc04      	bgt.n	800e464 <err_to_errno+0x1c>
 800e45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e45e:	f113 0f10 	cmn.w	r3, #16
 800e462:	da01      	bge.n	800e468 <err_to_errno+0x20>
    return EIO;
 800e464:	2305      	movs	r3, #5
 800e466:	e005      	b.n	800e474 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800e468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e46c:	425b      	negs	r3, r3
 800e46e:	4a04      	ldr	r2, [pc, #16]	@ (800e480 <err_to_errno+0x38>)
 800e470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e474:	4618      	mov	r0, r3
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr
 800e480:	080260f4 	.word	0x080260f4

0800e484 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d013      	beq.n	800e4ba <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00b      	beq.n	800e4b2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f003 f8d2 	bl	8011648 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	605a      	str	r2, [r3, #4]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e4b2:	6879      	ldr	r1, [r7, #4]
 800e4b4:	2006      	movs	r0, #6
 800e4b6:	f002 f9e5 	bl	8010884 <memp_free>
  }
}
 800e4ba:	bf00      	nop
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
	...

0800e4c4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d106      	bne.n	800e4e0 <netbuf_free+0x1c>
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <netbuf_free+0x44>)
 800e4d4:	2281      	movs	r2, #129	@ 0x81
 800e4d6:	490d      	ldr	r1, [pc, #52]	@ (800e50c <netbuf_free+0x48>)
 800e4d8:	480d      	ldr	r0, [pc, #52]	@ (800e510 <netbuf_free+0x4c>)
 800e4da:	f010 f99d 	bl	801e818 <iprintf>
 800e4de:	e00f      	b.n	800e500 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d004      	beq.n	800e4f2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f003 f8ab 	bl	8011648 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	605a      	str	r2, [r3, #4]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	685a      	ldr	r2, [r3, #4]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	08022b20 	.word	0x08022b20
 800e50c:	08022bbc 	.word	0x08022bbc
 800e510:	08022b70 	.word	0x08022b70

0800e514 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	4613      	mov	r3, r2
 800e520:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d108      	bne.n	800e53a <netbuf_ref+0x26>
 800e528:	4b1c      	ldr	r3, [pc, #112]	@ (800e59c <netbuf_ref+0x88>)
 800e52a:	2299      	movs	r2, #153	@ 0x99
 800e52c:	491c      	ldr	r1, [pc, #112]	@ (800e5a0 <netbuf_ref+0x8c>)
 800e52e:	481d      	ldr	r0, [pc, #116]	@ (800e5a4 <netbuf_ref+0x90>)
 800e530:	f010 f972 	bl	801e818 <iprintf>
 800e534:	f06f 030f 	mvn.w	r3, #15
 800e538:	e02b      	b.n	800e592 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d004      	beq.n	800e54c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4618      	mov	r0, r3
 800e548:	f003 f87e 	bl	8011648 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800e54c:	2241      	movs	r2, #65	@ 0x41
 800e54e:	2100      	movs	r1, #0
 800e550:	2036      	movs	r0, #54	@ 0x36
 800e552:	f002 fd63 	bl	801101c <pbuf_alloc>
 800e556:	4602      	mov	r2, r0
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d105      	bne.n	800e570 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2200      	movs	r2, #0
 800e568:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800e56a:	f04f 33ff 	mov.w	r3, #4294967295
 800e56e:	e010      	b.n	800e592 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68ba      	ldr	r2, [r7, #8]
 800e576:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	88fa      	ldrh	r2, [r7, #6]
 800e57e:	811a      	strh	r2, [r3, #8]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	6812      	ldr	r2, [r2, #0]
 800e584:	891b      	ldrh	r3, [r3, #8]
 800e586:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	08022b20 	.word	0x08022b20
 800e5a0:	08022bd8 	.word	0x08022bd8
 800e5a4:	08022b70 	.word	0x08022b70

0800e5a8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	db02      	blt.n	800e5c0 <tryget_socket_unconn_nouse+0x18>
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2b03      	cmp	r3, #3
 800e5be:	dd01      	ble.n	800e5c4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	e003      	b.n	800e5cc <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	011b      	lsls	r3, r3, #4
 800e5c8:	4a03      	ldr	r2, [pc, #12]	@ (800e5d8 <tryget_socket_unconn_nouse+0x30>)
 800e5ca:	4413      	add	r3, r2
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	2000b6e8 	.word	0x2000b6e8

0800e5dc <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff ffdf 	bl	800e5a8 <tryget_socket_unconn_nouse>
 800e5ea:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b084      	sub	sp, #16
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7ff ffec 	bl	800e5dc <tryget_socket_unconn>
 800e604:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d005      	beq.n	800e618 <tryget_socket+0x22>
    if (sock->conn) {
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <tryget_socket+0x22>
      return sock;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	e000      	b.n	800e61a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
	...

0800e624 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7ff ffe2 	bl	800e5f6 <tryget_socket>
 800e632:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d104      	bne.n	800e644 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800e63a:	4b05      	ldr	r3, [pc, #20]	@ (800e650 <get_socket+0x2c>)
 800e63c:	2209      	movs	r2, #9
 800e63e:	601a      	str	r2, [r3, #0]
    return NULL;
 800e640:	2300      	movs	r3, #0
 800e642:	e000      	b.n	800e646 <get_socket+0x22>
  }
  return sock;
 800e644:	68fb      	ldr	r3, [r7, #12]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	2000f760 	.word	0x2000f760

0800e654 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e65e:	2300      	movs	r3, #0
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	e052      	b.n	800e70a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800e664:	f00e ffac 	bl	801d5c0 <sys_arch_protect>
 800e668:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800e66a:	4a2c      	ldr	r2, [pc, #176]	@ (800e71c <alloc_socket+0xc8>)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	011b      	lsls	r3, r3, #4
 800e670:	4413      	add	r3, r2
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d142      	bne.n	800e6fe <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800e678:	4a28      	ldr	r2, [pc, #160]	@ (800e71c <alloc_socket+0xc8>)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	011b      	lsls	r3, r3, #4
 800e67e:	4413      	add	r3, r2
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800e684:	68b8      	ldr	r0, [r7, #8]
 800e686:	f00e ffa9 	bl	801d5dc <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800e68a:	4a24      	ldr	r2, [pc, #144]	@ (800e71c <alloc_socket+0xc8>)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	011b      	lsls	r3, r3, #4
 800e690:	4413      	add	r3, r2
 800e692:	3304      	adds	r3, #4
 800e694:	2200      	movs	r2, #0
 800e696:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800e698:	4a20      	ldr	r2, [pc, #128]	@ (800e71c <alloc_socket+0xc8>)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	011b      	lsls	r3, r3, #4
 800e69e:	4413      	add	r3, r2
 800e6a0:	330e      	adds	r3, #14
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d006      	beq.n	800e6b6 <alloc_socket+0x62>
 800e6a8:	4b1d      	ldr	r3, [pc, #116]	@ (800e720 <alloc_socket+0xcc>)
 800e6aa:	f240 220e 	movw	r2, #526	@ 0x20e
 800e6ae:	491d      	ldr	r1, [pc, #116]	@ (800e724 <alloc_socket+0xd0>)
 800e6b0:	481d      	ldr	r0, [pc, #116]	@ (800e728 <alloc_socket+0xd4>)
 800e6b2:	f010 f8b1 	bl	801e818 <iprintf>
      sockets[i].rcvevent   = 0;
 800e6b6:	4a19      	ldr	r2, [pc, #100]	@ (800e71c <alloc_socket+0xc8>)
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	011b      	lsls	r3, r3, #4
 800e6bc:	4413      	add	r3, r2
 800e6be:	3308      	adds	r3, #8
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e6cc:	2b10      	cmp	r3, #16
 800e6ce:	d102      	bne.n	800e6d6 <alloc_socket+0x82>
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d001      	beq.n	800e6da <alloc_socket+0x86>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e000      	b.n	800e6dc <alloc_socket+0x88>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	b299      	uxth	r1, r3
 800e6de:	4a0f      	ldr	r2, [pc, #60]	@ (800e71c <alloc_socket+0xc8>)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	011b      	lsls	r3, r3, #4
 800e6e4:	4413      	add	r3, r2
 800e6e6:	330a      	adds	r3, #10
 800e6e8:	460a      	mov	r2, r1
 800e6ea:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800e6ec:	4a0b      	ldr	r2, [pc, #44]	@ (800e71c <alloc_socket+0xc8>)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	011b      	lsls	r3, r3, #4
 800e6f2:	4413      	add	r3, r2
 800e6f4:	330c      	adds	r3, #12
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	e00a      	b.n	800e714 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800e6fe:	68b8      	ldr	r0, [r7, #8]
 800e700:	f00e ff6c 	bl	801d5dc <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	3301      	adds	r3, #1
 800e708:	60fb      	str	r3, [r7, #12]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b03      	cmp	r3, #3
 800e70e:	dda9      	ble.n	800e664 <alloc_socket+0x10>
  }
  return -1;
 800e710:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	2000b6e8 	.word	0x2000b6e8
 800e720:	08022cb8 	.word	0x08022cb8
 800e724:	08022cec 	.word	0x08022cec
 800e728:	08022d0c 	.word	0x08022d0c

0800e72c <lwip_connect>:
  return 0;
}

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b08c      	sub	sp, #48	@ 0x30
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f7ff ff73 	bl	800e624 <get_socket>
 800e73e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (!sock) {
 800e740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e742:	2b00      	cmp	r3, #0
 800e744:	d102      	bne.n	800e74c <lwip_connect+0x20>
    return -1;
 800e746:	f04f 33ff 	mov.w	r3, #4294967295
 800e74a:	e062      	b.n	800e812 <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	785b      	ldrb	r3, [r3, #1]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d108      	bne.n	800e766 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800e754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fd fe77 	bl	800c44c <netconn_disconnect>
 800e75e:	4603      	mov	r3, r0
 800e760:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e764:	e039      	b.n	800e7da <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2b10      	cmp	r3, #16
 800e76a:	d10c      	bne.n	800e786 <lwip_connect+0x5a>
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	785b      	ldrb	r3, [r3, #1]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <lwip_connect+0x50>
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	785b      	ldrb	r3, [r3, #1]
 800e778:	2b02      	cmp	r3, #2
 800e77a:	d104      	bne.n	800e786 <lwip_connect+0x5a>
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	f003 0303 	and.w	r3, r3, #3
 800e782:	2b00      	cmp	r3, #0
 800e784:	d014      	beq.n	800e7b0 <lwip_connect+0x84>
 800e786:	4b25      	ldr	r3, [pc, #148]	@ (800e81c <lwip_connect+0xf0>)
 800e788:	f240 3247 	movw	r2, #839	@ 0x347
 800e78c:	4924      	ldr	r1, [pc, #144]	@ (800e820 <lwip_connect+0xf4>)
 800e78e:	4825      	ldr	r0, [pc, #148]	@ (800e824 <lwip_connect+0xf8>)
 800e790:	f010 f842 	bl	801e818 <iprintf>
 800e794:	f06f 000f 	mvn.w	r0, #15
 800e798:	f7ff fe56 	bl	800e448 <err_to_errno>
 800e79c:	6238      	str	r0, [r7, #32]
 800e79e:	6a3b      	ldr	r3, [r7, #32]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <lwip_connect+0x7e>
 800e7a4:	4a20      	ldr	r2, [pc, #128]	@ (800e828 <lwip_connect+0xfc>)
 800e7a6:	6a3b      	ldr	r3, [r7, #32]
 800e7a8:	6013      	str	r3, [r2, #0]
 800e7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ae:	e030      	b.n	800e812 <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	617b      	str	r3, [r7, #20]
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	885b      	ldrh	r3, [r3, #2]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f001 f826 	bl	800f80c <lwip_htons>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800e7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e7ca:	f107 0114 	add.w	r1, r7, #20
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7fd fe04 	bl	800c3dc <netconn_connect>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  if (err != ERR_OK) {
 800e7da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00e      	beq.n	800e800 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800e7e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7ff fe2e 	bl	800e448 <err_to_errno>
 800e7ec:	61b8      	str	r0, [r7, #24]
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d002      	beq.n	800e7fa <lwip_connect+0xce>
 800e7f4:	4a0c      	ldr	r2, [pc, #48]	@ (800e828 <lwip_connect+0xfc>)
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e7fe:	e008      	b.n	800e812 <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800e800:	2300      	movs	r3, #0
 800e802:	61fb      	str	r3, [r7, #28]
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <lwip_connect+0xe4>
 800e80a:	4a07      	ldr	r2, [pc, #28]	@ (800e828 <lwip_connect+0xfc>)
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3730      	adds	r7, #48	@ 0x30
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	08022cb8 	.word	0x08022cb8
 800e820:	08022d90 	.word	0x08022d90
 800e824:	08022d0c 	.word	0x08022d0c
 800e828:	2000f760 	.word	0x2000f760

0800e82c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b08c      	sub	sp, #48	@ 0x30
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800e83a:	2308      	movs	r3, #8
 800e83c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 800e840:	2300      	movs	r3, #0
 800e842:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	db01      	blt.n	800e84e <lwip_recv_tcp+0x22>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	e001      	b.n	800e852 <lwip_recv_tcp+0x26>
 800e84e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e852:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d106      	bne.n	800e868 <lwip_recv_tcp+0x3c>
 800e85a:	4b74      	ldr	r3, [pc, #464]	@ (800ea2c <lwip_recv_tcp+0x200>)
 800e85c:	f240 329e 	movw	r2, #926	@ 0x39e
 800e860:	4973      	ldr	r1, [pc, #460]	@ (800ea30 <lwip_recv_tcp+0x204>)
 800e862:	4874      	ldr	r0, [pc, #464]	@ (800ea34 <lwip_recv_tcp+0x208>)
 800e864:	f00f ffd8 	bl	801e818 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e872:	2b10      	cmp	r3, #16
 800e874:	d006      	beq.n	800e884 <lwip_recv_tcp+0x58>
 800e876:	4b6d      	ldr	r3, [pc, #436]	@ (800ea2c <lwip_recv_tcp+0x200>)
 800e878:	f240 329f 	movw	r2, #927	@ 0x39f
 800e87c:	496e      	ldr	r1, [pc, #440]	@ (800ea38 <lwip_recv_tcp+0x20c>)
 800e87e:	486d      	ldr	r0, [pc, #436]	@ (800ea34 <lwip_recv_tcp+0x208>)
 800e880:	f00f ffca 	bl	801e818 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	f003 0308 	and.w	r3, r3, #8
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d005      	beq.n	800e89a <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800e88e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e892:	f043 0304 	orr.w	r3, r3, #4
 800e896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d003      	beq.n	800e8aa <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	617b      	str	r3, [r7, #20]
 800e8a8:	e036      	b.n	800e918 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e8b2:	f107 0114 	add.w	r1, r7, #20
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fd ff9c 	bl	800c7f4 <netconn_recv_tcp_pbuf_flags>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800e8c2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d019      	beq.n	800e8fe <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f300 808d 	bgt.w	800e9ec <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800e8d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7ff fdb6 	bl	800e448 <err_to_errno>
 800e8dc:	61f8      	str	r0, [r7, #28]
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <lwip_recv_tcp+0xbe>
 800e8e4:	4a55      	ldr	r2, [pc, #340]	@ (800ea3c <lwip_recv_tcp+0x210>)
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800e8ea:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e8ee:	f113 0f0f 	cmn.w	r3, #15
 800e8f2:	d101      	bne.n	800e8f8 <lwip_recv_tcp+0xcc>
          return 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	e094      	b.n	800ea22 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800e8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fc:	e091      	b.n	800ea22 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d106      	bne.n	800e912 <lwip_recv_tcp+0xe6>
 800e904:	4b49      	ldr	r3, [pc, #292]	@ (800ea2c <lwip_recv_tcp+0x200>)
 800e906:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800e90a:	494d      	ldr	r1, [pc, #308]	@ (800ea40 <lwip_recv_tcp+0x214>)
 800e90c:	4849      	ldr	r0, [pc, #292]	@ (800ea34 <lwip_recv_tcp+0x208>)
 800e90e:	f00f ff83 	bl	801e818 <iprintf>
      sock->lastdata.pbuf = p;
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	891b      	ldrh	r3, [r3, #8]
 800e91c:	461a      	mov	r2, r3
 800e91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e920:	4293      	cmp	r3, r2
 800e922:	dd03      	ble.n	800e92c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	891b      	ldrh	r3, [r3, #8]
 800e928:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e92a:	e001      	b.n	800e930 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800e92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e92e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 800e930:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e934:	4413      	add	r3, r2
 800e936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e938:	429a      	cmp	r2, r3
 800e93a:	dd03      	ble.n	800e944 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800e93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93e:	b29b      	uxth	r3, r3
 800e940:	43db      	mvns	r3, r3
 800e942:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800e944:	6978      	ldr	r0, [r7, #20]
 800e946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	18d1      	adds	r1, r2, r3
 800e94c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e94e:	2300      	movs	r3, #0
 800e950:	f003 f880 	bl	8011a54 <pbuf_copy_partial>

    recvd += copylen;
 800e954:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e958:	4413      	add	r3, r2
 800e95a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800e95c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e960:	429a      	cmp	r2, r3
 800e962:	da06      	bge.n	800e972 <lwip_recv_tcp+0x146>
 800e964:	4b31      	ldr	r3, [pc, #196]	@ (800ea2c <lwip_recv_tcp+0x200>)
 800e966:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800e96a:	4936      	ldr	r1, [pc, #216]	@ (800ea44 <lwip_recv_tcp+0x218>)
 800e96c:	4831      	ldr	r0, [pc, #196]	@ (800ea34 <lwip_recv_tcp+0x208>)
 800e96e:	f00f ff53 	bl	801e818 <iprintf>
    recv_left -= copylen;
 800e972:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	f003 0301 	and.w	r3, r3, #1
 800e980:	2b00      	cmp	r3, #0
 800e982:	d123      	bne.n	800e9cc <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	891b      	ldrh	r3, [r3, #8]
 800e988:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d906      	bls.n	800e99c <lwip_recv_tcp+0x170>
 800e98e:	4b27      	ldr	r3, [pc, #156]	@ (800ea2c <lwip_recv_tcp+0x200>)
 800e990:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800e994:	492c      	ldr	r1, [pc, #176]	@ (800ea48 <lwip_recv_tcp+0x21c>)
 800e996:	4827      	ldr	r0, [pc, #156]	@ (800ea34 <lwip_recv_tcp+0x208>)
 800e998:	f00f ff3e 	bl	801e818 <iprintf>
      if (p->tot_len - copylen > 0) {
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	891b      	ldrh	r3, [r3, #8]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	dd09      	ble.n	800e9be <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f002 fe16 	bl	80115e2 <pbuf_free_header>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	605a      	str	r2, [r3, #4]
 800e9bc:	e006      	b.n	800e9cc <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f002 fe3e 	bl	8011648 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800e9cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9d0:	f043 0314 	orr.w	r3, r3, #20
 800e9d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	dd08      	ble.n	800e9f0 <lwip_recv_tcp+0x1c4>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f43f af58 	beq.w	800e89a <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800e9ea:	e001      	b.n	800e9f0 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800e9ec:	bf00      	nop
 800e9ee:	e000      	b.n	800e9f2 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800e9f0:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800e9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dd0b      	ble.n	800ea10 <lwip_recv_tcp+0x1e4>
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d106      	bne.n	800ea10 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea08:	4611      	mov	r1, r2
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fd fe40 	bl	800c690 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800ea10:	2300      	movs	r3, #0
 800ea12:	61bb      	str	r3, [r7, #24]
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d002      	beq.n	800ea20 <lwip_recv_tcp+0x1f4>
 800ea1a:	4a08      	ldr	r2, [pc, #32]	@ (800ea3c <lwip_recv_tcp+0x210>)
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	6013      	str	r3, [r2, #0]
  return recvd;
 800ea20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3730      	adds	r7, #48	@ 0x30
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	08022cb8 	.word	0x08022cb8
 800ea30:	08022db0 	.word	0x08022db0
 800ea34:	08022d0c 	.word	0x08022d0c
 800ea38:	08022dc0 	.word	0x08022dc0
 800ea3c:	2000f760 	.word	0x2000f760
 800ea40:	08022de4 	.word	0x08022de4
 800ea44:	08022df0 	.word	0x08022df0
 800ea48:	08022e18 	.word	0x08022e18

0800ea4c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800ea4c:	b590      	push	{r4, r7, lr}
 800ea4e:	b08b      	sub	sp, #44	@ 0x2c
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	603b      	str	r3, [r7, #0]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d106      	bne.n	800ea74 <lwip_sock_make_addr+0x28>
 800ea66:	4b2b      	ldr	r3, [pc, #172]	@ (800eb14 <lwip_sock_make_addr+0xc8>)
 800ea68:	f240 4207 	movw	r2, #1031	@ 0x407
 800ea6c:	492a      	ldr	r1, [pc, #168]	@ (800eb18 <lwip_sock_make_addr+0xcc>)
 800ea6e:	482b      	ldr	r0, [pc, #172]	@ (800eb1c <lwip_sock_make_addr+0xd0>)
 800ea70:	f00f fed2 	bl	801e818 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d106      	bne.n	800ea88 <lwip_sock_make_addr+0x3c>
 800ea7a:	4b26      	ldr	r3, [pc, #152]	@ (800eb14 <lwip_sock_make_addr+0xc8>)
 800ea7c:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800ea80:	4927      	ldr	r1, [pc, #156]	@ (800eb20 <lwip_sock_make_addr+0xd4>)
 800ea82:	4826      	ldr	r0, [pc, #152]	@ (800eb1c <lwip_sock_make_addr+0xd0>)
 800ea84:	f00f fec8 	bl	801e818 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800ea88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d106      	bne.n	800ea9c <lwip_sock_make_addr+0x50>
 800ea8e:	4b21      	ldr	r3, [pc, #132]	@ (800eb14 <lwip_sock_make_addr+0xc8>)
 800ea90:	f240 4209 	movw	r2, #1033	@ 0x409
 800ea94:	4923      	ldr	r1, [pc, #140]	@ (800eb24 <lwip_sock_make_addr+0xd8>)
 800ea96:	4821      	ldr	r0, [pc, #132]	@ (800eb1c <lwip_sock_make_addr+0xd0>)
 800ea98:	f00f febe 	bl	801e818 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ea9c:	f107 0314 	add.w	r3, r7, #20
 800eaa0:	2210      	movs	r2, #16
 800eaa2:	701a      	strb	r2, [r3, #0]
 800eaa4:	f107 0314 	add.w	r3, r7, #20
 800eaa8:	2202      	movs	r2, #2
 800eaaa:	705a      	strb	r2, [r3, #1]
 800eaac:	f107 0414 	add.w	r4, r7, #20
 800eab0:	88fb      	ldrh	r3, [r7, #6]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 feaa 	bl	800f80c <lwip_htons>
 800eab8:	4603      	mov	r3, r0
 800eaba:	8063      	strh	r3, [r4, #2]
 800eabc:	f107 0314 	add.w	r3, r7, #20
 800eac0:	68ba      	ldr	r2, [r7, #8]
 800eac2:	6812      	ldr	r2, [r2, #0]
 800eac4:	605a      	str	r2, [r3, #4]
 800eac6:	f107 0314 	add.w	r3, r7, #20
 800eaca:	3308      	adds	r3, #8
 800eacc:	2208      	movs	r2, #8
 800eace:	2100      	movs	r1, #0
 800ead0:	4618      	mov	r0, r3
 800ead2:	f00f ff40 	bl	801e956 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800ead6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	7d3a      	ldrb	r2, [r7, #20]
 800eadc:	4293      	cmp	r3, r2
 800eade:	d202      	bcs.n	800eae6 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800eae0:	2301      	movs	r3, #1
 800eae2:	627b      	str	r3, [r7, #36]	@ 0x24
 800eae4:	e008      	b.n	800eaf8 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800eae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	7d3a      	ldrb	r2, [r7, #20]
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d903      	bls.n	800eaf8 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800eaf0:	7d3b      	ldrb	r3, [r7, #20]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf6:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800eaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	f107 0314 	add.w	r3, r7, #20
 800eb00:	4619      	mov	r1, r3
 800eb02:	6838      	ldr	r0, [r7, #0]
 800eb04:	f010 f829 	bl	801eb5a <memcpy>
  return truncated;
 800eb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	372c      	adds	r7, #44	@ 0x2c
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd90      	pop	{r4, r7, pc}
 800eb12:	bf00      	nop
 800eb14:	08022cb8 	.word	0x08022cb8
 800eb18:	08022e28 	.word	0x08022e28
 800eb1c:	08022d0c 	.word	0x08022d0c
 800eb20:	08022e3c 	.word	0x08022e3c
 800eb24:	08022e4c 	.word	0x08022e4c

0800eb28 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b088      	sub	sp, #32
 800eb2c:	af02      	add	r7, sp, #8
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d101      	bne.n	800eb40 <lwip_recv_tcp_from+0x18>
    return 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	e021      	b.n	800eb84 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d01d      	beq.n	800eb82 <lwip_recv_tcp_from+0x5a>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d01a      	beq.n	800eb82 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6818      	ldr	r0, [r3, #0]
 800eb50:	f107 0216 	add.w	r2, r7, #22
 800eb54:	f107 0110 	add.w	r1, r7, #16
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f7fd fbed 	bl	800c338 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00e      	beq.n	800eb82 <lwip_recv_tcp_from+0x5a>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00b      	beq.n	800eb82 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6818      	ldr	r0, [r3, #0]
 800eb6e:	8afa      	ldrh	r2, [r7, #22]
 800eb70:	f107 0110 	add.w	r1, r7, #16
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	9300      	str	r3, [sp, #0]
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	f7ff ff67 	bl	800ea4c <lwip_sock_make_addr>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	e000      	b.n	800eb84 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3718      	adds	r7, #24
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800eb8c:	b590      	push	{r4, r7, lr}
 800eb8e:	b08d      	sub	sp, #52	@ 0x34
 800eb90:	af02      	add	r7, sp, #8
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10d      	bne.n	800ebbe <lwip_recvfrom_udp_raw+0x32>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dd09      	ble.n	800ebbe <lwip_recvfrom_udp_raw+0x32>
 800ebaa:	4b5e      	ldr	r3, [pc, #376]	@ (800ed24 <lwip_recvfrom_udp_raw+0x198>)
 800ebac:	f240 4249 	movw	r2, #1097	@ 0x449
 800ebb0:	495d      	ldr	r1, [pc, #372]	@ (800ed28 <lwip_recvfrom_udp_raw+0x19c>)
 800ebb2:	485e      	ldr	r0, [pc, #376]	@ (800ed2c <lwip_recvfrom_udp_raw+0x1a0>)
 800ebb4:	f00f fe30 	bl	801e818 <iprintf>
 800ebb8:	f06f 030f 	mvn.w	r3, #15
 800ebbc:	e0ad      	b.n	800ed1a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	f003 0308 	and.w	r3, r3, #8
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d003      	beq.n	800ebd0 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ebc8:	2304      	movs	r3, #4
 800ebca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ebce:	e002      	b.n	800ebd6 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d11e      	bne.n	800ec20 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ebea:	f107 0110 	add.w	r1, r7, #16
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fd fe2c 	bl	800c84c <netconn_recv_udp_raw_netbuf_flags>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800ebf8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d002      	beq.n	800ec06 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800ec00:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ec04:	e089      	b.n	800ed1a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d106      	bne.n	800ec1a <lwip_recvfrom_udp_raw+0x8e>
 800ec0c:	4b45      	ldr	r3, [pc, #276]	@ (800ed24 <lwip_recvfrom_udp_raw+0x198>)
 800ec0e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800ec12:	4947      	ldr	r1, [pc, #284]	@ (800ed30 <lwip_recvfrom_udp_raw+0x1a4>)
 800ec14:	4845      	ldr	r0, [pc, #276]	@ (800ed2c <lwip_recvfrom_udp_raw+0x1a0>)
 800ec16:	f00f fdff 	bl	801e818 <iprintf>
    sock->lastdata.netbuf = buf;
 800ec1a:	693a      	ldr	r2, [r7, #16]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	891b      	ldrh	r3, [r3, #8]
 800ec26:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	61fb      	str	r3, [r7, #28]
 800ec30:	e029      	b.n	800ec86 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ec32:	8b3a      	ldrh	r2, [r7, #24]
 800ec34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	689a      	ldr	r2, [r3, #8]
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	4413      	add	r3, r2
 800ec44:	685a      	ldr	r2, [r3, #4]
 800ec46:	8afb      	ldrh	r3, [r7, #22]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d902      	bls.n	800ec52 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ec4c:	8afb      	ldrh	r3, [r7, #22]
 800ec4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ec50:	e006      	b.n	800ec60 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	689a      	ldr	r2, [r3, #8]
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	00db      	lsls	r3, r3, #3
 800ec5a:	4413      	add	r3, r2
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	6818      	ldr	r0, [r3, #0]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	689a      	ldr	r2, [r3, #8]
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	4413      	add	r3, r2
 800ec6e:	6819      	ldr	r1, [r3, #0]
 800ec70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec74:	f002 feee 	bl	8011a54 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800ec78:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ec7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec7c:	4413      	add	r3, r2
 800ec7e:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	3301      	adds	r3, #1
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	69fa      	ldr	r2, [r7, #28]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	da03      	bge.n	800ec98 <lwip_recvfrom_udp_raw+0x10c>
 800ec90:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ec92:	8b3b      	ldrh	r3, [r7, #24]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d3cc      	bcc.n	800ec32 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d01a      	beq.n	800ecd6 <lwip_recvfrom_udp_raw+0x14a>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d016      	beq.n	800ecd6 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d012      	beq.n	800ecd6 <lwip_recvfrom_udp_raw+0x14a>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00e      	beq.n	800ecd6 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6818      	ldr	r0, [r3, #0]
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	f103 0108 	add.w	r1, r3, #8
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	3304      	adds	r3, #4
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	4623      	mov	r3, r4
 800ecd2:	f7ff febb 	bl	800ea4c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d007      	beq.n	800ecf4 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ece4:	2300      	movs	r3, #0
 800ece6:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ece8:	7d7b      	ldrb	r3, [r7, #21]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d102      	bne.n	800ecf4 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	f003 0301 	and.w	r3, r3, #1
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d106      	bne.n	800ed0c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2200      	movs	r2, #0
 800ed02:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7ff fbbc 	bl	800e484 <netbuf_delete>
  }
  if (datagram_len) {
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d002      	beq.n	800ed18 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	8b3a      	ldrh	r2, [r7, #24]
 800ed16:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	372c      	adds	r7, #44	@ 0x2c
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd90      	pop	{r4, r7, pc}
 800ed22:	bf00      	nop
 800ed24:	08022cb8 	.word	0x08022cb8
 800ed28:	08022e5c 	.word	0x08022e5c
 800ed2c:	08022d0c 	.word	0x08022d0c
 800ed30:	08022e88 	.word	0x08022e88

0800ed34 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b096      	sub	sp, #88	@ 0x58
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
 800ed40:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800ed42:	68f8      	ldr	r0, [r7, #12]
 800ed44:	f7ff fc6e 	bl	800e624 <get_socket>
 800ed48:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 800ed4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d102      	bne.n	800ed56 <lwip_recvfrom+0x22>
    return -1;
 800ed50:	f04f 33ff 	mov.w	r3, #4294967295
 800ed54:	e078      	b.n	800ee48 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ed56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ed60:	2b10      	cmp	r3, #16
 800ed62:	d112      	bne.n	800ed8a <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	68b9      	ldr	r1, [r7, #8]
 800ed6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ed6c:	f7ff fd5e 	bl	800e82c <lwip_recv_tcp>
 800ed70:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800ed72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed74:	9301      	str	r3, [sp, #4]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	4b35      	ldr	r3, [pc, #212]	@ (800ee50 <lwip_recvfrom+0x11c>)
 800ed7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ed7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ed80:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ed82:	f7ff fed1 	bl	800eb28 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800ed86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed88:	e05e      	b.n	800ee48 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 800ed96:	2300      	movs	r3, #0
 800ed98:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 800eda2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800eda6:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800eda8:	2301      	movs	r3, #1
 800edaa:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800edac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800edae:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800edb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d002      	beq.n	800edbc <lwip_recvfrom+0x88>
 800edb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	e000      	b.n	800edbe <lwip_recvfrom+0x8a>
 800edbc:	2300      	movs	r3, #0
 800edbe:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800edc0:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800edc4:	f107 0214 	add.w	r2, r7, #20
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	460b      	mov	r3, r1
 800edce:	6839      	ldr	r1, [r7, #0]
 800edd0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800edd2:	f7ff fedb 	bl	800eb8c <lwip_recvfrom_udp_raw>
 800edd6:	4603      	mov	r3, r0
 800edd8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 800eddc:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00e      	beq.n	800ee02 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800ede4:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff fb2d 	bl	800e448 <err_to_errno>
 800edee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800edf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d002      	beq.n	800edfc <lwip_recvfrom+0xc8>
 800edf6:	4a17      	ldr	r2, [pc, #92]	@ (800ee54 <lwip_recvfrom+0x120>)
 800edf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edfa:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800edfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ee00:	e022      	b.n	800ee48 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ee02:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ee04:	461a      	mov	r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	bf28      	it	cs
 800ee0c:	4613      	movcs	r3, r2
 800ee0e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d206      	bcs.n	800ee24 <lwip_recvfrom+0xf0>
 800ee16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ee18:	461a      	mov	r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	bf28      	it	cs
 800ee20:	4613      	movcs	r3, r2
 800ee22:	e001      	b.n	800ee28 <lwip_recvfrom+0xf4>
 800ee24:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ee28:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 800ee2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d002      	beq.n	800ee36 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800ee30:	69ba      	ldr	r2, [r7, #24]
 800ee32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee34:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800ee36:	2300      	movs	r3, #0
 800ee38:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d002      	beq.n	800ee46 <lwip_recvfrom+0x112>
 800ee40:	4a04      	ldr	r2, [pc, #16]	@ (800ee54 <lwip_recvfrom+0x120>)
 800ee42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee44:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800ee46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3750      	adds	r7, #80	@ 0x50
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	08022e94 	.word	0x08022e94
 800ee54:	2000f760 	.word	0x2000f760

0800ee58 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af02      	add	r7, sp, #8
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800ee66:	2300      	movs	r3, #0
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	68b9      	ldr	r1, [r7, #8]
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f7ff ff5d 	bl	800ed34 <lwip_recvfrom>
 800ee7a:	4603      	mov	r3, r0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b08a      	sub	sp, #40	@ 0x28
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
 800ee90:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f7ff fbc6 	bl	800e624 <get_socket>
 800ee98:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d102      	bne.n	800eea6 <lwip_send+0x22>
    return -1;
 800eea0:	f04f 33ff 	mov.w	r3, #4294967295
 800eea4:	e046      	b.n	800ef34 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eeb0:	2b10      	cmp	r3, #16
 800eeb2:	d00b      	beq.n	800eecc <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	9301      	str	r3, [sp, #4]
 800eeb8:	2300      	movs	r3, #0
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	68b9      	ldr	r1, [r7, #8]
 800eec2:	68f8      	ldr	r0, [r7, #12]
 800eec4:	f000 f83c 	bl	800ef40 <lwip_sendto>
 800eec8:	4603      	mov	r3, r0
 800eeca:	e033      	b.n	800ef34 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d001      	beq.n	800eeda <lwip_send+0x56>
 800eed6:	2203      	movs	r2, #3
 800eed8:	e000      	b.n	800eedc <lwip_send+0x58>
 800eeda:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	105b      	asrs	r3, r3, #1
 800eee0:	b25b      	sxtb	r3, r3
 800eee2:	f003 0304 	and.w	r3, r3, #4
 800eee6:	b25b      	sxtb	r3, r3
 800eee8:	4313      	orrs	r3, r2
 800eeea:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800eeec:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	6818      	ldr	r0, [r3, #0]
 800eef6:	7efa      	ldrb	r2, [r7, #27]
 800eef8:	f107 0310 	add.w	r3, r7, #16
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	4613      	mov	r3, r2
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	68b9      	ldr	r1, [r7, #8]
 800ef04:	f7fd fcfc 	bl	800c900 <netconn_write_partly>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800ef0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7ff fa99 	bl	800e448 <err_to_errno>
 800ef16:	6178      	str	r0, [r7, #20]
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d002      	beq.n	800ef24 <lwip_send+0xa0>
 800ef1e:	4a07      	ldr	r2, [pc, #28]	@ (800ef3c <lwip_send+0xb8>)
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800ef24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d101      	bne.n	800ef30 <lwip_send+0xac>
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	e001      	b.n	800ef34 <lwip_send+0xb0>
 800ef30:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3720      	adds	r7, #32
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	2000f760 	.word	0x2000f760

0800ef40 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b08e      	sub	sp, #56	@ 0x38
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
 800ef4c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800ef4e:	68f8      	ldr	r0, [r7, #12]
 800ef50:	f7ff fb68 	bl	800e624 <get_socket>
 800ef54:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800ef56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <lwip_sendto+0x22>
    return -1;
 800ef5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef60:	e093      	b.n	800f08a <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ef62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef6c:	2b10      	cmp	r3, #16
 800ef6e:	d107      	bne.n	800ef80 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	68b9      	ldr	r1, [r7, #8]
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f7ff ff84 	bl	800ee84 <lwip_send>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	e084      	b.n	800f08a <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef86:	d30a      	bcc.n	800ef9e <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800ef88:	235a      	movs	r3, #90	@ 0x5a
 800ef8a:	623b      	str	r3, [r7, #32]
 800ef8c:	6a3b      	ldr	r3, [r7, #32]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <lwip_sendto+0x58>
 800ef92:	4a40      	ldr	r2, [pc, #256]	@ (800f094 <lwip_sendto+0x154>)
 800ef94:	6a3b      	ldr	r3, [r7, #32]
 800ef96:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ef98:	f04f 33ff 	mov.w	r3, #4294967295
 800ef9c:	e075      	b.n	800f08a <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800efa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d102      	bne.n	800efae <lwip_sendto+0x6e>
 800efa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d023      	beq.n	800eff6 <lwip_sendto+0xb6>
 800efae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efb0:	2b10      	cmp	r3, #16
 800efb2:	d10b      	bne.n	800efcc <lwip_sendto+0x8c>
 800efb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d008      	beq.n	800efcc <lwip_sendto+0x8c>
 800efba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efbc:	785b      	ldrb	r3, [r3, #1]
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d104      	bne.n	800efcc <lwip_sendto+0x8c>
 800efc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efc4:	f003 0303 	and.w	r3, r3, #3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d014      	beq.n	800eff6 <lwip_sendto+0xb6>
 800efcc:	4b32      	ldr	r3, [pc, #200]	@ (800f098 <lwip_sendto+0x158>)
 800efce:	f240 6252 	movw	r2, #1618	@ 0x652
 800efd2:	4932      	ldr	r1, [pc, #200]	@ (800f09c <lwip_sendto+0x15c>)
 800efd4:	4832      	ldr	r0, [pc, #200]	@ (800f0a0 <lwip_sendto+0x160>)
 800efd6:	f00f fc1f 	bl	801e818 <iprintf>
 800efda:	f06f 000f 	mvn.w	r0, #15
 800efde:	f7ff fa33 	bl	800e448 <err_to_errno>
 800efe2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800efe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d002      	beq.n	800eff0 <lwip_sendto+0xb0>
 800efea:	4a2a      	ldr	r2, [pc, #168]	@ (800f094 <lwip_sendto+0x154>)
 800efec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	f04f 33ff 	mov.w	r3, #4294967295
 800eff4:	e049      	b.n	800f08a <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800eff6:	2300      	movs	r3, #0
 800eff8:	617b      	str	r3, [r7, #20]
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800effe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00a      	beq.n	800f01a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800f004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	61bb      	str	r3, [r7, #24]
 800f00a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f00c:	885b      	ldrh	r3, [r3, #2]
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 fbfc 	bl	800f80c <lwip_htons>
 800f014:	4603      	mov	r3, r0
 800f016:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800f018:	e003      	b.n	800f022 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800f01a:	2300      	movs	r3, #0
 800f01c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800f01e:	2300      	movs	r3, #0
 800f020:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800f022:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f024:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800f026:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f028:	f107 0310 	add.w	r3, r7, #16
 800f02c:	68b9      	ldr	r1, [r7, #8]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff fa70 	bl	800e514 <netbuf_ref>
 800f034:	4603      	mov	r3, r0
 800f036:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800f03a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10a      	bne.n	800f058 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800f042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f107 0210 	add.w	r2, r7, #16
 800f04a:	4611      	mov	r1, r2
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fd fc29 	bl	800c8a4 <netconn_send>
 800f052:	4603      	mov	r3, r0
 800f054:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800f058:	f107 0310 	add.w	r3, r7, #16
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff fa31 	bl	800e4c4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800f062:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff f9ee 	bl	800e448 <err_to_errno>
 800f06c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <lwip_sendto+0x13a>
 800f074:	4a07      	ldr	r2, [pc, #28]	@ (800f094 <lwip_sendto+0x154>)
 800f076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f078:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800f07a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <lwip_sendto+0x146>
 800f082:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f084:	e001      	b.n	800f08a <lwip_sendto+0x14a>
 800f086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3738      	adds	r7, #56	@ 0x38
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	2000f760 	.word	0x2000f760
 800f098:	08022cb8 	.word	0x08022cb8
 800f09c:	08022f98 	.word	0x08022f98
 800f0a0:	08022d0c 	.word	0x08022d0c

0800f0a4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b086      	sub	sp, #24
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d009      	beq.n	800f0ca <lwip_socket+0x26>
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	2b03      	cmp	r3, #3
 800f0ba:	dc23      	bgt.n	800f104 <lwip_socket+0x60>
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d019      	beq.n	800f0f6 <lwip_socket+0x52>
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	d009      	beq.n	800f0dc <lwip_socket+0x38>
 800f0c8:	e01c      	b.n	800f104 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	4a22      	ldr	r2, [pc, #136]	@ (800f158 <lwip_socket+0xb4>)
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	2040      	movs	r0, #64	@ 0x40
 800f0d4:	f7fd f876 	bl	800c1c4 <netconn_new_with_proto_and_callback>
 800f0d8:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f0da:	e019      	b.n	800f110 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b88      	cmp	r3, #136	@ 0x88
 800f0e0:	d101      	bne.n	800f0e6 <lwip_socket+0x42>
 800f0e2:	2321      	movs	r3, #33	@ 0x21
 800f0e4:	e000      	b.n	800f0e8 <lwip_socket+0x44>
 800f0e6:	2320      	movs	r3, #32
 800f0e8:	4a1b      	ldr	r2, [pc, #108]	@ (800f158 <lwip_socket+0xb4>)
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fd f869 	bl	800c1c4 <netconn_new_with_proto_and_callback>
 800f0f2:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f0f4:	e00c      	b.n	800f110 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800f0f6:	4a18      	ldr	r2, [pc, #96]	@ (800f158 <lwip_socket+0xb4>)
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	2010      	movs	r0, #16
 800f0fc:	f7fd f862 	bl	800c1c4 <netconn_new_with_proto_and_callback>
 800f100:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f102:	e005      	b.n	800f110 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800f104:	4b15      	ldr	r3, [pc, #84]	@ (800f15c <lwip_socket+0xb8>)
 800f106:	2216      	movs	r2, #22
 800f108:	601a      	str	r2, [r3, #0]
      return -1;
 800f10a:	f04f 33ff 	mov.w	r3, #4294967295
 800f10e:	e01e      	b.n	800f14e <lwip_socket+0xaa>
  }

  if (!conn) {
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d105      	bne.n	800f122 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800f116:	4b11      	ldr	r3, [pc, #68]	@ (800f15c <lwip_socket+0xb8>)
 800f118:	2269      	movs	r2, #105	@ 0x69
 800f11a:	601a      	str	r2, [r3, #0]
    return -1;
 800f11c:	f04f 33ff 	mov.w	r3, #4294967295
 800f120:	e015      	b.n	800f14e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800f122:	2100      	movs	r1, #0
 800f124:	6978      	ldr	r0, [r7, #20]
 800f126:	f7ff fa95 	bl	800e654 <alloc_socket>
 800f12a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f132:	d108      	bne.n	800f146 <lwip_socket+0xa2>
    netconn_delete(conn);
 800f134:	6978      	ldr	r0, [r7, #20]
 800f136:	f7fd f8e3 	bl	800c300 <netconn_delete>
    set_errno(ENFILE);
 800f13a:	4b08      	ldr	r3, [pc, #32]	@ (800f15c <lwip_socket+0xb8>)
 800f13c:	2217      	movs	r2, #23
 800f13e:	601a      	str	r2, [r3, #0]
    return -1;
 800f140:	f04f 33ff 	mov.w	r3, #4294967295
 800f144:	e003      	b.n	800f14e <lwip_socket+0xaa>
  }
  conn->socket = i;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	693a      	ldr	r2, [r7, #16]
 800f14a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800f14c:	693b      	ldr	r3, [r7, #16]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3718      	adds	r7, #24
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	0800f209 	.word	0x0800f209
 800f15c:	2000f760 	.word	0x2000f760

0800f160 <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 800f16c:	2300      	movs	r3, #0
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	68b9      	ldr	r1, [r7, #8]
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f7ff fe86 	bl	800ee84 <lwip_send>
 800f178:	4603      	mov	r3, r0
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f182:	b480      	push	{r7}
 800f184:	b087      	sub	sp, #28
 800f186:	af00      	add	r7, sp, #0
 800f188:	60f8      	str	r0, [r7, #12]
 800f18a:	60b9      	str	r1, [r7, #8]
 800f18c:	607a      	str	r2, [r7, #4]
 800f18e:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f190:	2300      	movs	r3, #0
 800f192:	617b      	str	r3, [r7, #20]
 800f194:	e02c      	b.n	800f1f0 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	695a      	ldr	r2, [r3, #20]
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	00db      	lsls	r3, r3, #3
 800f19e:	4413      	add	r3, r2
 800f1a0:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	68ba      	ldr	r2, [r7, #8]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d11e      	bne.n	800f1ea <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d009      	beq.n	800f1c6 <lwip_poll_should_wake+0x44>
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	f003 0301 	and.w	r3, r3, #1
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <lwip_poll_should_wake+0x44>
        return 1;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e01a      	b.n	800f1fc <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d009      	beq.n	800f1e0 <lwip_poll_should_wake+0x5e>
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	f003 0302 	and.w	r3, r3, #2
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d001      	beq.n	800f1e0 <lwip_poll_should_wake+0x5e>
        return 1;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e00d      	b.n	800f1fc <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800f1e0:	6a3b      	ldr	r3, [r7, #32]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e008      	b.n	800f1fc <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	617b      	str	r3, [r7, #20]
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	697a      	ldr	r2, [r7, #20]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d3cd      	bcc.n	800f196 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	371c      	adds	r7, #28
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b08a      	sub	sp, #40	@ 0x28
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	70fb      	strb	r3, [r7, #3]
 800f214:	4613      	mov	r3, r2
 800f216:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f000 80a4 	beq.w	800f368 <event_callback+0x160>
    s = conn->socket;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800f226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f228:	2b00      	cmp	r3, #0
 800f22a:	da18      	bge.n	800f25e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800f22c:	f00e f9c8 	bl	801d5c0 <sys_arch_protect>
 800f230:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	699b      	ldr	r3, [r3, #24]
 800f236:	2b00      	cmp	r3, #0
 800f238:	da0b      	bge.n	800f252 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800f23a:	78fb      	ldrb	r3, [r7, #3]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d104      	bne.n	800f24a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	699b      	ldr	r3, [r3, #24]
 800f244:	1e5a      	subs	r2, r3, #1
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800f24a:	69f8      	ldr	r0, [r7, #28]
 800f24c:	f00e f9c6 	bl	801d5dc <sys_arch_unprotect>
        return;
 800f250:	e08d      	b.n	800f36e <event_callback+0x166>
      }
      s = conn->socket;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800f258:	69f8      	ldr	r0, [r7, #28]
 800f25a:	f00e f9bf 	bl	801d5dc <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800f25e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f260:	f7ff f9e0 	bl	800e624 <get_socket>
 800f264:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d07f      	beq.n	800f36c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800f26c:	2301      	movs	r3, #1
 800f26e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800f270:	f00e f9a6 	bl	801d5c0 <sys_arch_protect>
 800f274:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800f276:	78fb      	ldrb	r3, [r7, #3]
 800f278:	2b04      	cmp	r3, #4
 800f27a:	d83e      	bhi.n	800f2fa <event_callback+0xf2>
 800f27c:	a201      	add	r2, pc, #4	@ (adr r2, 800f284 <event_callback+0x7c>)
 800f27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f282:	bf00      	nop
 800f284:	0800f299 	.word	0x0800f299
 800f288:	0800f2bb 	.word	0x0800f2bb
 800f28c:	0800f2d3 	.word	0x0800f2d3
 800f290:	0800f2e7 	.word	0x0800f2e7
 800f294:	0800f2f3 	.word	0x0800f2f3
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	b21a      	sxth	r2, r3
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	dd2a      	ble.n	800f30a <event_callback+0x102>
        check_waiters = 0;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	623b      	str	r3, [r7, #32]
      }
      break;
 800f2b8:	e027      	b.n	800f30a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	b21a      	sxth	r2, r3
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	623b      	str	r3, [r7, #32]
      break;
 800f2d0:	e01c      	b.n	800f30c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	895b      	ldrh	r3, [r3, #10]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <event_callback+0xd6>
        check_waiters = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	815a      	strh	r2, [r3, #10]
      break;
 800f2e4:	e012      	b.n	800f30c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	623b      	str	r3, [r7, #32]
      break;
 800f2f0:	e00c      	b.n	800f30c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	819a      	strh	r2, [r3, #12]
      break;
 800f2f8:	e008      	b.n	800f30c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800f2fa:	4b1e      	ldr	r3, [pc, #120]	@ (800f374 <event_callback+0x16c>)
 800f2fc:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800f300:	491d      	ldr	r1, [pc, #116]	@ (800f378 <event_callback+0x170>)
 800f302:	481e      	ldr	r0, [pc, #120]	@ (800f37c <event_callback+0x174>)
 800f304:	f00f fa88 	bl	801e818 <iprintf>
      break;
 800f308:	e000      	b.n	800f30c <event_callback+0x104>
      break;
 800f30a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	7b9b      	ldrb	r3, [r3, #14]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d025      	beq.n	800f360 <event_callback+0x158>
 800f314:	6a3b      	ldr	r3, [r7, #32]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d022      	beq.n	800f360 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f320:	2b00      	cmp	r3, #0
 800f322:	bfcc      	ite	gt
 800f324:	2301      	movgt	r3, #1
 800f326:	2300      	movle	r3, #0
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	895b      	ldrh	r3, [r3, #10]
 800f330:	2b00      	cmp	r3, #0
 800f332:	bf14      	ite	ne
 800f334:	2301      	movne	r3, #1
 800f336:	2300      	moveq	r3, #0
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	899b      	ldrh	r3, [r3, #12]
 800f340:	2b00      	cmp	r3, #0
 800f342:	bf14      	ite	ne
 800f344:	2301      	movne	r3, #1
 800f346:	2300      	moveq	r3, #0
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800f34c:	69f8      	ldr	r0, [r7, #28]
 800f34e:	f00e f945 	bl	801d5dc <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	693a      	ldr	r2, [r7, #16]
 800f356:	6979      	ldr	r1, [r7, #20]
 800f358:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f35a:	f000 f811 	bl	800f380 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800f35e:	e006      	b.n	800f36e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800f360:	69f8      	ldr	r0, [r7, #28]
 800f362:	f00e f93b 	bl	801d5dc <sys_arch_unprotect>
 800f366:	e002      	b.n	800f36e <event_callback+0x166>
    return;
 800f368:	bf00      	nop
 800f36a:	e000      	b.n	800f36e <event_callback+0x166>
      return;
 800f36c:	bf00      	nop
  }
  done_socket(sock);
}
 800f36e:	3728      	adds	r7, #40	@ 0x28
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	08022cb8 	.word	0x08022cb8
 800f378:	08023034 	.word	0x08023034
 800f37c:	08022d0c 	.word	0x08022d0c

0800f380 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b088      	sub	sp, #32
 800f384:	af02      	add	r7, sp, #8
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	607a      	str	r2, [r7, #4]
 800f38c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f38e:	4b42      	ldr	r3, [pc, #264]	@ (800f498 <select_check_waiters+0x118>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	617b      	str	r3, [r7, #20]
 800f394:	e078      	b.n	800f488 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	69db      	ldr	r3, [r3, #28]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d171      	bne.n	800f482 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	695b      	ldr	r3, [r3, #20]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d009      	beq.n	800f3be <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	9300      	str	r3, [sp, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	68f9      	ldr	r1, [r7, #12]
 800f3b4:	6978      	ldr	r0, [r7, #20]
 800f3b6:	f7ff fee4 	bl	800f182 <lwip_poll_should_wake>
 800f3ba:	6138      	str	r0, [r7, #16]
 800f3bc:	e056      	b.n	800f46c <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d017      	beq.n	800f3f4 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d013      	beq.n	800f3f4 <select_check_waiters+0x74>
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	689a      	ldr	r2, [r3, #8]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	da00      	bge.n	800f3d8 <select_check_waiters+0x58>
 800f3d6:	331f      	adds	r3, #31
 800f3d8:	115b      	asrs	r3, r3, #5
 800f3da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f003 031f 	and.w	r3, r3, #31
 800f3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e8:	f003 0301 	and.w	r3, r3, #1
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d001      	beq.n	800f3f4 <select_check_waiters+0x74>
            do_signal = 1;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d01a      	beq.n	800f430 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d117      	bne.n	800f430 <select_check_waiters+0xb0>
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d013      	beq.n	800f430 <select_check_waiters+0xb0>
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	68da      	ldr	r2, [r3, #12]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	da00      	bge.n	800f414 <select_check_waiters+0x94>
 800f412:	331f      	adds	r3, #31
 800f414:	115b      	asrs	r3, r3, #5
 800f416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f003 031f 	and.w	r3, r3, #31
 800f420:	fa22 f303 	lsr.w	r3, r2, r3
 800f424:	f003 0301 	and.w	r3, r3, #1
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <select_check_waiters+0xb0>
            do_signal = 1;
 800f42c:	2301      	movs	r3, #1
 800f42e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d01a      	beq.n	800f46c <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d117      	bne.n	800f46c <select_check_waiters+0xec>
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	691b      	ldr	r3, [r3, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d013      	beq.n	800f46c <select_check_waiters+0xec>
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	691a      	ldr	r2, [r3, #16]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	da00      	bge.n	800f450 <select_check_waiters+0xd0>
 800f44e:	331f      	adds	r3, #31
 800f450:	115b      	asrs	r3, r3, #5
 800f452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f003 031f 	and.w	r3, r3, #31
 800f45c:	fa22 f303 	lsr.w	r3, r2, r3
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <select_check_waiters+0xec>
            do_signal = 1;
 800f468:	2301      	movs	r3, #1
 800f46a:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d007      	beq.n	800f482 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	2201      	movs	r2, #1
 800f476:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	3320      	adds	r3, #32
 800f47c:	4618      	mov	r0, r3
 800f47e:	f00e f809 	bl	801d494 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	617b      	str	r3, [r7, #20]
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d183      	bne.n	800f396 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800f48e:	bf00      	nop
 800f490:	bf00      	nop
 800f492:	3718      	adds	r7, #24
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	2000b728 	.word	0x2000b728

0800f49c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f4a6:	f008 fe4d 	bl	8018144 <sys_timeouts_sleeptime>
 800f4aa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b2:	d10b      	bne.n	800f4cc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f4b4:	4813      	ldr	r0, [pc, #76]	@ (800f504 <tcpip_timeouts_mbox_fetch+0x68>)
 800f4b6:	f00e f856 	bl	801d566 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	6839      	ldr	r1, [r7, #0]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f00d ff2c 	bl	801d31c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f4c4:	480f      	ldr	r0, [pc, #60]	@ (800f504 <tcpip_timeouts_mbox_fetch+0x68>)
 800f4c6:	f00e f83f 	bl	801d548 <sys_mutex_lock>
    return;
 800f4ca:	e018      	b.n	800f4fe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d102      	bne.n	800f4d8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f4d2:	f008 fdfd 	bl	80180d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f4d6:	e7e6      	b.n	800f4a6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f4d8:	480a      	ldr	r0, [pc, #40]	@ (800f504 <tcpip_timeouts_mbox_fetch+0x68>)
 800f4da:	f00e f844 	bl	801d566 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f00d ff1a 	bl	801d31c <sys_arch_mbox_fetch>
 800f4e8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f4ea:	4806      	ldr	r0, [pc, #24]	@ (800f504 <tcpip_timeouts_mbox_fetch+0x68>)
 800f4ec:	f00e f82c 	bl	801d548 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f6:	d102      	bne.n	800f4fe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f4f8:	f008 fdea 	bl	80180d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f4fc:	e7d3      	b.n	800f4a6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	2000b738 	.word	0x2000b738

0800f508 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f510:	4810      	ldr	r0, [pc, #64]	@ (800f554 <tcpip_thread+0x4c>)
 800f512:	f00e f819 	bl	801d548 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f516:	4b10      	ldr	r3, [pc, #64]	@ (800f558 <tcpip_thread+0x50>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d005      	beq.n	800f52a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f51e:	4b0e      	ldr	r3, [pc, #56]	@ (800f558 <tcpip_thread+0x50>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4a0e      	ldr	r2, [pc, #56]	@ (800f55c <tcpip_thread+0x54>)
 800f524:	6812      	ldr	r2, [r2, #0]
 800f526:	4610      	mov	r0, r2
 800f528:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f52a:	f107 030c 	add.w	r3, r7, #12
 800f52e:	4619      	mov	r1, r3
 800f530:	480b      	ldr	r0, [pc, #44]	@ (800f560 <tcpip_thread+0x58>)
 800f532:	f7ff ffb3 	bl	800f49c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d106      	bne.n	800f54a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f53c:	4b09      	ldr	r3, [pc, #36]	@ (800f564 <tcpip_thread+0x5c>)
 800f53e:	2291      	movs	r2, #145	@ 0x91
 800f540:	4909      	ldr	r1, [pc, #36]	@ (800f568 <tcpip_thread+0x60>)
 800f542:	480a      	ldr	r0, [pc, #40]	@ (800f56c <tcpip_thread+0x64>)
 800f544:	f00f f968 	bl	801e818 <iprintf>
      continue;
 800f548:	e003      	b.n	800f552 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f000 f80f 	bl	800f570 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f552:	e7ea      	b.n	800f52a <tcpip_thread+0x22>
 800f554:	2000b738 	.word	0x2000b738
 800f558:	2000b72c 	.word	0x2000b72c
 800f55c:	2000b730 	.word	0x2000b730
 800f560:	2000b734 	.word	0x2000b734
 800f564:	08023088 	.word	0x08023088
 800f568:	080230b8 	.word	0x080230b8
 800f56c:	080230d8 	.word	0x080230d8

0800f570 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b02      	cmp	r3, #2
 800f57e:	d026      	beq.n	800f5ce <tcpip_thread_handle_msg+0x5e>
 800f580:	2b02      	cmp	r3, #2
 800f582:	dc2b      	bgt.n	800f5dc <tcpip_thread_handle_msg+0x6c>
 800f584:	2b00      	cmp	r3, #0
 800f586:	d002      	beq.n	800f58e <tcpip_thread_handle_msg+0x1e>
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d015      	beq.n	800f5b8 <tcpip_thread_handle_msg+0x48>
 800f58c:	e026      	b.n	800f5dc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	6850      	ldr	r0, [r2, #4]
 800f596:	687a      	ldr	r2, [r7, #4]
 800f598:	6892      	ldr	r2, [r2, #8]
 800f59a:	4611      	mov	r1, r2
 800f59c:	4798      	blx	r3
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d004      	beq.n	800f5ae <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f002 f84d 	bl	8011648 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f5ae:	6879      	ldr	r1, [r7, #4]
 800f5b0:	2009      	movs	r0, #9
 800f5b2:	f001 f967 	bl	8010884 <memp_free>
      break;
 800f5b6:	e018      	b.n	800f5ea <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	6892      	ldr	r2, [r2, #8]
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f5c4:	6879      	ldr	r1, [r7, #4]
 800f5c6:	2008      	movs	r0, #8
 800f5c8:	f001 f95c 	bl	8010884 <memp_free>
      break;
 800f5cc:	e00d      	b.n	800f5ea <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	6892      	ldr	r2, [r2, #8]
 800f5d6:	4610      	mov	r0, r2
 800f5d8:	4798      	blx	r3
      break;
 800f5da:	e006      	b.n	800f5ea <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f5dc:	4b05      	ldr	r3, [pc, #20]	@ (800f5f4 <tcpip_thread_handle_msg+0x84>)
 800f5de:	22cf      	movs	r2, #207	@ 0xcf
 800f5e0:	4905      	ldr	r1, [pc, #20]	@ (800f5f8 <tcpip_thread_handle_msg+0x88>)
 800f5e2:	4806      	ldr	r0, [pc, #24]	@ (800f5fc <tcpip_thread_handle_msg+0x8c>)
 800f5e4:	f00f f918 	bl	801e818 <iprintf>
      break;
 800f5e8:	bf00      	nop
  }
}
 800f5ea:	bf00      	nop
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	08023088 	.word	0x08023088
 800f5f8:	080230b8 	.word	0x080230b8
 800f5fc:	080230d8 	.word	0x080230d8

0800f600 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f60c:	481a      	ldr	r0, [pc, #104]	@ (800f678 <tcpip_inpkt+0x78>)
 800f60e:	f00d fecd 	bl	801d3ac <sys_mbox_valid>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d105      	bne.n	800f624 <tcpip_inpkt+0x24>
 800f618:	4b18      	ldr	r3, [pc, #96]	@ (800f67c <tcpip_inpkt+0x7c>)
 800f61a:	22fc      	movs	r2, #252	@ 0xfc
 800f61c:	4918      	ldr	r1, [pc, #96]	@ (800f680 <tcpip_inpkt+0x80>)
 800f61e:	4819      	ldr	r0, [pc, #100]	@ (800f684 <tcpip_inpkt+0x84>)
 800f620:	f00f f8fa 	bl	801e818 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f624:	2009      	movs	r0, #9
 800f626:	f001 f8b7 	bl	8010798 <memp_malloc>
 800f62a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d102      	bne.n	800f638 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f632:	f04f 33ff 	mov.w	r3, #4294967295
 800f636:	e01a      	b.n	800f66e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	2200      	movs	r2, #0
 800f63c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	68ba      	ldr	r2, [r7, #8]
 800f648:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f650:	6979      	ldr	r1, [r7, #20]
 800f652:	4809      	ldr	r0, [pc, #36]	@ (800f678 <tcpip_inpkt+0x78>)
 800f654:	f00d fe48 	bl	801d2e8 <sys_mbox_trypost>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d006      	beq.n	800f66c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f65e:	6979      	ldr	r1, [r7, #20]
 800f660:	2009      	movs	r0, #9
 800f662:	f001 f90f 	bl	8010884 <memp_free>
    return ERR_MEM;
 800f666:	f04f 33ff 	mov.w	r3, #4294967295
 800f66a:	e000      	b.n	800f66e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f66c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	2000b734 	.word	0x2000b734
 800f67c:	08023088 	.word	0x08023088
 800f680:	08023100 	.word	0x08023100
 800f684:	080230d8 	.word	0x080230d8

0800f688 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f698:	f003 0318 	and.w	r3, r3, #24
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d006      	beq.n	800f6ae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f6a0:	4a08      	ldr	r2, [pc, #32]	@ (800f6c4 <tcpip_input+0x3c>)
 800f6a2:	6839      	ldr	r1, [r7, #0]
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f7ff ffab 	bl	800f600 <tcpip_inpkt>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	e005      	b.n	800f6ba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f6ae:	4a06      	ldr	r2, [pc, #24]	@ (800f6c8 <tcpip_input+0x40>)
 800f6b0:	6839      	ldr	r1, [r7, #0]
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7ff ffa4 	bl	800f600 <tcpip_inpkt>
 800f6b8:	4603      	mov	r3, r0
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	0801d0e5 	.word	0x0801d0e5
 800f6c8:	0801bd5d 	.word	0x0801bd5d

0800f6cc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f6d6:	4819      	ldr	r0, [pc, #100]	@ (800f73c <tcpip_try_callback+0x70>)
 800f6d8:	f00d fe68 	bl	801d3ac <sys_mbox_valid>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d106      	bne.n	800f6f0 <tcpip_try_callback+0x24>
 800f6e2:	4b17      	ldr	r3, [pc, #92]	@ (800f740 <tcpip_try_callback+0x74>)
 800f6e4:	f240 125d 	movw	r2, #349	@ 0x15d
 800f6e8:	4916      	ldr	r1, [pc, #88]	@ (800f744 <tcpip_try_callback+0x78>)
 800f6ea:	4817      	ldr	r0, [pc, #92]	@ (800f748 <tcpip_try_callback+0x7c>)
 800f6ec:	f00f f894 	bl	801e818 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f6f0:	2008      	movs	r0, #8
 800f6f2:	f001 f851 	bl	8010798 <memp_malloc>
 800f6f6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d102      	bne.n	800f704 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f702:	e017      	b.n	800f734 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2201      	movs	r2, #1
 800f708:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	683a      	ldr	r2, [r7, #0]
 800f714:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f716:	68f9      	ldr	r1, [r7, #12]
 800f718:	4808      	ldr	r0, [pc, #32]	@ (800f73c <tcpip_try_callback+0x70>)
 800f71a:	f00d fde5 	bl	801d2e8 <sys_mbox_trypost>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d006      	beq.n	800f732 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f724:	68f9      	ldr	r1, [r7, #12]
 800f726:	2008      	movs	r0, #8
 800f728:	f001 f8ac 	bl	8010884 <memp_free>
    return ERR_MEM;
 800f72c:	f04f 33ff 	mov.w	r3, #4294967295
 800f730:	e000      	b.n	800f734 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f732:	2300      	movs	r3, #0
}
 800f734:	4618      	mov	r0, r3
 800f736:	3710      	adds	r7, #16
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	2000b734 	.word	0x2000b734
 800f740:	08023088 	.word	0x08023088
 800f744:	08023100 	.word	0x08023100
 800f748:	080230d8 	.word	0x080230d8

0800f74c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f758:	4806      	ldr	r0, [pc, #24]	@ (800f774 <tcpip_send_msg_wait_sem+0x28>)
 800f75a:	f00d fef5 	bl	801d548 <sys_mutex_lock>
  fn(apimsg);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	68b8      	ldr	r0, [r7, #8]
 800f762:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f764:	4803      	ldr	r0, [pc, #12]	@ (800f774 <tcpip_send_msg_wait_sem+0x28>)
 800f766:	f00d fefe 	bl	801d566 <sys_mutex_unlock>
  return ERR_OK;
 800f76a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	2000b738 	.word	0x2000b738

0800f778 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af02      	add	r7, sp, #8
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f782:	f000 fb5e 	bl	800fe42 <lwip_init>

  tcpip_init_done = initfunc;
 800f786:	4a17      	ldr	r2, [pc, #92]	@ (800f7e4 <tcpip_init+0x6c>)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f78c:	4a16      	ldr	r2, [pc, #88]	@ (800f7e8 <tcpip_init+0x70>)
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f792:	2106      	movs	r1, #6
 800f794:	4815      	ldr	r0, [pc, #84]	@ (800f7ec <tcpip_init+0x74>)
 800f796:	f00d fd7b 	bl	801d290 <sys_mbox_new>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d006      	beq.n	800f7ae <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f7a0:	4b13      	ldr	r3, [pc, #76]	@ (800f7f0 <tcpip_init+0x78>)
 800f7a2:	f240 2261 	movw	r2, #609	@ 0x261
 800f7a6:	4913      	ldr	r1, [pc, #76]	@ (800f7f4 <tcpip_init+0x7c>)
 800f7a8:	4813      	ldr	r0, [pc, #76]	@ (800f7f8 <tcpip_init+0x80>)
 800f7aa:	f00f f835 	bl	801e818 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f7ae:	4813      	ldr	r0, [pc, #76]	@ (800f7fc <tcpip_init+0x84>)
 800f7b0:	f00d feb4 	bl	801d51c <sys_mutex_new>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d006      	beq.n	800f7c8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f7f0 <tcpip_init+0x78>)
 800f7bc:	f240 2265 	movw	r2, #613	@ 0x265
 800f7c0:	490f      	ldr	r1, [pc, #60]	@ (800f800 <tcpip_init+0x88>)
 800f7c2:	480d      	ldr	r0, [pc, #52]	@ (800f7f8 <tcpip_init+0x80>)
 800f7c4:	f00f f828 	bl	801e818 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	9300      	str	r3, [sp, #0]
 800f7cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	490c      	ldr	r1, [pc, #48]	@ (800f804 <tcpip_init+0x8c>)
 800f7d4:	480c      	ldr	r0, [pc, #48]	@ (800f808 <tcpip_init+0x90>)
 800f7d6:	f00d fed3 	bl	801d580 <sys_thread_new>
}
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	2000b72c 	.word	0x2000b72c
 800f7e8:	2000b730 	.word	0x2000b730
 800f7ec:	2000b734 	.word	0x2000b734
 800f7f0:	08023088 	.word	0x08023088
 800f7f4:	08023110 	.word	0x08023110
 800f7f8:	080230d8 	.word	0x080230d8
 800f7fc:	2000b738 	.word	0x2000b738
 800f800:	08023134 	.word	0x08023134
 800f804:	0800f509 	.word	0x0800f509
 800f808:	08023158 	.word	0x08023158

0800f80c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	4603      	mov	r3, r0
 800f814:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f816:	88fb      	ldrh	r3, [r7, #6]
 800f818:	021b      	lsls	r3, r3, #8
 800f81a:	b21a      	sxth	r2, r3
 800f81c:	88fb      	ldrh	r3, [r7, #6]
 800f81e:	0a1b      	lsrs	r3, r3, #8
 800f820:	b29b      	uxth	r3, r3
 800f822:	b21b      	sxth	r3, r3
 800f824:	4313      	orrs	r3, r2
 800f826:	b21b      	sxth	r3, r3
 800f828:	b29b      	uxth	r3, r3
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	370c      	adds	r7, #12
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr

0800f836 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f836:	b480      	push	{r7}
 800f838:	b083      	sub	sp, #12
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	061a      	lsls	r2, r3, #24
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	021b      	lsls	r3, r3, #8
 800f846:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f84a:	431a      	orrs	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	0a1b      	lsrs	r3, r3, #8
 800f850:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f854:	431a      	orrs	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	0e1b      	lsrs	r3, r3, #24
 800f85a:	4313      	orrs	r3, r2
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800f868:	b480      	push	{r7}
 800f86a:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800f86c:	bf00      	nop
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr
	...

0800f878 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800f878:	b480      	push	{r7}
 800f87a:	b083      	sub	sp, #12
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	4603      	mov	r3, r0
 800f880:	6039      	str	r1, [r7, #0]
 800f882:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800f884:	79fb      	ldrb	r3, [r7, #7]
 800f886:	2b01      	cmp	r3, #1
 800f888:	d80f      	bhi.n	800f8aa <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d006      	beq.n	800f89e <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800f890:	79fb      	ldrb	r3, [r7, #7]
 800f892:	4909      	ldr	r1, [pc, #36]	@ (800f8b8 <dns_setserver+0x40>)
 800f894:	683a      	ldr	r2, [r7, #0]
 800f896:	6812      	ldr	r2, [r2, #0]
 800f898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800f89c:	e005      	b.n	800f8aa <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800f89e:	79fb      	ldrb	r3, [r7, #7]
 800f8a0:	4905      	ldr	r1, [pc, #20]	@ (800f8b8 <dns_setserver+0x40>)
 800f8a2:	4a06      	ldr	r2, [pc, #24]	@ (800f8bc <dns_setserver+0x44>)
 800f8a4:	6812      	ldr	r2, [r2, #0]
 800f8a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f8aa:	bf00      	nop
 800f8ac:	370c      	adds	r7, #12
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	2000bbbc 	.word	0x2000bbbc
 800f8bc:	08026270 	.word	0x08026270

0800f8c0 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800f8c4:	f000 faa8 	bl	800fe18 <dns_check_entries>
}
 800f8c8:	bf00      	nop
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b090      	sub	sp, #64	@ 0x40
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800f8d6:	79fa      	ldrb	r2, [r7, #7]
 800f8d8:	4613      	mov	r3, r2
 800f8da:	011b      	lsls	r3, r3, #4
 800f8dc:	4413      	add	r3, r2
 800f8de:	011b      	lsls	r3, r3, #4
 800f8e0:	4a6c      	ldr	r2, [pc, #432]	@ (800fa94 <dns_send+0x1c8>)
 800f8e2:	4413      	add	r3, r2
 800f8e4:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e8:	7adb      	ldrb	r3, [r3, #11]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d906      	bls.n	800f8fc <dns_send+0x30>
 800f8ee:	4b6a      	ldr	r3, [pc, #424]	@ (800fa98 <dns_send+0x1cc>)
 800f8f0:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800f8f4:	4969      	ldr	r1, [pc, #420]	@ (800fa9c <dns_send+0x1d0>)
 800f8f6:	486a      	ldr	r0, [pc, #424]	@ (800faa0 <dns_send+0x1d4>)
 800f8f8:	f00e ff8e 	bl	801e818 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800f8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8fe:	7adb      	ldrb	r3, [r3, #11]
 800f900:	461a      	mov	r2, r3
 800f902:	4b68      	ldr	r3, [pc, #416]	@ (800faa4 <dns_send+0x1d8>)
 800f904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d109      	bne.n	800f920 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800f90c:	79fb      	ldrb	r3, [r7, #7]
 800f90e:	2100      	movs	r1, #0
 800f910:	4618      	mov	r0, r3
 800f912:	f000 f8cb 	bl	800faac <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800f916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f918:	2200      	movs	r2, #0
 800f91a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800f91c:	2300      	movs	r3, #0
 800f91e:	e0b4      	b.n	800fa8a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800f920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f922:	3310      	adds	r3, #16
 800f924:	4618      	mov	r0, r3
 800f926:	f7f0 fca3 	bl	8000270 <strlen>
 800f92a:	4603      	mov	r3, r0
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	3312      	adds	r3, #18
 800f930:	b29b      	uxth	r3, r3
 800f932:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f936:	4619      	mov	r1, r3
 800f938:	2036      	movs	r0, #54	@ 0x36
 800f93a:	f001 fb6f 	bl	801101c <pbuf_alloc>
 800f93e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800f940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 8095 	beq.w	800fa72 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800f948:	f107 0310 	add.w	r3, r7, #16
 800f94c:	220c      	movs	r2, #12
 800f94e:	2100      	movs	r1, #0
 800f950:	4618      	mov	r0, r3
 800f952:	f00f f800 	bl	801e956 <memset>
    hdr.id = lwip_htons(entry->txid);
 800f956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f958:	891b      	ldrh	r3, [r3, #8]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7ff ff56 	bl	800f80c <lwip_htons>
 800f960:	4603      	mov	r3, r0
 800f962:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800f964:	2301      	movs	r3, #1
 800f966:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800f968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f96c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800f96e:	f107 0310 	add.w	r3, r7, #16
 800f972:	220c      	movs	r2, #12
 800f974:	4619      	mov	r1, r3
 800f976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f978:	f002 f91a 	bl	8011bb0 <pbuf_take>
    hostname = entry->name;
 800f97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f97e:	3310      	adds	r3, #16
 800f980:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800f982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f984:	3b01      	subs	r3, #1
 800f986:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800f988:	230c      	movs	r3, #12
 800f98a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800f98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f98e:	3301      	adds	r3, #1
 800f990:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 800f992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f994:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f996:	2300      	movs	r3, #0
 800f998:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f99c:	e007      	b.n	800f9ae <dns_send+0xe2>
        ++n;
 800f99e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9b4:	d003      	beq.n	800f9be <dns_send+0xf2>
 800f9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1ef      	bne.n	800f99e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800f9be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800f9c6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800f9c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9cc:	4413      	add	r3, r2
 800f9ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	dc53      	bgt.n	800fa7e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800f9d6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800f9da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f9e0:	f002 fa14 	bl	8011e0c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800f9e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f9ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f9ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f9f0:	f002 f970 	bl	8011cd4 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800f9f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9f8:	b29a      	uxth	r2, r3
 800f9fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f9fc:	4413      	add	r3, r2
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	3301      	adds	r3, #1
 800fa02:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800fa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1bf      	bne.n	800f98c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800fa0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa0e:	2200      	movs	r2, #0
 800fa10:	4619      	mov	r1, r3
 800fa12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa14:	f002 f9fa 	bl	8011e0c <pbuf_put_at>
    query_idx++;
 800fa18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800fa1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa22:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800fa24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa28:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800fa2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fa2c:	f107 010c 	add.w	r1, r7, #12
 800fa30:	2204      	movs	r2, #4
 800fa32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa34:	f002 f94e 	bl	8011cd4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800fa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3a:	7bdb      	ldrb	r3, [r3, #15]
 800fa3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800fa40:	2335      	movs	r3, #53	@ 0x35
 800fa42:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800fa44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa46:	7adb      	ldrb	r3, [r3, #11]
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	4a16      	ldr	r2, [pc, #88]	@ (800faa4 <dns_send+0x1d8>)
 800fa4c:	4413      	add	r3, r2
 800fa4e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800fa50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fa54:	4a14      	ldr	r2, [pc, #80]	@ (800faa8 <dns_send+0x1dc>)
 800fa56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fa5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fa5c:	69fa      	ldr	r2, [r7, #28]
 800fa5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa60:	f008 fd9e 	bl	80185a0 <udp_sendto>
 800fa64:	4603      	mov	r3, r0
 800fa66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800fa6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa6c:	f001 fdec 	bl	8011648 <pbuf_free>
 800fa70:	e002      	b.n	800fa78 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800fa72:	23ff      	movs	r3, #255	@ 0xff
 800fa74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 800fa78:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800fa7c:	e005      	b.n	800fa8a <dns_send+0x1be>
        goto overflow_return;
 800fa7e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800fa80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa82:	f001 fde1 	bl	8011648 <pbuf_free>
  return ERR_VAL;
 800fa86:	f06f 0305 	mvn.w	r3, #5
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3740      	adds	r7, #64	@ 0x40
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	2000b74c 	.word	0x2000b74c
 800fa98:	08023168 	.word	0x08023168
 800fa9c:	08023198 	.word	0x08023198
 800faa0:	080231b0 	.word	0x080231b0
 800faa4:	2000bbbc 	.word	0x2000bbbc
 800faa8:	2000b73c 	.word	0x2000b73c

0800faac <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800faac:	b590      	push	{r4, r7, lr}
 800faae:	b085      	sub	sp, #20
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	4603      	mov	r3, r0
 800fab4:	6039      	str	r1, [r7, #0]
 800fab6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800fab8:	2300      	movs	r3, #0
 800faba:	73fb      	strb	r3, [r7, #15]
 800fabc:	e03d      	b.n	800fb3a <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800fabe:	7bfa      	ldrb	r2, [r7, #15]
 800fac0:	4957      	ldr	r1, [pc, #348]	@ (800fc20 <dns_call_found+0x174>)
 800fac2:	4613      	mov	r3, r2
 800fac4:	005b      	lsls	r3, r3, #1
 800fac6:	4413      	add	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	440b      	add	r3, r1
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d030      	beq.n	800fb34 <dns_call_found+0x88>
 800fad2:	7bfa      	ldrb	r2, [r7, #15]
 800fad4:	4952      	ldr	r1, [pc, #328]	@ (800fc20 <dns_call_found+0x174>)
 800fad6:	4613      	mov	r3, r2
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	440b      	add	r3, r1
 800fae0:	3308      	adds	r3, #8
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	79fa      	ldrb	r2, [r7, #7]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d124      	bne.n	800fb34 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800faea:	7bfa      	ldrb	r2, [r7, #15]
 800faec:	494c      	ldr	r1, [pc, #304]	@ (800fc20 <dns_call_found+0x174>)
 800faee:	4613      	mov	r3, r2
 800faf0:	005b      	lsls	r3, r3, #1
 800faf2:	4413      	add	r3, r2
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	440b      	add	r3, r1
 800faf8:	681c      	ldr	r4, [r3, #0]
 800fafa:	79fa      	ldrb	r2, [r7, #7]
 800fafc:	4613      	mov	r3, r2
 800fafe:	011b      	lsls	r3, r3, #4
 800fb00:	4413      	add	r3, r2
 800fb02:	011b      	lsls	r3, r3, #4
 800fb04:	3310      	adds	r3, #16
 800fb06:	4a47      	ldr	r2, [pc, #284]	@ (800fc24 <dns_call_found+0x178>)
 800fb08:	1898      	adds	r0, r3, r2
 800fb0a:	7bfa      	ldrb	r2, [r7, #15]
 800fb0c:	4944      	ldr	r1, [pc, #272]	@ (800fc20 <dns_call_found+0x174>)
 800fb0e:	4613      	mov	r3, r2
 800fb10:	005b      	lsls	r3, r3, #1
 800fb12:	4413      	add	r3, r2
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	440b      	add	r3, r1
 800fb18:	3304      	adds	r3, #4
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	6839      	ldr	r1, [r7, #0]
 800fb20:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800fb22:	7bfa      	ldrb	r2, [r7, #15]
 800fb24:	493e      	ldr	r1, [pc, #248]	@ (800fc20 <dns_call_found+0x174>)
 800fb26:	4613      	mov	r3, r2
 800fb28:	005b      	lsls	r3, r3, #1
 800fb2a:	4413      	add	r3, r2
 800fb2c:	009b      	lsls	r3, r3, #2
 800fb2e:	440b      	add	r3, r1
 800fb30:	2200      	movs	r2, #0
 800fb32:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800fb34:	7bfb      	ldrb	r3, [r7, #15]
 800fb36:	3301      	adds	r3, #1
 800fb38:	73fb      	strb	r3, [r7, #15]
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
 800fb3c:	2b03      	cmp	r3, #3
 800fb3e:	d9be      	bls.n	800fabe <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800fb40:	2300      	movs	r3, #0
 800fb42:	73fb      	strb	r3, [r7, #15]
 800fb44:	e031      	b.n	800fbaa <dns_call_found+0xfe>
    if (i == idx) {
 800fb46:	7bfa      	ldrb	r2, [r7, #15]
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d029      	beq.n	800fba2 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800fb4e:	7bfa      	ldrb	r2, [r7, #15]
 800fb50:	4934      	ldr	r1, [pc, #208]	@ (800fc24 <dns_call_found+0x178>)
 800fb52:	4613      	mov	r3, r2
 800fb54:	011b      	lsls	r3, r3, #4
 800fb56:	4413      	add	r3, r2
 800fb58:	011b      	lsls	r3, r3, #4
 800fb5a:	440b      	add	r3, r1
 800fb5c:	330a      	adds	r3, #10
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	2b02      	cmp	r3, #2
 800fb62:	d11f      	bne.n	800fba4 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800fb64:	7bfa      	ldrb	r2, [r7, #15]
 800fb66:	492f      	ldr	r1, [pc, #188]	@ (800fc24 <dns_call_found+0x178>)
 800fb68:	4613      	mov	r3, r2
 800fb6a:	011b      	lsls	r3, r3, #4
 800fb6c:	4413      	add	r3, r2
 800fb6e:	011b      	lsls	r3, r3, #4
 800fb70:	440b      	add	r3, r1
 800fb72:	330f      	adds	r3, #15
 800fb74:	7819      	ldrb	r1, [r3, #0]
 800fb76:	79fa      	ldrb	r2, [r7, #7]
 800fb78:	482a      	ldr	r0, [pc, #168]	@ (800fc24 <dns_call_found+0x178>)
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	011b      	lsls	r3, r3, #4
 800fb7e:	4413      	add	r3, r2
 800fb80:	011b      	lsls	r3, r3, #4
 800fb82:	4403      	add	r3, r0
 800fb84:	330f      	adds	r3, #15
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	4299      	cmp	r1, r3
 800fb8a:	d10b      	bne.n	800fba4 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800fb8c:	79fa      	ldrb	r2, [r7, #7]
 800fb8e:	4925      	ldr	r1, [pc, #148]	@ (800fc24 <dns_call_found+0x178>)
 800fb90:	4613      	mov	r3, r2
 800fb92:	011b      	lsls	r3, r3, #4
 800fb94:	4413      	add	r3, r2
 800fb96:	011b      	lsls	r3, r3, #4
 800fb98:	440b      	add	r3, r1
 800fb9a:	330f      	adds	r3, #15
 800fb9c:	2204      	movs	r2, #4
 800fb9e:	701a      	strb	r2, [r3, #0]
        break;
 800fba0:	e006      	b.n	800fbb0 <dns_call_found+0x104>
      continue; /* only check other requests */
 800fba2:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800fba4:	7bfb      	ldrb	r3, [r7, #15]
 800fba6:	3301      	adds	r3, #1
 800fba8:	73fb      	strb	r3, [r7, #15]
 800fbaa:	7bfb      	ldrb	r3, [r7, #15]
 800fbac:	2b03      	cmp	r3, #3
 800fbae:	d9ca      	bls.n	800fb46 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800fbb0:	79fa      	ldrb	r2, [r7, #7]
 800fbb2:	491c      	ldr	r1, [pc, #112]	@ (800fc24 <dns_call_found+0x178>)
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	011b      	lsls	r3, r3, #4
 800fbb8:	4413      	add	r3, r2
 800fbba:	011b      	lsls	r3, r3, #4
 800fbbc:	440b      	add	r3, r1
 800fbbe:	330f      	adds	r3, #15
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	2b03      	cmp	r3, #3
 800fbc4:	d827      	bhi.n	800fc16 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800fbc6:	79fa      	ldrb	r2, [r7, #7]
 800fbc8:	4916      	ldr	r1, [pc, #88]	@ (800fc24 <dns_call_found+0x178>)
 800fbca:	4613      	mov	r3, r2
 800fbcc:	011b      	lsls	r3, r3, #4
 800fbce:	4413      	add	r3, r2
 800fbd0:	011b      	lsls	r3, r3, #4
 800fbd2:	440b      	add	r3, r1
 800fbd4:	330f      	adds	r3, #15
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	4b13      	ldr	r3, [pc, #76]	@ (800fc28 <dns_call_found+0x17c>)
 800fbdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f008 ffd1 	bl	8018b88 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800fbe6:	79fa      	ldrb	r2, [r7, #7]
 800fbe8:	490e      	ldr	r1, [pc, #56]	@ (800fc24 <dns_call_found+0x178>)
 800fbea:	4613      	mov	r3, r2
 800fbec:	011b      	lsls	r3, r3, #4
 800fbee:	4413      	add	r3, r2
 800fbf0:	011b      	lsls	r3, r3, #4
 800fbf2:	440b      	add	r3, r1
 800fbf4:	330f      	adds	r3, #15
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	4b0b      	ldr	r3, [pc, #44]	@ (800fc28 <dns_call_found+0x17c>)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800fc02:	79fa      	ldrb	r2, [r7, #7]
 800fc04:	4907      	ldr	r1, [pc, #28]	@ (800fc24 <dns_call_found+0x178>)
 800fc06:	4613      	mov	r3, r2
 800fc08:	011b      	lsls	r3, r3, #4
 800fc0a:	4413      	add	r3, r2
 800fc0c:	011b      	lsls	r3, r3, #4
 800fc0e:	440b      	add	r3, r1
 800fc10:	330f      	adds	r3, #15
 800fc12:	2204      	movs	r2, #4
 800fc14:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800fc16:	bf00      	nop
 800fc18:	3714      	adds	r7, #20
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd90      	pop	{r4, r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	2000bb8c 	.word	0x2000bb8c
 800fc24:	2000b74c 	.word	0x2000b74c
 800fc28:	2000b73c 	.word	0x2000b73c

0800fc2c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800fc32:	f00d fcfd 	bl	801d630 <rand>
 800fc36:	4603      	mov	r3, r0
 800fc38:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	71fb      	strb	r3, [r7, #7]
 800fc3e:	e01a      	b.n	800fc76 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800fc40:	79fa      	ldrb	r2, [r7, #7]
 800fc42:	4911      	ldr	r1, [pc, #68]	@ (800fc88 <dns_create_txid+0x5c>)
 800fc44:	4613      	mov	r3, r2
 800fc46:	011b      	lsls	r3, r3, #4
 800fc48:	4413      	add	r3, r2
 800fc4a:	011b      	lsls	r3, r3, #4
 800fc4c:	440b      	add	r3, r1
 800fc4e:	330a      	adds	r3, #10
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d10c      	bne.n	800fc70 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800fc56:	79fa      	ldrb	r2, [r7, #7]
 800fc58:	490b      	ldr	r1, [pc, #44]	@ (800fc88 <dns_create_txid+0x5c>)
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	011b      	lsls	r3, r3, #4
 800fc5e:	4413      	add	r3, r2
 800fc60:	011b      	lsls	r3, r3, #4
 800fc62:	440b      	add	r3, r1
 800fc64:	3308      	adds	r3, #8
 800fc66:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800fc68:	88ba      	ldrh	r2, [r7, #4]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d100      	bne.n	800fc70 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800fc6e:	e7e0      	b.n	800fc32 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fc70:	79fb      	ldrb	r3, [r7, #7]
 800fc72:	3301      	adds	r3, #1
 800fc74:	71fb      	strb	r3, [r7, #7]
 800fc76:	79fb      	ldrb	r3, [r7, #7]
 800fc78:	2b03      	cmp	r3, #3
 800fc7a:	d9e1      	bls.n	800fc40 <dns_create_txid+0x14>
    }
  }

  return txid;
 800fc7c:	88bb      	ldrh	r3, [r7, #4]
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3708      	adds	r7, #8
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	2000b74c 	.word	0x2000b74c

0800fc8c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800fc94:	2300      	movs	r3, #0
 800fc96:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d00d      	beq.n	800fcba <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	7adb      	ldrb	r3, [r3, #11]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d109      	bne.n	800fcba <dns_backupserver_available+0x2e>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	7adb      	ldrb	r3, [r3, #11]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	4a06      	ldr	r2, [pc, #24]	@ (800fcc8 <dns_backupserver_available+0x3c>)
 800fcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d001      	beq.n	800fcba <dns_backupserver_available+0x2e>
      ret = 1;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3714      	adds	r7, #20
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr
 800fcc8:	2000bbbc 	.word	0x2000bbbc

0800fccc <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800fcd6:	79fa      	ldrb	r2, [r7, #7]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	011b      	lsls	r3, r3, #4
 800fcdc:	4413      	add	r3, r2
 800fcde:	011b      	lsls	r3, r3, #4
 800fce0:	4a48      	ldr	r2, [pc, #288]	@ (800fe04 <dns_check_entry+0x138>)
 800fce2:	4413      	add	r3, r2
 800fce4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800fce6:	79fb      	ldrb	r3, [r7, #7]
 800fce8:	2b03      	cmp	r3, #3
 800fcea:	d906      	bls.n	800fcfa <dns_check_entry+0x2e>
 800fcec:	4b46      	ldr	r3, [pc, #280]	@ (800fe08 <dns_check_entry+0x13c>)
 800fcee:	f240 421c 	movw	r2, #1052	@ 0x41c
 800fcf2:	4946      	ldr	r1, [pc, #280]	@ (800fe0c <dns_check_entry+0x140>)
 800fcf4:	4846      	ldr	r0, [pc, #280]	@ (800fe10 <dns_check_entry+0x144>)
 800fcf6:	f00e fd8f 	bl	801e818 <iprintf>

  switch (entry->state) {
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	7a9b      	ldrb	r3, [r3, #10]
 800fcfe:	2b03      	cmp	r3, #3
 800fd00:	d86f      	bhi.n	800fde2 <dns_check_entry+0x116>
 800fd02:	a201      	add	r2, pc, #4	@ (adr r2, 800fd08 <dns_check_entry+0x3c>)
 800fd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd08:	0800fdf3 	.word	0x0800fdf3
 800fd0c:	0800fd19 	.word	0x0800fd19
 800fd10:	0800fd4b 	.word	0x0800fd4b
 800fd14:	0800fdc1 	.word	0x0800fdc1
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800fd18:	f7ff ff88 	bl	800fc2c <dns_create_txid>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	461a      	mov	r2, r3
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2202      	movs	r2, #2
 800fd28:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2201      	movs	r2, #1
 800fd34:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800fd3c:	79fb      	ldrb	r3, [r7, #7]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7ff fdc4 	bl	800f8cc <dns_send>
 800fd44:	4603      	mov	r3, r0
 800fd46:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800fd48:	e058      	b.n	800fdfc <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	7b1b      	ldrb	r3, [r3, #12]
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	b2da      	uxtb	r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	731a      	strb	r2, [r3, #12]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	7b1b      	ldrb	r3, [r3, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d14b      	bne.n	800fdf6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	7b5b      	ldrb	r3, [r3, #13]
 800fd62:	3301      	adds	r3, #1
 800fd64:	b2da      	uxtb	r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	735a      	strb	r2, [r3, #13]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	7b5b      	ldrb	r3, [r3, #13]
 800fd6e:	2b04      	cmp	r3, #4
 800fd70:	d11b      	bne.n	800fdaa <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f7ff ff8a 	bl	800fc8c <dns_backupserver_available>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00c      	beq.n	800fd98 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	7adb      	ldrb	r3, [r3, #11]
 800fd82:	3301      	adds	r3, #1
 800fd84:	b2da      	uxtb	r2, r3
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2200      	movs	r2, #0
 800fd94:	735a      	strb	r2, [r3, #13]
 800fd96:	e00c      	b.n	800fdb2 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800fd98:	79fb      	ldrb	r3, [r7, #7]
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7ff fe85 	bl	800faac <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2200      	movs	r2, #0
 800fda6:	729a      	strb	r2, [r3, #10]
            break;
 800fda8:	e028      	b.n	800fdfc <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	7b5a      	ldrb	r2, [r3, #13]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800fdb2:	79fb      	ldrb	r3, [r7, #7]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7ff fd89 	bl	800f8cc <dns_send>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800fdbe:	e01a      	b.n	800fdf6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d008      	beq.n	800fdda <dns_check_entry+0x10e>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	1e5a      	subs	r2, r3, #1
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d10f      	bne.n	800fdfa <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	729a      	strb	r2, [r3, #10]
      }
      break;
 800fde0:	e00b      	b.n	800fdfa <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800fde2:	4b09      	ldr	r3, [pc, #36]	@ (800fe08 <dns_check_entry+0x13c>)
 800fde4:	f240 425b 	movw	r2, #1115	@ 0x45b
 800fde8:	490a      	ldr	r1, [pc, #40]	@ (800fe14 <dns_check_entry+0x148>)
 800fdea:	4809      	ldr	r0, [pc, #36]	@ (800fe10 <dns_check_entry+0x144>)
 800fdec:	f00e fd14 	bl	801e818 <iprintf>
      break;
 800fdf0:	e004      	b.n	800fdfc <dns_check_entry+0x130>
      break;
 800fdf2:	bf00      	nop
 800fdf4:	e002      	b.n	800fdfc <dns_check_entry+0x130>
      break;
 800fdf6:	bf00      	nop
 800fdf8:	e000      	b.n	800fdfc <dns_check_entry+0x130>
      break;
 800fdfa:	bf00      	nop
  }
}
 800fdfc:	bf00      	nop
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	2000b74c 	.word	0x2000b74c
 800fe08:	08023168 	.word	0x08023168
 800fe0c:	080231d8 	.word	0x080231d8
 800fe10:	080231b0 	.word	0x080231b0
 800fe14:	080231f4 	.word	0x080231f4

0800fe18 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fe1e:	2300      	movs	r3, #0
 800fe20:	71fb      	strb	r3, [r7, #7]
 800fe22:	e006      	b.n	800fe32 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff ff50 	bl	800fccc <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fe2c:	79fb      	ldrb	r3, [r7, #7]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	71fb      	strb	r3, [r7, #7]
 800fe32:	79fb      	ldrb	r3, [r7, #7]
 800fe34:	2b03      	cmp	r3, #3
 800fe36:	d9f5      	bls.n	800fe24 <dns_check_entries+0xc>
  }
}
 800fe38:	bf00      	nop
 800fe3a:	bf00      	nop
 800fe3c:	3708      	adds	r7, #8
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}

0800fe42 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fe42:	b580      	push	{r7, lr}
 800fe44:	b082      	sub	sp, #8
 800fe46:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fe4c:	f00d fb5a 	bl	801d504 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fe50:	f000 f8d6 	bl	8010000 <mem_init>
  memp_init();
 800fe54:	f000 fc32 	bl	80106bc <memp_init>
  pbuf_init();
  netif_init();
 800fe58:	f000 fd3e 	bl	80108d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fe5c:	f008 f9aa 	bl	80181b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fe60:	f001 fff6 	bl	8011e50 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800fe64:	f7ff fd00 	bl	800f868 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fe68:	f008 f8ea 	bl	8018040 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fe6c:	bf00      	nop
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fe7e:	4b05      	ldr	r3, [pc, #20]	@ (800fe94 <ptr_to_mem+0x20>)
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	88fb      	ldrh	r3, [r7, #6]
 800fe84:	4413      	add	r3, r2
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	2000c230 	.word	0x2000c230

0800fe98 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fea0:	4b05      	ldr	r3, [pc, #20]	@ (800feb8 <mem_to_ptr+0x20>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	b29b      	uxth	r3, r3
}
 800feaa:	4618      	mov	r0, r3
 800feac:	370c      	adds	r7, #12
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	2000c230 	.word	0x2000c230

0800febc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800febc:	b590      	push	{r4, r7, lr}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fec4:	4b45      	ldr	r3, [pc, #276]	@ (800ffdc <plug_holes+0x120>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d206      	bcs.n	800fedc <plug_holes+0x20>
 800fece:	4b44      	ldr	r3, [pc, #272]	@ (800ffe0 <plug_holes+0x124>)
 800fed0:	f240 12df 	movw	r2, #479	@ 0x1df
 800fed4:	4943      	ldr	r1, [pc, #268]	@ (800ffe4 <plug_holes+0x128>)
 800fed6:	4844      	ldr	r0, [pc, #272]	@ (800ffe8 <plug_holes+0x12c>)
 800fed8:	f00e fc9e 	bl	801e818 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fedc:	4b43      	ldr	r3, [pc, #268]	@ (800ffec <plug_holes+0x130>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d306      	bcc.n	800fef4 <plug_holes+0x38>
 800fee6:	4b3e      	ldr	r3, [pc, #248]	@ (800ffe0 <plug_holes+0x124>)
 800fee8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800feec:	4940      	ldr	r1, [pc, #256]	@ (800fff0 <plug_holes+0x134>)
 800feee:	483e      	ldr	r0, [pc, #248]	@ (800ffe8 <plug_holes+0x12c>)
 800fef0:	f00e fc92 	bl	801e818 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	791b      	ldrb	r3, [r3, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d006      	beq.n	800ff0a <plug_holes+0x4e>
 800fefc:	4b38      	ldr	r3, [pc, #224]	@ (800ffe0 <plug_holes+0x124>)
 800fefe:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ff02:	493c      	ldr	r1, [pc, #240]	@ (800fff4 <plug_holes+0x138>)
 800ff04:	4838      	ldr	r0, [pc, #224]	@ (800ffe8 <plug_holes+0x12c>)
 800ff06:	f00e fc87 	bl	801e818 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	881b      	ldrh	r3, [r3, #0]
 800ff0e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ff12:	d906      	bls.n	800ff22 <plug_holes+0x66>
 800ff14:	4b32      	ldr	r3, [pc, #200]	@ (800ffe0 <plug_holes+0x124>)
 800ff16:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ff1a:	4937      	ldr	r1, [pc, #220]	@ (800fff8 <plug_holes+0x13c>)
 800ff1c:	4832      	ldr	r0, [pc, #200]	@ (800ffe8 <plug_holes+0x12c>)
 800ff1e:	f00e fc7b 	bl	801e818 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	881b      	ldrh	r3, [r3, #0]
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff ffa4 	bl	800fe74 <ptr_to_mem>
 800ff2c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d024      	beq.n	800ff80 <plug_holes+0xc4>
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	791b      	ldrb	r3, [r3, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d120      	bne.n	800ff80 <plug_holes+0xc4>
 800ff3e:	4b2b      	ldr	r3, [pc, #172]	@ (800ffec <plug_holes+0x130>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d01b      	beq.n	800ff80 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ff48:	4b2c      	ldr	r3, [pc, #176]	@ (800fffc <plug_holes+0x140>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d102      	bne.n	800ff58 <plug_holes+0x9c>
      lfree = mem;
 800ff52:	4a2a      	ldr	r2, [pc, #168]	@ (800fffc <plug_holes+0x140>)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	881a      	ldrh	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	881b      	ldrh	r3, [r3, #0]
 800ff64:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ff68:	d00a      	beq.n	800ff80 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7ff ff80 	bl	800fe74 <ptr_to_mem>
 800ff74:	4604      	mov	r4, r0
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7ff ff8e 	bl	800fe98 <mem_to_ptr>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	885b      	ldrh	r3, [r3, #2]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7ff ff75 	bl	800fe74 <ptr_to_mem>
 800ff8a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ff8c:	68ba      	ldr	r2, [r7, #8]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d01f      	beq.n	800ffd4 <plug_holes+0x118>
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	791b      	ldrb	r3, [r3, #4]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d11b      	bne.n	800ffd4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ff9c:	4b17      	ldr	r3, [pc, #92]	@ (800fffc <plug_holes+0x140>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d102      	bne.n	800ffac <plug_holes+0xf0>
      lfree = pmem;
 800ffa6:	4a15      	ldr	r2, [pc, #84]	@ (800fffc <plug_holes+0x140>)
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	881a      	ldrh	r2, [r3, #0]
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	881b      	ldrh	r3, [r3, #0]
 800ffb8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ffbc:	d00a      	beq.n	800ffd4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	881b      	ldrh	r3, [r3, #0]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff ff56 	bl	800fe74 <ptr_to_mem>
 800ffc8:	4604      	mov	r4, r0
 800ffca:	68b8      	ldr	r0, [r7, #8]
 800ffcc:	f7ff ff64 	bl	800fe98 <mem_to_ptr>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ffd4:	bf00      	nop
 800ffd6:	3714      	adds	r7, #20
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd90      	pop	{r4, r7, pc}
 800ffdc:	2000c230 	.word	0x2000c230
 800ffe0:	08023214 	.word	0x08023214
 800ffe4:	08023244 	.word	0x08023244
 800ffe8:	0802325c 	.word	0x0802325c
 800ffec:	2000c234 	.word	0x2000c234
 800fff0:	08023284 	.word	0x08023284
 800fff4:	080232a0 	.word	0x080232a0
 800fff8:	080232bc 	.word	0x080232bc
 800fffc:	2000c23c 	.word	0x2000c23c

08010000 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010006:	4b1f      	ldr	r3, [pc, #124]	@ (8010084 <mem_init+0x84>)
 8010008:	3303      	adds	r3, #3
 801000a:	f023 0303 	bic.w	r3, r3, #3
 801000e:	461a      	mov	r2, r3
 8010010:	4b1d      	ldr	r3, [pc, #116]	@ (8010088 <mem_init+0x88>)
 8010012:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010014:	4b1c      	ldr	r3, [pc, #112]	@ (8010088 <mem_init+0x88>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010020:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801002e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8010032:	f7ff ff1f 	bl	800fe74 <ptr_to_mem>
 8010036:	4603      	mov	r3, r0
 8010038:	4a14      	ldr	r2, [pc, #80]	@ (801008c <mem_init+0x8c>)
 801003a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801003c:	4b13      	ldr	r3, [pc, #76]	@ (801008c <mem_init+0x8c>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2201      	movs	r2, #1
 8010042:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010044:	4b11      	ldr	r3, [pc, #68]	@ (801008c <mem_init+0x8c>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801004c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801004e:	4b0f      	ldr	r3, [pc, #60]	@ (801008c <mem_init+0x8c>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010056:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010058:	4b0b      	ldr	r3, [pc, #44]	@ (8010088 <mem_init+0x88>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a0c      	ldr	r2, [pc, #48]	@ (8010090 <mem_init+0x90>)
 801005e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010060:	480c      	ldr	r0, [pc, #48]	@ (8010094 <mem_init+0x94>)
 8010062:	f00d fa5b 	bl	801d51c <sys_mutex_new>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d006      	beq.n	801007a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801006c:	4b0a      	ldr	r3, [pc, #40]	@ (8010098 <mem_init+0x98>)
 801006e:	f240 221f 	movw	r2, #543	@ 0x21f
 8010072:	490a      	ldr	r1, [pc, #40]	@ (801009c <mem_init+0x9c>)
 8010074:	480a      	ldr	r0, [pc, #40]	@ (80100a0 <mem_init+0xa0>)
 8010076:	f00e fbcf 	bl	801e818 <iprintf>
  }
}
 801007a:	bf00      	nop
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	2000bbdc 	.word	0x2000bbdc
 8010088:	2000c230 	.word	0x2000c230
 801008c:	2000c234 	.word	0x2000c234
 8010090:	2000c23c 	.word	0x2000c23c
 8010094:	2000c238 	.word	0x2000c238
 8010098:	08023214 	.word	0x08023214
 801009c:	080232e8 	.word	0x080232e8
 80100a0:	0802325c 	.word	0x0802325c

080100a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f7ff fef3 	bl	800fe98 <mem_to_ptr>
 80100b2:	4603      	mov	r3, r0
 80100b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	881b      	ldrh	r3, [r3, #0]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff feda 	bl	800fe74 <ptr_to_mem>
 80100c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	885b      	ldrh	r3, [r3, #2]
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7ff fed4 	bl	800fe74 <ptr_to_mem>
 80100cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	881b      	ldrh	r3, [r3, #0]
 80100d2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80100d6:	d818      	bhi.n	801010a <mem_link_valid+0x66>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	885b      	ldrh	r3, [r3, #2]
 80100dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80100e0:	d813      	bhi.n	801010a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80100e6:	8afa      	ldrh	r2, [r7, #22]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d004      	beq.n	80100f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	881b      	ldrh	r3, [r3, #0]
 80100f0:	8afa      	ldrh	r2, [r7, #22]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d109      	bne.n	801010a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80100f6:	4b08      	ldr	r3, [pc, #32]	@ (8010118 <mem_link_valid+0x74>)
 80100f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80100fa:	693a      	ldr	r2, [r7, #16]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d006      	beq.n	801010e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	885b      	ldrh	r3, [r3, #2]
 8010104:	8afa      	ldrh	r2, [r7, #22]
 8010106:	429a      	cmp	r2, r3
 8010108:	d001      	beq.n	801010e <mem_link_valid+0x6a>
    return 0;
 801010a:	2300      	movs	r3, #0
 801010c:	e000      	b.n	8010110 <mem_link_valid+0x6c>
  }
  return 1;
 801010e:	2301      	movs	r3, #1
}
 8010110:	4618      	mov	r0, r3
 8010112:	3718      	adds	r7, #24
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	2000c234 	.word	0x2000c234

0801011c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b088      	sub	sp, #32
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d070      	beq.n	801020c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f003 0303 	and.w	r3, r3, #3
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00d      	beq.n	8010150 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010134:	4b37      	ldr	r3, [pc, #220]	@ (8010214 <mem_free+0xf8>)
 8010136:	f240 2273 	movw	r2, #627	@ 0x273
 801013a:	4937      	ldr	r1, [pc, #220]	@ (8010218 <mem_free+0xfc>)
 801013c:	4837      	ldr	r0, [pc, #220]	@ (801021c <mem_free+0x100>)
 801013e:	f00e fb6b 	bl	801e818 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010142:	f00d fa3d 	bl	801d5c0 <sys_arch_protect>
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f00d fa47 	bl	801d5dc <sys_arch_unprotect>
    return;
 801014e:	e05e      	b.n	801020e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	3b08      	subs	r3, #8
 8010154:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010156:	4b32      	ldr	r3, [pc, #200]	@ (8010220 <mem_free+0x104>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	69fa      	ldr	r2, [r7, #28]
 801015c:	429a      	cmp	r2, r3
 801015e:	d306      	bcc.n	801016e <mem_free+0x52>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f103 020c 	add.w	r2, r3, #12
 8010166:	4b2f      	ldr	r3, [pc, #188]	@ (8010224 <mem_free+0x108>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	429a      	cmp	r2, r3
 801016c:	d90d      	bls.n	801018a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801016e:	4b29      	ldr	r3, [pc, #164]	@ (8010214 <mem_free+0xf8>)
 8010170:	f240 227f 	movw	r2, #639	@ 0x27f
 8010174:	492c      	ldr	r1, [pc, #176]	@ (8010228 <mem_free+0x10c>)
 8010176:	4829      	ldr	r0, [pc, #164]	@ (801021c <mem_free+0x100>)
 8010178:	f00e fb4e 	bl	801e818 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801017c:	f00d fa20 	bl	801d5c0 <sys_arch_protect>
 8010180:	6138      	str	r0, [r7, #16]
 8010182:	6938      	ldr	r0, [r7, #16]
 8010184:	f00d fa2a 	bl	801d5dc <sys_arch_unprotect>
    return;
 8010188:	e041      	b.n	801020e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801018a:	4828      	ldr	r0, [pc, #160]	@ (801022c <mem_free+0x110>)
 801018c:	f00d f9dc 	bl	801d548 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	791b      	ldrb	r3, [r3, #4]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d110      	bne.n	80101ba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010198:	4b1e      	ldr	r3, [pc, #120]	@ (8010214 <mem_free+0xf8>)
 801019a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801019e:	4924      	ldr	r1, [pc, #144]	@ (8010230 <mem_free+0x114>)
 80101a0:	481e      	ldr	r0, [pc, #120]	@ (801021c <mem_free+0x100>)
 80101a2:	f00e fb39 	bl	801e818 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80101a6:	4821      	ldr	r0, [pc, #132]	@ (801022c <mem_free+0x110>)
 80101a8:	f00d f9dd 	bl	801d566 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80101ac:	f00d fa08 	bl	801d5c0 <sys_arch_protect>
 80101b0:	6178      	str	r0, [r7, #20]
 80101b2:	6978      	ldr	r0, [r7, #20]
 80101b4:	f00d fa12 	bl	801d5dc <sys_arch_unprotect>
    return;
 80101b8:	e029      	b.n	801020e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80101ba:	69f8      	ldr	r0, [r7, #28]
 80101bc:	f7ff ff72 	bl	80100a4 <mem_link_valid>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d110      	bne.n	80101e8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80101c6:	4b13      	ldr	r3, [pc, #76]	@ (8010214 <mem_free+0xf8>)
 80101c8:	f240 2295 	movw	r2, #661	@ 0x295
 80101cc:	4919      	ldr	r1, [pc, #100]	@ (8010234 <mem_free+0x118>)
 80101ce:	4813      	ldr	r0, [pc, #76]	@ (801021c <mem_free+0x100>)
 80101d0:	f00e fb22 	bl	801e818 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80101d4:	4815      	ldr	r0, [pc, #84]	@ (801022c <mem_free+0x110>)
 80101d6:	f00d f9c6 	bl	801d566 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80101da:	f00d f9f1 	bl	801d5c0 <sys_arch_protect>
 80101de:	61b8      	str	r0, [r7, #24]
 80101e0:	69b8      	ldr	r0, [r7, #24]
 80101e2:	f00d f9fb 	bl	801d5dc <sys_arch_unprotect>
    return;
 80101e6:	e012      	b.n	801020e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80101e8:	69fb      	ldr	r3, [r7, #28]
 80101ea:	2200      	movs	r2, #0
 80101ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80101ee:	4b12      	ldr	r3, [pc, #72]	@ (8010238 <mem_free+0x11c>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	69fa      	ldr	r2, [r7, #28]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d202      	bcs.n	80101fe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80101f8:	4a0f      	ldr	r2, [pc, #60]	@ (8010238 <mem_free+0x11c>)
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80101fe:	69f8      	ldr	r0, [r7, #28]
 8010200:	f7ff fe5c 	bl	800febc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010204:	4809      	ldr	r0, [pc, #36]	@ (801022c <mem_free+0x110>)
 8010206:	f00d f9ae 	bl	801d566 <sys_mutex_unlock>
 801020a:	e000      	b.n	801020e <mem_free+0xf2>
    return;
 801020c:	bf00      	nop
}
 801020e:	3720      	adds	r7, #32
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	08023214 	.word	0x08023214
 8010218:	08023304 	.word	0x08023304
 801021c:	0802325c 	.word	0x0802325c
 8010220:	2000c230 	.word	0x2000c230
 8010224:	2000c234 	.word	0x2000c234
 8010228:	08023328 	.word	0x08023328
 801022c:	2000c238 	.word	0x2000c238
 8010230:	08023344 	.word	0x08023344
 8010234:	0802336c 	.word	0x0802336c
 8010238:	2000c23c 	.word	0x2000c23c

0801023c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b088      	sub	sp, #32
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010248:	887b      	ldrh	r3, [r7, #2]
 801024a:	3303      	adds	r3, #3
 801024c:	b29b      	uxth	r3, r3
 801024e:	f023 0303 	bic.w	r3, r3, #3
 8010252:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010254:	8bfb      	ldrh	r3, [r7, #30]
 8010256:	2b0b      	cmp	r3, #11
 8010258:	d801      	bhi.n	801025e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801025a:	230c      	movs	r3, #12
 801025c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801025e:	8bfb      	ldrh	r3, [r7, #30]
 8010260:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010264:	d803      	bhi.n	801026e <mem_trim+0x32>
 8010266:	8bfa      	ldrh	r2, [r7, #30]
 8010268:	887b      	ldrh	r3, [r7, #2]
 801026a:	429a      	cmp	r2, r3
 801026c:	d201      	bcs.n	8010272 <mem_trim+0x36>
    return NULL;
 801026e:	2300      	movs	r3, #0
 8010270:	e0d8      	b.n	8010424 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010272:	4b6e      	ldr	r3, [pc, #440]	@ (801042c <mem_trim+0x1f0>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	429a      	cmp	r2, r3
 801027a:	d304      	bcc.n	8010286 <mem_trim+0x4a>
 801027c:	4b6c      	ldr	r3, [pc, #432]	@ (8010430 <mem_trim+0x1f4>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	429a      	cmp	r2, r3
 8010284:	d306      	bcc.n	8010294 <mem_trim+0x58>
 8010286:	4b6b      	ldr	r3, [pc, #428]	@ (8010434 <mem_trim+0x1f8>)
 8010288:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801028c:	496a      	ldr	r1, [pc, #424]	@ (8010438 <mem_trim+0x1fc>)
 801028e:	486b      	ldr	r0, [pc, #428]	@ (801043c <mem_trim+0x200>)
 8010290:	f00e fac2 	bl	801e818 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010294:	4b65      	ldr	r3, [pc, #404]	@ (801042c <mem_trim+0x1f0>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	429a      	cmp	r2, r3
 801029c:	d304      	bcc.n	80102a8 <mem_trim+0x6c>
 801029e:	4b64      	ldr	r3, [pc, #400]	@ (8010430 <mem_trim+0x1f4>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d307      	bcc.n	80102b8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80102a8:	f00d f98a 	bl	801d5c0 <sys_arch_protect>
 80102ac:	60b8      	str	r0, [r7, #8]
 80102ae:	68b8      	ldr	r0, [r7, #8]
 80102b0:	f00d f994 	bl	801d5dc <sys_arch_unprotect>
    return rmem;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	e0b5      	b.n	8010424 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	3b08      	subs	r3, #8
 80102bc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80102be:	69b8      	ldr	r0, [r7, #24]
 80102c0:	f7ff fdea 	bl	800fe98 <mem_to_ptr>
 80102c4:	4603      	mov	r3, r0
 80102c6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	881a      	ldrh	r2, [r3, #0]
 80102cc:	8afb      	ldrh	r3, [r7, #22]
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	3b08      	subs	r3, #8
 80102d4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80102d6:	8bfa      	ldrh	r2, [r7, #30]
 80102d8:	8abb      	ldrh	r3, [r7, #20]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d906      	bls.n	80102ec <mem_trim+0xb0>
 80102de:	4b55      	ldr	r3, [pc, #340]	@ (8010434 <mem_trim+0x1f8>)
 80102e0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80102e4:	4956      	ldr	r1, [pc, #344]	@ (8010440 <mem_trim+0x204>)
 80102e6:	4855      	ldr	r0, [pc, #340]	@ (801043c <mem_trim+0x200>)
 80102e8:	f00e fa96 	bl	801e818 <iprintf>
  if (newsize > size) {
 80102ec:	8bfa      	ldrh	r2, [r7, #30]
 80102ee:	8abb      	ldrh	r3, [r7, #20]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d901      	bls.n	80102f8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80102f4:	2300      	movs	r3, #0
 80102f6:	e095      	b.n	8010424 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80102f8:	8bfa      	ldrh	r2, [r7, #30]
 80102fa:	8abb      	ldrh	r3, [r7, #20]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d101      	bne.n	8010304 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	e08f      	b.n	8010424 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010304:	484f      	ldr	r0, [pc, #316]	@ (8010444 <mem_trim+0x208>)
 8010306:	f00d f91f 	bl	801d548 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	881b      	ldrh	r3, [r3, #0]
 801030e:	4618      	mov	r0, r3
 8010310:	f7ff fdb0 	bl	800fe74 <ptr_to_mem>
 8010314:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	791b      	ldrb	r3, [r3, #4]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d13f      	bne.n	801039e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	881b      	ldrh	r3, [r3, #0]
 8010322:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010326:	d106      	bne.n	8010336 <mem_trim+0xfa>
 8010328:	4b42      	ldr	r3, [pc, #264]	@ (8010434 <mem_trim+0x1f8>)
 801032a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801032e:	4946      	ldr	r1, [pc, #280]	@ (8010448 <mem_trim+0x20c>)
 8010330:	4842      	ldr	r0, [pc, #264]	@ (801043c <mem_trim+0x200>)
 8010332:	f00e fa71 	bl	801e818 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	881b      	ldrh	r3, [r3, #0]
 801033a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801033c:	8afa      	ldrh	r2, [r7, #22]
 801033e:	8bfb      	ldrh	r3, [r7, #30]
 8010340:	4413      	add	r3, r2
 8010342:	b29b      	uxth	r3, r3
 8010344:	3308      	adds	r3, #8
 8010346:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010348:	4b40      	ldr	r3, [pc, #256]	@ (801044c <mem_trim+0x210>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	693a      	ldr	r2, [r7, #16]
 801034e:	429a      	cmp	r2, r3
 8010350:	d106      	bne.n	8010360 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010352:	89fb      	ldrh	r3, [r7, #14]
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff fd8d 	bl	800fe74 <ptr_to_mem>
 801035a:	4603      	mov	r3, r0
 801035c:	4a3b      	ldr	r2, [pc, #236]	@ (801044c <mem_trim+0x210>)
 801035e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010360:	89fb      	ldrh	r3, [r7, #14]
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff fd86 	bl	800fe74 <ptr_to_mem>
 8010368:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	2200      	movs	r2, #0
 801036e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	89ba      	ldrh	r2, [r7, #12]
 8010374:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	8afa      	ldrh	r2, [r7, #22]
 801037a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	89fa      	ldrh	r2, [r7, #14]
 8010380:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	881b      	ldrh	r3, [r3, #0]
 8010386:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801038a:	d047      	beq.n	801041c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	881b      	ldrh	r3, [r3, #0]
 8010390:	4618      	mov	r0, r3
 8010392:	f7ff fd6f 	bl	800fe74 <ptr_to_mem>
 8010396:	4602      	mov	r2, r0
 8010398:	89fb      	ldrh	r3, [r7, #14]
 801039a:	8053      	strh	r3, [r2, #2]
 801039c:	e03e      	b.n	801041c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801039e:	8bfb      	ldrh	r3, [r7, #30]
 80103a0:	f103 0214 	add.w	r2, r3, #20
 80103a4:	8abb      	ldrh	r3, [r7, #20]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d838      	bhi.n	801041c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80103aa:	8afa      	ldrh	r2, [r7, #22]
 80103ac:	8bfb      	ldrh	r3, [r7, #30]
 80103ae:	4413      	add	r3, r2
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	3308      	adds	r3, #8
 80103b4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	881b      	ldrh	r3, [r3, #0]
 80103ba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80103be:	d106      	bne.n	80103ce <mem_trim+0x192>
 80103c0:	4b1c      	ldr	r3, [pc, #112]	@ (8010434 <mem_trim+0x1f8>)
 80103c2:	f240 3216 	movw	r2, #790	@ 0x316
 80103c6:	4920      	ldr	r1, [pc, #128]	@ (8010448 <mem_trim+0x20c>)
 80103c8:	481c      	ldr	r0, [pc, #112]	@ (801043c <mem_trim+0x200>)
 80103ca:	f00e fa25 	bl	801e818 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80103ce:	89fb      	ldrh	r3, [r7, #14]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7ff fd4f 	bl	800fe74 <ptr_to_mem>
 80103d6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80103d8:	4b1c      	ldr	r3, [pc, #112]	@ (801044c <mem_trim+0x210>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	693a      	ldr	r2, [r7, #16]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d202      	bcs.n	80103e8 <mem_trim+0x1ac>
      lfree = mem2;
 80103e2:	4a1a      	ldr	r2, [pc, #104]	@ (801044c <mem_trim+0x210>)
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	2200      	movs	r2, #0
 80103ec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	881a      	ldrh	r2, [r3, #0]
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	8afa      	ldrh	r2, [r7, #22]
 80103fa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	89fa      	ldrh	r2, [r7, #14]
 8010400:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	881b      	ldrh	r3, [r3, #0]
 8010406:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801040a:	d007      	beq.n	801041c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff fd2f 	bl	800fe74 <ptr_to_mem>
 8010416:	4602      	mov	r2, r0
 8010418:	89fb      	ldrh	r3, [r7, #14]
 801041a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801041c:	4809      	ldr	r0, [pc, #36]	@ (8010444 <mem_trim+0x208>)
 801041e:	f00d f8a2 	bl	801d566 <sys_mutex_unlock>
  return rmem;
 8010422:	687b      	ldr	r3, [r7, #4]
}
 8010424:	4618      	mov	r0, r3
 8010426:	3720      	adds	r7, #32
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	2000c230 	.word	0x2000c230
 8010430:	2000c234 	.word	0x2000c234
 8010434:	08023214 	.word	0x08023214
 8010438:	080233a0 	.word	0x080233a0
 801043c:	0802325c 	.word	0x0802325c
 8010440:	080233b8 	.word	0x080233b8
 8010444:	2000c238 	.word	0x2000c238
 8010448:	080233d8 	.word	0x080233d8
 801044c:	2000c23c 	.word	0x2000c23c

08010450 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b088      	sub	sp, #32
 8010454:	af00      	add	r7, sp, #0
 8010456:	4603      	mov	r3, r0
 8010458:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801045a:	88fb      	ldrh	r3, [r7, #6]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d101      	bne.n	8010464 <mem_malloc+0x14>
    return NULL;
 8010460:	2300      	movs	r3, #0
 8010462:	e0e2      	b.n	801062a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010464:	88fb      	ldrh	r3, [r7, #6]
 8010466:	3303      	adds	r3, #3
 8010468:	b29b      	uxth	r3, r3
 801046a:	f023 0303 	bic.w	r3, r3, #3
 801046e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010470:	8bbb      	ldrh	r3, [r7, #28]
 8010472:	2b0b      	cmp	r3, #11
 8010474:	d801      	bhi.n	801047a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010476:	230c      	movs	r3, #12
 8010478:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801047a:	8bbb      	ldrh	r3, [r7, #28]
 801047c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010480:	d803      	bhi.n	801048a <mem_malloc+0x3a>
 8010482:	8bba      	ldrh	r2, [r7, #28]
 8010484:	88fb      	ldrh	r3, [r7, #6]
 8010486:	429a      	cmp	r2, r3
 8010488:	d201      	bcs.n	801048e <mem_malloc+0x3e>
    return NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	e0cd      	b.n	801062a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801048e:	4869      	ldr	r0, [pc, #420]	@ (8010634 <mem_malloc+0x1e4>)
 8010490:	f00d f85a 	bl	801d548 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010494:	4b68      	ldr	r3, [pc, #416]	@ (8010638 <mem_malloc+0x1e8>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4618      	mov	r0, r3
 801049a:	f7ff fcfd 	bl	800fe98 <mem_to_ptr>
 801049e:	4603      	mov	r3, r0
 80104a0:	83fb      	strh	r3, [r7, #30]
 80104a2:	e0b7      	b.n	8010614 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80104a4:	8bfb      	ldrh	r3, [r7, #30]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7ff fce4 	bl	800fe74 <ptr_to_mem>
 80104ac:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	791b      	ldrb	r3, [r3, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f040 80a7 	bne.w	8010606 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	461a      	mov	r2, r3
 80104be:	8bfb      	ldrh	r3, [r7, #30]
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	f1a3 0208 	sub.w	r2, r3, #8
 80104c6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80104c8:	429a      	cmp	r2, r3
 80104ca:	f0c0 809c 	bcc.w	8010606 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	461a      	mov	r2, r3
 80104d4:	8bfb      	ldrh	r3, [r7, #30]
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	f1a3 0208 	sub.w	r2, r3, #8
 80104dc:	8bbb      	ldrh	r3, [r7, #28]
 80104de:	3314      	adds	r3, #20
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d333      	bcc.n	801054c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80104e4:	8bfa      	ldrh	r2, [r7, #30]
 80104e6:	8bbb      	ldrh	r3, [r7, #28]
 80104e8:	4413      	add	r3, r2
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	3308      	adds	r3, #8
 80104ee:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80104f0:	8a7b      	ldrh	r3, [r7, #18]
 80104f2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80104f6:	d106      	bne.n	8010506 <mem_malloc+0xb6>
 80104f8:	4b50      	ldr	r3, [pc, #320]	@ (801063c <mem_malloc+0x1ec>)
 80104fa:	f240 3287 	movw	r2, #903	@ 0x387
 80104fe:	4950      	ldr	r1, [pc, #320]	@ (8010640 <mem_malloc+0x1f0>)
 8010500:	4850      	ldr	r0, [pc, #320]	@ (8010644 <mem_malloc+0x1f4>)
 8010502:	f00e f989 	bl	801e818 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010506:	8a7b      	ldrh	r3, [r7, #18]
 8010508:	4618      	mov	r0, r3
 801050a:	f7ff fcb3 	bl	800fe74 <ptr_to_mem>
 801050e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2200      	movs	r2, #0
 8010514:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	881a      	ldrh	r2, [r3, #0]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	8bfa      	ldrh	r2, [r7, #30]
 8010522:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	8a7a      	ldrh	r2, [r7, #18]
 8010528:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	2201      	movs	r2, #1
 801052e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	881b      	ldrh	r3, [r3, #0]
 8010534:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010538:	d00b      	beq.n	8010552 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	4618      	mov	r0, r3
 8010540:	f7ff fc98 	bl	800fe74 <ptr_to_mem>
 8010544:	4602      	mov	r2, r0
 8010546:	8a7b      	ldrh	r3, [r7, #18]
 8010548:	8053      	strh	r3, [r2, #2]
 801054a:	e002      	b.n	8010552 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	2201      	movs	r2, #1
 8010550:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010552:	4b39      	ldr	r3, [pc, #228]	@ (8010638 <mem_malloc+0x1e8>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	697a      	ldr	r2, [r7, #20]
 8010558:	429a      	cmp	r2, r3
 801055a:	d127      	bne.n	80105ac <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801055c:	4b36      	ldr	r3, [pc, #216]	@ (8010638 <mem_malloc+0x1e8>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010562:	e005      	b.n	8010570 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	881b      	ldrh	r3, [r3, #0]
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff fc83 	bl	800fe74 <ptr_to_mem>
 801056e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	791b      	ldrb	r3, [r3, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d004      	beq.n	8010582 <mem_malloc+0x132>
 8010578:	4b33      	ldr	r3, [pc, #204]	@ (8010648 <mem_malloc+0x1f8>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	69ba      	ldr	r2, [r7, #24]
 801057e:	429a      	cmp	r2, r3
 8010580:	d1f0      	bne.n	8010564 <mem_malloc+0x114>
          }
          lfree = cur;
 8010582:	4a2d      	ldr	r2, [pc, #180]	@ (8010638 <mem_malloc+0x1e8>)
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010588:	4b2b      	ldr	r3, [pc, #172]	@ (8010638 <mem_malloc+0x1e8>)
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	4b2e      	ldr	r3, [pc, #184]	@ (8010648 <mem_malloc+0x1f8>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	429a      	cmp	r2, r3
 8010592:	d00b      	beq.n	80105ac <mem_malloc+0x15c>
 8010594:	4b28      	ldr	r3, [pc, #160]	@ (8010638 <mem_malloc+0x1e8>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	791b      	ldrb	r3, [r3, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d006      	beq.n	80105ac <mem_malloc+0x15c>
 801059e:	4b27      	ldr	r3, [pc, #156]	@ (801063c <mem_malloc+0x1ec>)
 80105a0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80105a4:	4929      	ldr	r1, [pc, #164]	@ (801064c <mem_malloc+0x1fc>)
 80105a6:	4827      	ldr	r0, [pc, #156]	@ (8010644 <mem_malloc+0x1f4>)
 80105a8:	f00e f936 	bl	801e818 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80105ac:	4821      	ldr	r0, [pc, #132]	@ (8010634 <mem_malloc+0x1e4>)
 80105ae:	f00c ffda 	bl	801d566 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80105b2:	8bba      	ldrh	r2, [r7, #28]
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	4413      	add	r3, r2
 80105b8:	3308      	adds	r3, #8
 80105ba:	4a23      	ldr	r2, [pc, #140]	@ (8010648 <mem_malloc+0x1f8>)
 80105bc:	6812      	ldr	r2, [r2, #0]
 80105be:	4293      	cmp	r3, r2
 80105c0:	d906      	bls.n	80105d0 <mem_malloc+0x180>
 80105c2:	4b1e      	ldr	r3, [pc, #120]	@ (801063c <mem_malloc+0x1ec>)
 80105c4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80105c8:	4921      	ldr	r1, [pc, #132]	@ (8010650 <mem_malloc+0x200>)
 80105ca:	481e      	ldr	r0, [pc, #120]	@ (8010644 <mem_malloc+0x1f4>)
 80105cc:	f00e f924 	bl	801e818 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	f003 0303 	and.w	r3, r3, #3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d006      	beq.n	80105e8 <mem_malloc+0x198>
 80105da:	4b18      	ldr	r3, [pc, #96]	@ (801063c <mem_malloc+0x1ec>)
 80105dc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80105e0:	491c      	ldr	r1, [pc, #112]	@ (8010654 <mem_malloc+0x204>)
 80105e2:	4818      	ldr	r0, [pc, #96]	@ (8010644 <mem_malloc+0x1f4>)
 80105e4:	f00e f918 	bl	801e818 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	f003 0303 	and.w	r3, r3, #3
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d006      	beq.n	8010600 <mem_malloc+0x1b0>
 80105f2:	4b12      	ldr	r3, [pc, #72]	@ (801063c <mem_malloc+0x1ec>)
 80105f4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80105f8:	4917      	ldr	r1, [pc, #92]	@ (8010658 <mem_malloc+0x208>)
 80105fa:	4812      	ldr	r0, [pc, #72]	@ (8010644 <mem_malloc+0x1f4>)
 80105fc:	f00e f90c 	bl	801e818 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	3308      	adds	r3, #8
 8010604:	e011      	b.n	801062a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010606:	8bfb      	ldrh	r3, [r7, #30]
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff fc33 	bl	800fe74 <ptr_to_mem>
 801060e:	4603      	mov	r3, r0
 8010610:	881b      	ldrh	r3, [r3, #0]
 8010612:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010614:	8bfa      	ldrh	r2, [r7, #30]
 8010616:	8bbb      	ldrh	r3, [r7, #28]
 8010618:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 801061c:	429a      	cmp	r2, r3
 801061e:	f4ff af41 	bcc.w	80104a4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010622:	4804      	ldr	r0, [pc, #16]	@ (8010634 <mem_malloc+0x1e4>)
 8010624:	f00c ff9f 	bl	801d566 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010628:	2300      	movs	r3, #0
}
 801062a:	4618      	mov	r0, r3
 801062c:	3720      	adds	r7, #32
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	2000c238 	.word	0x2000c238
 8010638:	2000c23c 	.word	0x2000c23c
 801063c:	08023214 	.word	0x08023214
 8010640:	080233d8 	.word	0x080233d8
 8010644:	0802325c 	.word	0x0802325c
 8010648:	2000c234 	.word	0x2000c234
 801064c:	080233ec 	.word	0x080233ec
 8010650:	08023408 	.word	0x08023408
 8010654:	08023438 	.word	0x08023438
 8010658:	08023468 	.word	0x08023468

0801065c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	2200      	movs	r2, #0
 801066a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	3303      	adds	r3, #3
 8010672:	f023 0303 	bic.w	r3, r3, #3
 8010676:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010678:	2300      	movs	r3, #0
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	e011      	b.n	80106a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	689b      	ldr	r3, [r3, #8]
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	461a      	mov	r2, r3
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	4413      	add	r3, r2
 801069a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	3301      	adds	r3, #1
 80106a0:	60fb      	str	r3, [r7, #12]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	885b      	ldrh	r3, [r3, #2]
 80106a6:	461a      	mov	r2, r3
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	4293      	cmp	r3, r2
 80106ac:	dbe7      	blt.n	801067e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80106ae:	bf00      	nop
 80106b0:	bf00      	nop
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80106c2:	2300      	movs	r3, #0
 80106c4:	80fb      	strh	r3, [r7, #6]
 80106c6:	e009      	b.n	80106dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80106c8:	88fb      	ldrh	r3, [r7, #6]
 80106ca:	4a08      	ldr	r2, [pc, #32]	@ (80106ec <memp_init+0x30>)
 80106cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7ff ffc3 	bl	801065c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80106d6:	88fb      	ldrh	r3, [r7, #6]
 80106d8:	3301      	adds	r3, #1
 80106da:	80fb      	strh	r3, [r7, #6]
 80106dc:	88fb      	ldrh	r3, [r7, #6]
 80106de:	2b0d      	cmp	r3, #13
 80106e0:	d9f2      	bls.n	80106c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80106e2:	bf00      	nop
 80106e4:	bf00      	nop
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	080261e0 	.word	0x080261e0

080106f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80106f8:	f00c ff62 	bl	801d5c0 <sys_arch_protect>
 80106fc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d015      	beq.n	8010738 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	68ba      	ldr	r2, [r7, #8]
 8010712:	6812      	ldr	r2, [r2, #0]
 8010714:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	f003 0303 	and.w	r3, r3, #3
 801071c:	2b00      	cmp	r3, #0
 801071e:	d006      	beq.n	801072e <do_memp_malloc_pool+0x3e>
 8010720:	4b09      	ldr	r3, [pc, #36]	@ (8010748 <do_memp_malloc_pool+0x58>)
 8010722:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8010726:	4909      	ldr	r1, [pc, #36]	@ (801074c <do_memp_malloc_pool+0x5c>)
 8010728:	4809      	ldr	r0, [pc, #36]	@ (8010750 <do_memp_malloc_pool+0x60>)
 801072a:	f00e f875 	bl	801e818 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f00c ff54 	bl	801d5dc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	e003      	b.n	8010740 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f00c ff4f 	bl	801d5dc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801073e:	2300      	movs	r3, #0
}
 8010740:	4618      	mov	r0, r3
 8010742:	3710      	adds	r7, #16
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	0802348c 	.word	0x0802348c
 801074c:	080234bc 	.word	0x080234bc
 8010750:	080234e0 	.word	0x080234e0

08010754 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d106      	bne.n	8010770 <memp_malloc_pool+0x1c>
 8010762:	4b0a      	ldr	r3, [pc, #40]	@ (801078c <memp_malloc_pool+0x38>)
 8010764:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8010768:	4909      	ldr	r1, [pc, #36]	@ (8010790 <memp_malloc_pool+0x3c>)
 801076a:	480a      	ldr	r0, [pc, #40]	@ (8010794 <memp_malloc_pool+0x40>)
 801076c:	f00e f854 	bl	801e818 <iprintf>
  if (desc == NULL) {
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d101      	bne.n	801077a <memp_malloc_pool+0x26>
    return NULL;
 8010776:	2300      	movs	r3, #0
 8010778:	e003      	b.n	8010782 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7ff ffb8 	bl	80106f0 <do_memp_malloc_pool>
 8010780:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010782:	4618      	mov	r0, r3
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	0802348c 	.word	0x0802348c
 8010790:	08023508 	.word	0x08023508
 8010794:	080234e0 	.word	0x080234e0

08010798 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	4603      	mov	r3, r0
 80107a0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80107a2:	79fb      	ldrb	r3, [r7, #7]
 80107a4:	2b0d      	cmp	r3, #13
 80107a6:	d908      	bls.n	80107ba <memp_malloc+0x22>
 80107a8:	4b0a      	ldr	r3, [pc, #40]	@ (80107d4 <memp_malloc+0x3c>)
 80107aa:	f240 1257 	movw	r2, #343	@ 0x157
 80107ae:	490a      	ldr	r1, [pc, #40]	@ (80107d8 <memp_malloc+0x40>)
 80107b0:	480a      	ldr	r0, [pc, #40]	@ (80107dc <memp_malloc+0x44>)
 80107b2:	f00e f831 	bl	801e818 <iprintf>
 80107b6:	2300      	movs	r3, #0
 80107b8:	e008      	b.n	80107cc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80107ba:	79fb      	ldrb	r3, [r7, #7]
 80107bc:	4a08      	ldr	r2, [pc, #32]	@ (80107e0 <memp_malloc+0x48>)
 80107be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff ff94 	bl	80106f0 <do_memp_malloc_pool>
 80107c8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80107ca:	68fb      	ldr	r3, [r7, #12]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3710      	adds	r7, #16
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	0802348c 	.word	0x0802348c
 80107d8:	0802351c 	.word	0x0802351c
 80107dc:	080234e0 	.word	0x080234e0
 80107e0:	080261e0 	.word	0x080261e0

080107e4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	f003 0303 	and.w	r3, r3, #3
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d006      	beq.n	8010806 <do_memp_free_pool+0x22>
 80107f8:	4b0d      	ldr	r3, [pc, #52]	@ (8010830 <do_memp_free_pool+0x4c>)
 80107fa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80107fe:	490d      	ldr	r1, [pc, #52]	@ (8010834 <do_memp_free_pool+0x50>)
 8010800:	480d      	ldr	r0, [pc, #52]	@ (8010838 <do_memp_free_pool+0x54>)
 8010802:	f00e f809 	bl	801e818 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801080a:	f00c fed9 	bl	801d5c0 <sys_arch_protect>
 801080e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010822:	68b8      	ldr	r0, [r7, #8]
 8010824:	f00c feda 	bl	801d5dc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010828:	bf00      	nop
 801082a:	3710      	adds	r7, #16
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	0802348c 	.word	0x0802348c
 8010834:	0802353c 	.word	0x0802353c
 8010838:	080234e0 	.word	0x080234e0

0801083c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d106      	bne.n	801085a <memp_free_pool+0x1e>
 801084c:	4b0a      	ldr	r3, [pc, #40]	@ (8010878 <memp_free_pool+0x3c>)
 801084e:	f240 1295 	movw	r2, #405	@ 0x195
 8010852:	490a      	ldr	r1, [pc, #40]	@ (801087c <memp_free_pool+0x40>)
 8010854:	480a      	ldr	r0, [pc, #40]	@ (8010880 <memp_free_pool+0x44>)
 8010856:	f00d ffdf 	bl	801e818 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d007      	beq.n	8010870 <memp_free_pool+0x34>
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d004      	beq.n	8010870 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010866:	6839      	ldr	r1, [r7, #0]
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7ff ffbb 	bl	80107e4 <do_memp_free_pool>
 801086e:	e000      	b.n	8010872 <memp_free_pool+0x36>
    return;
 8010870:	bf00      	nop
}
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	0802348c 	.word	0x0802348c
 801087c:	08023508 	.word	0x08023508
 8010880:	080234e0 	.word	0x080234e0

08010884 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	4603      	mov	r3, r0
 801088c:	6039      	str	r1, [r7, #0]
 801088e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010890:	79fb      	ldrb	r3, [r7, #7]
 8010892:	2b0d      	cmp	r3, #13
 8010894:	d907      	bls.n	80108a6 <memp_free+0x22>
 8010896:	4b0c      	ldr	r3, [pc, #48]	@ (80108c8 <memp_free+0x44>)
 8010898:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801089c:	490b      	ldr	r1, [pc, #44]	@ (80108cc <memp_free+0x48>)
 801089e:	480c      	ldr	r0, [pc, #48]	@ (80108d0 <memp_free+0x4c>)
 80108a0:	f00d ffba 	bl	801e818 <iprintf>
 80108a4:	e00c      	b.n	80108c0 <memp_free+0x3c>

  if (mem == NULL) {
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d008      	beq.n	80108be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80108ac:	79fb      	ldrb	r3, [r7, #7]
 80108ae:	4a09      	ldr	r2, [pc, #36]	@ (80108d4 <memp_free+0x50>)
 80108b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108b4:	6839      	ldr	r1, [r7, #0]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7ff ff94 	bl	80107e4 <do_memp_free_pool>
 80108bc:	e000      	b.n	80108c0 <memp_free+0x3c>
    return;
 80108be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	0802348c 	.word	0x0802348c
 80108cc:	0802355c 	.word	0x0802355c
 80108d0:	080234e0 	.word	0x080234e0
 80108d4:	080261e0 	.word	0x080261e0

080108d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80108d8:	b480      	push	{r7}
 80108da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80108dc:	bf00      	nop
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr
	...

080108e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b086      	sub	sp, #24
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60f8      	str	r0, [r7, #12]
 80108f0:	60b9      	str	r1, [r7, #8]
 80108f2:	607a      	str	r2, [r7, #4]
 80108f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d108      	bne.n	801090e <netif_add+0x26>
 80108fc:	4b5b      	ldr	r3, [pc, #364]	@ (8010a6c <netif_add+0x184>)
 80108fe:	f240 1227 	movw	r2, #295	@ 0x127
 8010902:	495b      	ldr	r1, [pc, #364]	@ (8010a70 <netif_add+0x188>)
 8010904:	485b      	ldr	r0, [pc, #364]	@ (8010a74 <netif_add+0x18c>)
 8010906:	f00d ff87 	bl	801e818 <iprintf>
 801090a:	2300      	movs	r3, #0
 801090c:	e0a9      	b.n	8010a62 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010910:	2b00      	cmp	r3, #0
 8010912:	d108      	bne.n	8010926 <netif_add+0x3e>
 8010914:	4b55      	ldr	r3, [pc, #340]	@ (8010a6c <netif_add+0x184>)
 8010916:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801091a:	4957      	ldr	r1, [pc, #348]	@ (8010a78 <netif_add+0x190>)
 801091c:	4855      	ldr	r0, [pc, #340]	@ (8010a74 <netif_add+0x18c>)
 801091e:	f00d ff7b 	bl	801e818 <iprintf>
 8010922:	2300      	movs	r3, #0
 8010924:	e09d      	b.n	8010a62 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d101      	bne.n	8010930 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801092c:	4b53      	ldr	r3, [pc, #332]	@ (8010a7c <netif_add+0x194>)
 801092e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010936:	4b51      	ldr	r3, [pc, #324]	@ (8010a7c <netif_add+0x194>)
 8010938:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d101      	bne.n	8010944 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010940:	4b4e      	ldr	r3, [pc, #312]	@ (8010a7c <netif_add+0x194>)
 8010942:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2200      	movs	r2, #0
 8010948:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2200      	movs	r2, #0
 801094e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2200      	movs	r2, #0
 8010954:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	4a49      	ldr	r2, [pc, #292]	@ (8010a80 <netif_add+0x198>)
 801095a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2200      	movs	r2, #0
 8010960:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2200      	movs	r2, #0
 8010966:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	3324      	adds	r3, #36	@ 0x24
 801096e:	2204      	movs	r2, #4
 8010970:	2100      	movs	r1, #0
 8010972:	4618      	mov	r0, r3
 8010974:	f00d ffef 	bl	801e956 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2200      	movs	r2, #0
 801097c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	6a3a      	ldr	r2, [r7, #32]
 8010982:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010984:	4b3f      	ldr	r3, [pc, #252]	@ (8010a84 <netif_add+0x19c>)
 8010986:	781a      	ldrb	r2, [r3, #0]
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010992:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	687a      	ldr	r2, [r7, #4]
 8010998:	68b9      	ldr	r1, [r7, #8]
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f000 f914 	bl	8010bc8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80109a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	4798      	blx	r3
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d001      	beq.n	80109b0 <netif_add+0xc8>
    return NULL;
 80109ac:	2300      	movs	r3, #0
 80109ae:	e058      	b.n	8010a62 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80109b6:	2bff      	cmp	r3, #255	@ 0xff
 80109b8:	d103      	bne.n	80109c2 <netif_add+0xda>
        netif->num = 0;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2200      	movs	r2, #0
 80109be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80109c6:	4b30      	ldr	r3, [pc, #192]	@ (8010a88 <netif_add+0x1a0>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	617b      	str	r3, [r7, #20]
 80109cc:	e02b      	b.n	8010a26 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80109ce:	697a      	ldr	r2, [r7, #20]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d106      	bne.n	80109e4 <netif_add+0xfc>
 80109d6:	4b25      	ldr	r3, [pc, #148]	@ (8010a6c <netif_add+0x184>)
 80109d8:	f240 128b 	movw	r2, #395	@ 0x18b
 80109dc:	492b      	ldr	r1, [pc, #172]	@ (8010a8c <netif_add+0x1a4>)
 80109de:	4825      	ldr	r0, [pc, #148]	@ (8010a74 <netif_add+0x18c>)
 80109e0:	f00d ff1a 	bl	801e818 <iprintf>
        num_netifs++;
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	3301      	adds	r3, #1
 80109e8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	2bff      	cmp	r3, #255	@ 0xff
 80109ee:	dd06      	ble.n	80109fe <netif_add+0x116>
 80109f0:	4b1e      	ldr	r3, [pc, #120]	@ (8010a6c <netif_add+0x184>)
 80109f2:	f240 128d 	movw	r2, #397	@ 0x18d
 80109f6:	4926      	ldr	r1, [pc, #152]	@ (8010a90 <netif_add+0x1a8>)
 80109f8:	481e      	ldr	r0, [pc, #120]	@ (8010a74 <netif_add+0x18c>)
 80109fa:	f00d ff0d 	bl	801e818 <iprintf>
        if (netif2->num == netif->num) {
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d108      	bne.n	8010a20 <netif_add+0x138>
          netif->num++;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010a14:	3301      	adds	r3, #1
 8010a16:	b2da      	uxtb	r2, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8010a1e:	e005      	b.n	8010a2c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	617b      	str	r3, [r7, #20]
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1d0      	bne.n	80109ce <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d1be      	bne.n	80109b0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010a38:	2bfe      	cmp	r3, #254	@ 0xfe
 8010a3a:	d103      	bne.n	8010a44 <netif_add+0x15c>
    netif_num = 0;
 8010a3c:	4b11      	ldr	r3, [pc, #68]	@ (8010a84 <netif_add+0x19c>)
 8010a3e:	2200      	movs	r2, #0
 8010a40:	701a      	strb	r2, [r3, #0]
 8010a42:	e006      	b.n	8010a52 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	b2da      	uxtb	r2, r3
 8010a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010a84 <netif_add+0x19c>)
 8010a50:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010a52:	4b0d      	ldr	r3, [pc, #52]	@ (8010a88 <netif_add+0x1a0>)
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8010a88 <netif_add+0x1a0>)
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010a60:	68fb      	ldr	r3, [r7, #12]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3718      	adds	r7, #24
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	08023578 	.word	0x08023578
 8010a70:	0802360c 	.word	0x0802360c
 8010a74:	080235c8 	.word	0x080235c8
 8010a78:	08023628 	.word	0x08023628
 8010a7c:	08026270 	.word	0x08026270
 8010a80:	08010eab 	.word	0x08010eab
 8010a84:	2000f480 	.word	0x2000f480
 8010a88:	2000f478 	.word	0x2000f478
 8010a8c:	0802364c 	.word	0x0802364c
 8010a90:	08023660 	.word	0x08023660

08010a94 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010a9e:	6839      	ldr	r1, [r7, #0]
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f002 ffa7 	bl	80139f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010aa6:	6839      	ldr	r1, [r7, #0]
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f008 f8d3 	bl	8018c54 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010aae:	bf00      	nop
 8010ab0:	3708      	adds	r7, #8
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
	...

08010ab8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d106      	bne.n	8010ad8 <netif_do_set_ipaddr+0x20>
 8010aca:	4b1d      	ldr	r3, [pc, #116]	@ (8010b40 <netif_do_set_ipaddr+0x88>)
 8010acc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8010ad0:	491c      	ldr	r1, [pc, #112]	@ (8010b44 <netif_do_set_ipaddr+0x8c>)
 8010ad2:	481d      	ldr	r0, [pc, #116]	@ (8010b48 <netif_do_set_ipaddr+0x90>)
 8010ad4:	f00d fea0 	bl	801e818 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d106      	bne.n	8010aec <netif_do_set_ipaddr+0x34>
 8010ade:	4b18      	ldr	r3, [pc, #96]	@ (8010b40 <netif_do_set_ipaddr+0x88>)
 8010ae0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8010ae4:	4917      	ldr	r1, [pc, #92]	@ (8010b44 <netif_do_set_ipaddr+0x8c>)
 8010ae6:	4818      	ldr	r0, [pc, #96]	@ (8010b48 <netif_do_set_ipaddr+0x90>)
 8010ae8:	f00d fe96 	bl	801e818 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	3304      	adds	r3, #4
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d01c      	beq.n	8010b34 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	3304      	adds	r3, #4
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010b0a:	f107 0314 	add.w	r3, r7, #20
 8010b0e:	4619      	mov	r1, r3
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f7ff ffbf 	bl	8010a94 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d002      	beq.n	8010b22 <netif_do_set_ipaddr+0x6a>
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	e000      	b.n	8010b24 <netif_do_set_ipaddr+0x6c>
 8010b22:	2300      	movs	r3, #0
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010b28:	2101      	movs	r1, #1
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	f000 f8d2 	bl	8010cd4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010b30:	2301      	movs	r3, #1
 8010b32:	e000      	b.n	8010b36 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3718      	adds	r7, #24
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	08023578 	.word	0x08023578
 8010b44:	08023690 	.word	0x08023690
 8010b48:	080235c8 	.word	0x080235c8

08010b4c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	3308      	adds	r3, #8
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d00a      	beq.n	8010b7c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d002      	beq.n	8010b72 <netif_do_set_netmask+0x26>
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	e000      	b.n	8010b74 <netif_do_set_netmask+0x28>
 8010b72:	2300      	movs	r3, #0
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e000      	b.n	8010b7e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010b8a:	b480      	push	{r7}
 8010b8c:	b085      	sub	sp, #20
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	60f8      	str	r0, [r7, #12]
 8010b92:	60b9      	str	r1, [r7, #8]
 8010b94:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	330c      	adds	r3, #12
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d00a      	beq.n	8010bba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d002      	beq.n	8010bb0 <netif_do_set_gw+0x26>
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	e000      	b.n	8010bb2 <netif_do_set_gw+0x28>
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	68fa      	ldr	r2, [r7, #12]
 8010bb4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e000      	b.n	8010bbc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010bba:	2300      	movs	r3, #0
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3714      	adds	r7, #20
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b088      	sub	sp, #32
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	607a      	str	r2, [r7, #4]
 8010bd4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d101      	bne.n	8010be8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010be4:	4b1c      	ldr	r3, [pc, #112]	@ (8010c58 <netif_set_addr+0x90>)
 8010be6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d101      	bne.n	8010bf2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010bee:	4b1a      	ldr	r3, [pc, #104]	@ (8010c58 <netif_set_addr+0x90>)
 8010bf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d101      	bne.n	8010bfc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010bf8:	4b17      	ldr	r3, [pc, #92]	@ (8010c58 <netif_set_addr+0x90>)
 8010bfa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d003      	beq.n	8010c0a <netif_set_addr+0x42>
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d101      	bne.n	8010c0e <netif_set_addr+0x46>
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e000      	b.n	8010c10 <netif_set_addr+0x48>
 8010c0e:	2300      	movs	r3, #0
 8010c10:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d006      	beq.n	8010c26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010c18:	f107 0310 	add.w	r3, r7, #16
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	68b9      	ldr	r1, [r7, #8]
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7ff ff49 	bl	8010ab8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010c26:	69fa      	ldr	r2, [r7, #28]
 8010c28:	6879      	ldr	r1, [r7, #4]
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f7ff ff8e 	bl	8010b4c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010c30:	69ba      	ldr	r2, [r7, #24]
 8010c32:	6839      	ldr	r1, [r7, #0]
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f7ff ffa8 	bl	8010b8a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d106      	bne.n	8010c4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010c40:	f107 0310 	add.w	r3, r7, #16
 8010c44:	461a      	mov	r2, r3
 8010c46:	68b9      	ldr	r1, [r7, #8]
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	f7ff ff35 	bl	8010ab8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010c4e:	bf00      	nop
 8010c50:	3720      	adds	r7, #32
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	08026270 	.word	0x08026270

08010c5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010c64:	4a04      	ldr	r2, [pc, #16]	@ (8010c78 <netif_set_default+0x1c>)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010c6a:	bf00      	nop
 8010c6c:	370c      	adds	r7, #12
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	2000f47c 	.word	0x2000f47c

08010c7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d107      	bne.n	8010c9a <netif_set_up+0x1e>
 8010c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8010cc8 <netif_set_up+0x4c>)
 8010c8c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010c90:	490e      	ldr	r1, [pc, #56]	@ (8010ccc <netif_set_up+0x50>)
 8010c92:	480f      	ldr	r0, [pc, #60]	@ (8010cd0 <netif_set_up+0x54>)
 8010c94:	f00d fdc0 	bl	801e818 <iprintf>
 8010c98:	e013      	b.n	8010cc2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010ca0:	f003 0301 	and.w	r3, r3, #1
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d10c      	bne.n	8010cc2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010cae:	f043 0301 	orr.w	r3, r3, #1
 8010cb2:	b2da      	uxtb	r2, r3
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010cba:	2103      	movs	r1, #3
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f000 f809 	bl	8010cd4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	08023578 	.word	0x08023578
 8010ccc:	08023700 	.word	0x08023700
 8010cd0:	080235c8 	.word	0x080235c8

08010cd4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d106      	bne.n	8010cf4 <netif_issue_reports+0x20>
 8010ce6:	4b18      	ldr	r3, [pc, #96]	@ (8010d48 <netif_issue_reports+0x74>)
 8010ce8:	f240 326d 	movw	r2, #877	@ 0x36d
 8010cec:	4917      	ldr	r1, [pc, #92]	@ (8010d4c <netif_issue_reports+0x78>)
 8010cee:	4818      	ldr	r0, [pc, #96]	@ (8010d50 <netif_issue_reports+0x7c>)
 8010cf0:	f00d fd92 	bl	801e818 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010cfa:	f003 0304 	and.w	r3, r3, #4
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d01e      	beq.n	8010d40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010d08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d017      	beq.n	8010d40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010d10:	78fb      	ldrb	r3, [r7, #3]
 8010d12:	f003 0301 	and.w	r3, r3, #1
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d013      	beq.n	8010d42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	3304      	adds	r3, #4
 8010d1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d00e      	beq.n	8010d42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010d2a:	f003 0308 	and.w	r3, r3, #8
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d007      	beq.n	8010d42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	3304      	adds	r3, #4
 8010d36:	4619      	mov	r1, r3
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f00a fdd5 	bl	801b8e8 <etharp_request>
 8010d3e:	e000      	b.n	8010d42 <netif_issue_reports+0x6e>
    return;
 8010d40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	08023578 	.word	0x08023578
 8010d4c:	0802371c 	.word	0x0802371c
 8010d50:	080235c8 	.word	0x080235c8

08010d54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d107      	bne.n	8010d72 <netif_set_down+0x1e>
 8010d62:	4b12      	ldr	r3, [pc, #72]	@ (8010dac <netif_set_down+0x58>)
 8010d64:	f240 329b 	movw	r2, #923	@ 0x39b
 8010d68:	4911      	ldr	r1, [pc, #68]	@ (8010db0 <netif_set_down+0x5c>)
 8010d6a:	4812      	ldr	r0, [pc, #72]	@ (8010db4 <netif_set_down+0x60>)
 8010d6c:	f00d fd54 	bl	801e818 <iprintf>
 8010d70:	e019      	b.n	8010da6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010d78:	f003 0301 	and.w	r3, r3, #1
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d012      	beq.n	8010da6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010d86:	f023 0301 	bic.w	r3, r3, #1
 8010d8a:	b2da      	uxtb	r2, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010d98:	f003 0308 	and.w	r3, r3, #8
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d002      	beq.n	8010da6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f00a f95b 	bl	801b05c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	08023578 	.word	0x08023578
 8010db0:	08023740 	.word	0x08023740
 8010db4:	080235c8 	.word	0x080235c8

08010db8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d107      	bne.n	8010dd6 <netif_set_link_up+0x1e>
 8010dc6:	4b15      	ldr	r3, [pc, #84]	@ (8010e1c <netif_set_link_up+0x64>)
 8010dc8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8010dcc:	4914      	ldr	r1, [pc, #80]	@ (8010e20 <netif_set_link_up+0x68>)
 8010dce:	4815      	ldr	r0, [pc, #84]	@ (8010e24 <netif_set_link_up+0x6c>)
 8010dd0:	f00d fd22 	bl	801e818 <iprintf>
 8010dd4:	e01e      	b.n	8010e14 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010ddc:	f003 0304 	and.w	r3, r3, #4
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d117      	bne.n	8010e14 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010dea:	f043 0304 	orr.w	r3, r3, #4
 8010dee:	b2da      	uxtb	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f008 fb76 	bl	80194e8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010dfc:	2103      	movs	r1, #3
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7ff ff68 	bl	8010cd4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	69db      	ldr	r3, [r3, #28]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d003      	beq.n	8010e14 <netif_set_link_up+0x5c>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	69db      	ldr	r3, [r3, #28]
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010e14:	3708      	adds	r7, #8
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08023578 	.word	0x08023578
 8010e20:	08023760 	.word	0x08023760
 8010e24:	080235c8 	.word	0x080235c8

08010e28 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d107      	bne.n	8010e46 <netif_set_link_down+0x1e>
 8010e36:	4b11      	ldr	r3, [pc, #68]	@ (8010e7c <netif_set_link_down+0x54>)
 8010e38:	f240 4206 	movw	r2, #1030	@ 0x406
 8010e3c:	4910      	ldr	r1, [pc, #64]	@ (8010e80 <netif_set_link_down+0x58>)
 8010e3e:	4811      	ldr	r0, [pc, #68]	@ (8010e84 <netif_set_link_down+0x5c>)
 8010e40:	f00d fcea 	bl	801e818 <iprintf>
 8010e44:	e017      	b.n	8010e76 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010e4c:	f003 0304 	and.w	r3, r3, #4
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d010      	beq.n	8010e76 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010e5a:	f023 0304 	bic.w	r3, r3, #4
 8010e5e:	b2da      	uxtb	r2, r3
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	69db      	ldr	r3, [r3, #28]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d003      	beq.n	8010e76 <netif_set_link_down+0x4e>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	69db      	ldr	r3, [r3, #28]
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	08023578 	.word	0x08023578
 8010e80:	08023784 	.word	0x08023784
 8010e84:	080235c8 	.word	0x080235c8

08010e88 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b083      	sub	sp, #12
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d002      	beq.n	8010e9e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	683a      	ldr	r2, [r7, #0]
 8010e9c:	61da      	str	r2, [r3, #28]
  }
}
 8010e9e:	bf00      	nop
 8010ea0:	370c      	adds	r7, #12
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr

08010eaa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010eaa:	b480      	push	{r7}
 8010eac:	b085      	sub	sp, #20
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	60f8      	str	r0, [r7, #12]
 8010eb2:	60b9      	str	r1, [r7, #8]
 8010eb4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010eb6:	f06f 030b 	mvn.w	r3, #11
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3714      	adds	r7, #20
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr
	...

08010ec8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b085      	sub	sp, #20
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	4603      	mov	r3, r0
 8010ed0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010ed2:	79fb      	ldrb	r3, [r7, #7]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d013      	beq.n	8010f00 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8010f10 <netif_get_by_index+0x48>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	60fb      	str	r3, [r7, #12]
 8010ede:	e00c      	b.n	8010efa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	79fa      	ldrb	r2, [r7, #7]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d101      	bne.n	8010ef4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	e006      	b.n	8010f02 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	60fb      	str	r3, [r7, #12]
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d1ef      	bne.n	8010ee0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010f00:	2300      	movs	r3, #0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3714      	adds	r7, #20
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	2000f478 	.word	0x2000f478

08010f14 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010f1a:	f00c fb51 	bl	801d5c0 <sys_arch_protect>
 8010f1e:	6038      	str	r0, [r7, #0]
 8010f20:	4b0d      	ldr	r3, [pc, #52]	@ (8010f58 <pbuf_free_ooseq+0x44>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	701a      	strb	r2, [r3, #0]
 8010f26:	6838      	ldr	r0, [r7, #0]
 8010f28:	f00c fb58 	bl	801d5dc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8010f5c <pbuf_free_ooseq+0x48>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	607b      	str	r3, [r7, #4]
 8010f32:	e00a      	b.n	8010f4a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d003      	beq.n	8010f44 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f002 fd97 	bl	8013a70 <tcp_free_ooseq>
      return;
 8010f42:	e005      	b.n	8010f50 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	607b      	str	r3, [r7, #4]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d1f1      	bne.n	8010f34 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	2000f481 	.word	0x2000f481
 8010f5c:	2000f490 	.word	0x2000f490

08010f60 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010f68:	f7ff ffd4 	bl	8010f14 <pbuf_free_ooseq>
}
 8010f6c:	bf00      	nop
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010f7a:	f00c fb21 	bl	801d5c0 <sys_arch_protect>
 8010f7e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010f80:	4b0f      	ldr	r3, [pc, #60]	@ (8010fc0 <pbuf_pool_is_empty+0x4c>)
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010f86:	4b0e      	ldr	r3, [pc, #56]	@ (8010fc0 <pbuf_pool_is_empty+0x4c>)
 8010f88:	2201      	movs	r2, #1
 8010f8a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f00c fb25 	bl	801d5dc <sys_arch_unprotect>

  if (!queued) {
 8010f92:	78fb      	ldrb	r3, [r7, #3]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d10f      	bne.n	8010fb8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010f98:	2100      	movs	r1, #0
 8010f9a:	480a      	ldr	r0, [pc, #40]	@ (8010fc4 <pbuf_pool_is_empty+0x50>)
 8010f9c:	f7fe fb96 	bl	800f6cc <tcpip_try_callback>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d008      	beq.n	8010fb8 <pbuf_pool_is_empty+0x44>
 8010fa6:	f00c fb0b 	bl	801d5c0 <sys_arch_protect>
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	4b04      	ldr	r3, [pc, #16]	@ (8010fc0 <pbuf_pool_is_empty+0x4c>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	701a      	strb	r2, [r3, #0]
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f00c fb12 	bl	801d5dc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010fb8:	bf00      	nop
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	2000f481 	.word	0x2000f481
 8010fc4:	08010f61 	.word	0x08010f61

08010fc8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	4611      	mov	r1, r2
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	80fb      	strh	r3, [r7, #6]
 8010fda:	4613      	mov	r3, r2
 8010fdc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	68ba      	ldr	r2, [r7, #8]
 8010fe8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	88fa      	ldrh	r2, [r7, #6]
 8010fee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	88ba      	ldrh	r2, [r7, #4]
 8010ff4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010ff6:	8b3b      	ldrh	r3, [r7, #24]
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	7f3a      	ldrb	r2, [r7, #28]
 8011002:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2201      	movs	r2, #1
 8011008:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	2200      	movs	r2, #0
 801100e:	73da      	strb	r2, [r3, #15]
}
 8011010:	bf00      	nop
 8011012:	3714      	adds	r7, #20
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr

0801101c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b08c      	sub	sp, #48	@ 0x30
 8011020:	af02      	add	r7, sp, #8
 8011022:	4603      	mov	r3, r0
 8011024:	71fb      	strb	r3, [r7, #7]
 8011026:	460b      	mov	r3, r1
 8011028:	80bb      	strh	r3, [r7, #4]
 801102a:	4613      	mov	r3, r2
 801102c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801102e:	79fb      	ldrb	r3, [r7, #7]
 8011030:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011032:	887b      	ldrh	r3, [r7, #2]
 8011034:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011038:	d07f      	beq.n	801113a <pbuf_alloc+0x11e>
 801103a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801103e:	f300 80c8 	bgt.w	80111d2 <pbuf_alloc+0x1b6>
 8011042:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011046:	d010      	beq.n	801106a <pbuf_alloc+0x4e>
 8011048:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801104c:	f300 80c1 	bgt.w	80111d2 <pbuf_alloc+0x1b6>
 8011050:	2b01      	cmp	r3, #1
 8011052:	d002      	beq.n	801105a <pbuf_alloc+0x3e>
 8011054:	2b41      	cmp	r3, #65	@ 0x41
 8011056:	f040 80bc 	bne.w	80111d2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801105a:	887a      	ldrh	r2, [r7, #2]
 801105c:	88bb      	ldrh	r3, [r7, #4]
 801105e:	4619      	mov	r1, r3
 8011060:	2000      	movs	r0, #0
 8011062:	f000 f8d1 	bl	8011208 <pbuf_alloc_reference>
 8011066:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011068:	e0bd      	b.n	80111e6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801106a:	2300      	movs	r3, #0
 801106c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801106e:	2300      	movs	r3, #0
 8011070:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011072:	88bb      	ldrh	r3, [r7, #4]
 8011074:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011076:	200d      	movs	r0, #13
 8011078:	f7ff fb8e 	bl	8010798 <memp_malloc>
 801107c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d109      	bne.n	8011098 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011084:	f7ff ff76 	bl	8010f74 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108a:	2b00      	cmp	r3, #0
 801108c:	d002      	beq.n	8011094 <pbuf_alloc+0x78>
            pbuf_free(p);
 801108e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011090:	f000 fada 	bl	8011648 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011094:	2300      	movs	r3, #0
 8011096:	e0a7      	b.n	80111e8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011098:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801109a:	3303      	adds	r3, #3
 801109c:	b29b      	uxth	r3, r3
 801109e:	f023 0303 	bic.w	r3, r3, #3
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	8b7a      	ldrh	r2, [r7, #26]
 80110ac:	4293      	cmp	r3, r2
 80110ae:	bf28      	it	cs
 80110b0:	4613      	movcs	r3, r2
 80110b2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80110b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80110b6:	3310      	adds	r3, #16
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	4413      	add	r3, r2
 80110bc:	3303      	adds	r3, #3
 80110be:	f023 0303 	bic.w	r3, r3, #3
 80110c2:	4618      	mov	r0, r3
 80110c4:	89f9      	ldrh	r1, [r7, #14]
 80110c6:	8b7a      	ldrh	r2, [r7, #26]
 80110c8:	2300      	movs	r3, #0
 80110ca:	9301      	str	r3, [sp, #4]
 80110cc:	887b      	ldrh	r3, [r7, #2]
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	460b      	mov	r3, r1
 80110d2:	4601      	mov	r1, r0
 80110d4:	6938      	ldr	r0, [r7, #16]
 80110d6:	f7ff ff77 	bl	8010fc8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	f003 0303 	and.w	r3, r3, #3
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d006      	beq.n	80110f4 <pbuf_alloc+0xd8>
 80110e6:	4b42      	ldr	r3, [pc, #264]	@ (80111f0 <pbuf_alloc+0x1d4>)
 80110e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80110ec:	4941      	ldr	r1, [pc, #260]	@ (80111f4 <pbuf_alloc+0x1d8>)
 80110ee:	4842      	ldr	r0, [pc, #264]	@ (80111f8 <pbuf_alloc+0x1dc>)
 80110f0:	f00d fb92 	bl	801e818 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80110f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80110f6:	3303      	adds	r3, #3
 80110f8:	f023 0303 	bic.w	r3, r3, #3
 80110fc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8011100:	d106      	bne.n	8011110 <pbuf_alloc+0xf4>
 8011102:	4b3b      	ldr	r3, [pc, #236]	@ (80111f0 <pbuf_alloc+0x1d4>)
 8011104:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011108:	493c      	ldr	r1, [pc, #240]	@ (80111fc <pbuf_alloc+0x1e0>)
 801110a:	483b      	ldr	r0, [pc, #236]	@ (80111f8 <pbuf_alloc+0x1dc>)
 801110c:	f00d fb84 	bl	801e818 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011112:	2b00      	cmp	r3, #0
 8011114:	d102      	bne.n	801111c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	627b      	str	r3, [r7, #36]	@ 0x24
 801111a:	e002      	b.n	8011122 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	693a      	ldr	r2, [r7, #16]
 8011120:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011126:	8b7a      	ldrh	r2, [r7, #26]
 8011128:	89fb      	ldrh	r3, [r7, #14]
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801112e:	2300      	movs	r3, #0
 8011130:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8011132:	8b7b      	ldrh	r3, [r7, #26]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d19e      	bne.n	8011076 <pbuf_alloc+0x5a>
      break;
 8011138:	e055      	b.n	80111e6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801113a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801113c:	3303      	adds	r3, #3
 801113e:	b29b      	uxth	r3, r3
 8011140:	f023 0303 	bic.w	r3, r3, #3
 8011144:	b29a      	uxth	r2, r3
 8011146:	88bb      	ldrh	r3, [r7, #4]
 8011148:	3303      	adds	r3, #3
 801114a:	b29b      	uxth	r3, r3
 801114c:	f023 0303 	bic.w	r3, r3, #3
 8011150:	b29b      	uxth	r3, r3
 8011152:	4413      	add	r3, r2
 8011154:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011156:	8b3b      	ldrh	r3, [r7, #24]
 8011158:	3310      	adds	r3, #16
 801115a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801115c:	8b3a      	ldrh	r2, [r7, #24]
 801115e:	88bb      	ldrh	r3, [r7, #4]
 8011160:	3303      	adds	r3, #3
 8011162:	f023 0303 	bic.w	r3, r3, #3
 8011166:	429a      	cmp	r2, r3
 8011168:	d306      	bcc.n	8011178 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801116a:	8afa      	ldrh	r2, [r7, #22]
 801116c:	88bb      	ldrh	r3, [r7, #4]
 801116e:	3303      	adds	r3, #3
 8011170:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011174:	429a      	cmp	r2, r3
 8011176:	d201      	bcs.n	801117c <pbuf_alloc+0x160>
        return NULL;
 8011178:	2300      	movs	r3, #0
 801117a:	e035      	b.n	80111e8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801117c:	8afb      	ldrh	r3, [r7, #22]
 801117e:	4618      	mov	r0, r3
 8011180:	f7ff f966 	bl	8010450 <mem_malloc>
 8011184:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8011186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011188:	2b00      	cmp	r3, #0
 801118a:	d101      	bne.n	8011190 <pbuf_alloc+0x174>
        return NULL;
 801118c:	2300      	movs	r3, #0
 801118e:	e02b      	b.n	80111e8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011190:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011192:	3310      	adds	r3, #16
 8011194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011196:	4413      	add	r3, r2
 8011198:	3303      	adds	r3, #3
 801119a:	f023 0303 	bic.w	r3, r3, #3
 801119e:	4618      	mov	r0, r3
 80111a0:	88b9      	ldrh	r1, [r7, #4]
 80111a2:	88ba      	ldrh	r2, [r7, #4]
 80111a4:	2300      	movs	r3, #0
 80111a6:	9301      	str	r3, [sp, #4]
 80111a8:	887b      	ldrh	r3, [r7, #2]
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	460b      	mov	r3, r1
 80111ae:	4601      	mov	r1, r0
 80111b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80111b2:	f7ff ff09 	bl	8010fc8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80111b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	f003 0303 	and.w	r3, r3, #3
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d010      	beq.n	80111e4 <pbuf_alloc+0x1c8>
 80111c2:	4b0b      	ldr	r3, [pc, #44]	@ (80111f0 <pbuf_alloc+0x1d4>)
 80111c4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80111c8:	490d      	ldr	r1, [pc, #52]	@ (8011200 <pbuf_alloc+0x1e4>)
 80111ca:	480b      	ldr	r0, [pc, #44]	@ (80111f8 <pbuf_alloc+0x1dc>)
 80111cc:	f00d fb24 	bl	801e818 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80111d0:	e008      	b.n	80111e4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80111d2:	4b07      	ldr	r3, [pc, #28]	@ (80111f0 <pbuf_alloc+0x1d4>)
 80111d4:	f240 1227 	movw	r2, #295	@ 0x127
 80111d8:	490a      	ldr	r1, [pc, #40]	@ (8011204 <pbuf_alloc+0x1e8>)
 80111da:	4807      	ldr	r0, [pc, #28]	@ (80111f8 <pbuf_alloc+0x1dc>)
 80111dc:	f00d fb1c 	bl	801e818 <iprintf>
      return NULL;
 80111e0:	2300      	movs	r3, #0
 80111e2:	e001      	b.n	80111e8 <pbuf_alloc+0x1cc>
      break;
 80111e4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80111e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3728      	adds	r7, #40	@ 0x28
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	080237a8 	.word	0x080237a8
 80111f4:	080237d8 	.word	0x080237d8
 80111f8:	08023808 	.word	0x08023808
 80111fc:	08023830 	.word	0x08023830
 8011200:	08023864 	.word	0x08023864
 8011204:	08023890 	.word	0x08023890

08011208 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b086      	sub	sp, #24
 801120c:	af02      	add	r7, sp, #8
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	460b      	mov	r3, r1
 8011212:	807b      	strh	r3, [r7, #2]
 8011214:	4613      	mov	r3, r2
 8011216:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011218:	883b      	ldrh	r3, [r7, #0]
 801121a:	2b41      	cmp	r3, #65	@ 0x41
 801121c:	d009      	beq.n	8011232 <pbuf_alloc_reference+0x2a>
 801121e:	883b      	ldrh	r3, [r7, #0]
 8011220:	2b01      	cmp	r3, #1
 8011222:	d006      	beq.n	8011232 <pbuf_alloc_reference+0x2a>
 8011224:	4b0f      	ldr	r3, [pc, #60]	@ (8011264 <pbuf_alloc_reference+0x5c>)
 8011226:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801122a:	490f      	ldr	r1, [pc, #60]	@ (8011268 <pbuf_alloc_reference+0x60>)
 801122c:	480f      	ldr	r0, [pc, #60]	@ (801126c <pbuf_alloc_reference+0x64>)
 801122e:	f00d faf3 	bl	801e818 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011232:	200c      	movs	r0, #12
 8011234:	f7ff fab0 	bl	8010798 <memp_malloc>
 8011238:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d101      	bne.n	8011244 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011240:	2300      	movs	r3, #0
 8011242:	e00b      	b.n	801125c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011244:	8879      	ldrh	r1, [r7, #2]
 8011246:	887a      	ldrh	r2, [r7, #2]
 8011248:	2300      	movs	r3, #0
 801124a:	9301      	str	r3, [sp, #4]
 801124c:	883b      	ldrh	r3, [r7, #0]
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	460b      	mov	r3, r1
 8011252:	6879      	ldr	r1, [r7, #4]
 8011254:	68f8      	ldr	r0, [r7, #12]
 8011256:	f7ff feb7 	bl	8010fc8 <pbuf_init_alloced_pbuf>
  return p;
 801125a:	68fb      	ldr	r3, [r7, #12]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3710      	adds	r7, #16
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	080237a8 	.word	0x080237a8
 8011268:	080238ac 	.word	0x080238ac
 801126c:	08023808 	.word	0x08023808

08011270 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b088      	sub	sp, #32
 8011274:	af02      	add	r7, sp, #8
 8011276:	607b      	str	r3, [r7, #4]
 8011278:	4603      	mov	r3, r0
 801127a:	73fb      	strb	r3, [r7, #15]
 801127c:	460b      	mov	r3, r1
 801127e:	81bb      	strh	r3, [r7, #12]
 8011280:	4613      	mov	r3, r2
 8011282:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011284:	7bfb      	ldrb	r3, [r7, #15]
 8011286:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011288:	8a7b      	ldrh	r3, [r7, #18]
 801128a:	3303      	adds	r3, #3
 801128c:	f023 0203 	bic.w	r2, r3, #3
 8011290:	89bb      	ldrh	r3, [r7, #12]
 8011292:	441a      	add	r2, r3
 8011294:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011296:	429a      	cmp	r2, r3
 8011298:	d901      	bls.n	801129e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801129a:	2300      	movs	r3, #0
 801129c:	e018      	b.n	80112d0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801129e:	6a3b      	ldr	r3, [r7, #32]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d007      	beq.n	80112b4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80112a4:	8a7b      	ldrh	r3, [r7, #18]
 80112a6:	3303      	adds	r3, #3
 80112a8:	f023 0303 	bic.w	r3, r3, #3
 80112ac:	6a3a      	ldr	r2, [r7, #32]
 80112ae:	4413      	add	r3, r2
 80112b0:	617b      	str	r3, [r7, #20]
 80112b2:	e001      	b.n	80112b8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80112b4:	2300      	movs	r3, #0
 80112b6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	89b9      	ldrh	r1, [r7, #12]
 80112bc:	89ba      	ldrh	r2, [r7, #12]
 80112be:	2302      	movs	r3, #2
 80112c0:	9301      	str	r3, [sp, #4]
 80112c2:	897b      	ldrh	r3, [r7, #10]
 80112c4:	9300      	str	r3, [sp, #0]
 80112c6:	460b      	mov	r3, r1
 80112c8:	6979      	ldr	r1, [r7, #20]
 80112ca:	f7ff fe7d 	bl	8010fc8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80112ce:	687b      	ldr	r3, [r7, #4]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3718      	adds	r7, #24
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	460b      	mov	r3, r1
 80112e2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d106      	bne.n	80112f8 <pbuf_realloc+0x20>
 80112ea:	4b3a      	ldr	r3, [pc, #232]	@ (80113d4 <pbuf_realloc+0xfc>)
 80112ec:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80112f0:	4939      	ldr	r1, [pc, #228]	@ (80113d8 <pbuf_realloc+0x100>)
 80112f2:	483a      	ldr	r0, [pc, #232]	@ (80113dc <pbuf_realloc+0x104>)
 80112f4:	f00d fa90 	bl	801e818 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	891b      	ldrh	r3, [r3, #8]
 80112fc:	887a      	ldrh	r2, [r7, #2]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d263      	bcs.n	80113ca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	891a      	ldrh	r2, [r3, #8]
 8011306:	887b      	ldrh	r3, [r7, #2]
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801130c:	887b      	ldrh	r3, [r7, #2]
 801130e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011314:	e018      	b.n	8011348 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	895b      	ldrh	r3, [r3, #10]
 801131a:	897a      	ldrh	r2, [r7, #10]
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	891a      	ldrh	r2, [r3, #8]
 8011324:	893b      	ldrh	r3, [r7, #8]
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	b29a      	uxth	r2, r3
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d106      	bne.n	8011348 <pbuf_realloc+0x70>
 801133a:	4b26      	ldr	r3, [pc, #152]	@ (80113d4 <pbuf_realloc+0xfc>)
 801133c:	f240 12af 	movw	r2, #431	@ 0x1af
 8011340:	4927      	ldr	r1, [pc, #156]	@ (80113e0 <pbuf_realloc+0x108>)
 8011342:	4826      	ldr	r0, [pc, #152]	@ (80113dc <pbuf_realloc+0x104>)
 8011344:	f00d fa68 	bl	801e818 <iprintf>
  while (rem_len > q->len) {
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	895b      	ldrh	r3, [r3, #10]
 801134c:	897a      	ldrh	r2, [r7, #10]
 801134e:	429a      	cmp	r2, r3
 8011350:	d8e1      	bhi.n	8011316 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	7b1b      	ldrb	r3, [r3, #12]
 8011356:	f003 030f 	and.w	r3, r3, #15
 801135a:	2b00      	cmp	r3, #0
 801135c:	d121      	bne.n	80113a2 <pbuf_realloc+0xca>
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	895b      	ldrh	r3, [r3, #10]
 8011362:	897a      	ldrh	r2, [r7, #10]
 8011364:	429a      	cmp	r2, r3
 8011366:	d01c      	beq.n	80113a2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	7b5b      	ldrb	r3, [r3, #13]
 801136c:	f003 0302 	and.w	r3, r3, #2
 8011370:	2b00      	cmp	r3, #0
 8011372:	d116      	bne.n	80113a2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	b29a      	uxth	r2, r3
 801137e:	897b      	ldrh	r3, [r7, #10]
 8011380:	4413      	add	r3, r2
 8011382:	b29b      	uxth	r3, r3
 8011384:	4619      	mov	r1, r3
 8011386:	68f8      	ldr	r0, [r7, #12]
 8011388:	f7fe ff58 	bl	801023c <mem_trim>
 801138c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d106      	bne.n	80113a2 <pbuf_realloc+0xca>
 8011394:	4b0f      	ldr	r3, [pc, #60]	@ (80113d4 <pbuf_realloc+0xfc>)
 8011396:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801139a:	4912      	ldr	r1, [pc, #72]	@ (80113e4 <pbuf_realloc+0x10c>)
 801139c:	480f      	ldr	r0, [pc, #60]	@ (80113dc <pbuf_realloc+0x104>)
 801139e:	f00d fa3b 	bl	801e818 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	897a      	ldrh	r2, [r7, #10]
 80113a6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	895a      	ldrh	r2, [r3, #10]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d004      	beq.n	80113c2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4618      	mov	r0, r3
 80113be:	f000 f943 	bl	8011648 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2200      	movs	r2, #0
 80113c6:	601a      	str	r2, [r3, #0]
 80113c8:	e000      	b.n	80113cc <pbuf_realloc+0xf4>
    return;
 80113ca:	bf00      	nop

}
 80113cc:	3710      	adds	r7, #16
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	080237a8 	.word	0x080237a8
 80113d8:	080238c0 	.word	0x080238c0
 80113dc:	08023808 	.word	0x08023808
 80113e0:	080238d8 	.word	0x080238d8
 80113e4:	080238f0 	.word	0x080238f0

080113e8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b086      	sub	sp, #24
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	4613      	mov	r3, r2
 80113f4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d106      	bne.n	801140a <pbuf_add_header_impl+0x22>
 80113fc:	4b2b      	ldr	r3, [pc, #172]	@ (80114ac <pbuf_add_header_impl+0xc4>)
 80113fe:	f240 12df 	movw	r2, #479	@ 0x1df
 8011402:	492b      	ldr	r1, [pc, #172]	@ (80114b0 <pbuf_add_header_impl+0xc8>)
 8011404:	482b      	ldr	r0, [pc, #172]	@ (80114b4 <pbuf_add_header_impl+0xcc>)
 8011406:	f00d fa07 	bl	801e818 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d003      	beq.n	8011418 <pbuf_add_header_impl+0x30>
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011416:	d301      	bcc.n	801141c <pbuf_add_header_impl+0x34>
    return 1;
 8011418:	2301      	movs	r3, #1
 801141a:	e043      	b.n	80114a4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d101      	bne.n	8011426 <pbuf_add_header_impl+0x3e>
    return 0;
 8011422:	2300      	movs	r3, #0
 8011424:	e03e      	b.n	80114a4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	891a      	ldrh	r2, [r3, #8]
 801142e:	8a7b      	ldrh	r3, [r7, #18]
 8011430:	4413      	add	r3, r2
 8011432:	b29b      	uxth	r3, r3
 8011434:	8a7a      	ldrh	r2, [r7, #18]
 8011436:	429a      	cmp	r2, r3
 8011438:	d901      	bls.n	801143e <pbuf_add_header_impl+0x56>
    return 1;
 801143a:	2301      	movs	r3, #1
 801143c:	e032      	b.n	80114a4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	7b1b      	ldrb	r3, [r3, #12]
 8011442:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011444:	8a3b      	ldrh	r3, [r7, #16]
 8011446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00c      	beq.n	8011468 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	685a      	ldr	r2, [r3, #4]
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	425b      	negs	r3, r3
 8011456:	4413      	add	r3, r2
 8011458:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	3310      	adds	r3, #16
 801145e:	697a      	ldr	r2, [r7, #20]
 8011460:	429a      	cmp	r2, r3
 8011462:	d20d      	bcs.n	8011480 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011464:	2301      	movs	r3, #1
 8011466:	e01d      	b.n	80114a4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011468:	79fb      	ldrb	r3, [r7, #7]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d006      	beq.n	801147c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	685a      	ldr	r2, [r3, #4]
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	425b      	negs	r3, r3
 8011476:	4413      	add	r3, r2
 8011478:	617b      	str	r3, [r7, #20]
 801147a:	e001      	b.n	8011480 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801147c:	2301      	movs	r3, #1
 801147e:	e011      	b.n	80114a4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	697a      	ldr	r2, [r7, #20]
 8011484:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	895a      	ldrh	r2, [r3, #10]
 801148a:	8a7b      	ldrh	r3, [r7, #18]
 801148c:	4413      	add	r3, r2
 801148e:	b29a      	uxth	r2, r3
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	891a      	ldrh	r2, [r3, #8]
 8011498:	8a7b      	ldrh	r3, [r7, #18]
 801149a:	4413      	add	r3, r2
 801149c:	b29a      	uxth	r2, r3
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	811a      	strh	r2, [r3, #8]


  return 0;
 80114a2:	2300      	movs	r3, #0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3718      	adds	r7, #24
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	080237a8 	.word	0x080237a8
 80114b0:	0802390c 	.word	0x0802390c
 80114b4:	08023808 	.word	0x08023808

080114b8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80114c2:	2200      	movs	r2, #0
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7ff ff8e 	bl	80113e8 <pbuf_add_header_impl>
 80114cc:	4603      	mov	r3, r0
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3708      	adds	r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
	...

080114d8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d106      	bne.n	80114f6 <pbuf_remove_header+0x1e>
 80114e8:	4b20      	ldr	r3, [pc, #128]	@ (801156c <pbuf_remove_header+0x94>)
 80114ea:	f240 224b 	movw	r2, #587	@ 0x24b
 80114ee:	4920      	ldr	r1, [pc, #128]	@ (8011570 <pbuf_remove_header+0x98>)
 80114f0:	4820      	ldr	r0, [pc, #128]	@ (8011574 <pbuf_remove_header+0x9c>)
 80114f2:	f00d f991 	bl	801e818 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d003      	beq.n	8011504 <pbuf_remove_header+0x2c>
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011502:	d301      	bcc.n	8011508 <pbuf_remove_header+0x30>
    return 1;
 8011504:	2301      	movs	r3, #1
 8011506:	e02c      	b.n	8011562 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d101      	bne.n	8011512 <pbuf_remove_header+0x3a>
    return 0;
 801150e:	2300      	movs	r3, #0
 8011510:	e027      	b.n	8011562 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	895b      	ldrh	r3, [r3, #10]
 801151a:	89fa      	ldrh	r2, [r7, #14]
 801151c:	429a      	cmp	r2, r3
 801151e:	d908      	bls.n	8011532 <pbuf_remove_header+0x5a>
 8011520:	4b12      	ldr	r3, [pc, #72]	@ (801156c <pbuf_remove_header+0x94>)
 8011522:	f240 2255 	movw	r2, #597	@ 0x255
 8011526:	4914      	ldr	r1, [pc, #80]	@ (8011578 <pbuf_remove_header+0xa0>)
 8011528:	4812      	ldr	r0, [pc, #72]	@ (8011574 <pbuf_remove_header+0x9c>)
 801152a:	f00d f975 	bl	801e818 <iprintf>
 801152e:	2301      	movs	r3, #1
 8011530:	e017      	b.n	8011562 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	441a      	add	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	895a      	ldrh	r2, [r3, #10]
 8011548:	89fb      	ldrh	r3, [r7, #14]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	b29a      	uxth	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	891a      	ldrh	r2, [r3, #8]
 8011556:	89fb      	ldrh	r3, [r7, #14]
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	b29a      	uxth	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	080237a8 	.word	0x080237a8
 8011570:	0802390c 	.word	0x0802390c
 8011574:	08023808 	.word	0x08023808
 8011578:	08023918 	.word	0x08023918

0801157c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	460b      	mov	r3, r1
 8011586:	807b      	strh	r3, [r7, #2]
 8011588:	4613      	mov	r3, r2
 801158a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801158c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011590:	2b00      	cmp	r3, #0
 8011592:	da08      	bge.n	80115a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011594:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011598:	425b      	negs	r3, r3
 801159a:	4619      	mov	r1, r3
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f7ff ff9b 	bl	80114d8 <pbuf_remove_header>
 80115a2:	4603      	mov	r3, r0
 80115a4:	e007      	b.n	80115b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80115a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80115aa:	787a      	ldrb	r2, [r7, #1]
 80115ac:	4619      	mov	r1, r3
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7ff ff1a 	bl	80113e8 <pbuf_add_header_impl>
 80115b4:	4603      	mov	r3, r0
  }
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	460b      	mov	r3, r1
 80115c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80115ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80115ce:	2201      	movs	r2, #1
 80115d0:	4619      	mov	r1, r3
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7ff ffd2 	bl	801157c <pbuf_header_impl>
 80115d8:	4603      	mov	r3, r0
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3708      	adds	r7, #8
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 80115e2:	b580      	push	{r7, lr}
 80115e4:	b086      	sub	sp, #24
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
 80115ea:	460b      	mov	r3, r1
 80115ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 80115f2:	887b      	ldrh	r3, [r7, #2]
 80115f4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80115f6:	e01c      	b.n	8011632 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	895b      	ldrh	r3, [r3, #10]
 80115fc:	8a7a      	ldrh	r2, [r7, #18]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d310      	bcc.n	8011624 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	895b      	ldrh	r3, [r3, #10]
 801160a:	8a7a      	ldrh	r2, [r7, #18]
 801160c:	1ad3      	subs	r3, r2, r3
 801160e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2200      	movs	r2, #0
 801161a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f000 f813 	bl	8011648 <pbuf_free>
 8011622:	e006      	b.n	8011632 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8011624:	8a7b      	ldrh	r3, [r7, #18]
 8011626:	4619      	mov	r1, r3
 8011628:	6978      	ldr	r0, [r7, #20]
 801162a:	f7ff ff55 	bl	80114d8 <pbuf_remove_header>
      free_left = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011632:	8a7b      	ldrh	r3, [r7, #18]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <pbuf_free_header+0x5c>
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d1dc      	bne.n	80115f8 <pbuf_free_header+0x16>
    }
  }
  return p;
 801163e:	697b      	ldr	r3, [r7, #20]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3718      	adds	r7, #24
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b088      	sub	sp, #32
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10b      	bne.n	801166e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d106      	bne.n	801166a <pbuf_free+0x22>
 801165c:	4b3b      	ldr	r3, [pc, #236]	@ (801174c <pbuf_free+0x104>)
 801165e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011662:	493b      	ldr	r1, [pc, #236]	@ (8011750 <pbuf_free+0x108>)
 8011664:	483b      	ldr	r0, [pc, #236]	@ (8011754 <pbuf_free+0x10c>)
 8011666:	f00d f8d7 	bl	801e818 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801166a:	2300      	movs	r3, #0
 801166c:	e069      	b.n	8011742 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801166e:	2300      	movs	r3, #0
 8011670:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011672:	e062      	b.n	801173a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011674:	f00b ffa4 	bl	801d5c0 <sys_arch_protect>
 8011678:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	7b9b      	ldrb	r3, [r3, #14]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d106      	bne.n	8011690 <pbuf_free+0x48>
 8011682:	4b32      	ldr	r3, [pc, #200]	@ (801174c <pbuf_free+0x104>)
 8011684:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8011688:	4933      	ldr	r1, [pc, #204]	@ (8011758 <pbuf_free+0x110>)
 801168a:	4832      	ldr	r0, [pc, #200]	@ (8011754 <pbuf_free+0x10c>)
 801168c:	f00d f8c4 	bl	801e818 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	7b9b      	ldrb	r3, [r3, #14]
 8011694:	3b01      	subs	r3, #1
 8011696:	b2da      	uxtb	r2, r3
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	739a      	strb	r2, [r3, #14]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	7b9b      	ldrb	r3, [r3, #14]
 80116a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80116a2:	69b8      	ldr	r0, [r7, #24]
 80116a4:	f00b ff9a 	bl	801d5dc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80116a8:	7dfb      	ldrb	r3, [r7, #23]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d143      	bne.n	8011736 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	7b1b      	ldrb	r3, [r3, #12]
 80116b8:	f003 030f 	and.w	r3, r3, #15
 80116bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	7b5b      	ldrb	r3, [r3, #13]
 80116c2:	f003 0302 	and.w	r3, r3, #2
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d011      	beq.n	80116ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	691b      	ldr	r3, [r3, #16]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d106      	bne.n	80116e4 <pbuf_free+0x9c>
 80116d6:	4b1d      	ldr	r3, [pc, #116]	@ (801174c <pbuf_free+0x104>)
 80116d8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80116dc:	491f      	ldr	r1, [pc, #124]	@ (801175c <pbuf_free+0x114>)
 80116de:	481d      	ldr	r0, [pc, #116]	@ (8011754 <pbuf_free+0x10c>)
 80116e0:	f00d f89a 	bl	801e818 <iprintf>
        pc->custom_free_function(p);
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	691b      	ldr	r3, [r3, #16]
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	4798      	blx	r3
 80116ec:	e01d      	b.n	801172a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80116ee:	7bfb      	ldrb	r3, [r7, #15]
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	d104      	bne.n	80116fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80116f4:	6879      	ldr	r1, [r7, #4]
 80116f6:	200d      	movs	r0, #13
 80116f8:	f7ff f8c4 	bl	8010884 <memp_free>
 80116fc:	e015      	b.n	801172a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80116fe:	7bfb      	ldrb	r3, [r7, #15]
 8011700:	2b01      	cmp	r3, #1
 8011702:	d104      	bne.n	801170e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011704:	6879      	ldr	r1, [r7, #4]
 8011706:	200c      	movs	r0, #12
 8011708:	f7ff f8bc 	bl	8010884 <memp_free>
 801170c:	e00d      	b.n	801172a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801170e:	7bfb      	ldrb	r3, [r7, #15]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d103      	bne.n	801171c <pbuf_free+0xd4>
          mem_free(p);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7fe fd01 	bl	801011c <mem_free>
 801171a:	e006      	b.n	801172a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801171c:	4b0b      	ldr	r3, [pc, #44]	@ (801174c <pbuf_free+0x104>)
 801171e:	f240 320f 	movw	r2, #783	@ 0x30f
 8011722:	490f      	ldr	r1, [pc, #60]	@ (8011760 <pbuf_free+0x118>)
 8011724:	480b      	ldr	r0, [pc, #44]	@ (8011754 <pbuf_free+0x10c>)
 8011726:	f00d f877 	bl	801e818 <iprintf>
        }
      }
      count++;
 801172a:	7ffb      	ldrb	r3, [r7, #31]
 801172c:	3301      	adds	r3, #1
 801172e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	607b      	str	r3, [r7, #4]
 8011734:	e001      	b.n	801173a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011736:	2300      	movs	r3, #0
 8011738:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d199      	bne.n	8011674 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011740:	7ffb      	ldrb	r3, [r7, #31]
}
 8011742:	4618      	mov	r0, r3
 8011744:	3720      	adds	r7, #32
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	080237a8 	.word	0x080237a8
 8011750:	0802390c 	.word	0x0802390c
 8011754:	08023808 	.word	0x08023808
 8011758:	08023938 	.word	0x08023938
 801175c:	08023950 	.word	0x08023950
 8011760:	08023974 	.word	0x08023974

08011764 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801176c:	2300      	movs	r3, #0
 801176e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011770:	e005      	b.n	801177e <pbuf_clen+0x1a>
    ++len;
 8011772:	89fb      	ldrh	r3, [r7, #14]
 8011774:	3301      	adds	r3, #1
 8011776:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1f6      	bne.n	8011772 <pbuf_clen+0xe>
  }
  return len;
 8011784:	89fb      	ldrh	r3, [r7, #14]
}
 8011786:	4618      	mov	r0, r3
 8011788:	3714      	adds	r7, #20
 801178a:	46bd      	mov	sp, r7
 801178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011790:	4770      	bx	lr
	...

08011794 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d016      	beq.n	80117d0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80117a2:	f00b ff0d 	bl	801d5c0 <sys_arch_protect>
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	7b9b      	ldrb	r3, [r3, #14]
 80117ac:	3301      	adds	r3, #1
 80117ae:	b2da      	uxtb	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	739a      	strb	r2, [r3, #14]
 80117b4:	68f8      	ldr	r0, [r7, #12]
 80117b6:	f00b ff11 	bl	801d5dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	7b9b      	ldrb	r3, [r3, #14]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d106      	bne.n	80117d0 <pbuf_ref+0x3c>
 80117c2:	4b05      	ldr	r3, [pc, #20]	@ (80117d8 <pbuf_ref+0x44>)
 80117c4:	f240 3242 	movw	r2, #834	@ 0x342
 80117c8:	4904      	ldr	r1, [pc, #16]	@ (80117dc <pbuf_ref+0x48>)
 80117ca:	4805      	ldr	r0, [pc, #20]	@ (80117e0 <pbuf_ref+0x4c>)
 80117cc:	f00d f824 	bl	801e818 <iprintf>
  }
}
 80117d0:	bf00      	nop
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	080237a8 	.word	0x080237a8
 80117dc:	08023988 	.word	0x08023988
 80117e0:	08023808 	.word	0x08023808

080117e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d002      	beq.n	80117fa <pbuf_cat+0x16>
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d107      	bne.n	801180a <pbuf_cat+0x26>
 80117fa:	4b20      	ldr	r3, [pc, #128]	@ (801187c <pbuf_cat+0x98>)
 80117fc:	f240 3259 	movw	r2, #857	@ 0x359
 8011800:	491f      	ldr	r1, [pc, #124]	@ (8011880 <pbuf_cat+0x9c>)
 8011802:	4820      	ldr	r0, [pc, #128]	@ (8011884 <pbuf_cat+0xa0>)
 8011804:	f00d f808 	bl	801e818 <iprintf>
 8011808:	e034      	b.n	8011874 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	60fb      	str	r3, [r7, #12]
 801180e:	e00a      	b.n	8011826 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	891a      	ldrh	r2, [r3, #8]
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	891b      	ldrh	r3, [r3, #8]
 8011818:	4413      	add	r3, r2
 801181a:	b29a      	uxth	r2, r3
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	60fb      	str	r3, [r7, #12]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1f0      	bne.n	8011810 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	891a      	ldrh	r2, [r3, #8]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	895b      	ldrh	r3, [r3, #10]
 8011836:	429a      	cmp	r2, r3
 8011838:	d006      	beq.n	8011848 <pbuf_cat+0x64>
 801183a:	4b10      	ldr	r3, [pc, #64]	@ (801187c <pbuf_cat+0x98>)
 801183c:	f240 3262 	movw	r2, #866	@ 0x362
 8011840:	4911      	ldr	r1, [pc, #68]	@ (8011888 <pbuf_cat+0xa4>)
 8011842:	4810      	ldr	r0, [pc, #64]	@ (8011884 <pbuf_cat+0xa0>)
 8011844:	f00c ffe8 	bl	801e818 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d006      	beq.n	801185e <pbuf_cat+0x7a>
 8011850:	4b0a      	ldr	r3, [pc, #40]	@ (801187c <pbuf_cat+0x98>)
 8011852:	f240 3263 	movw	r2, #867	@ 0x363
 8011856:	490d      	ldr	r1, [pc, #52]	@ (801188c <pbuf_cat+0xa8>)
 8011858:	480a      	ldr	r0, [pc, #40]	@ (8011884 <pbuf_cat+0xa0>)
 801185a:	f00c ffdd 	bl	801e818 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	891a      	ldrh	r2, [r3, #8]
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	891b      	ldrh	r3, [r3, #8]
 8011866:	4413      	add	r3, r2
 8011868:	b29a      	uxth	r2, r3
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	683a      	ldr	r2, [r7, #0]
 8011872:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011874:	3710      	adds	r7, #16
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	080237a8 	.word	0x080237a8
 8011880:	0802399c 	.word	0x0802399c
 8011884:	08023808 	.word	0x08023808
 8011888:	080239d4 	.word	0x080239d4
 801188c:	08023a04 	.word	0x08023a04

08011890 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801189a:	6839      	ldr	r1, [r7, #0]
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7ff ffa1 	bl	80117e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80118a2:	6838      	ldr	r0, [r7, #0]
 80118a4:	f7ff ff76 	bl	8011794 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b086      	sub	sp, #24
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80118ba:	2300      	movs	r3, #0
 80118bc:	617b      	str	r3, [r7, #20]
 80118be:	2300      	movs	r3, #0
 80118c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d008      	beq.n	80118da <pbuf_copy+0x2a>
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d005      	beq.n	80118da <pbuf_copy+0x2a>
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	891a      	ldrh	r2, [r3, #8]
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	891b      	ldrh	r3, [r3, #8]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d209      	bcs.n	80118ee <pbuf_copy+0x3e>
 80118da:	4b57      	ldr	r3, [pc, #348]	@ (8011a38 <pbuf_copy+0x188>)
 80118dc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80118e0:	4956      	ldr	r1, [pc, #344]	@ (8011a3c <pbuf_copy+0x18c>)
 80118e2:	4857      	ldr	r0, [pc, #348]	@ (8011a40 <pbuf_copy+0x190>)
 80118e4:	f00c ff98 	bl	801e818 <iprintf>
 80118e8:	f06f 030f 	mvn.w	r3, #15
 80118ec:	e09f      	b.n	8011a2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	895b      	ldrh	r3, [r3, #10]
 80118f2:	461a      	mov	r2, r3
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	1ad2      	subs	r2, r2, r3
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	895b      	ldrh	r3, [r3, #10]
 80118fc:	4619      	mov	r1, r3
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	1acb      	subs	r3, r1, r3
 8011902:	429a      	cmp	r2, r3
 8011904:	d306      	bcc.n	8011914 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	895b      	ldrh	r3, [r3, #10]
 801190a:	461a      	mov	r2, r3
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	1ad3      	subs	r3, r2, r3
 8011910:	60fb      	str	r3, [r7, #12]
 8011912:	e005      	b.n	8011920 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	895b      	ldrh	r3, [r3, #10]
 8011918:	461a      	mov	r2, r3
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	1ad3      	subs	r3, r2, r3
 801191e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	685a      	ldr	r2, [r3, #4]
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	18d0      	adds	r0, r2, r3
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	685a      	ldr	r2, [r3, #4]
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	4413      	add	r3, r2
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	4619      	mov	r1, r3
 8011934:	f00d f911 	bl	801eb5a <memcpy>
    offset_to += len;
 8011938:	697a      	ldr	r2, [r7, #20]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	4413      	add	r3, r2
 801193e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011940:	693a      	ldr	r2, [r7, #16]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	4413      	add	r3, r2
 8011946:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	895b      	ldrh	r3, [r3, #10]
 801194c:	461a      	mov	r2, r3
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	4293      	cmp	r3, r2
 8011952:	d906      	bls.n	8011962 <pbuf_copy+0xb2>
 8011954:	4b38      	ldr	r3, [pc, #224]	@ (8011a38 <pbuf_copy+0x188>)
 8011956:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801195a:	493a      	ldr	r1, [pc, #232]	@ (8011a44 <pbuf_copy+0x194>)
 801195c:	4838      	ldr	r0, [pc, #224]	@ (8011a40 <pbuf_copy+0x190>)
 801195e:	f00c ff5b 	bl	801e818 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	895b      	ldrh	r3, [r3, #10]
 8011966:	461a      	mov	r2, r3
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	4293      	cmp	r3, r2
 801196c:	d906      	bls.n	801197c <pbuf_copy+0xcc>
 801196e:	4b32      	ldr	r3, [pc, #200]	@ (8011a38 <pbuf_copy+0x188>)
 8011970:	f240 32da 	movw	r2, #986	@ 0x3da
 8011974:	4934      	ldr	r1, [pc, #208]	@ (8011a48 <pbuf_copy+0x198>)
 8011976:	4832      	ldr	r0, [pc, #200]	@ (8011a40 <pbuf_copy+0x190>)
 8011978:	f00c ff4e 	bl	801e818 <iprintf>
    if (offset_from >= p_from->len) {
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	895b      	ldrh	r3, [r3, #10]
 8011980:	461a      	mov	r2, r3
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	4293      	cmp	r3, r2
 8011986:	d304      	bcc.n	8011992 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011988:	2300      	movs	r3, #0
 801198a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	895b      	ldrh	r3, [r3, #10]
 8011996:	461a      	mov	r2, r3
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	4293      	cmp	r3, r2
 801199c:	d114      	bne.n	80119c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801199e:	2300      	movs	r3, #0
 80119a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d10c      	bne.n	80119c8 <pbuf_copy+0x118>
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d009      	beq.n	80119c8 <pbuf_copy+0x118>
 80119b4:	4b20      	ldr	r3, [pc, #128]	@ (8011a38 <pbuf_copy+0x188>)
 80119b6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80119ba:	4924      	ldr	r1, [pc, #144]	@ (8011a4c <pbuf_copy+0x19c>)
 80119bc:	4820      	ldr	r0, [pc, #128]	@ (8011a40 <pbuf_copy+0x190>)
 80119be:	f00c ff2b 	bl	801e818 <iprintf>
 80119c2:	f06f 030f 	mvn.w	r3, #15
 80119c6:	e032      	b.n	8011a2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d013      	beq.n	80119f6 <pbuf_copy+0x146>
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	895a      	ldrh	r2, [r3, #10]
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	891b      	ldrh	r3, [r3, #8]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d10d      	bne.n	80119f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d009      	beq.n	80119f6 <pbuf_copy+0x146>
 80119e2:	4b15      	ldr	r3, [pc, #84]	@ (8011a38 <pbuf_copy+0x188>)
 80119e4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80119e8:	4919      	ldr	r1, [pc, #100]	@ (8011a50 <pbuf_copy+0x1a0>)
 80119ea:	4815      	ldr	r0, [pc, #84]	@ (8011a40 <pbuf_copy+0x190>)
 80119ec:	f00c ff14 	bl	801e818 <iprintf>
 80119f0:	f06f 0305 	mvn.w	r3, #5
 80119f4:	e01b      	b.n	8011a2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d013      	beq.n	8011a24 <pbuf_copy+0x174>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	895a      	ldrh	r2, [r3, #10]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	891b      	ldrh	r3, [r3, #8]
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d10d      	bne.n	8011a24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d009      	beq.n	8011a24 <pbuf_copy+0x174>
 8011a10:	4b09      	ldr	r3, [pc, #36]	@ (8011a38 <pbuf_copy+0x188>)
 8011a12:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8011a16:	490e      	ldr	r1, [pc, #56]	@ (8011a50 <pbuf_copy+0x1a0>)
 8011a18:	4809      	ldr	r0, [pc, #36]	@ (8011a40 <pbuf_copy+0x190>)
 8011a1a:	f00c fefd 	bl	801e818 <iprintf>
 8011a1e:	f06f 0305 	mvn.w	r3, #5
 8011a22:	e004      	b.n	8011a2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	f47f af61 	bne.w	80118ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3718      	adds	r7, #24
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	080237a8 	.word	0x080237a8
 8011a3c:	08023a50 	.word	0x08023a50
 8011a40:	08023808 	.word	0x08023808
 8011a44:	08023a80 	.word	0x08023a80
 8011a48:	08023a98 	.word	0x08023a98
 8011a4c:	08023ab4 	.word	0x08023ab4
 8011a50:	08023ac4 	.word	0x08023ac4

08011a54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b088      	sub	sp, #32
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	4611      	mov	r1, r2
 8011a60:	461a      	mov	r2, r3
 8011a62:	460b      	mov	r3, r1
 8011a64:	80fb      	strh	r3, [r7, #6]
 8011a66:	4613      	mov	r3, r2
 8011a68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d108      	bne.n	8011a8a <pbuf_copy_partial+0x36>
 8011a78:	4b2b      	ldr	r3, [pc, #172]	@ (8011b28 <pbuf_copy_partial+0xd4>)
 8011a7a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8011a7e:	492b      	ldr	r1, [pc, #172]	@ (8011b2c <pbuf_copy_partial+0xd8>)
 8011a80:	482b      	ldr	r0, [pc, #172]	@ (8011b30 <pbuf_copy_partial+0xdc>)
 8011a82:	f00c fec9 	bl	801e818 <iprintf>
 8011a86:	2300      	movs	r3, #0
 8011a88:	e04a      	b.n	8011b20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d108      	bne.n	8011aa2 <pbuf_copy_partial+0x4e>
 8011a90:	4b25      	ldr	r3, [pc, #148]	@ (8011b28 <pbuf_copy_partial+0xd4>)
 8011a92:	f240 420b 	movw	r2, #1035	@ 0x40b
 8011a96:	4927      	ldr	r1, [pc, #156]	@ (8011b34 <pbuf_copy_partial+0xe0>)
 8011a98:	4825      	ldr	r0, [pc, #148]	@ (8011b30 <pbuf_copy_partial+0xdc>)
 8011a9a:	f00c febd 	bl	801e818 <iprintf>
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	e03e      	b.n	8011b20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	61fb      	str	r3, [r7, #28]
 8011aa6:	e034      	b.n	8011b12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011aa8:	88bb      	ldrh	r3, [r7, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00a      	beq.n	8011ac4 <pbuf_copy_partial+0x70>
 8011aae:	69fb      	ldr	r3, [r7, #28]
 8011ab0:	895b      	ldrh	r3, [r3, #10]
 8011ab2:	88ba      	ldrh	r2, [r7, #4]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d305      	bcc.n	8011ac4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	895b      	ldrh	r3, [r3, #10]
 8011abc:	88ba      	ldrh	r2, [r7, #4]
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	80bb      	strh	r3, [r7, #4]
 8011ac2:	e023      	b.n	8011b0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	895a      	ldrh	r2, [r3, #10]
 8011ac8:	88bb      	ldrh	r3, [r7, #4]
 8011aca:	1ad3      	subs	r3, r2, r3
 8011acc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011ace:	8b3a      	ldrh	r2, [r7, #24]
 8011ad0:	88fb      	ldrh	r3, [r7, #6]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d901      	bls.n	8011ada <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011ad6:	88fb      	ldrh	r3, [r7, #6]
 8011ad8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011ada:	8b7b      	ldrh	r3, [r7, #26]
 8011adc:	68ba      	ldr	r2, [r7, #8]
 8011ade:	18d0      	adds	r0, r2, r3
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	685a      	ldr	r2, [r3, #4]
 8011ae4:	88bb      	ldrh	r3, [r7, #4]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	8b3a      	ldrh	r2, [r7, #24]
 8011aea:	4619      	mov	r1, r3
 8011aec:	f00d f835 	bl	801eb5a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011af0:	8afa      	ldrh	r2, [r7, #22]
 8011af2:	8b3b      	ldrh	r3, [r7, #24]
 8011af4:	4413      	add	r3, r2
 8011af6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011af8:	8b7a      	ldrh	r2, [r7, #26]
 8011afa:	8b3b      	ldrh	r3, [r7, #24]
 8011afc:	4413      	add	r3, r2
 8011afe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011b00:	88fa      	ldrh	r2, [r7, #6]
 8011b02:	8b3b      	ldrh	r3, [r7, #24]
 8011b04:	1ad3      	subs	r3, r2, r3
 8011b06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	61fb      	str	r3, [r7, #28]
 8011b12:	88fb      	ldrh	r3, [r7, #6]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d002      	beq.n	8011b1e <pbuf_copy_partial+0xca>
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d1c4      	bne.n	8011aa8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011b1e:	8afb      	ldrh	r3, [r7, #22]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3720      	adds	r7, #32
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	080237a8 	.word	0x080237a8
 8011b2c:	08023af0 	.word	0x08023af0
 8011b30:	08023808 	.word	0x08023808
 8011b34:	08023b10 	.word	0x08023b10

08011b38 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b087      	sub	sp, #28
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	460b      	mov	r3, r1
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8011b46:	897b      	ldrh	r3, [r7, #10]
 8011b48:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8011b4e:	e007      	b.n	8011b60 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	895b      	ldrh	r3, [r3, #10]
 8011b54:	8afa      	ldrh	r2, [r7, #22]
 8011b56:	1ad3      	subs	r3, r2, r3
 8011b58:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d004      	beq.n	8011b70 <pbuf_skip_const+0x38>
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	895b      	ldrh	r3, [r3, #10]
 8011b6a:	8afa      	ldrh	r2, [r7, #22]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d2ef      	bcs.n	8011b50 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d002      	beq.n	8011b7c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	8afa      	ldrh	r2, [r7, #22]
 8011b7a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8011b7c:	693b      	ldr	r3, [r7, #16]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	371c      	adds	r7, #28
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr

08011b8a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b086      	sub	sp, #24
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	60f8      	str	r0, [r7, #12]
 8011b92:	460b      	mov	r3, r1
 8011b94:	607a      	str	r2, [r7, #4]
 8011b96:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011b98:	897b      	ldrh	r3, [r7, #10]
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	68f8      	ldr	r0, [r7, #12]
 8011ba0:	f7ff ffca 	bl	8011b38 <pbuf_skip_const>
 8011ba4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8011ba6:	697b      	ldr	r3, [r7, #20]
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3718      	adds	r7, #24
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b088      	sub	sp, #32
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	4613      	mov	r3, r2
 8011bbc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8011bbe:	88fb      	ldrh	r3, [r7, #6]
 8011bc0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d109      	bne.n	8011be0 <pbuf_take+0x30>
 8011bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8011cb8 <pbuf_take+0x108>)
 8011bce:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8011bd2:	493a      	ldr	r1, [pc, #232]	@ (8011cbc <pbuf_take+0x10c>)
 8011bd4:	483a      	ldr	r0, [pc, #232]	@ (8011cc0 <pbuf_take+0x110>)
 8011bd6:	f00c fe1f 	bl	801e818 <iprintf>
 8011bda:	f06f 030f 	mvn.w	r3, #15
 8011bde:	e067      	b.n	8011cb0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d109      	bne.n	8011bfa <pbuf_take+0x4a>
 8011be6:	4b34      	ldr	r3, [pc, #208]	@ (8011cb8 <pbuf_take+0x108>)
 8011be8:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8011bec:	4935      	ldr	r1, [pc, #212]	@ (8011cc4 <pbuf_take+0x114>)
 8011bee:	4834      	ldr	r0, [pc, #208]	@ (8011cc0 <pbuf_take+0x110>)
 8011bf0:	f00c fe12 	bl	801e818 <iprintf>
 8011bf4:	f06f 030f 	mvn.w	r3, #15
 8011bf8:	e05a      	b.n	8011cb0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	891b      	ldrh	r3, [r3, #8]
 8011bfe:	88fa      	ldrh	r2, [r7, #6]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d909      	bls.n	8011c18 <pbuf_take+0x68>
 8011c04:	4b2c      	ldr	r3, [pc, #176]	@ (8011cb8 <pbuf_take+0x108>)
 8011c06:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8011c0a:	492f      	ldr	r1, [pc, #188]	@ (8011cc8 <pbuf_take+0x118>)
 8011c0c:	482c      	ldr	r0, [pc, #176]	@ (8011cc0 <pbuf_take+0x110>)
 8011c0e:	f00c fe03 	bl	801e818 <iprintf>
 8011c12:	f04f 33ff 	mov.w	r3, #4294967295
 8011c16:	e04b      	b.n	8011cb0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d007      	beq.n	8011c2e <pbuf_take+0x7e>
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d004      	beq.n	8011c2e <pbuf_take+0x7e>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	891b      	ldrh	r3, [r3, #8]
 8011c28:	88fa      	ldrh	r2, [r7, #6]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d902      	bls.n	8011c34 <pbuf_take+0x84>
    return ERR_ARG;
 8011c2e:	f06f 030f 	mvn.w	r3, #15
 8011c32:	e03d      	b.n	8011cb0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	61fb      	str	r3, [r7, #28]
 8011c38:	e028      	b.n	8011c8c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d106      	bne.n	8011c4e <pbuf_take+0x9e>
 8011c40:	4b1d      	ldr	r3, [pc, #116]	@ (8011cb8 <pbuf_take+0x108>)
 8011c42:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8011c46:	4921      	ldr	r1, [pc, #132]	@ (8011ccc <pbuf_take+0x11c>)
 8011c48:	481d      	ldr	r0, [pc, #116]	@ (8011cc0 <pbuf_take+0x110>)
 8011c4a:	f00c fde5 	bl	801e818 <iprintf>
    buf_copy_len = total_copy_len;
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	895b      	ldrh	r3, [r3, #10]
 8011c56:	461a      	mov	r2, r3
 8011c58:	69bb      	ldr	r3, [r7, #24]
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d902      	bls.n	8011c64 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	895b      	ldrh	r3, [r3, #10]
 8011c62:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011c64:	69fb      	ldr	r3, [r7, #28]
 8011c66:	6858      	ldr	r0, [r3, #4]
 8011c68:	68ba      	ldr	r2, [r7, #8]
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	69ba      	ldr	r2, [r7, #24]
 8011c70:	4619      	mov	r1, r3
 8011c72:	f00c ff72 	bl	801eb5a <memcpy>
    total_copy_len -= buf_copy_len;
 8011c76:	697a      	ldr	r2, [r7, #20]
 8011c78:	69bb      	ldr	r3, [r7, #24]
 8011c7a:	1ad3      	subs	r3, r2, r3
 8011c7c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8011c7e:	693a      	ldr	r2, [r7, #16]
 8011c80:	69bb      	ldr	r3, [r7, #24]
 8011c82:	4413      	add	r3, r2
 8011c84:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	61fb      	str	r3, [r7, #28]
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d1d3      	bne.n	8011c3a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d103      	bne.n	8011ca0 <pbuf_take+0xf0>
 8011c98:	88fb      	ldrh	r3, [r7, #6]
 8011c9a:	693a      	ldr	r2, [r7, #16]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d006      	beq.n	8011cae <pbuf_take+0xfe>
 8011ca0:	4b05      	ldr	r3, [pc, #20]	@ (8011cb8 <pbuf_take+0x108>)
 8011ca2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8011ca6:	490a      	ldr	r1, [pc, #40]	@ (8011cd0 <pbuf_take+0x120>)
 8011ca8:	4805      	ldr	r0, [pc, #20]	@ (8011cc0 <pbuf_take+0x110>)
 8011caa:	f00c fdb5 	bl	801e818 <iprintf>
  return ERR_OK;
 8011cae:	2300      	movs	r3, #0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3720      	adds	r7, #32
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	080237a8 	.word	0x080237a8
 8011cbc:	08023b80 	.word	0x08023b80
 8011cc0:	08023808 	.word	0x08023808
 8011cc4:	08023b98 	.word	0x08023b98
 8011cc8:	08023bb4 	.word	0x08023bb4
 8011ccc:	08023bd4 	.word	0x08023bd4
 8011cd0:	08023bec 	.word	0x08023bec

08011cd4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b088      	sub	sp, #32
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	4611      	mov	r1, r2
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	460b      	mov	r3, r1
 8011ce4:	80fb      	strh	r3, [r7, #6]
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8011cea:	f107 0210 	add.w	r2, r7, #16
 8011cee:	88bb      	ldrh	r3, [r7, #4]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	68f8      	ldr	r0, [r7, #12]
 8011cf4:	f7ff ff49 	bl	8011b8a <pbuf_skip>
 8011cf8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8011cfa:	69fb      	ldr	r3, [r7, #28]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d047      	beq.n	8011d90 <pbuf_take_at+0xbc>
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	891b      	ldrh	r3, [r3, #8]
 8011d04:	461a      	mov	r2, r3
 8011d06:	8a3b      	ldrh	r3, [r7, #16]
 8011d08:	4619      	mov	r1, r3
 8011d0a:	88fb      	ldrh	r3, [r7, #6]
 8011d0c:	440b      	add	r3, r1
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	db3e      	blt.n	8011d90 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8011d12:	88fb      	ldrh	r3, [r7, #6]
 8011d14:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	895a      	ldrh	r2, [r3, #10]
 8011d1e:	8a3b      	ldrh	r3, [r7, #16]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d806      	bhi.n	8011d32 <pbuf_take_at+0x5e>
 8011d24:	4b1d      	ldr	r3, [pc, #116]	@ (8011d9c <pbuf_take_at+0xc8>)
 8011d26:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011d2a:	491d      	ldr	r1, [pc, #116]	@ (8011da0 <pbuf_take_at+0xcc>)
 8011d2c:	481d      	ldr	r0, [pc, #116]	@ (8011da4 <pbuf_take_at+0xd0>)
 8011d2e:	f00c fd73 	bl	801e818 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	895b      	ldrh	r3, [r3, #10]
 8011d36:	461a      	mov	r2, r3
 8011d38:	8a3b      	ldrh	r3, [r7, #16]
 8011d3a:	1ad2      	subs	r2, r2, r3
 8011d3c:	88fb      	ldrh	r3, [r7, #6]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	da05      	bge.n	8011d4e <pbuf_take_at+0x7a>
 8011d42:	69fb      	ldr	r3, [r7, #28]
 8011d44:	895a      	ldrh	r2, [r3, #10]
 8011d46:	8a3b      	ldrh	r3, [r7, #16]
 8011d48:	1ad3      	subs	r3, r2, r3
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	e000      	b.n	8011d50 <pbuf_take_at+0x7c>
 8011d4e:	88fb      	ldrh	r3, [r7, #6]
 8011d50:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	8a3a      	ldrh	r2, [r7, #16]
 8011d58:	4413      	add	r3, r2
 8011d5a:	8a7a      	ldrh	r2, [r7, #18]
 8011d5c:	68b9      	ldr	r1, [r7, #8]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f00c fefb 	bl	801eb5a <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8011d64:	8b7a      	ldrh	r2, [r7, #26]
 8011d66:	8a7b      	ldrh	r3, [r7, #18]
 8011d68:	1ad3      	subs	r3, r2, r3
 8011d6a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8011d6c:	8a7b      	ldrh	r3, [r7, #18]
 8011d6e:	697a      	ldr	r2, [r7, #20]
 8011d70:	4413      	add	r3, r2
 8011d72:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8011d74:	8b7b      	ldrh	r3, [r7, #26]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d008      	beq.n	8011d8c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	8b7a      	ldrh	r2, [r7, #26]
 8011d80:	6979      	ldr	r1, [r7, #20]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff ff14 	bl	8011bb0 <pbuf_take>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	e003      	b.n	8011d94 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	e001      	b.n	8011d94 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8011d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3720      	adds	r7, #32
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	080237a8 	.word	0x080237a8
 8011da0:	08023c04 	.word	0x08023c04
 8011da4:	08023808 	.word	0x08023808

08011da8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	4603      	mov	r3, r0
 8011db0:	603a      	str	r2, [r7, #0]
 8011db2:	71fb      	strb	r3, [r7, #7]
 8011db4:	460b      	mov	r3, r1
 8011db6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	8919      	ldrh	r1, [r3, #8]
 8011dbc:	88ba      	ldrh	r2, [r7, #4]
 8011dbe:	79fb      	ldrb	r3, [r7, #7]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff f92b 	bl	801101c <pbuf_alloc>
 8011dc6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d101      	bne.n	8011dd2 <pbuf_clone+0x2a>
    return NULL;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	e011      	b.n	8011df6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011dd2:	6839      	ldr	r1, [r7, #0]
 8011dd4:	68f8      	ldr	r0, [r7, #12]
 8011dd6:	f7ff fd6b 	bl	80118b0 <pbuf_copy>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011dde:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d006      	beq.n	8011df4 <pbuf_clone+0x4c>
 8011de6:	4b06      	ldr	r3, [pc, #24]	@ (8011e00 <pbuf_clone+0x58>)
 8011de8:	f240 5224 	movw	r2, #1316	@ 0x524
 8011dec:	4905      	ldr	r1, [pc, #20]	@ (8011e04 <pbuf_clone+0x5c>)
 8011dee:	4806      	ldr	r0, [pc, #24]	@ (8011e08 <pbuf_clone+0x60>)
 8011df0:	f00c fd12 	bl	801e818 <iprintf>
  return q;
 8011df4:	68fb      	ldr	r3, [r7, #12]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	080237a8 	.word	0x080237a8
 8011e04:	08023c1c 	.word	0x08023c1c
 8011e08:	08023808 	.word	0x08023808

08011e0c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	460b      	mov	r3, r1
 8011e16:	807b      	strh	r3, [r7, #2]
 8011e18:	4613      	mov	r3, r2
 8011e1a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8011e1c:	f107 020a 	add.w	r2, r7, #10
 8011e20:	887b      	ldrh	r3, [r7, #2]
 8011e22:	4619      	mov	r1, r3
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f7ff feb0 	bl	8011b8a <pbuf_skip>
 8011e2a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00a      	beq.n	8011e48 <pbuf_put_at+0x3c>
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	895a      	ldrh	r2, [r3, #10]
 8011e36:	897b      	ldrh	r3, [r7, #10]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d905      	bls.n	8011e48 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	897a      	ldrh	r2, [r7, #10]
 8011e42:	4413      	add	r3, r2
 8011e44:	787a      	ldrb	r2, [r7, #1]
 8011e46:	701a      	strb	r2, [r3, #0]
  }
}
 8011e48:	bf00      	nop
 8011e4a:	3710      	adds	r7, #16
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011e54:	f00b fbec 	bl	801d630 <rand>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011e66:	b29a      	uxth	r2, r3
 8011e68:	4b01      	ldr	r3, [pc, #4]	@ (8011e70 <tcp_init+0x20>)
 8011e6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011e6c:	bf00      	nop
 8011e6e:	bd80      	pop	{r7, pc}
 8011e70:	20000038 	.word	0x20000038

08011e74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	7d1b      	ldrb	r3, [r3, #20]
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	d105      	bne.n	8011e90 <tcp_free+0x1c>
 8011e84:	4b06      	ldr	r3, [pc, #24]	@ (8011ea0 <tcp_free+0x2c>)
 8011e86:	22d4      	movs	r2, #212	@ 0xd4
 8011e88:	4906      	ldr	r1, [pc, #24]	@ (8011ea4 <tcp_free+0x30>)
 8011e8a:	4807      	ldr	r0, [pc, #28]	@ (8011ea8 <tcp_free+0x34>)
 8011e8c:	f00c fcc4 	bl	801e818 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011e90:	6879      	ldr	r1, [r7, #4]
 8011e92:	2001      	movs	r0, #1
 8011e94:	f7fe fcf6 	bl	8010884 <memp_free>
}
 8011e98:	bf00      	nop
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	08023ca8 	.word	0x08023ca8
 8011ea4:	08023cd8 	.word	0x08023cd8
 8011ea8:	08023cec 	.word	0x08023cec

08011eac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	7d1b      	ldrb	r3, [r3, #20]
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d105      	bne.n	8011ec8 <tcp_free_listen+0x1c>
 8011ebc:	4b06      	ldr	r3, [pc, #24]	@ (8011ed8 <tcp_free_listen+0x2c>)
 8011ebe:	22df      	movs	r2, #223	@ 0xdf
 8011ec0:	4906      	ldr	r1, [pc, #24]	@ (8011edc <tcp_free_listen+0x30>)
 8011ec2:	4807      	ldr	r0, [pc, #28]	@ (8011ee0 <tcp_free_listen+0x34>)
 8011ec4:	f00c fca8 	bl	801e818 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011ec8:	6879      	ldr	r1, [r7, #4]
 8011eca:	2002      	movs	r0, #2
 8011ecc:	f7fe fcda 	bl	8010884 <memp_free>
}
 8011ed0:	bf00      	nop
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	08023ca8 	.word	0x08023ca8
 8011edc:	08023d14 	.word	0x08023d14
 8011ee0:	08023cec 	.word	0x08023cec

08011ee4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011ee8:	f001 f85e 	bl	8012fa8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011eec:	4b07      	ldr	r3, [pc, #28]	@ (8011f0c <tcp_tmr+0x28>)
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	b2da      	uxtb	r2, r3
 8011ef4:	4b05      	ldr	r3, [pc, #20]	@ (8011f0c <tcp_tmr+0x28>)
 8011ef6:	701a      	strb	r2, [r3, #0]
 8011ef8:	4b04      	ldr	r3, [pc, #16]	@ (8011f0c <tcp_tmr+0x28>)
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	f003 0301 	and.w	r3, r3, #1
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011f04:	f000 fd0e 	bl	8012924 <tcp_slowtmr>
  }
}
 8011f08:	bf00      	nop
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	2000f499 	.word	0x2000f499

08011f10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d105      	bne.n	8011f2c <tcp_remove_listener+0x1c>
 8011f20:	4b0d      	ldr	r3, [pc, #52]	@ (8011f58 <tcp_remove_listener+0x48>)
 8011f22:	22ff      	movs	r2, #255	@ 0xff
 8011f24:	490d      	ldr	r1, [pc, #52]	@ (8011f5c <tcp_remove_listener+0x4c>)
 8011f26:	480e      	ldr	r0, [pc, #56]	@ (8011f60 <tcp_remove_listener+0x50>)
 8011f28:	f00c fc76 	bl	801e818 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	60fb      	str	r3, [r7, #12]
 8011f30:	e00a      	b.n	8011f48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011f36:	683a      	ldr	r2, [r7, #0]
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d102      	bne.n	8011f42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	60fb      	str	r3, [r7, #12]
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d1f1      	bne.n	8011f32 <tcp_remove_listener+0x22>
    }
  }
}
 8011f4e:	bf00      	nop
 8011f50:	bf00      	nop
 8011f52:	3710      	adds	r7, #16
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	08023ca8 	.word	0x08023ca8
 8011f5c:	08023d30 	.word	0x08023d30
 8011f60:	08023cec 	.word	0x08023cec

08011f64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b084      	sub	sp, #16
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <tcp_listen_closed+0x1c>
 8011f72:	4b14      	ldr	r3, [pc, #80]	@ (8011fc4 <tcp_listen_closed+0x60>)
 8011f74:	f240 1211 	movw	r2, #273	@ 0x111
 8011f78:	4913      	ldr	r1, [pc, #76]	@ (8011fc8 <tcp_listen_closed+0x64>)
 8011f7a:	4814      	ldr	r0, [pc, #80]	@ (8011fcc <tcp_listen_closed+0x68>)
 8011f7c:	f00c fc4c 	bl	801e818 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	7d1b      	ldrb	r3, [r3, #20]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d006      	beq.n	8011f96 <tcp_listen_closed+0x32>
 8011f88:	4b0e      	ldr	r3, [pc, #56]	@ (8011fc4 <tcp_listen_closed+0x60>)
 8011f8a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011f8e:	4910      	ldr	r1, [pc, #64]	@ (8011fd0 <tcp_listen_closed+0x6c>)
 8011f90:	480e      	ldr	r0, [pc, #56]	@ (8011fcc <tcp_listen_closed+0x68>)
 8011f92:	f00c fc41 	bl	801e818 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011f96:	2301      	movs	r3, #1
 8011f98:	60fb      	str	r3, [r7, #12]
 8011f9a:	e00b      	b.n	8011fb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8011fd4 <tcp_listen_closed+0x70>)
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	6879      	ldr	r1, [r7, #4]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7ff ffb1 	bl	8011f10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	60fb      	str	r3, [r7, #12]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	2b03      	cmp	r3, #3
 8011fb8:	d9f0      	bls.n	8011f9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011fba:	bf00      	nop
 8011fbc:	bf00      	nop
 8011fbe:	3710      	adds	r7, #16
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	08023ca8 	.word	0x08023ca8
 8011fc8:	08023d58 	.word	0x08023d58
 8011fcc:	08023cec 	.word	0x08023cec
 8011fd0:	08023d64 	.word	0x08023d64
 8011fd4:	08026230 	.word	0x08026230

08011fd8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011fd8:	b5b0      	push	{r4, r5, r7, lr}
 8011fda:	b088      	sub	sp, #32
 8011fdc:	af04      	add	r7, sp, #16
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d106      	bne.n	8011ff8 <tcp_close_shutdown+0x20>
 8011fea:	4b63      	ldr	r3, [pc, #396]	@ (8012178 <tcp_close_shutdown+0x1a0>)
 8011fec:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8011ff0:	4962      	ldr	r1, [pc, #392]	@ (801217c <tcp_close_shutdown+0x1a4>)
 8011ff2:	4863      	ldr	r0, [pc, #396]	@ (8012180 <tcp_close_shutdown+0x1a8>)
 8011ff4:	f00c fc10 	bl	801e818 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011ff8:	78fb      	ldrb	r3, [r7, #3]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d066      	beq.n	80120cc <tcp_close_shutdown+0xf4>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	7d1b      	ldrb	r3, [r3, #20]
 8012002:	2b04      	cmp	r3, #4
 8012004:	d003      	beq.n	801200e <tcp_close_shutdown+0x36>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	7d1b      	ldrb	r3, [r3, #20]
 801200a:	2b07      	cmp	r3, #7
 801200c:	d15e      	bne.n	80120cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012012:	2b00      	cmp	r3, #0
 8012014:	d104      	bne.n	8012020 <tcp_close_shutdown+0x48>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801201a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801201e:	d055      	beq.n	80120cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	8b5b      	ldrh	r3, [r3, #26]
 8012024:	f003 0310 	and.w	r3, r3, #16
 8012028:	2b00      	cmp	r3, #0
 801202a:	d106      	bne.n	801203a <tcp_close_shutdown+0x62>
 801202c:	4b52      	ldr	r3, [pc, #328]	@ (8012178 <tcp_close_shutdown+0x1a0>)
 801202e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012032:	4954      	ldr	r1, [pc, #336]	@ (8012184 <tcp_close_shutdown+0x1ac>)
 8012034:	4852      	ldr	r0, [pc, #328]	@ (8012180 <tcp_close_shutdown+0x1a8>)
 8012036:	f00c fbef 	bl	801e818 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012042:	687d      	ldr	r5, [r7, #4]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	3304      	adds	r3, #4
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	8ad2      	ldrh	r2, [r2, #22]
 801204c:	6879      	ldr	r1, [r7, #4]
 801204e:	8b09      	ldrh	r1, [r1, #24]
 8012050:	9102      	str	r1, [sp, #8]
 8012052:	9201      	str	r2, [sp, #4]
 8012054:	9300      	str	r3, [sp, #0]
 8012056:	462b      	mov	r3, r5
 8012058:	4622      	mov	r2, r4
 801205a:	4601      	mov	r1, r0
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f005 fd6d 	bl	8017b3c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f001 fb50 	bl	8013708 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012068:	4b47      	ldr	r3, [pc, #284]	@ (8012188 <tcp_close_shutdown+0x1b0>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	429a      	cmp	r2, r3
 8012070:	d105      	bne.n	801207e <tcp_close_shutdown+0xa6>
 8012072:	4b45      	ldr	r3, [pc, #276]	@ (8012188 <tcp_close_shutdown+0x1b0>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	4a43      	ldr	r2, [pc, #268]	@ (8012188 <tcp_close_shutdown+0x1b0>)
 801207a:	6013      	str	r3, [r2, #0]
 801207c:	e013      	b.n	80120a6 <tcp_close_shutdown+0xce>
 801207e:	4b42      	ldr	r3, [pc, #264]	@ (8012188 <tcp_close_shutdown+0x1b0>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	60fb      	str	r3, [r7, #12]
 8012084:	e00c      	b.n	80120a0 <tcp_close_shutdown+0xc8>
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	429a      	cmp	r2, r3
 801208e:	d104      	bne.n	801209a <tcp_close_shutdown+0xc2>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	68da      	ldr	r2, [r3, #12]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	60da      	str	r2, [r3, #12]
 8012098:	e005      	b.n	80120a6 <tcp_close_shutdown+0xce>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	68db      	ldr	r3, [r3, #12]
 801209e:	60fb      	str	r3, [r7, #12]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d1ef      	bne.n	8012086 <tcp_close_shutdown+0xae>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2200      	movs	r2, #0
 80120aa:	60da      	str	r2, [r3, #12]
 80120ac:	4b37      	ldr	r3, [pc, #220]	@ (801218c <tcp_close_shutdown+0x1b4>)
 80120ae:	2201      	movs	r2, #1
 80120b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80120b2:	4b37      	ldr	r3, [pc, #220]	@ (8012190 <tcp_close_shutdown+0x1b8>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d102      	bne.n	80120c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80120bc:	f003 ffe4 	bl	8016088 <tcp_trigger_input_pcb_close>
 80120c0:	e002      	b.n	80120c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f7ff fed6 	bl	8011e74 <tcp_free>
      }
      return ERR_OK;
 80120c8:	2300      	movs	r3, #0
 80120ca:	e050      	b.n	801216e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	7d1b      	ldrb	r3, [r3, #20]
 80120d0:	2b02      	cmp	r3, #2
 80120d2:	d03b      	beq.n	801214c <tcp_close_shutdown+0x174>
 80120d4:	2b02      	cmp	r3, #2
 80120d6:	dc44      	bgt.n	8012162 <tcp_close_shutdown+0x18a>
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <tcp_close_shutdown+0x10a>
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d02a      	beq.n	8012136 <tcp_close_shutdown+0x15e>
 80120e0:	e03f      	b.n	8012162 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	8adb      	ldrh	r3, [r3, #22]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d021      	beq.n	801212e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80120ea:	4b2a      	ldr	r3, [pc, #168]	@ (8012194 <tcp_close_shutdown+0x1bc>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d105      	bne.n	8012100 <tcp_close_shutdown+0x128>
 80120f4:	4b27      	ldr	r3, [pc, #156]	@ (8012194 <tcp_close_shutdown+0x1bc>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	4a26      	ldr	r2, [pc, #152]	@ (8012194 <tcp_close_shutdown+0x1bc>)
 80120fc:	6013      	str	r3, [r2, #0]
 80120fe:	e013      	b.n	8012128 <tcp_close_shutdown+0x150>
 8012100:	4b24      	ldr	r3, [pc, #144]	@ (8012194 <tcp_close_shutdown+0x1bc>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	60bb      	str	r3, [r7, #8]
 8012106:	e00c      	b.n	8012122 <tcp_close_shutdown+0x14a>
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	429a      	cmp	r2, r3
 8012110:	d104      	bne.n	801211c <tcp_close_shutdown+0x144>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	68da      	ldr	r2, [r3, #12]
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	60da      	str	r2, [r3, #12]
 801211a:	e005      	b.n	8012128 <tcp_close_shutdown+0x150>
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	68db      	ldr	r3, [r3, #12]
 8012120:	60bb      	str	r3, [r7, #8]
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d1ef      	bne.n	8012108 <tcp_close_shutdown+0x130>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2200      	movs	r2, #0
 801212c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff fea0 	bl	8011e74 <tcp_free>
      break;
 8012134:	e01a      	b.n	801216c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f7ff ff14 	bl	8011f64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801213c:	6879      	ldr	r1, [r7, #4]
 801213e:	4816      	ldr	r0, [pc, #88]	@ (8012198 <tcp_close_shutdown+0x1c0>)
 8012140:	f001 fb32 	bl	80137a8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7ff feb1 	bl	8011eac <tcp_free_listen>
      break;
 801214a:	e00f      	b.n	801216c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801214c:	6879      	ldr	r1, [r7, #4]
 801214e:	480e      	ldr	r0, [pc, #56]	@ (8012188 <tcp_close_shutdown+0x1b0>)
 8012150:	f001 fb2a 	bl	80137a8 <tcp_pcb_remove>
 8012154:	4b0d      	ldr	r3, [pc, #52]	@ (801218c <tcp_close_shutdown+0x1b4>)
 8012156:	2201      	movs	r2, #1
 8012158:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f7ff fe8a 	bl	8011e74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012160:	e004      	b.n	801216c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 f81a 	bl	801219c <tcp_close_shutdown_fin>
 8012168:	4603      	mov	r3, r0
 801216a:	e000      	b.n	801216e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	3710      	adds	r7, #16
 8012172:	46bd      	mov	sp, r7
 8012174:	bdb0      	pop	{r4, r5, r7, pc}
 8012176:	bf00      	nop
 8012178:	08023ca8 	.word	0x08023ca8
 801217c:	08023d7c 	.word	0x08023d7c
 8012180:	08023cec 	.word	0x08023cec
 8012184:	08023d9c 	.word	0x08023d9c
 8012188:	2000f490 	.word	0x2000f490
 801218c:	2000f498 	.word	0x2000f498
 8012190:	2000f4d0 	.word	0x2000f4d0
 8012194:	2000f488 	.word	0x2000f488
 8012198:	2000f48c 	.word	0x2000f48c

0801219c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d106      	bne.n	80121b8 <tcp_close_shutdown_fin+0x1c>
 80121aa:	4b2e      	ldr	r3, [pc, #184]	@ (8012264 <tcp_close_shutdown_fin+0xc8>)
 80121ac:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80121b0:	492d      	ldr	r1, [pc, #180]	@ (8012268 <tcp_close_shutdown_fin+0xcc>)
 80121b2:	482e      	ldr	r0, [pc, #184]	@ (801226c <tcp_close_shutdown_fin+0xd0>)
 80121b4:	f00c fb30 	bl	801e818 <iprintf>

  switch (pcb->state) {
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	7d1b      	ldrb	r3, [r3, #20]
 80121bc:	2b07      	cmp	r3, #7
 80121be:	d020      	beq.n	8012202 <tcp_close_shutdown_fin+0x66>
 80121c0:	2b07      	cmp	r3, #7
 80121c2:	dc2b      	bgt.n	801221c <tcp_close_shutdown_fin+0x80>
 80121c4:	2b03      	cmp	r3, #3
 80121c6:	d002      	beq.n	80121ce <tcp_close_shutdown_fin+0x32>
 80121c8:	2b04      	cmp	r3, #4
 80121ca:	d00d      	beq.n	80121e8 <tcp_close_shutdown_fin+0x4c>
 80121cc:	e026      	b.n	801221c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f004 fdc2 	bl	8016d58 <tcp_send_fin>
 80121d4:	4603      	mov	r3, r0
 80121d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80121d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d11f      	bne.n	8012220 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2205      	movs	r2, #5
 80121e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80121e6:	e01b      	b.n	8012220 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f004 fdb5 	bl	8016d58 <tcp_send_fin>
 80121ee:	4603      	mov	r3, r0
 80121f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80121f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d114      	bne.n	8012224 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2205      	movs	r2, #5
 80121fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012200:	e010      	b.n	8012224 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f004 fda8 	bl	8016d58 <tcp_send_fin>
 8012208:	4603      	mov	r3, r0
 801220a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801220c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d109      	bne.n	8012228 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2209      	movs	r2, #9
 8012218:	751a      	strb	r2, [r3, #20]
      }
      break;
 801221a:	e005      	b.n	8012228 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801221c:	2300      	movs	r3, #0
 801221e:	e01c      	b.n	801225a <tcp_close_shutdown_fin+0xbe>
      break;
 8012220:	bf00      	nop
 8012222:	e002      	b.n	801222a <tcp_close_shutdown_fin+0x8e>
      break;
 8012224:	bf00      	nop
 8012226:	e000      	b.n	801222a <tcp_close_shutdown_fin+0x8e>
      break;
 8012228:	bf00      	nop
  }

  if (err == ERR_OK) {
 801222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d103      	bne.n	801223a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f004 fece 	bl	8016fd4 <tcp_output>
 8012238:	e00d      	b.n	8012256 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012242:	d108      	bne.n	8012256 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	8b5b      	ldrh	r3, [r3, #26]
 8012248:	f043 0308 	orr.w	r3, r3, #8
 801224c:	b29a      	uxth	r2, r3
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012252:	2300      	movs	r3, #0
 8012254:	e001      	b.n	801225a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801225a:	4618      	mov	r0, r3
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	08023ca8 	.word	0x08023ca8
 8012268:	08023d58 	.word	0x08023d58
 801226c:	08023cec 	.word	0x08023cec

08012270 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d109      	bne.n	8012292 <tcp_close+0x22>
 801227e:	4b0f      	ldr	r3, [pc, #60]	@ (80122bc <tcp_close+0x4c>)
 8012280:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012284:	490e      	ldr	r1, [pc, #56]	@ (80122c0 <tcp_close+0x50>)
 8012286:	480f      	ldr	r0, [pc, #60]	@ (80122c4 <tcp_close+0x54>)
 8012288:	f00c fac6 	bl	801e818 <iprintf>
 801228c:	f06f 030f 	mvn.w	r3, #15
 8012290:	e00f      	b.n	80122b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	7d1b      	ldrb	r3, [r3, #20]
 8012296:	2b01      	cmp	r3, #1
 8012298:	d006      	beq.n	80122a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	8b5b      	ldrh	r3, [r3, #26]
 801229e:	f043 0310 	orr.w	r3, r3, #16
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80122a8:	2101      	movs	r1, #1
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7ff fe94 	bl	8011fd8 <tcp_close_shutdown>
 80122b0:	4603      	mov	r3, r0
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3708      	adds	r7, #8
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	08023ca8 	.word	0x08023ca8
 80122c0:	08023db8 	.word	0x08023db8
 80122c4:	08023cec 	.word	0x08023cec

080122c8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d109      	bne.n	80122ee <tcp_shutdown+0x26>
 80122da:	4b26      	ldr	r3, [pc, #152]	@ (8012374 <tcp_shutdown+0xac>)
 80122dc:	f240 2207 	movw	r2, #519	@ 0x207
 80122e0:	4925      	ldr	r1, [pc, #148]	@ (8012378 <tcp_shutdown+0xb0>)
 80122e2:	4826      	ldr	r0, [pc, #152]	@ (801237c <tcp_shutdown+0xb4>)
 80122e4:	f00c fa98 	bl	801e818 <iprintf>
 80122e8:	f06f 030f 	mvn.w	r3, #15
 80122ec:	e03d      	b.n	801236a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	7d1b      	ldrb	r3, [r3, #20]
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	d102      	bne.n	80122fc <tcp_shutdown+0x34>
    return ERR_CONN;
 80122f6:	f06f 030a 	mvn.w	r3, #10
 80122fa:	e036      	b.n	801236a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d01b      	beq.n	801233a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	8b5b      	ldrh	r3, [r3, #26]
 8012306:	f043 0310 	orr.w	r3, r3, #16
 801230a:	b29a      	uxth	r2, r3
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d005      	beq.n	8012322 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8012316:	2101      	movs	r1, #1
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f7ff fe5d 	bl	8011fd8 <tcp_close_shutdown>
 801231e:	4603      	mov	r3, r0
 8012320:	e023      	b.n	801236a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012326:	2b00      	cmp	r3, #0
 8012328:	d007      	beq.n	801233a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801232e:	4618      	mov	r0, r3
 8012330:	f7ff f98a 	bl	8011648 <pbuf_free>
      pcb->refused_data = NULL;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d013      	beq.n	8012368 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	7d1b      	ldrb	r3, [r3, #20]
 8012344:	2b04      	cmp	r3, #4
 8012346:	dc02      	bgt.n	801234e <tcp_shutdown+0x86>
 8012348:	2b03      	cmp	r3, #3
 801234a:	da02      	bge.n	8012352 <tcp_shutdown+0x8a>
 801234c:	e009      	b.n	8012362 <tcp_shutdown+0x9a>
 801234e:	2b07      	cmp	r3, #7
 8012350:	d107      	bne.n	8012362 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	b2db      	uxtb	r3, r3
 8012356:	4619      	mov	r1, r3
 8012358:	68f8      	ldr	r0, [r7, #12]
 801235a:	f7ff fe3d 	bl	8011fd8 <tcp_close_shutdown>
 801235e:	4603      	mov	r3, r0
 8012360:	e003      	b.n	801236a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8012362:	f06f 030a 	mvn.w	r3, #10
 8012366:	e000      	b.n	801236a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012368:	2300      	movs	r3, #0
}
 801236a:	4618      	mov	r0, r3
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	08023ca8 	.word	0x08023ca8
 8012378:	08023dd0 	.word	0x08023dd0
 801237c:	08023cec 	.word	0x08023cec

08012380 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b08e      	sub	sp, #56	@ 0x38
 8012384:	af04      	add	r7, sp, #16
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d107      	bne.n	80123a0 <tcp_abandon+0x20>
 8012390:	4b52      	ldr	r3, [pc, #328]	@ (80124dc <tcp_abandon+0x15c>)
 8012392:	f240 223d 	movw	r2, #573	@ 0x23d
 8012396:	4952      	ldr	r1, [pc, #328]	@ (80124e0 <tcp_abandon+0x160>)
 8012398:	4852      	ldr	r0, [pc, #328]	@ (80124e4 <tcp_abandon+0x164>)
 801239a:	f00c fa3d 	bl	801e818 <iprintf>
 801239e:	e099      	b.n	80124d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	7d1b      	ldrb	r3, [r3, #20]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d106      	bne.n	80123b6 <tcp_abandon+0x36>
 80123a8:	4b4c      	ldr	r3, [pc, #304]	@ (80124dc <tcp_abandon+0x15c>)
 80123aa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80123ae:	494e      	ldr	r1, [pc, #312]	@ (80124e8 <tcp_abandon+0x168>)
 80123b0:	484c      	ldr	r0, [pc, #304]	@ (80124e4 <tcp_abandon+0x164>)
 80123b2:	f00c fa31 	bl	801e818 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	7d1b      	ldrb	r3, [r3, #20]
 80123ba:	2b0a      	cmp	r3, #10
 80123bc:	d107      	bne.n	80123ce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80123be:	6879      	ldr	r1, [r7, #4]
 80123c0:	484a      	ldr	r0, [pc, #296]	@ (80124ec <tcp_abandon+0x16c>)
 80123c2:	f001 f9f1 	bl	80137a8 <tcp_pcb_remove>
    tcp_free(pcb);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7ff fd54 	bl	8011e74 <tcp_free>
 80123cc:	e082      	b.n	80124d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80123ce:	2300      	movs	r3, #0
 80123d0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80123d2:	2300      	movs	r3, #0
 80123d4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123e0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123e8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	691b      	ldr	r3, [r3, #16]
 80123ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	7d1b      	ldrb	r3, [r3, #20]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d126      	bne.n	8012446 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	8adb      	ldrh	r3, [r3, #22]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d02e      	beq.n	801245e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012400:	4b3b      	ldr	r3, [pc, #236]	@ (80124f0 <tcp_abandon+0x170>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	429a      	cmp	r2, r3
 8012408:	d105      	bne.n	8012416 <tcp_abandon+0x96>
 801240a:	4b39      	ldr	r3, [pc, #228]	@ (80124f0 <tcp_abandon+0x170>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	4a37      	ldr	r2, [pc, #220]	@ (80124f0 <tcp_abandon+0x170>)
 8012412:	6013      	str	r3, [r2, #0]
 8012414:	e013      	b.n	801243e <tcp_abandon+0xbe>
 8012416:	4b36      	ldr	r3, [pc, #216]	@ (80124f0 <tcp_abandon+0x170>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	61fb      	str	r3, [r7, #28]
 801241c:	e00c      	b.n	8012438 <tcp_abandon+0xb8>
 801241e:	69fb      	ldr	r3, [r7, #28]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	429a      	cmp	r2, r3
 8012426:	d104      	bne.n	8012432 <tcp_abandon+0xb2>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	68da      	ldr	r2, [r3, #12]
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	60da      	str	r2, [r3, #12]
 8012430:	e005      	b.n	801243e <tcp_abandon+0xbe>
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	61fb      	str	r3, [r7, #28]
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1ef      	bne.n	801241e <tcp_abandon+0x9e>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2200      	movs	r2, #0
 8012442:	60da      	str	r2, [r3, #12]
 8012444:	e00b      	b.n	801245e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	8adb      	ldrh	r3, [r3, #22]
 801244e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012450:	6879      	ldr	r1, [r7, #4]
 8012452:	4828      	ldr	r0, [pc, #160]	@ (80124f4 <tcp_abandon+0x174>)
 8012454:	f001 f9a8 	bl	80137a8 <tcp_pcb_remove>
 8012458:	4b27      	ldr	r3, [pc, #156]	@ (80124f8 <tcp_abandon+0x178>)
 801245a:	2201      	movs	r2, #1
 801245c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012462:	2b00      	cmp	r3, #0
 8012464:	d004      	beq.n	8012470 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801246a:	4618      	mov	r0, r3
 801246c:	f000 fe7c 	bl	8013168 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012474:	2b00      	cmp	r3, #0
 8012476:	d004      	beq.n	8012482 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801247c:	4618      	mov	r0, r3
 801247e:	f000 fe73 	bl	8013168 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012486:	2b00      	cmp	r3, #0
 8012488:	d004      	beq.n	8012494 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801248e:	4618      	mov	r0, r3
 8012490:	f000 fe6a 	bl	8013168 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012496:	2b00      	cmp	r3, #0
 8012498:	d00e      	beq.n	80124b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801249a:	6879      	ldr	r1, [r7, #4]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	3304      	adds	r3, #4
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	8b12      	ldrh	r2, [r2, #24]
 80124a4:	9202      	str	r2, [sp, #8]
 80124a6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80124a8:	9201      	str	r2, [sp, #4]
 80124aa:	9300      	str	r3, [sp, #0]
 80124ac:	460b      	mov	r3, r1
 80124ae:	697a      	ldr	r2, [r7, #20]
 80124b0:	69b9      	ldr	r1, [r7, #24]
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f005 fb42 	bl	8017b3c <tcp_rst>
    }
    last_state = pcb->state;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	7d1b      	ldrb	r3, [r3, #20]
 80124bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f7ff fcd8 	bl	8011e74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d004      	beq.n	80124d4 <tcp_abandon+0x154>
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	f06f 010c 	mvn.w	r1, #12
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	4798      	blx	r3
  }
}
 80124d4:	3728      	adds	r7, #40	@ 0x28
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	08023ca8 	.word	0x08023ca8
 80124e0:	08023dec 	.word	0x08023dec
 80124e4:	08023cec 	.word	0x08023cec
 80124e8:	08023e08 	.word	0x08023e08
 80124ec:	2000f494 	.word	0x2000f494
 80124f0:	2000f488 	.word	0x2000f488
 80124f4:	2000f490 	.word	0x2000f490
 80124f8:	2000f498 	.word	0x2000f498

080124fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012504:	2101      	movs	r1, #1
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7ff ff3a 	bl	8012380 <tcp_abandon>
}
 801250c:	bf00      	nop
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d106      	bne.n	8012530 <tcp_update_rcv_ann_wnd+0x1c>
 8012522:	4b25      	ldr	r3, [pc, #148]	@ (80125b8 <tcp_update_rcv_ann_wnd+0xa4>)
 8012524:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012528:	4924      	ldr	r1, [pc, #144]	@ (80125bc <tcp_update_rcv_ann_wnd+0xa8>)
 801252a:	4825      	ldr	r0, [pc, #148]	@ (80125c0 <tcp_update_rcv_ann_wnd+0xac>)
 801252c:	f00c f974 	bl	801e818 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012538:	4413      	add	r3, r2
 801253a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012544:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8012548:	bf28      	it	cs
 801254a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801254e:	b292      	uxth	r2, r2
 8012550:	4413      	add	r3, r2
 8012552:	68fa      	ldr	r2, [r7, #12]
 8012554:	1ad3      	subs	r3, r2, r3
 8012556:	2b00      	cmp	r3, #0
 8012558:	db08      	blt.n	801256c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	1ad3      	subs	r3, r2, r3
 801256a:	e020      	b.n	80125ae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012574:	1ad3      	subs	r3, r2, r3
 8012576:	2b00      	cmp	r3, #0
 8012578:	dd03      	ble.n	8012582 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2200      	movs	r2, #0
 801257e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012580:	e014      	b.n	80125ac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012594:	d306      	bcc.n	80125a4 <tcp_update_rcv_ann_wnd+0x90>
 8012596:	4b08      	ldr	r3, [pc, #32]	@ (80125b8 <tcp_update_rcv_ann_wnd+0xa4>)
 8012598:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801259c:	4909      	ldr	r1, [pc, #36]	@ (80125c4 <tcp_update_rcv_ann_wnd+0xb0>)
 801259e:	4808      	ldr	r0, [pc, #32]	@ (80125c0 <tcp_update_rcv_ann_wnd+0xac>)
 80125a0:	f00c f93a 	bl	801e818 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80125ac:	2300      	movs	r3, #0
  }
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	08023ca8 	.word	0x08023ca8
 80125bc:	08023f04 	.word	0x08023f04
 80125c0:	08023cec 	.word	0x08023cec
 80125c4:	08023f28 	.word	0x08023f28

080125c8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	460b      	mov	r3, r1
 80125d2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d107      	bne.n	80125ea <tcp_recved+0x22>
 80125da:	4b1f      	ldr	r3, [pc, #124]	@ (8012658 <tcp_recved+0x90>)
 80125dc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80125e0:	491e      	ldr	r1, [pc, #120]	@ (801265c <tcp_recved+0x94>)
 80125e2:	481f      	ldr	r0, [pc, #124]	@ (8012660 <tcp_recved+0x98>)
 80125e4:	f00c f918 	bl	801e818 <iprintf>
 80125e8:	e032      	b.n	8012650 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	7d1b      	ldrb	r3, [r3, #20]
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d106      	bne.n	8012600 <tcp_recved+0x38>
 80125f2:	4b19      	ldr	r3, [pc, #100]	@ (8012658 <tcp_recved+0x90>)
 80125f4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80125f8:	491a      	ldr	r1, [pc, #104]	@ (8012664 <tcp_recved+0x9c>)
 80125fa:	4819      	ldr	r0, [pc, #100]	@ (8012660 <tcp_recved+0x98>)
 80125fc:	f00c f90c 	bl	801e818 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012604:	887b      	ldrh	r3, [r7, #2]
 8012606:	4413      	add	r3, r2
 8012608:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801260a:	89fb      	ldrh	r3, [r7, #14]
 801260c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012610:	d804      	bhi.n	801261c <tcp_recved+0x54>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012616:	89fa      	ldrh	r2, [r7, #14]
 8012618:	429a      	cmp	r2, r3
 801261a:	d204      	bcs.n	8012626 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012622:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012624:	e002      	b.n	801262c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	89fa      	ldrh	r2, [r7, #14]
 801262a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7ff ff71 	bl	8012514 <tcp_update_rcv_ann_wnd>
 8012632:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801263a:	d309      	bcc.n	8012650 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	8b5b      	ldrh	r3, [r3, #26]
 8012640:	f043 0302 	orr.w	r3, r3, #2
 8012644:	b29a      	uxth	r2, r3
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f004 fcc2 	bl	8016fd4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012650:	3710      	adds	r7, #16
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	08023ca8 	.word	0x08023ca8
 801265c:	08023f44 	.word	0x08023f44
 8012660:	08023cec 	.word	0x08023cec
 8012664:	08023f5c 	.word	0x08023f5c

08012668 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801266e:	2300      	movs	r3, #0
 8012670:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012672:	4b1e      	ldr	r3, [pc, #120]	@ (80126ec <tcp_new_port+0x84>)
 8012674:	881b      	ldrh	r3, [r3, #0]
 8012676:	3301      	adds	r3, #1
 8012678:	b29a      	uxth	r2, r3
 801267a:	4b1c      	ldr	r3, [pc, #112]	@ (80126ec <tcp_new_port+0x84>)
 801267c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801267e:	4b1b      	ldr	r3, [pc, #108]	@ (80126ec <tcp_new_port+0x84>)
 8012680:	881b      	ldrh	r3, [r3, #0]
 8012682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012686:	4293      	cmp	r3, r2
 8012688:	d103      	bne.n	8012692 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801268a:	4b18      	ldr	r3, [pc, #96]	@ (80126ec <tcp_new_port+0x84>)
 801268c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012690:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012692:	2300      	movs	r3, #0
 8012694:	71fb      	strb	r3, [r7, #7]
 8012696:	e01e      	b.n	80126d6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012698:	79fb      	ldrb	r3, [r7, #7]
 801269a:	4a15      	ldr	r2, [pc, #84]	@ (80126f0 <tcp_new_port+0x88>)
 801269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	603b      	str	r3, [r7, #0]
 80126a4:	e011      	b.n	80126ca <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	8ada      	ldrh	r2, [r3, #22]
 80126aa:	4b10      	ldr	r3, [pc, #64]	@ (80126ec <tcp_new_port+0x84>)
 80126ac:	881b      	ldrh	r3, [r3, #0]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d108      	bne.n	80126c4 <tcp_new_port+0x5c>
        n++;
 80126b2:	88bb      	ldrh	r3, [r7, #4]
 80126b4:	3301      	adds	r3, #1
 80126b6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80126b8:	88bb      	ldrh	r3, [r7, #4]
 80126ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80126be:	d3d8      	bcc.n	8012672 <tcp_new_port+0xa>
          return 0;
 80126c0:	2300      	movs	r3, #0
 80126c2:	e00d      	b.n	80126e0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	603b      	str	r3, [r7, #0]
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d1ea      	bne.n	80126a6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80126d0:	79fb      	ldrb	r3, [r7, #7]
 80126d2:	3301      	adds	r3, #1
 80126d4:	71fb      	strb	r3, [r7, #7]
 80126d6:	79fb      	ldrb	r3, [r7, #7]
 80126d8:	2b03      	cmp	r3, #3
 80126da:	d9dd      	bls.n	8012698 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80126dc:	4b03      	ldr	r3, [pc, #12]	@ (80126ec <tcp_new_port+0x84>)
 80126de:	881b      	ldrh	r3, [r3, #0]
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	370c      	adds	r7, #12
 80126e4:	46bd      	mov	sp, r7
 80126e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ea:	4770      	bx	lr
 80126ec:	20000038 	.word	0x20000038
 80126f0:	08026230 	.word	0x08026230

080126f4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b08a      	sub	sp, #40	@ 0x28
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	603b      	str	r3, [r7, #0]
 8012700:	4613      	mov	r3, r2
 8012702:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012704:	2300      	movs	r3, #0
 8012706:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d109      	bne.n	8012722 <tcp_connect+0x2e>
 801270e:	4b7d      	ldr	r3, [pc, #500]	@ (8012904 <tcp_connect+0x210>)
 8012710:	f240 4235 	movw	r2, #1077	@ 0x435
 8012714:	497c      	ldr	r1, [pc, #496]	@ (8012908 <tcp_connect+0x214>)
 8012716:	487d      	ldr	r0, [pc, #500]	@ (801290c <tcp_connect+0x218>)
 8012718:	f00c f87e 	bl	801e818 <iprintf>
 801271c:	f06f 030f 	mvn.w	r3, #15
 8012720:	e0ec      	b.n	80128fc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d109      	bne.n	801273c <tcp_connect+0x48>
 8012728:	4b76      	ldr	r3, [pc, #472]	@ (8012904 <tcp_connect+0x210>)
 801272a:	f240 4236 	movw	r2, #1078	@ 0x436
 801272e:	4978      	ldr	r1, [pc, #480]	@ (8012910 <tcp_connect+0x21c>)
 8012730:	4876      	ldr	r0, [pc, #472]	@ (801290c <tcp_connect+0x218>)
 8012732:	f00c f871 	bl	801e818 <iprintf>
 8012736:	f06f 030f 	mvn.w	r3, #15
 801273a:	e0df      	b.n	80128fc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	7d1b      	ldrb	r3, [r3, #20]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d009      	beq.n	8012758 <tcp_connect+0x64>
 8012744:	4b6f      	ldr	r3, [pc, #444]	@ (8012904 <tcp_connect+0x210>)
 8012746:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 801274a:	4972      	ldr	r1, [pc, #456]	@ (8012914 <tcp_connect+0x220>)
 801274c:	486f      	ldr	r0, [pc, #444]	@ (801290c <tcp_connect+0x218>)
 801274e:	f00c f863 	bl	801e818 <iprintf>
 8012752:	f06f 0309 	mvn.w	r3, #9
 8012756:	e0d1      	b.n	80128fc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d002      	beq.n	8012764 <tcp_connect+0x70>
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	e000      	b.n	8012766 <tcp_connect+0x72>
 8012764:	2300      	movs	r3, #0
 8012766:	68fa      	ldr	r2, [r7, #12]
 8012768:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	88fa      	ldrh	r2, [r7, #6]
 801276e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	7a1b      	ldrb	r3, [r3, #8]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d006      	beq.n	8012786 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	7a1b      	ldrb	r3, [r3, #8]
 801277c:	4618      	mov	r0, r3
 801277e:	f7fe fba3 	bl	8010ec8 <netif_get_by_index>
 8012782:	6278      	str	r0, [r7, #36]	@ 0x24
 8012784:	e005      	b.n	8012792 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	3304      	adds	r3, #4
 801278a:	4618      	mov	r0, r3
 801278c:	f009 fa4c 	bl	801bc28 <ip4_route>
 8012790:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8012792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012798:	f06f 0303 	mvn.w	r3, #3
 801279c:	e0ae      	b.n	80128fc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d003      	beq.n	80127ac <tcp_connect+0xb8>
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d111      	bne.n	80127d0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80127ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d002      	beq.n	80127b8 <tcp_connect+0xc4>
 80127b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b4:	3304      	adds	r3, #4
 80127b6:	e000      	b.n	80127ba <tcp_connect+0xc6>
 80127b8:	2300      	movs	r3, #0
 80127ba:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d102      	bne.n	80127c8 <tcp_connect+0xd4>
      return ERR_RTE;
 80127c2:	f06f 0303 	mvn.w	r3, #3
 80127c6:	e099      	b.n	80128fc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	8adb      	ldrh	r3, [r3, #22]
 80127d4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	8adb      	ldrh	r3, [r3, #22]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d10c      	bne.n	80127f8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80127de:	f7ff ff43 	bl	8012668 <tcp_new_port>
 80127e2:	4603      	mov	r3, r0
 80127e4:	461a      	mov	r2, r3
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	8adb      	ldrh	r3, [r3, #22]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d102      	bne.n	80127f8 <tcp_connect+0x104>
      return ERR_BUF;
 80127f2:	f06f 0301 	mvn.w	r3, #1
 80127f6:	e081      	b.n	80128fc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f001 f869 	bl	80138d0 <tcp_next_iss>
 80127fe:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2200      	movs	r2, #0
 8012804:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	697a      	ldr	r2, [r7, #20]
 801280a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	1e5a      	subs	r2, r3, #1
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	1e5a      	subs	r2, r3, #1
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	1e5a      	subs	r2, r3, #1
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801282a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012842:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801284c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	3304      	adds	r3, #4
 8012856:	461a      	mov	r2, r3
 8012858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801285a:	f001 f85f 	bl	801391c <tcp_eff_send_mss_netif>
 801285e:	4603      	mov	r3, r0
 8012860:	461a      	mov	r2, r3
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2201      	movs	r2, #1
 801286a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	683a      	ldr	r2, [r7, #0]
 8012872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012876:	2102      	movs	r1, #2
 8012878:	68f8      	ldr	r0, [r7, #12]
 801287a:	f004 fabd 	bl	8016df8 <tcp_enqueue_flags>
 801287e:	4603      	mov	r3, r0
 8012880:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012882:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d136      	bne.n	80128f8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	2202      	movs	r2, #2
 801288e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012890:	8b7b      	ldrh	r3, [r7, #26]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d021      	beq.n	80128da <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012896:	4b20      	ldr	r3, [pc, #128]	@ (8012918 <tcp_connect+0x224>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	68fa      	ldr	r2, [r7, #12]
 801289c:	429a      	cmp	r2, r3
 801289e:	d105      	bne.n	80128ac <tcp_connect+0x1b8>
 80128a0:	4b1d      	ldr	r3, [pc, #116]	@ (8012918 <tcp_connect+0x224>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	68db      	ldr	r3, [r3, #12]
 80128a6:	4a1c      	ldr	r2, [pc, #112]	@ (8012918 <tcp_connect+0x224>)
 80128a8:	6013      	str	r3, [r2, #0]
 80128aa:	e013      	b.n	80128d4 <tcp_connect+0x1e0>
 80128ac:	4b1a      	ldr	r3, [pc, #104]	@ (8012918 <tcp_connect+0x224>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	623b      	str	r3, [r7, #32]
 80128b2:	e00c      	b.n	80128ce <tcp_connect+0x1da>
 80128b4:	6a3b      	ldr	r3, [r7, #32]
 80128b6:	68db      	ldr	r3, [r3, #12]
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d104      	bne.n	80128c8 <tcp_connect+0x1d4>
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	68da      	ldr	r2, [r3, #12]
 80128c2:	6a3b      	ldr	r3, [r7, #32]
 80128c4:	60da      	str	r2, [r3, #12]
 80128c6:	e005      	b.n	80128d4 <tcp_connect+0x1e0>
 80128c8:	6a3b      	ldr	r3, [r7, #32]
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	623b      	str	r3, [r7, #32]
 80128ce:	6a3b      	ldr	r3, [r7, #32]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d1ef      	bne.n	80128b4 <tcp_connect+0x1c0>
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	2200      	movs	r2, #0
 80128d8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80128da:	4b10      	ldr	r3, [pc, #64]	@ (801291c <tcp_connect+0x228>)
 80128dc:	681a      	ldr	r2, [r3, #0]
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	60da      	str	r2, [r3, #12]
 80128e2:	4a0e      	ldr	r2, [pc, #56]	@ (801291c <tcp_connect+0x228>)
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	6013      	str	r3, [r2, #0]
 80128e8:	f005 faea 	bl	8017ec0 <tcp_timer_needed>
 80128ec:	4b0c      	ldr	r3, [pc, #48]	@ (8012920 <tcp_connect+0x22c>)
 80128ee:	2201      	movs	r2, #1
 80128f0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80128f2:	68f8      	ldr	r0, [r7, #12]
 80128f4:	f004 fb6e 	bl	8016fd4 <tcp_output>
  }
  return ret;
 80128f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3728      	adds	r7, #40	@ 0x28
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	08023ca8 	.word	0x08023ca8
 8012908:	08023f84 	.word	0x08023f84
 801290c:	08023cec 	.word	0x08023cec
 8012910:	08023fa0 	.word	0x08023fa0
 8012914:	08023fbc 	.word	0x08023fbc
 8012918:	2000f488 	.word	0x2000f488
 801291c:	2000f490 	.word	0x2000f490
 8012920:	2000f498 	.word	0x2000f498

08012924 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012924:	b5b0      	push	{r4, r5, r7, lr}
 8012926:	b090      	sub	sp, #64	@ 0x40
 8012928:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801292a:	2300      	movs	r3, #0
 801292c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8012930:	4b95      	ldr	r3, [pc, #596]	@ (8012b88 <tcp_slowtmr+0x264>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	3301      	adds	r3, #1
 8012936:	4a94      	ldr	r2, [pc, #592]	@ (8012b88 <tcp_slowtmr+0x264>)
 8012938:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801293a:	4b94      	ldr	r3, [pc, #592]	@ (8012b8c <tcp_slowtmr+0x268>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	3301      	adds	r3, #1
 8012940:	b2da      	uxtb	r2, r3
 8012942:	4b92      	ldr	r3, [pc, #584]	@ (8012b8c <tcp_slowtmr+0x268>)
 8012944:	701a      	strb	r2, [r3, #0]
 8012946:	e000      	b.n	801294a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012948:	bf00      	nop
  prev = NULL;
 801294a:	2300      	movs	r3, #0
 801294c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801294e:	4b90      	ldr	r3, [pc, #576]	@ (8012b90 <tcp_slowtmr+0x26c>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012954:	e29f      	b.n	8012e96 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012958:	7d1b      	ldrb	r3, [r3, #20]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcp_slowtmr+0x48>
 801295e:	4b8d      	ldr	r3, [pc, #564]	@ (8012b94 <tcp_slowtmr+0x270>)
 8012960:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012964:	498c      	ldr	r1, [pc, #560]	@ (8012b98 <tcp_slowtmr+0x274>)
 8012966:	488d      	ldr	r0, [pc, #564]	@ (8012b9c <tcp_slowtmr+0x278>)
 8012968:	f00b ff56 	bl	801e818 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801296c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801296e:	7d1b      	ldrb	r3, [r3, #20]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d106      	bne.n	8012982 <tcp_slowtmr+0x5e>
 8012974:	4b87      	ldr	r3, [pc, #540]	@ (8012b94 <tcp_slowtmr+0x270>)
 8012976:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801297a:	4989      	ldr	r1, [pc, #548]	@ (8012ba0 <tcp_slowtmr+0x27c>)
 801297c:	4887      	ldr	r0, [pc, #540]	@ (8012b9c <tcp_slowtmr+0x278>)
 801297e:	f00b ff4b 	bl	801e818 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012984:	7d1b      	ldrb	r3, [r3, #20]
 8012986:	2b0a      	cmp	r3, #10
 8012988:	d106      	bne.n	8012998 <tcp_slowtmr+0x74>
 801298a:	4b82      	ldr	r3, [pc, #520]	@ (8012b94 <tcp_slowtmr+0x270>)
 801298c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012990:	4984      	ldr	r1, [pc, #528]	@ (8012ba4 <tcp_slowtmr+0x280>)
 8012992:	4882      	ldr	r0, [pc, #520]	@ (8012b9c <tcp_slowtmr+0x278>)
 8012994:	f00b ff40 	bl	801e818 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801299a:	7f9a      	ldrb	r2, [r3, #30]
 801299c:	4b7b      	ldr	r3, [pc, #492]	@ (8012b8c <tcp_slowtmr+0x268>)
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d105      	bne.n	80129b0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80129a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80129a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80129ae:	e272      	b.n	8012e96 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80129b0:	4b76      	ldr	r3, [pc, #472]	@ (8012b8c <tcp_slowtmr+0x268>)
 80129b2:	781a      	ldrb	r2, [r3, #0]
 80129b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129b6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80129b8:	2300      	movs	r3, #0
 80129ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80129be:	2300      	movs	r3, #0
 80129c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80129c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129c6:	7d1b      	ldrb	r3, [r3, #20]
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	d10a      	bne.n	80129e2 <tcp_slowtmr+0xbe>
 80129cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80129d2:	2b05      	cmp	r3, #5
 80129d4:	d905      	bls.n	80129e2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80129d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129da:	3301      	adds	r3, #1
 80129dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80129e0:	e11e      	b.n	8012c20 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80129e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80129e8:	2b0b      	cmp	r3, #11
 80129ea:	d905      	bls.n	80129f8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80129ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129f0:	3301      	adds	r3, #1
 80129f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80129f6:	e113      	b.n	8012c20 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80129f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d075      	beq.n	8012aee <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d006      	beq.n	8012a18 <tcp_slowtmr+0xf4>
 8012a0a:	4b62      	ldr	r3, [pc, #392]	@ (8012b94 <tcp_slowtmr+0x270>)
 8012a0c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8012a10:	4965      	ldr	r1, [pc, #404]	@ (8012ba8 <tcp_slowtmr+0x284>)
 8012a12:	4862      	ldr	r0, [pc, #392]	@ (8012b9c <tcp_slowtmr+0x278>)
 8012a14:	f00b ff00 	bl	801e818 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d106      	bne.n	8012a2e <tcp_slowtmr+0x10a>
 8012a20:	4b5c      	ldr	r3, [pc, #368]	@ (8012b94 <tcp_slowtmr+0x270>)
 8012a22:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8012a26:	4961      	ldr	r1, [pc, #388]	@ (8012bac <tcp_slowtmr+0x288>)
 8012a28:	485c      	ldr	r0, [pc, #368]	@ (8012b9c <tcp_slowtmr+0x278>)
 8012a2a:	f00b fef5 	bl	801e818 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a30:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012a34:	2b0b      	cmp	r3, #11
 8012a36:	d905      	bls.n	8012a44 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8012a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012a42:	e0ed      	b.n	8012c20 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a46:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	4a58      	ldr	r2, [pc, #352]	@ (8012bb0 <tcp_slowtmr+0x28c>)
 8012a4e:	5cd3      	ldrb	r3, [r2, r3]
 8012a50:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a54:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012a58:	7c7a      	ldrb	r2, [r7, #17]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d907      	bls.n	8012a6e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8012a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a60:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012a64:	3301      	adds	r3, #1
 8012a66:	b2da      	uxtb	r2, r3
 8012a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a6a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8012a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a70:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012a74:	7c7a      	ldrb	r2, [r7, #17]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	f200 80d2 	bhi.w	8012c20 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8012a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d108      	bne.n	8012a9c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012a8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a8c:	f005 f94a 	bl	8017d24 <tcp_zero_window_probe>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d014      	beq.n	8012ac0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012a96:	2300      	movs	r3, #0
 8012a98:	623b      	str	r3, [r7, #32]
 8012a9a:	e011      	b.n	8012ac0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012aa6:	f004 f80f 	bl	8016ac8 <tcp_split_unsent_seg>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d107      	bne.n	8012ac0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ab2:	f004 fa8f 	bl	8016fd4 <tcp_output>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d101      	bne.n	8012ac0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8012abc:	2300      	movs	r3, #0
 8012abe:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012ac0:	6a3b      	ldr	r3, [r7, #32]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f000 80ac 	beq.w	8012c20 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aca:	2200      	movs	r2, #0
 8012acc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012ad6:	2b06      	cmp	r3, #6
 8012ad8:	f200 80a2 	bhi.w	8012c20 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8012adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ade:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	b2da      	uxtb	r2, r3
 8012ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ae8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8012aec:	e098      	b.n	8012c20 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012af0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	db0f      	blt.n	8012b18 <tcp_slowtmr+0x1f4>
 8012af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012afa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012afe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d008      	beq.n	8012b18 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8012b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	3301      	adds	r3, #1
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	b21a      	sxth	r2, r3
 8012b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b16:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8012b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b1a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8012b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b20:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012b24:	429a      	cmp	r2, r3
 8012b26:	db7b      	blt.n	8012c20 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012b28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012b2a:	f004 fd47 	bl	80175bc <tcp_rexmit_rto_prepare>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d007      	beq.n	8012b44 <tcp_slowtmr+0x220>
 8012b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d171      	bne.n	8012c20 <tcp_slowtmr+0x2fc>
 8012b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d06d      	beq.n	8012c20 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b46:	7d1b      	ldrb	r3, [r3, #20]
 8012b48:	2b02      	cmp	r3, #2
 8012b4a:	d03a      	beq.n	8012bc2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012b52:	2b0c      	cmp	r3, #12
 8012b54:	bf28      	it	cs
 8012b56:	230c      	movcs	r3, #12
 8012b58:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012b60:	10db      	asrs	r3, r3, #3
 8012b62:	b21b      	sxth	r3, r3
 8012b64:	461a      	mov	r2, r3
 8012b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012b6c:	4413      	add	r3, r2
 8012b6e:	7efa      	ldrb	r2, [r7, #27]
 8012b70:	4910      	ldr	r1, [pc, #64]	@ (8012bb4 <tcp_slowtmr+0x290>)
 8012b72:	5c8a      	ldrb	r2, [r1, r2]
 8012b74:	4093      	lsls	r3, r2
 8012b76:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	dc1a      	bgt.n	8012bb8 <tcp_slowtmr+0x294>
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	b21a      	sxth	r2, r3
 8012b86:	e019      	b.n	8012bbc <tcp_slowtmr+0x298>
 8012b88:	2000f484 	.word	0x2000f484
 8012b8c:	2000f49a 	.word	0x2000f49a
 8012b90:	2000f490 	.word	0x2000f490
 8012b94:	08023ca8 	.word	0x08023ca8
 8012b98:	08023fec 	.word	0x08023fec
 8012b9c:	08023cec 	.word	0x08023cec
 8012ba0:	08024018 	.word	0x08024018
 8012ba4:	08024044 	.word	0x08024044
 8012ba8:	08024074 	.word	0x08024074
 8012bac:	080240a8 	.word	0x080240a8
 8012bb0:	08026228 	.word	0x08026228
 8012bb4:	08026218 	.word	0x08026218
 8012bb8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	bf28      	it	cs
 8012bd8:	4613      	movcs	r3, r2
 8012bda:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012bdc:	8a7b      	ldrh	r3, [r7, #18]
 8012bde:	085b      	lsrs	r3, r3, #1
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012be4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	b29b      	uxth	r3, r3
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d206      	bcs.n	8012c08 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012bfe:	005b      	lsls	r3, r3, #1
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c04:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8012c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c0a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8012c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c0e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8012c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c14:	2200      	movs	r2, #0
 8012c16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8012c1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c1c:	f004 fd3e 	bl	801769c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8012c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c22:	7d1b      	ldrb	r3, [r3, #20]
 8012c24:	2b06      	cmp	r3, #6
 8012c26:	d111      	bne.n	8012c4c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8012c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c2a:	8b5b      	ldrh	r3, [r3, #26]
 8012c2c:	f003 0310 	and.w	r3, r3, #16
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00b      	beq.n	8012c4c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c34:	4b9d      	ldr	r3, [pc, #628]	@ (8012eac <tcp_slowtmr+0x588>)
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c3a:	6a1b      	ldr	r3, [r3, #32]
 8012c3c:	1ad3      	subs	r3, r2, r3
 8012c3e:	2b28      	cmp	r3, #40	@ 0x28
 8012c40:	d904      	bls.n	8012c4c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012c42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c46:	3301      	adds	r3, #1
 8012c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c4e:	7a5b      	ldrb	r3, [r3, #9]
 8012c50:	f003 0308 	and.w	r3, r3, #8
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d04c      	beq.n	8012cf2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8012c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c5a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012c5c:	2b04      	cmp	r3, #4
 8012c5e:	d003      	beq.n	8012c68 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c62:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012c64:	2b07      	cmp	r3, #7
 8012c66:	d144      	bne.n	8012cf2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c68:	4b90      	ldr	r3, [pc, #576]	@ (8012eac <tcp_slowtmr+0x588>)
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c6e:	6a1b      	ldr	r3, [r3, #32]
 8012c70:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012c78:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8012c7c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8012c80:	498b      	ldr	r1, [pc, #556]	@ (8012eb0 <tcp_slowtmr+0x58c>)
 8012c82:	fba1 1303 	umull	r1, r3, r1, r3
 8012c86:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d90a      	bls.n	8012ca2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8012c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c90:	3301      	adds	r3, #1
 8012c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012c96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012ca0:	e027      	b.n	8012cf2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012ca2:	4b82      	ldr	r3, [pc, #520]	@ (8012eac <tcp_slowtmr+0x588>)
 8012ca4:	681a      	ldr	r2, [r3, #0]
 8012ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca8:	6a1b      	ldr	r3, [r3, #32]
 8012caa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cae:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012cb8:	4618      	mov	r0, r3
 8012cba:	4b7e      	ldr	r3, [pc, #504]	@ (8012eb4 <tcp_slowtmr+0x590>)
 8012cbc:	fb00 f303 	mul.w	r3, r0, r3
 8012cc0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012cc2:	497b      	ldr	r1, [pc, #492]	@ (8012eb0 <tcp_slowtmr+0x58c>)
 8012cc4:	fba1 1303 	umull	r1, r3, r1, r3
 8012cc8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d911      	bls.n	8012cf2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8012cce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cd0:	f004 ffe8 	bl	8017ca4 <tcp_keepalive>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8012cda:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d107      	bne.n	8012cf2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8012ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ce4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012ce8:	3301      	adds	r3, #1
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cee:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8012cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d011      	beq.n	8012d1e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8012eac <tcp_slowtmr+0x588>)
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d00:	6a1b      	ldr	r3, [r3, #32]
 8012d02:	1ad2      	subs	r2, r2, r3
 8012d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d06:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012d0a:	4619      	mov	r1, r3
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	005b      	lsls	r3, r3, #1
 8012d10:	440b      	add	r3, r1
 8012d12:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012d14:	429a      	cmp	r2, r3
 8012d16:	d302      	bcc.n	8012d1e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8012d18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012d1a:	f000 fea9 	bl	8013a70 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8012d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d20:	7d1b      	ldrb	r3, [r3, #20]
 8012d22:	2b03      	cmp	r3, #3
 8012d24:	d10b      	bne.n	8012d3e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d26:	4b61      	ldr	r3, [pc, #388]	@ (8012eac <tcp_slowtmr+0x588>)
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d2c:	6a1b      	ldr	r3, [r3, #32]
 8012d2e:	1ad3      	subs	r3, r2, r3
 8012d30:	2b28      	cmp	r3, #40	@ 0x28
 8012d32:	d904      	bls.n	8012d3e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8012d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d38:	3301      	adds	r3, #1
 8012d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8012d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d40:	7d1b      	ldrb	r3, [r3, #20]
 8012d42:	2b09      	cmp	r3, #9
 8012d44:	d10b      	bne.n	8012d5e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012d46:	4b59      	ldr	r3, [pc, #356]	@ (8012eac <tcp_slowtmr+0x588>)
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d4c:	6a1b      	ldr	r3, [r3, #32]
 8012d4e:	1ad3      	subs	r3, r2, r3
 8012d50:	2bf0      	cmp	r3, #240	@ 0xf0
 8012d52:	d904      	bls.n	8012d5e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8012d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d58:	3301      	adds	r3, #1
 8012d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8012d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d060      	beq.n	8012e28 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8012d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012d6c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8012d6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012d70:	f000 fcca 	bl	8013708 <tcp_pcb_purge>
      if (prev != NULL) {
 8012d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d010      	beq.n	8012d9c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8012eb8 <tcp_slowtmr+0x594>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d106      	bne.n	8012d92 <tcp_slowtmr+0x46e>
 8012d84:	4b4d      	ldr	r3, [pc, #308]	@ (8012ebc <tcp_slowtmr+0x598>)
 8012d86:	f240 526d 	movw	r2, #1389	@ 0x56d
 8012d8a:	494d      	ldr	r1, [pc, #308]	@ (8012ec0 <tcp_slowtmr+0x59c>)
 8012d8c:	484d      	ldr	r0, [pc, #308]	@ (8012ec4 <tcp_slowtmr+0x5a0>)
 8012d8e:	f00b fd43 	bl	801e818 <iprintf>
        prev->next = pcb->next;
 8012d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d94:	68da      	ldr	r2, [r3, #12]
 8012d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d98:	60da      	str	r2, [r3, #12]
 8012d9a:	e00f      	b.n	8012dbc <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012d9c:	4b46      	ldr	r3, [pc, #280]	@ (8012eb8 <tcp_slowtmr+0x594>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d006      	beq.n	8012db4 <tcp_slowtmr+0x490>
 8012da6:	4b45      	ldr	r3, [pc, #276]	@ (8012ebc <tcp_slowtmr+0x598>)
 8012da8:	f240 5271 	movw	r2, #1393	@ 0x571
 8012dac:	4946      	ldr	r1, [pc, #280]	@ (8012ec8 <tcp_slowtmr+0x5a4>)
 8012dae:	4845      	ldr	r0, [pc, #276]	@ (8012ec4 <tcp_slowtmr+0x5a0>)
 8012db0:	f00b fd32 	bl	801e818 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	4a3f      	ldr	r2, [pc, #252]	@ (8012eb8 <tcp_slowtmr+0x594>)
 8012dba:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8012dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d013      	beq.n	8012dec <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dc6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012dcc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8012dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dd0:	3304      	adds	r3, #4
 8012dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012dd4:	8ad2      	ldrh	r2, [r2, #22]
 8012dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012dd8:	8b09      	ldrh	r1, [r1, #24]
 8012dda:	9102      	str	r1, [sp, #8]
 8012ddc:	9201      	str	r2, [sp, #4]
 8012dde:	9300      	str	r3, [sp, #0]
 8012de0:	462b      	mov	r3, r5
 8012de2:	4622      	mov	r2, r4
 8012de4:	4601      	mov	r1, r0
 8012de6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012de8:	f004 fea8 	bl	8017b3c <tcp_rst>
      err_arg = pcb->callback_arg;
 8012dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dee:	691b      	ldr	r3, [r3, #16]
 8012df0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012df4:	7d1b      	ldrb	r3, [r3, #20]
 8012df6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dfa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012e02:	6838      	ldr	r0, [r7, #0]
 8012e04:	f7ff f836 	bl	8011e74 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8012e08:	4b30      	ldr	r3, [pc, #192]	@ (8012ecc <tcp_slowtmr+0x5a8>)
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d004      	beq.n	8012e1e <tcp_slowtmr+0x4fa>
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f06f 010c 	mvn.w	r1, #12
 8012e1a:	68b8      	ldr	r0, [r7, #8]
 8012e1c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8012ecc <tcp_slowtmr+0x5a8>)
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d037      	beq.n	8012e96 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8012e26:	e590      	b.n	801294a <tcp_slowtmr+0x26>
      prev = pcb;
 8012e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8012e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e34:	7f1b      	ldrb	r3, [r3, #28]
 8012e36:	3301      	adds	r3, #1
 8012e38:	b2da      	uxtb	r2, r3
 8012e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e3c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e40:	7f1a      	ldrb	r2, [r3, #28]
 8012e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e44:	7f5b      	ldrb	r3, [r3, #29]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d325      	bcc.n	8012e96 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8012e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8012e50:	4b1e      	ldr	r3, [pc, #120]	@ (8012ecc <tcp_slowtmr+0x5a8>)
 8012e52:	2200      	movs	r2, #0
 8012e54:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d00b      	beq.n	8012e78 <tcp_slowtmr+0x554>
 8012e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012e68:	6912      	ldr	r2, [r2, #16]
 8012e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012e6c:	4610      	mov	r0, r2
 8012e6e:	4798      	blx	r3
 8012e70:	4603      	mov	r3, r0
 8012e72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012e76:	e002      	b.n	8012e7e <tcp_slowtmr+0x55a>
 8012e78:	2300      	movs	r3, #0
 8012e7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8012e7e:	4b13      	ldr	r3, [pc, #76]	@ (8012ecc <tcp_slowtmr+0x5a8>)
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	f47f ad60 	bne.w	8012948 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012e88:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d102      	bne.n	8012e96 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8012e90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e92:	f004 f89f 	bl	8016fd4 <tcp_output>
  while (pcb != NULL) {
 8012e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	f47f ad5c 	bne.w	8012956 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8012ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8012ed0 <tcp_slowtmr+0x5ac>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012ea8:	e067      	b.n	8012f7a <tcp_slowtmr+0x656>
 8012eaa:	bf00      	nop
 8012eac:	2000f484 	.word	0x2000f484
 8012eb0:	10624dd3 	.word	0x10624dd3
 8012eb4:	000124f8 	.word	0x000124f8
 8012eb8:	2000f490 	.word	0x2000f490
 8012ebc:	08023ca8 	.word	0x08023ca8
 8012ec0:	080240e0 	.word	0x080240e0
 8012ec4:	08023cec 	.word	0x08023cec
 8012ec8:	0802410c 	.word	0x0802410c
 8012ecc:	2000f498 	.word	0x2000f498
 8012ed0:	2000f494 	.word	0x2000f494
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ed6:	7d1b      	ldrb	r3, [r3, #20]
 8012ed8:	2b0a      	cmp	r3, #10
 8012eda:	d006      	beq.n	8012eea <tcp_slowtmr+0x5c6>
 8012edc:	4b2b      	ldr	r3, [pc, #172]	@ (8012f8c <tcp_slowtmr+0x668>)
 8012ede:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8012ee2:	492b      	ldr	r1, [pc, #172]	@ (8012f90 <tcp_slowtmr+0x66c>)
 8012ee4:	482b      	ldr	r0, [pc, #172]	@ (8012f94 <tcp_slowtmr+0x670>)
 8012ee6:	f00b fc97 	bl	801e818 <iprintf>
    pcb_remove = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012ef0:	4b29      	ldr	r3, [pc, #164]	@ (8012f98 <tcp_slowtmr+0x674>)
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ef6:	6a1b      	ldr	r3, [r3, #32]
 8012ef8:	1ad3      	subs	r3, r2, r3
 8012efa:	2bf0      	cmp	r3, #240	@ 0xf0
 8012efc:	d904      	bls.n	8012f08 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8012efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f02:	3301      	adds	r3, #1
 8012f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d02f      	beq.n	8012f70 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012f10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f12:	f000 fbf9 	bl	8013708 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d010      	beq.n	8012f3e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8012f9c <tcp_slowtmr+0x678>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d106      	bne.n	8012f34 <tcp_slowtmr+0x610>
 8012f26:	4b19      	ldr	r3, [pc, #100]	@ (8012f8c <tcp_slowtmr+0x668>)
 8012f28:	f240 52af 	movw	r2, #1455	@ 0x5af
 8012f2c:	491c      	ldr	r1, [pc, #112]	@ (8012fa0 <tcp_slowtmr+0x67c>)
 8012f2e:	4819      	ldr	r0, [pc, #100]	@ (8012f94 <tcp_slowtmr+0x670>)
 8012f30:	f00b fc72 	bl	801e818 <iprintf>
        prev->next = pcb->next;
 8012f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f36:	68da      	ldr	r2, [r3, #12]
 8012f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f3a:	60da      	str	r2, [r3, #12]
 8012f3c:	e00f      	b.n	8012f5e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012f3e:	4b17      	ldr	r3, [pc, #92]	@ (8012f9c <tcp_slowtmr+0x678>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d006      	beq.n	8012f56 <tcp_slowtmr+0x632>
 8012f48:	4b10      	ldr	r3, [pc, #64]	@ (8012f8c <tcp_slowtmr+0x668>)
 8012f4a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012f4e:	4915      	ldr	r1, [pc, #84]	@ (8012fa4 <tcp_slowtmr+0x680>)
 8012f50:	4810      	ldr	r0, [pc, #64]	@ (8012f94 <tcp_slowtmr+0x670>)
 8012f52:	f00b fc61 	bl	801e818 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	4a10      	ldr	r2, [pc, #64]	@ (8012f9c <tcp_slowtmr+0x678>)
 8012f5c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f60:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f64:	68db      	ldr	r3, [r3, #12]
 8012f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012f68:	69f8      	ldr	r0, [r7, #28]
 8012f6a:	f7fe ff83 	bl	8011e74 <tcp_free>
 8012f6e:	e004      	b.n	8012f7a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f72:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f76:	68db      	ldr	r3, [r3, #12]
 8012f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d1a9      	bne.n	8012ed4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012f80:	bf00      	nop
 8012f82:	bf00      	nop
 8012f84:	3730      	adds	r7, #48	@ 0x30
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bdb0      	pop	{r4, r5, r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	08023ca8 	.word	0x08023ca8
 8012f90:	08024138 	.word	0x08024138
 8012f94:	08023cec 	.word	0x08023cec
 8012f98:	2000f484 	.word	0x2000f484
 8012f9c:	2000f494 	.word	0x2000f494
 8012fa0:	08024168 	.word	0x08024168
 8012fa4:	08024190 	.word	0x08024190

08012fa8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012fae:	4b2d      	ldr	r3, [pc, #180]	@ (8013064 <tcp_fasttmr+0xbc>)
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	b2da      	uxtb	r2, r3
 8012fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8013064 <tcp_fasttmr+0xbc>)
 8012fb8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012fba:	4b2b      	ldr	r3, [pc, #172]	@ (8013068 <tcp_fasttmr+0xc0>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012fc0:	e048      	b.n	8013054 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	7f9a      	ldrb	r2, [r3, #30]
 8012fc6:	4b27      	ldr	r3, [pc, #156]	@ (8013064 <tcp_fasttmr+0xbc>)
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d03f      	beq.n	801304e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012fce:	4b25      	ldr	r3, [pc, #148]	@ (8013064 <tcp_fasttmr+0xbc>)
 8012fd0:	781a      	ldrb	r2, [r3, #0]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	8b5b      	ldrh	r3, [r3, #26]
 8012fda:	f003 0301 	and.w	r3, r3, #1
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d010      	beq.n	8013004 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	8b5b      	ldrh	r3, [r3, #26]
 8012fe6:	f043 0302 	orr.w	r3, r3, #2
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f003 ffef 	bl	8016fd4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	8b5b      	ldrh	r3, [r3, #26]
 8012ffa:	f023 0303 	bic.w	r3, r3, #3
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	8b5b      	ldrh	r3, [r3, #26]
 8013008:	f003 0308 	and.w	r3, r3, #8
 801300c:	2b00      	cmp	r3, #0
 801300e:	d009      	beq.n	8013024 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	8b5b      	ldrh	r3, [r3, #26]
 8013014:	f023 0308 	bic.w	r3, r3, #8
 8013018:	b29a      	uxth	r2, r3
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7ff f8bc 	bl	801219c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00a      	beq.n	8013048 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013032:	4b0e      	ldr	r3, [pc, #56]	@ (801306c <tcp_fasttmr+0xc4>)
 8013034:	2200      	movs	r2, #0
 8013036:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f000 f819 	bl	8013070 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801303e:	4b0b      	ldr	r3, [pc, #44]	@ (801306c <tcp_fasttmr+0xc4>)
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d000      	beq.n	8013048 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013046:	e7b8      	b.n	8012fba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	607b      	str	r3, [r7, #4]
 801304c:	e002      	b.n	8013054 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d1b3      	bne.n	8012fc2 <tcp_fasttmr+0x1a>
    }
  }
}
 801305a:	bf00      	nop
 801305c:	bf00      	nop
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	2000f49a 	.word	0x2000f49a
 8013068:	2000f490 	.word	0x2000f490
 801306c:	2000f498 	.word	0x2000f498

08013070 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013070:	b590      	push	{r4, r7, lr}
 8013072:	b085      	sub	sp, #20
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d109      	bne.n	8013092 <tcp_process_refused_data+0x22>
 801307e:	4b37      	ldr	r3, [pc, #220]	@ (801315c <tcp_process_refused_data+0xec>)
 8013080:	f240 6209 	movw	r2, #1545	@ 0x609
 8013084:	4936      	ldr	r1, [pc, #216]	@ (8013160 <tcp_process_refused_data+0xf0>)
 8013086:	4837      	ldr	r0, [pc, #220]	@ (8013164 <tcp_process_refused_data+0xf4>)
 8013088:	f00b fbc6 	bl	801e818 <iprintf>
 801308c:	f06f 030f 	mvn.w	r3, #15
 8013090:	e060      	b.n	8013154 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013096:	7b5b      	ldrb	r3, [r3, #13]
 8013098:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801309e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2200      	movs	r2, #0
 80130a4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00b      	beq.n	80130c8 <tcp_process_refused_data+0x58>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6918      	ldr	r0, [r3, #16]
 80130ba:	2300      	movs	r3, #0
 80130bc:	68ba      	ldr	r2, [r7, #8]
 80130be:	6879      	ldr	r1, [r7, #4]
 80130c0:	47a0      	blx	r4
 80130c2:	4603      	mov	r3, r0
 80130c4:	73fb      	strb	r3, [r7, #15]
 80130c6:	e007      	b.n	80130d8 <tcp_process_refused_data+0x68>
 80130c8:	2300      	movs	r3, #0
 80130ca:	68ba      	ldr	r2, [r7, #8]
 80130cc:	6879      	ldr	r1, [r7, #4]
 80130ce:	2000      	movs	r0, #0
 80130d0:	f000 f8a4 	bl	801321c <tcp_recv_null>
 80130d4:	4603      	mov	r3, r0
 80130d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80130d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d12a      	bne.n	8013136 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80130e0:	7bbb      	ldrb	r3, [r7, #14]
 80130e2:	f003 0320 	and.w	r3, r3, #32
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d033      	beq.n	8013152 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80130f2:	d005      	beq.n	8013100 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130f8:	3301      	adds	r3, #1
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013106:	2b00      	cmp	r3, #0
 8013108:	d00b      	beq.n	8013122 <tcp_process_refused_data+0xb2>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6918      	ldr	r0, [r3, #16]
 8013114:	2300      	movs	r3, #0
 8013116:	2200      	movs	r2, #0
 8013118:	6879      	ldr	r1, [r7, #4]
 801311a:	47a0      	blx	r4
 801311c:	4603      	mov	r3, r0
 801311e:	73fb      	strb	r3, [r7, #15]
 8013120:	e001      	b.n	8013126 <tcp_process_refused_data+0xb6>
 8013122:	2300      	movs	r3, #0
 8013124:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801312a:	f113 0f0d 	cmn.w	r3, #13
 801312e:	d110      	bne.n	8013152 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013130:	f06f 030c 	mvn.w	r3, #12
 8013134:	e00e      	b.n	8013154 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801313a:	f113 0f0d 	cmn.w	r3, #13
 801313e:	d102      	bne.n	8013146 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013140:	f06f 030c 	mvn.w	r3, #12
 8013144:	e006      	b.n	8013154 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	68ba      	ldr	r2, [r7, #8]
 801314a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801314c:	f06f 0304 	mvn.w	r3, #4
 8013150:	e000      	b.n	8013154 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013152:	2300      	movs	r3, #0
}
 8013154:	4618      	mov	r0, r3
 8013156:	3714      	adds	r7, #20
 8013158:	46bd      	mov	sp, r7
 801315a:	bd90      	pop	{r4, r7, pc}
 801315c:	08023ca8 	.word	0x08023ca8
 8013160:	080241b8 	.word	0x080241b8
 8013164:	08023cec 	.word	0x08023cec

08013168 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013170:	e007      	b.n	8013182 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f000 f80a 	bl	8013192 <tcp_seg_free>
    seg = next;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d1f4      	bne.n	8013172 <tcp_segs_free+0xa>
  }
}
 8013188:	bf00      	nop
 801318a:	bf00      	nop
 801318c:	3710      	adds	r7, #16
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}

08013192 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013192:	b580      	push	{r7, lr}
 8013194:	b082      	sub	sp, #8
 8013196:	af00      	add	r7, sp, #0
 8013198:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d00c      	beq.n	80131ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d004      	beq.n	80131b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fe fa4b 	bl	8011648 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80131b2:	6879      	ldr	r1, [r7, #4]
 80131b4:	2003      	movs	r0, #3
 80131b6:	f7fd fb65 	bl	8010884 <memp_free>
  }
}
 80131ba:	bf00      	nop
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
	...

080131c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <tcp_seg_copy+0x1c>
 80131d2:	4b0f      	ldr	r3, [pc, #60]	@ (8013210 <tcp_seg_copy+0x4c>)
 80131d4:	f240 6282 	movw	r2, #1666	@ 0x682
 80131d8:	490e      	ldr	r1, [pc, #56]	@ (8013214 <tcp_seg_copy+0x50>)
 80131da:	480f      	ldr	r0, [pc, #60]	@ (8013218 <tcp_seg_copy+0x54>)
 80131dc:	f00b fb1c 	bl	801e818 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80131e0:	2003      	movs	r0, #3
 80131e2:	f7fd fad9 	bl	8010798 <memp_malloc>
 80131e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d101      	bne.n	80131f2 <tcp_seg_copy+0x2e>
    return NULL;
 80131ee:	2300      	movs	r3, #0
 80131f0:	e00a      	b.n	8013208 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80131f2:	2210      	movs	r2, #16
 80131f4:	6879      	ldr	r1, [r7, #4]
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f00b fcaf 	bl	801eb5a <memcpy>
  pbuf_ref(cseg->p);
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	4618      	mov	r0, r3
 8013202:	f7fe fac7 	bl	8011794 <pbuf_ref>
  return cseg;
 8013206:	68fb      	ldr	r3, [r7, #12]
}
 8013208:	4618      	mov	r0, r3
 801320a:	3710      	adds	r7, #16
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}
 8013210:	08023ca8 	.word	0x08023ca8
 8013214:	080241fc 	.word	0x080241fc
 8013218:	08023cec 	.word	0x08023cec

0801321c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
 8013228:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d109      	bne.n	8013244 <tcp_recv_null+0x28>
 8013230:	4b12      	ldr	r3, [pc, #72]	@ (801327c <tcp_recv_null+0x60>)
 8013232:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013236:	4912      	ldr	r1, [pc, #72]	@ (8013280 <tcp_recv_null+0x64>)
 8013238:	4812      	ldr	r0, [pc, #72]	@ (8013284 <tcp_recv_null+0x68>)
 801323a:	f00b faed 	bl	801e818 <iprintf>
 801323e:	f06f 030f 	mvn.w	r3, #15
 8013242:	e016      	b.n	8013272 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d009      	beq.n	801325e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	891b      	ldrh	r3, [r3, #8]
 801324e:	4619      	mov	r1, r3
 8013250:	68b8      	ldr	r0, [r7, #8]
 8013252:	f7ff f9b9 	bl	80125c8 <tcp_recved>
    pbuf_free(p);
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f7fe f9f6 	bl	8011648 <pbuf_free>
 801325c:	e008      	b.n	8013270 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801325e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d104      	bne.n	8013270 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013266:	68b8      	ldr	r0, [r7, #8]
 8013268:	f7ff f802 	bl	8012270 <tcp_close>
 801326c:	4603      	mov	r3, r0
 801326e:	e000      	b.n	8013272 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013270:	2300      	movs	r3, #0
}
 8013272:	4618      	mov	r0, r3
 8013274:	3710      	adds	r7, #16
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	08023ca8 	.word	0x08023ca8
 8013280:	08024218 	.word	0x08024218
 8013284:	08023cec 	.word	0x08023cec

08013288 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b086      	sub	sp, #24
 801328c:	af00      	add	r7, sp, #0
 801328e:	4603      	mov	r3, r0
 8013290:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013296:	2b00      	cmp	r3, #0
 8013298:	db01      	blt.n	801329e <tcp_kill_prio+0x16>
 801329a:	79fb      	ldrb	r3, [r7, #7]
 801329c:	e000      	b.n	80132a0 <tcp_kill_prio+0x18>
 801329e:	237f      	movs	r3, #127	@ 0x7f
 80132a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80132a2:	7afb      	ldrb	r3, [r7, #11]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d034      	beq.n	8013312 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80132a8:	7afb      	ldrb	r3, [r7, #11]
 80132aa:	3b01      	subs	r3, #1
 80132ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80132b2:	2300      	movs	r3, #0
 80132b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80132b6:	4b19      	ldr	r3, [pc, #100]	@ (801331c <tcp_kill_prio+0x94>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	617b      	str	r3, [r7, #20]
 80132bc:	e01f      	b.n	80132fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	7d5b      	ldrb	r3, [r3, #21]
 80132c2:	7afa      	ldrb	r2, [r7, #11]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d80c      	bhi.n	80132e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80132cc:	7afa      	ldrb	r2, [r7, #11]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d112      	bne.n	80132f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80132d2:	4b13      	ldr	r3, [pc, #76]	@ (8013320 <tcp_kill_prio+0x98>)
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	6a1b      	ldr	r3, [r3, #32]
 80132da:	1ad3      	subs	r3, r2, r3
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d80a      	bhi.n	80132f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80132e2:	4b0f      	ldr	r3, [pc, #60]	@ (8013320 <tcp_kill_prio+0x98>)
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	6a1b      	ldr	r3, [r3, #32]
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	7d5b      	ldrb	r3, [r3, #21]
 80132f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	617b      	str	r3, [r7, #20]
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d1dc      	bne.n	80132be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d004      	beq.n	8013314 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801330a:	6938      	ldr	r0, [r7, #16]
 801330c:	f7ff f8f6 	bl	80124fc <tcp_abort>
 8013310:	e000      	b.n	8013314 <tcp_kill_prio+0x8c>
    return;
 8013312:	bf00      	nop
  }
}
 8013314:	3718      	adds	r7, #24
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	2000f490 	.word	0x2000f490
 8013320:	2000f484 	.word	0x2000f484

08013324 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b086      	sub	sp, #24
 8013328:	af00      	add	r7, sp, #0
 801332a:	4603      	mov	r3, r0
 801332c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801332e:	79fb      	ldrb	r3, [r7, #7]
 8013330:	2b08      	cmp	r3, #8
 8013332:	d009      	beq.n	8013348 <tcp_kill_state+0x24>
 8013334:	79fb      	ldrb	r3, [r7, #7]
 8013336:	2b09      	cmp	r3, #9
 8013338:	d006      	beq.n	8013348 <tcp_kill_state+0x24>
 801333a:	4b1a      	ldr	r3, [pc, #104]	@ (80133a4 <tcp_kill_state+0x80>)
 801333c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013340:	4919      	ldr	r1, [pc, #100]	@ (80133a8 <tcp_kill_state+0x84>)
 8013342:	481a      	ldr	r0, [pc, #104]	@ (80133ac <tcp_kill_state+0x88>)
 8013344:	f00b fa68 	bl	801e818 <iprintf>

  inactivity = 0;
 8013348:	2300      	movs	r3, #0
 801334a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801334c:	2300      	movs	r3, #0
 801334e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013350:	4b17      	ldr	r3, [pc, #92]	@ (80133b0 <tcp_kill_state+0x8c>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	617b      	str	r3, [r7, #20]
 8013356:	e017      	b.n	8013388 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	7d1b      	ldrb	r3, [r3, #20]
 801335c:	79fa      	ldrb	r2, [r7, #7]
 801335e:	429a      	cmp	r2, r3
 8013360:	d10f      	bne.n	8013382 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013362:	4b14      	ldr	r3, [pc, #80]	@ (80133b4 <tcp_kill_state+0x90>)
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	6a1b      	ldr	r3, [r3, #32]
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	68fa      	ldr	r2, [r7, #12]
 801336e:	429a      	cmp	r2, r3
 8013370:	d807      	bhi.n	8013382 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013372:	4b10      	ldr	r3, [pc, #64]	@ (80133b4 <tcp_kill_state+0x90>)
 8013374:	681a      	ldr	r2, [r3, #0]
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	6a1b      	ldr	r3, [r3, #32]
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	68db      	ldr	r3, [r3, #12]
 8013386:	617b      	str	r3, [r7, #20]
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d1e4      	bne.n	8013358 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d003      	beq.n	801339c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013394:	2100      	movs	r1, #0
 8013396:	6938      	ldr	r0, [r7, #16]
 8013398:	f7fe fff2 	bl	8012380 <tcp_abandon>
  }
}
 801339c:	bf00      	nop
 801339e:	3718      	adds	r7, #24
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}
 80133a4:	08023ca8 	.word	0x08023ca8
 80133a8:	08024234 	.word	0x08024234
 80133ac:	08023cec 	.word	0x08023cec
 80133b0:	2000f490 	.word	0x2000f490
 80133b4:	2000f484 	.word	0x2000f484

080133b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80133be:	2300      	movs	r3, #0
 80133c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80133c2:	2300      	movs	r3, #0
 80133c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80133c6:	4b12      	ldr	r3, [pc, #72]	@ (8013410 <tcp_kill_timewait+0x58>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	e012      	b.n	80133f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80133ce:	4b11      	ldr	r3, [pc, #68]	@ (8013414 <tcp_kill_timewait+0x5c>)
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	6a1b      	ldr	r3, [r3, #32]
 80133d6:	1ad3      	subs	r3, r2, r3
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d807      	bhi.n	80133ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80133de:	4b0d      	ldr	r3, [pc, #52]	@ (8013414 <tcp_kill_timewait+0x5c>)
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	6a1b      	ldr	r3, [r3, #32]
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	68db      	ldr	r3, [r3, #12]
 80133f2:	60fb      	str	r3, [r7, #12]
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d1e9      	bne.n	80133ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d002      	beq.n	8013406 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013400:	68b8      	ldr	r0, [r7, #8]
 8013402:	f7ff f87b 	bl	80124fc <tcp_abort>
  }
}
 8013406:	bf00      	nop
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	2000f494 	.word	0x2000f494
 8013414:	2000f484 	.word	0x2000f484

08013418 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801341e:	4b10      	ldr	r3, [pc, #64]	@ (8013460 <tcp_handle_closepend+0x48>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013424:	e014      	b.n	8013450 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	8b5b      	ldrh	r3, [r3, #26]
 8013430:	f003 0308 	and.w	r3, r3, #8
 8013434:	2b00      	cmp	r3, #0
 8013436:	d009      	beq.n	801344c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	8b5b      	ldrh	r3, [r3, #26]
 801343c:	f023 0308 	bic.w	r3, r3, #8
 8013440:	b29a      	uxth	r2, r3
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f7fe fea8 	bl	801219c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d1e7      	bne.n	8013426 <tcp_handle_closepend+0xe>
  }
}
 8013456:	bf00      	nop
 8013458:	bf00      	nop
 801345a:	3708      	adds	r7, #8
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}
 8013460:	2000f490 	.word	0x2000f490

08013464 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	4603      	mov	r3, r0
 801346c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801346e:	2001      	movs	r0, #1
 8013470:	f7fd f992 	bl	8010798 <memp_malloc>
 8013474:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d126      	bne.n	80134ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801347c:	f7ff ffcc 	bl	8013418 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013480:	f7ff ff9a 	bl	80133b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013484:	2001      	movs	r0, #1
 8013486:	f7fd f987 	bl	8010798 <memp_malloc>
 801348a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d11b      	bne.n	80134ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013492:	2009      	movs	r0, #9
 8013494:	f7ff ff46 	bl	8013324 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013498:	2001      	movs	r0, #1
 801349a:	f7fd f97d 	bl	8010798 <memp_malloc>
 801349e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d111      	bne.n	80134ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80134a6:	2008      	movs	r0, #8
 80134a8:	f7ff ff3c 	bl	8013324 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80134ac:	2001      	movs	r0, #1
 80134ae:	f7fd f973 	bl	8010798 <memp_malloc>
 80134b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d107      	bne.n	80134ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80134ba:	79fb      	ldrb	r3, [r7, #7]
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff fee3 	bl	8013288 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80134c2:	2001      	movs	r0, #1
 80134c4:	f7fd f968 	bl	8010798 <memp_malloc>
 80134c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d03f      	beq.n	8013550 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80134d0:	229c      	movs	r2, #156	@ 0x9c
 80134d2:	2100      	movs	r1, #0
 80134d4:	68f8      	ldr	r0, [r7, #12]
 80134d6:	f00b fa3e 	bl	801e956 <memset>
    pcb->prio = prio;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	79fa      	ldrb	r2, [r7, #7]
 80134de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80134e6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80134f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	22ff      	movs	r2, #255	@ 0xff
 80134fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013506:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2206      	movs	r2, #6
 801350c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2206      	movs	r2, #6
 8013514:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801351c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2201      	movs	r2, #1
 8013522:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8013526:	4b0d      	ldr	r3, [pc, #52]	@ (801355c <tcp_alloc+0xf8>)
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801352e:	4b0c      	ldr	r3, [pc, #48]	@ (8013560 <tcp_alloc+0xfc>)
 8013530:	781a      	ldrb	r2, [r3, #0]
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801353c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	4a08      	ldr	r2, [pc, #32]	@ (8013564 <tcp_alloc+0x100>)
 8013544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	4a07      	ldr	r2, [pc, #28]	@ (8013568 <tcp_alloc+0x104>)
 801354c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013550:	68fb      	ldr	r3, [r7, #12]
}
 8013552:	4618      	mov	r0, r3
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	2000f484 	.word	0x2000f484
 8013560:	2000f49a 	.word	0x2000f49a
 8013564:	0801321d 	.word	0x0801321d
 8013568:	006ddd00 	.word	0x006ddd00

0801356c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	4603      	mov	r3, r0
 8013574:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013576:	2040      	movs	r0, #64	@ 0x40
 8013578:	f7ff ff74 	bl	8013464 <tcp_alloc>
 801357c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801357e:	68fb      	ldr	r3, [r7, #12]
}
 8013580:	4618      	mov	r0, r3
 8013582:	3710      	adds	r7, #16
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013588:	b480      	push	{r7}
 801358a:	b083      	sub	sp, #12
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d002      	beq.n	801359e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	683a      	ldr	r2, [r7, #0]
 801359c:	611a      	str	r2, [r3, #16]
  }
}
 801359e:	bf00      	nop
 80135a0:	370c      	adds	r7, #12
 80135a2:	46bd      	mov	sp, r7
 80135a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a8:	4770      	bx	lr
	...

080135ac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d00e      	beq.n	80135da <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	7d1b      	ldrb	r3, [r3, #20]
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	d106      	bne.n	80135d2 <tcp_recv+0x26>
 80135c4:	4b07      	ldr	r3, [pc, #28]	@ (80135e4 <tcp_recv+0x38>)
 80135c6:	f240 72df 	movw	r2, #2015	@ 0x7df
 80135ca:	4907      	ldr	r1, [pc, #28]	@ (80135e8 <tcp_recv+0x3c>)
 80135cc:	4807      	ldr	r0, [pc, #28]	@ (80135ec <tcp_recv+0x40>)
 80135ce:	f00b f923 	bl	801e818 <iprintf>
    pcb->recv = recv;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	683a      	ldr	r2, [r7, #0]
 80135d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80135da:	bf00      	nop
 80135dc:	3708      	adds	r7, #8
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	08023ca8 	.word	0x08023ca8
 80135e8:	08024244 	.word	0x08024244
 80135ec:	08023cec 	.word	0x08023cec

080135f0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d00e      	beq.n	801361e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	7d1b      	ldrb	r3, [r3, #20]
 8013604:	2b01      	cmp	r3, #1
 8013606:	d106      	bne.n	8013616 <tcp_sent+0x26>
 8013608:	4b07      	ldr	r3, [pc, #28]	@ (8013628 <tcp_sent+0x38>)
 801360a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801360e:	4907      	ldr	r1, [pc, #28]	@ (801362c <tcp_sent+0x3c>)
 8013610:	4807      	ldr	r0, [pc, #28]	@ (8013630 <tcp_sent+0x40>)
 8013612:	f00b f901 	bl	801e818 <iprintf>
    pcb->sent = sent;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	683a      	ldr	r2, [r7, #0]
 801361a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801361e:	bf00      	nop
 8013620:	3708      	adds	r7, #8
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	08023ca8 	.word	0x08023ca8
 801362c:	0802426c 	.word	0x0802426c
 8013630:	08023cec 	.word	0x08023cec

08013634 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b082      	sub	sp, #8
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d00e      	beq.n	8013662 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	7d1b      	ldrb	r3, [r3, #20]
 8013648:	2b01      	cmp	r3, #1
 801364a:	d106      	bne.n	801365a <tcp_err+0x26>
 801364c:	4b07      	ldr	r3, [pc, #28]	@ (801366c <tcp_err+0x38>)
 801364e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8013652:	4907      	ldr	r1, [pc, #28]	@ (8013670 <tcp_err+0x3c>)
 8013654:	4807      	ldr	r0, [pc, #28]	@ (8013674 <tcp_err+0x40>)
 8013656:	f00b f8df 	bl	801e818 <iprintf>
    pcb->errf = err;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	683a      	ldr	r2, [r7, #0]
 801365e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8013662:	bf00      	nop
 8013664:	3708      	adds	r7, #8
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	08023ca8 	.word	0x08023ca8
 8013670:	08024294 	.word	0x08024294
 8013674:	08023cec 	.word	0x08023cec

08013678 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013678:	b480      	push	{r7}
 801367a:	b085      	sub	sp, #20
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d008      	beq.n	801369a <tcp_accept+0x22>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	7d1b      	ldrb	r3, [r3, #20]
 801368c:	2b01      	cmp	r3, #1
 801368e:	d104      	bne.n	801369a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	683a      	ldr	r2, [r7, #0]
 8013698:	619a      	str	r2, [r3, #24]
  }
}
 801369a:	bf00      	nop
 801369c:	3714      	adds	r7, #20
 801369e:	46bd      	mov	sp, r7
 80136a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a4:	4770      	bx	lr
	...

080136a8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	4613      	mov	r3, r2
 80136b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d107      	bne.n	80136cc <tcp_poll+0x24>
 80136bc:	4b0e      	ldr	r3, [pc, #56]	@ (80136f8 <tcp_poll+0x50>)
 80136be:	f640 023d 	movw	r2, #2109	@ 0x83d
 80136c2:	490e      	ldr	r1, [pc, #56]	@ (80136fc <tcp_poll+0x54>)
 80136c4:	480e      	ldr	r0, [pc, #56]	@ (8013700 <tcp_poll+0x58>)
 80136c6:	f00b f8a7 	bl	801e818 <iprintf>
 80136ca:	e011      	b.n	80136f0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	7d1b      	ldrb	r3, [r3, #20]
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d106      	bne.n	80136e2 <tcp_poll+0x3a>
 80136d4:	4b08      	ldr	r3, [pc, #32]	@ (80136f8 <tcp_poll+0x50>)
 80136d6:	f640 023e 	movw	r2, #2110	@ 0x83e
 80136da:	490a      	ldr	r1, [pc, #40]	@ (8013704 <tcp_poll+0x5c>)
 80136dc:	4808      	ldr	r0, [pc, #32]	@ (8013700 <tcp_poll+0x58>)
 80136de:	f00b f89b 	bl	801e818 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	68ba      	ldr	r2, [r7, #8]
 80136e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	79fa      	ldrb	r2, [r7, #7]
 80136ee:	775a      	strb	r2, [r3, #29]
}
 80136f0:	3710      	adds	r7, #16
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	08023ca8 	.word	0x08023ca8
 80136fc:	080242bc 	.word	0x080242bc
 8013700:	08023cec 	.word	0x08023cec
 8013704:	080242d4 	.word	0x080242d4

08013708 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d107      	bne.n	8013726 <tcp_pcb_purge+0x1e>
 8013716:	4b21      	ldr	r3, [pc, #132]	@ (801379c <tcp_pcb_purge+0x94>)
 8013718:	f640 0251 	movw	r2, #2129	@ 0x851
 801371c:	4920      	ldr	r1, [pc, #128]	@ (80137a0 <tcp_pcb_purge+0x98>)
 801371e:	4821      	ldr	r0, [pc, #132]	@ (80137a4 <tcp_pcb_purge+0x9c>)
 8013720:	f00b f87a 	bl	801e818 <iprintf>
 8013724:	e037      	b.n	8013796 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	7d1b      	ldrb	r3, [r3, #20]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d033      	beq.n	8013796 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013732:	2b0a      	cmp	r3, #10
 8013734:	d02f      	beq.n	8013796 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801373a:	2b01      	cmp	r3, #1
 801373c:	d02b      	beq.n	8013796 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013742:	2b00      	cmp	r3, #0
 8013744:	d007      	beq.n	8013756 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801374a:	4618      	mov	r0, r3
 801374c:	f7fd ff7c 	bl	8011648 <pbuf_free>
      pcb->refused_data = NULL;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2200      	movs	r2, #0
 8013754:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801375a:	2b00      	cmp	r3, #0
 801375c:	d002      	beq.n	8013764 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f000 f986 	bl	8013a70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801376a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013770:	4618      	mov	r0, r3
 8013772:	f7ff fcf9 	bl	8013168 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801377a:	4618      	mov	r0, r3
 801377c:	f7ff fcf4 	bl	8013168 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2200      	movs	r2, #0
 8013784:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2200      	movs	r2, #0
 8013792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	08023ca8 	.word	0x08023ca8
 80137a0:	080242f4 	.word	0x080242f4
 80137a4:	08023cec 	.word	0x08023cec

080137a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b084      	sub	sp, #16
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d106      	bne.n	80137c6 <tcp_pcb_remove+0x1e>
 80137b8:	4b3e      	ldr	r3, [pc, #248]	@ (80138b4 <tcp_pcb_remove+0x10c>)
 80137ba:	f640 0283 	movw	r2, #2179	@ 0x883
 80137be:	493e      	ldr	r1, [pc, #248]	@ (80138b8 <tcp_pcb_remove+0x110>)
 80137c0:	483e      	ldr	r0, [pc, #248]	@ (80138bc <tcp_pcb_remove+0x114>)
 80137c2:	f00b f829 	bl	801e818 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d106      	bne.n	80137da <tcp_pcb_remove+0x32>
 80137cc:	4b39      	ldr	r3, [pc, #228]	@ (80138b4 <tcp_pcb_remove+0x10c>)
 80137ce:	f640 0284 	movw	r2, #2180	@ 0x884
 80137d2:	493b      	ldr	r1, [pc, #236]	@ (80138c0 <tcp_pcb_remove+0x118>)
 80137d4:	4839      	ldr	r0, [pc, #228]	@ (80138bc <tcp_pcb_remove+0x114>)
 80137d6:	f00b f81f 	bl	801e818 <iprintf>

  TCP_RMV(pcblist, pcb);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	683a      	ldr	r2, [r7, #0]
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d105      	bne.n	80137f0 <tcp_pcb_remove+0x48>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	68da      	ldr	r2, [r3, #12]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	601a      	str	r2, [r3, #0]
 80137ee:	e013      	b.n	8013818 <tcp_pcb_remove+0x70>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	60fb      	str	r3, [r7, #12]
 80137f6:	e00c      	b.n	8013812 <tcp_pcb_remove+0x6a>
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	683a      	ldr	r2, [r7, #0]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d104      	bne.n	801380c <tcp_pcb_remove+0x64>
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	68da      	ldr	r2, [r3, #12]
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	60da      	str	r2, [r3, #12]
 801380a:	e005      	b.n	8013818 <tcp_pcb_remove+0x70>
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	60fb      	str	r3, [r7, #12]
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d1ef      	bne.n	80137f8 <tcp_pcb_remove+0x50>
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	2200      	movs	r2, #0
 801381c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801381e:	6838      	ldr	r0, [r7, #0]
 8013820:	f7ff ff72 	bl	8013708 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	7d1b      	ldrb	r3, [r3, #20]
 8013828:	2b0a      	cmp	r3, #10
 801382a:	d013      	beq.n	8013854 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013830:	2b01      	cmp	r3, #1
 8013832:	d00f      	beq.n	8013854 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	8b5b      	ldrh	r3, [r3, #26]
 8013838:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801383c:	2b00      	cmp	r3, #0
 801383e:	d009      	beq.n	8013854 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	8b5b      	ldrh	r3, [r3, #26]
 8013844:	f043 0302 	orr.w	r3, r3, #2
 8013848:	b29a      	uxth	r2, r3
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801384e:	6838      	ldr	r0, [r7, #0]
 8013850:	f003 fbc0 	bl	8016fd4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	7d1b      	ldrb	r3, [r3, #20]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d020      	beq.n	801389e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013860:	2b00      	cmp	r3, #0
 8013862:	d006      	beq.n	8013872 <tcp_pcb_remove+0xca>
 8013864:	4b13      	ldr	r3, [pc, #76]	@ (80138b4 <tcp_pcb_remove+0x10c>)
 8013866:	f640 0293 	movw	r2, #2195	@ 0x893
 801386a:	4916      	ldr	r1, [pc, #88]	@ (80138c4 <tcp_pcb_remove+0x11c>)
 801386c:	4813      	ldr	r0, [pc, #76]	@ (80138bc <tcp_pcb_remove+0x114>)
 801386e:	f00a ffd3 	bl	801e818 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013876:	2b00      	cmp	r3, #0
 8013878:	d006      	beq.n	8013888 <tcp_pcb_remove+0xe0>
 801387a:	4b0e      	ldr	r3, [pc, #56]	@ (80138b4 <tcp_pcb_remove+0x10c>)
 801387c:	f640 0294 	movw	r2, #2196	@ 0x894
 8013880:	4911      	ldr	r1, [pc, #68]	@ (80138c8 <tcp_pcb_remove+0x120>)
 8013882:	480e      	ldr	r0, [pc, #56]	@ (80138bc <tcp_pcb_remove+0x114>)
 8013884:	f00a ffc8 	bl	801e818 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801388c:	2b00      	cmp	r3, #0
 801388e:	d006      	beq.n	801389e <tcp_pcb_remove+0xf6>
 8013890:	4b08      	ldr	r3, [pc, #32]	@ (80138b4 <tcp_pcb_remove+0x10c>)
 8013892:	f640 0296 	movw	r2, #2198	@ 0x896
 8013896:	490d      	ldr	r1, [pc, #52]	@ (80138cc <tcp_pcb_remove+0x124>)
 8013898:	4808      	ldr	r0, [pc, #32]	@ (80138bc <tcp_pcb_remove+0x114>)
 801389a:	f00a ffbd 	bl	801e818 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	2200      	movs	r2, #0
 80138a2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	2200      	movs	r2, #0
 80138a8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80138aa:	bf00      	nop
 80138ac:	3710      	adds	r7, #16
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	bf00      	nop
 80138b4:	08023ca8 	.word	0x08023ca8
 80138b8:	08024310 	.word	0x08024310
 80138bc:	08023cec 	.word	0x08023cec
 80138c0:	0802432c 	.word	0x0802432c
 80138c4:	0802434c 	.word	0x0802434c
 80138c8:	08024364 	.word	0x08024364
 80138cc:	08024380 	.word	0x08024380

080138d0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b082      	sub	sp, #8
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d106      	bne.n	80138ec <tcp_next_iss+0x1c>
 80138de:	4b0a      	ldr	r3, [pc, #40]	@ (8013908 <tcp_next_iss+0x38>)
 80138e0:	f640 02af 	movw	r2, #2223	@ 0x8af
 80138e4:	4909      	ldr	r1, [pc, #36]	@ (801390c <tcp_next_iss+0x3c>)
 80138e6:	480a      	ldr	r0, [pc, #40]	@ (8013910 <tcp_next_iss+0x40>)
 80138e8:	f00a ff96 	bl	801e818 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80138ec:	4b09      	ldr	r3, [pc, #36]	@ (8013914 <tcp_next_iss+0x44>)
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	4b09      	ldr	r3, [pc, #36]	@ (8013918 <tcp_next_iss+0x48>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4413      	add	r3, r2
 80138f6:	4a07      	ldr	r2, [pc, #28]	@ (8013914 <tcp_next_iss+0x44>)
 80138f8:	6013      	str	r3, [r2, #0]
  return iss;
 80138fa:	4b06      	ldr	r3, [pc, #24]	@ (8013914 <tcp_next_iss+0x44>)
 80138fc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3708      	adds	r7, #8
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	bf00      	nop
 8013908:	08023ca8 	.word	0x08023ca8
 801390c:	08024398 	.word	0x08024398
 8013910:	08023cec 	.word	0x08023cec
 8013914:	2000003c 	.word	0x2000003c
 8013918:	2000f484 	.word	0x2000f484

0801391c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b086      	sub	sp, #24
 8013920:	af00      	add	r7, sp, #0
 8013922:	4603      	mov	r3, r0
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
 8013928:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d106      	bne.n	801393e <tcp_eff_send_mss_netif+0x22>
 8013930:	4b14      	ldr	r3, [pc, #80]	@ (8013984 <tcp_eff_send_mss_netif+0x68>)
 8013932:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8013936:	4914      	ldr	r1, [pc, #80]	@ (8013988 <tcp_eff_send_mss_netif+0x6c>)
 8013938:	4814      	ldr	r0, [pc, #80]	@ (801398c <tcp_eff_send_mss_netif+0x70>)
 801393a:	f00a ff6d 	bl	801e818 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d101      	bne.n	8013948 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013944:	89fb      	ldrh	r3, [r7, #14]
 8013946:	e019      	b.n	801397c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801394c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801394e:	8afb      	ldrh	r3, [r7, #22]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d012      	beq.n	801397a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013954:	2328      	movs	r3, #40	@ 0x28
 8013956:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013958:	8afa      	ldrh	r2, [r7, #22]
 801395a:	8abb      	ldrh	r3, [r7, #20]
 801395c:	429a      	cmp	r2, r3
 801395e:	d904      	bls.n	801396a <tcp_eff_send_mss_netif+0x4e>
 8013960:	8afa      	ldrh	r2, [r7, #22]
 8013962:	8abb      	ldrh	r3, [r7, #20]
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	b29b      	uxth	r3, r3
 8013968:	e000      	b.n	801396c <tcp_eff_send_mss_netif+0x50>
 801396a:	2300      	movs	r3, #0
 801396c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801396e:	8a7a      	ldrh	r2, [r7, #18]
 8013970:	89fb      	ldrh	r3, [r7, #14]
 8013972:	4293      	cmp	r3, r2
 8013974:	bf28      	it	cs
 8013976:	4613      	movcs	r3, r2
 8013978:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801397a:	89fb      	ldrh	r3, [r7, #14]
}
 801397c:	4618      	mov	r0, r3
 801397e:	3718      	adds	r7, #24
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}
 8013984:	08023ca8 	.word	0x08023ca8
 8013988:	080243b4 	.word	0x080243b4
 801398c:	08023cec 	.word	0x08023cec

08013990 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b084      	sub	sp, #16
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d119      	bne.n	80139d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80139a4:	4b10      	ldr	r3, [pc, #64]	@ (80139e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80139a6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80139aa:	4910      	ldr	r1, [pc, #64]	@ (80139ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80139ac:	4810      	ldr	r0, [pc, #64]	@ (80139f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80139ae:	f00a ff33 	bl	801e818 <iprintf>

  while (pcb != NULL) {
 80139b2:	e011      	b.n	80139d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d108      	bne.n	80139d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80139c6:	68f8      	ldr	r0, [r7, #12]
 80139c8:	f7fe fd98 	bl	80124fc <tcp_abort>
      pcb = next;
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	60fb      	str	r3, [r7, #12]
 80139d0:	e002      	b.n	80139d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d1ea      	bne.n	80139b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80139de:	bf00      	nop
 80139e0:	bf00      	nop
 80139e2:	3710      	adds	r7, #16
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	08023ca8 	.word	0x08023ca8
 80139ec:	080243dc 	.word	0x080243dc
 80139f0:	08023cec 	.word	0x08023cec

080139f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b084      	sub	sp, #16
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d02a      	beq.n	8013a5a <tcp_netif_ip_addr_changed+0x66>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d026      	beq.n	8013a5a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013a0c:	4b15      	ldr	r3, [pc, #84]	@ (8013a64 <tcp_netif_ip_addr_changed+0x70>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	4619      	mov	r1, r3
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f7ff ffbc 	bl	8013990 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013a18:	4b13      	ldr	r3, [pc, #76]	@ (8013a68 <tcp_netif_ip_addr_changed+0x74>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f7ff ffb6 	bl	8013990 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d017      	beq.n	8013a5a <tcp_netif_ip_addr_changed+0x66>
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d013      	beq.n	8013a5a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a32:	4b0e      	ldr	r3, [pc, #56]	@ (8013a6c <tcp_netif_ip_addr_changed+0x78>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	60fb      	str	r3, [r7, #12]
 8013a38:	e00c      	b.n	8013a54 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d103      	bne.n	8013a4e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	60fb      	str	r3, [r7, #12]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d1ef      	bne.n	8013a3a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013a5a:	bf00      	nop
 8013a5c:	3710      	adds	r7, #16
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	2000f490 	.word	0x2000f490
 8013a68:	2000f488 	.word	0x2000f488
 8013a6c:	2000f48c 	.word	0x2000f48c

08013a70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d007      	beq.n	8013a90 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7ff fb6f 	bl	8013168 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013a90:	bf00      	nop
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013a98:	b590      	push	{r4, r7, lr}
 8013a9a:	b08d      	sub	sp, #52	@ 0x34
 8013a9c:	af04      	add	r7, sp, #16
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d105      	bne.n	8013ab4 <tcp_input+0x1c>
 8013aa8:	4b9b      	ldr	r3, [pc, #620]	@ (8013d18 <tcp_input+0x280>)
 8013aaa:	2283      	movs	r2, #131	@ 0x83
 8013aac:	499b      	ldr	r1, [pc, #620]	@ (8013d1c <tcp_input+0x284>)
 8013aae:	489c      	ldr	r0, [pc, #624]	@ (8013d20 <tcp_input+0x288>)
 8013ab0:	f00a feb2 	bl	801e818 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	4a9a      	ldr	r2, [pc, #616]	@ (8013d24 <tcp_input+0x28c>)
 8013aba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	895b      	ldrh	r3, [r3, #10]
 8013ac0:	2b13      	cmp	r3, #19
 8013ac2:	f240 83d1 	bls.w	8014268 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013ac6:	4b98      	ldr	r3, [pc, #608]	@ (8013d28 <tcp_input+0x290>)
 8013ac8:	695b      	ldr	r3, [r3, #20]
 8013aca:	4a97      	ldr	r2, [pc, #604]	@ (8013d28 <tcp_input+0x290>)
 8013acc:	6812      	ldr	r2, [r2, #0]
 8013ace:	4611      	mov	r1, r2
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f008 fb5d 	bl	801c190 <ip4_addr_isbroadcast_u32>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	f040 83c7 	bne.w	801426c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013ade:	4b92      	ldr	r3, [pc, #584]	@ (8013d28 <tcp_input+0x290>)
 8013ae0:	695b      	ldr	r3, [r3, #20]
 8013ae2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013ae6:	2be0      	cmp	r3, #224	@ 0xe0
 8013ae8:	f000 83c0 	beq.w	801426c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013aec:	4b8d      	ldr	r3, [pc, #564]	@ (8013d24 <tcp_input+0x28c>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	899b      	ldrh	r3, [r3, #12]
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fb fe89 	bl	800f80c <lwip_htons>
 8013afa:	4603      	mov	r3, r0
 8013afc:	0b1b      	lsrs	r3, r3, #12
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	b2db      	uxtb	r3, r3
 8013b02:	009b      	lsls	r3, r3, #2
 8013b04:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013b06:	7cbb      	ldrb	r3, [r7, #18]
 8013b08:	2b13      	cmp	r3, #19
 8013b0a:	f240 83b1 	bls.w	8014270 <tcp_input+0x7d8>
 8013b0e:	7cbb      	ldrb	r3, [r7, #18]
 8013b10:	b29a      	uxth	r2, r3
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	891b      	ldrh	r3, [r3, #8]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	f200 83aa 	bhi.w	8014270 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013b1c:	7cbb      	ldrb	r3, [r7, #18]
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	3b14      	subs	r3, #20
 8013b22:	b29a      	uxth	r2, r3
 8013b24:	4b81      	ldr	r3, [pc, #516]	@ (8013d2c <tcp_input+0x294>)
 8013b26:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013b28:	4b81      	ldr	r3, [pc, #516]	@ (8013d30 <tcp_input+0x298>)
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	895a      	ldrh	r2, [r3, #10]
 8013b32:	7cbb      	ldrb	r3, [r7, #18]
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d309      	bcc.n	8013b4e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8013d2c <tcp_input+0x294>)
 8013b3c:	881a      	ldrh	r2, [r3, #0]
 8013b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8013d34 <tcp_input+0x29c>)
 8013b40:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013b42:	7cbb      	ldrb	r3, [r7, #18]
 8013b44:	4619      	mov	r1, r3
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f7fd fcc6 	bl	80114d8 <pbuf_remove_header>
 8013b4c:	e04e      	b.n	8013bec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d105      	bne.n	8013b62 <tcp_input+0xca>
 8013b56:	4b70      	ldr	r3, [pc, #448]	@ (8013d18 <tcp_input+0x280>)
 8013b58:	22c2      	movs	r2, #194	@ 0xc2
 8013b5a:	4977      	ldr	r1, [pc, #476]	@ (8013d38 <tcp_input+0x2a0>)
 8013b5c:	4870      	ldr	r0, [pc, #448]	@ (8013d20 <tcp_input+0x288>)
 8013b5e:	f00a fe5b 	bl	801e818 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013b62:	2114      	movs	r1, #20
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f7fd fcb7 	bl	80114d8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	895a      	ldrh	r2, [r3, #10]
 8013b6e:	4b71      	ldr	r3, [pc, #452]	@ (8013d34 <tcp_input+0x29c>)
 8013b70:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013b72:	4b6e      	ldr	r3, [pc, #440]	@ (8013d2c <tcp_input+0x294>)
 8013b74:	881a      	ldrh	r2, [r3, #0]
 8013b76:	4b6f      	ldr	r3, [pc, #444]	@ (8013d34 <tcp_input+0x29c>)
 8013b78:	881b      	ldrh	r3, [r3, #0]
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8013d34 <tcp_input+0x29c>)
 8013b80:	881b      	ldrh	r3, [r3, #0]
 8013b82:	4619      	mov	r1, r3
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7fd fca7 	bl	80114d8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	895b      	ldrh	r3, [r3, #10]
 8013b90:	8a3a      	ldrh	r2, [r7, #16]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	f200 836e 	bhi.w	8014274 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	4a64      	ldr	r2, [pc, #400]	@ (8013d30 <tcp_input+0x298>)
 8013ba0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	8a3a      	ldrh	r2, [r7, #16]
 8013ba8:	4611      	mov	r1, r2
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fd fc94 	bl	80114d8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	891a      	ldrh	r2, [r3, #8]
 8013bb4:	8a3b      	ldrh	r3, [r7, #16]
 8013bb6:	1ad3      	subs	r3, r2, r3
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	895b      	ldrh	r3, [r3, #10]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d005      	beq.n	8013bd2 <tcp_input+0x13a>
 8013bc6:	4b54      	ldr	r3, [pc, #336]	@ (8013d18 <tcp_input+0x280>)
 8013bc8:	22df      	movs	r2, #223	@ 0xdf
 8013bca:	495c      	ldr	r1, [pc, #368]	@ (8013d3c <tcp_input+0x2a4>)
 8013bcc:	4854      	ldr	r0, [pc, #336]	@ (8013d20 <tcp_input+0x288>)
 8013bce:	f00a fe23 	bl	801e818 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	891a      	ldrh	r2, [r3, #8]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	891b      	ldrh	r3, [r3, #8]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d005      	beq.n	8013bec <tcp_input+0x154>
 8013be0:	4b4d      	ldr	r3, [pc, #308]	@ (8013d18 <tcp_input+0x280>)
 8013be2:	22e0      	movs	r2, #224	@ 0xe0
 8013be4:	4956      	ldr	r1, [pc, #344]	@ (8013d40 <tcp_input+0x2a8>)
 8013be6:	484e      	ldr	r0, [pc, #312]	@ (8013d20 <tcp_input+0x288>)
 8013be8:	f00a fe16 	bl	801e818 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013bec:	4b4d      	ldr	r3, [pc, #308]	@ (8013d24 <tcp_input+0x28c>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	881b      	ldrh	r3, [r3, #0]
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8013d24 <tcp_input+0x28c>)
 8013bf6:	6814      	ldr	r4, [r2, #0]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fb fe07 	bl	800f80c <lwip_htons>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013c02:	4b48      	ldr	r3, [pc, #288]	@ (8013d24 <tcp_input+0x28c>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	885b      	ldrh	r3, [r3, #2]
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	4a46      	ldr	r2, [pc, #280]	@ (8013d24 <tcp_input+0x28c>)
 8013c0c:	6814      	ldr	r4, [r2, #0]
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fb fdfc 	bl	800f80c <lwip_htons>
 8013c14:	4603      	mov	r3, r0
 8013c16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013c18:	4b42      	ldr	r3, [pc, #264]	@ (8013d24 <tcp_input+0x28c>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	4a41      	ldr	r2, [pc, #260]	@ (8013d24 <tcp_input+0x28c>)
 8013c20:	6814      	ldr	r4, [r2, #0]
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fb fe07 	bl	800f836 <lwip_htonl>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	6063      	str	r3, [r4, #4]
 8013c2c:	6863      	ldr	r3, [r4, #4]
 8013c2e:	4a45      	ldr	r2, [pc, #276]	@ (8013d44 <tcp_input+0x2ac>)
 8013c30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013c32:	4b3c      	ldr	r3, [pc, #240]	@ (8013d24 <tcp_input+0x28c>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	689b      	ldr	r3, [r3, #8]
 8013c38:	4a3a      	ldr	r2, [pc, #232]	@ (8013d24 <tcp_input+0x28c>)
 8013c3a:	6814      	ldr	r4, [r2, #0]
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7fb fdfa 	bl	800f836 <lwip_htonl>
 8013c42:	4603      	mov	r3, r0
 8013c44:	60a3      	str	r3, [r4, #8]
 8013c46:	68a3      	ldr	r3, [r4, #8]
 8013c48:	4a3f      	ldr	r2, [pc, #252]	@ (8013d48 <tcp_input+0x2b0>)
 8013c4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013c4c:	4b35      	ldr	r3, [pc, #212]	@ (8013d24 <tcp_input+0x28c>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	89db      	ldrh	r3, [r3, #14]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	4a33      	ldr	r2, [pc, #204]	@ (8013d24 <tcp_input+0x28c>)
 8013c56:	6814      	ldr	r4, [r2, #0]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7fb fdd7 	bl	800f80c <lwip_htons>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013c62:	4b30      	ldr	r3, [pc, #192]	@ (8013d24 <tcp_input+0x28c>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	899b      	ldrh	r3, [r3, #12]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fb fdce 	bl	800f80c <lwip_htons>
 8013c70:	4603      	mov	r3, r0
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013c78:	b2da      	uxtb	r2, r3
 8013c7a:	4b34      	ldr	r3, [pc, #208]	@ (8013d4c <tcp_input+0x2b4>)
 8013c7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	891a      	ldrh	r2, [r3, #8]
 8013c82:	4b33      	ldr	r3, [pc, #204]	@ (8013d50 <tcp_input+0x2b8>)
 8013c84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013c86:	4b31      	ldr	r3, [pc, #196]	@ (8013d4c <tcp_input+0x2b4>)
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	f003 0303 	and.w	r3, r3, #3
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d00c      	beq.n	8013cac <tcp_input+0x214>
    tcplen++;
 8013c92:	4b2f      	ldr	r3, [pc, #188]	@ (8013d50 <tcp_input+0x2b8>)
 8013c94:	881b      	ldrh	r3, [r3, #0]
 8013c96:	3301      	adds	r3, #1
 8013c98:	b29a      	uxth	r2, r3
 8013c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8013d50 <tcp_input+0x2b8>)
 8013c9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	891a      	ldrh	r2, [r3, #8]
 8013ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8013d50 <tcp_input+0x2b8>)
 8013ca4:	881b      	ldrh	r3, [r3, #0]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	f200 82e6 	bhi.w	8014278 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013cac:	2300      	movs	r3, #0
 8013cae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cb0:	4b28      	ldr	r3, [pc, #160]	@ (8013d54 <tcp_input+0x2bc>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	61fb      	str	r3, [r7, #28]
 8013cb6:	e09d      	b.n	8013df4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013cb8:	69fb      	ldr	r3, [r7, #28]
 8013cba:	7d1b      	ldrb	r3, [r3, #20]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d105      	bne.n	8013ccc <tcp_input+0x234>
 8013cc0:	4b15      	ldr	r3, [pc, #84]	@ (8013d18 <tcp_input+0x280>)
 8013cc2:	22fb      	movs	r2, #251	@ 0xfb
 8013cc4:	4924      	ldr	r1, [pc, #144]	@ (8013d58 <tcp_input+0x2c0>)
 8013cc6:	4816      	ldr	r0, [pc, #88]	@ (8013d20 <tcp_input+0x288>)
 8013cc8:	f00a fda6 	bl	801e818 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013ccc:	69fb      	ldr	r3, [r7, #28]
 8013cce:	7d1b      	ldrb	r3, [r3, #20]
 8013cd0:	2b0a      	cmp	r3, #10
 8013cd2:	d105      	bne.n	8013ce0 <tcp_input+0x248>
 8013cd4:	4b10      	ldr	r3, [pc, #64]	@ (8013d18 <tcp_input+0x280>)
 8013cd6:	22fc      	movs	r2, #252	@ 0xfc
 8013cd8:	4920      	ldr	r1, [pc, #128]	@ (8013d5c <tcp_input+0x2c4>)
 8013cda:	4811      	ldr	r0, [pc, #68]	@ (8013d20 <tcp_input+0x288>)
 8013cdc:	f00a fd9c 	bl	801e818 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013ce0:	69fb      	ldr	r3, [r7, #28]
 8013ce2:	7d1b      	ldrb	r3, [r3, #20]
 8013ce4:	2b01      	cmp	r3, #1
 8013ce6:	d105      	bne.n	8013cf4 <tcp_input+0x25c>
 8013ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8013d18 <tcp_input+0x280>)
 8013cea:	22fd      	movs	r2, #253	@ 0xfd
 8013cec:	491c      	ldr	r1, [pc, #112]	@ (8013d60 <tcp_input+0x2c8>)
 8013cee:	480c      	ldr	r0, [pc, #48]	@ (8013d20 <tcp_input+0x288>)
 8013cf0:	f00a fd92 	bl	801e818 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	7a1b      	ldrb	r3, [r3, #8]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d033      	beq.n	8013d64 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	7a1a      	ldrb	r2, [r3, #8]
 8013d00:	4b09      	ldr	r3, [pc, #36]	@ (8013d28 <tcp_input+0x290>)
 8013d02:	685b      	ldr	r3, [r3, #4]
 8013d04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013d08:	3301      	adds	r3, #1
 8013d0a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d029      	beq.n	8013d64 <tcp_input+0x2cc>
      prev = pcb;
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	61bb      	str	r3, [r7, #24]
      continue;
 8013d14:	e06b      	b.n	8013dee <tcp_input+0x356>
 8013d16:	bf00      	nop
 8013d18:	08024410 	.word	0x08024410
 8013d1c:	08024444 	.word	0x08024444
 8013d20:	0802445c 	.word	0x0802445c
 8013d24:	2000f4ac 	.word	0x2000f4ac
 8013d28:	2000bbc4 	.word	0x2000bbc4
 8013d2c:	2000f4b0 	.word	0x2000f4b0
 8013d30:	2000f4b4 	.word	0x2000f4b4
 8013d34:	2000f4b2 	.word	0x2000f4b2
 8013d38:	08024484 	.word	0x08024484
 8013d3c:	08024494 	.word	0x08024494
 8013d40:	080244a0 	.word	0x080244a0
 8013d44:	2000f4bc 	.word	0x2000f4bc
 8013d48:	2000f4c0 	.word	0x2000f4c0
 8013d4c:	2000f4c8 	.word	0x2000f4c8
 8013d50:	2000f4c6 	.word	0x2000f4c6
 8013d54:	2000f490 	.word	0x2000f490
 8013d58:	080244c0 	.word	0x080244c0
 8013d5c:	080244e8 	.word	0x080244e8
 8013d60:	08024514 	.word	0x08024514
    }

    if (pcb->remote_port == tcphdr->src &&
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	8b1a      	ldrh	r2, [r3, #24]
 8013d68:	4b72      	ldr	r3, [pc, #456]	@ (8013f34 <tcp_input+0x49c>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	881b      	ldrh	r3, [r3, #0]
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d13a      	bne.n	8013dea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	8ada      	ldrh	r2, [r3, #22]
 8013d78:	4b6e      	ldr	r3, [pc, #440]	@ (8013f34 <tcp_input+0x49c>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	885b      	ldrh	r3, [r3, #2]
 8013d7e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d132      	bne.n	8013dea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d84:	69fb      	ldr	r3, [r7, #28]
 8013d86:	685a      	ldr	r2, [r3, #4]
 8013d88:	4b6b      	ldr	r3, [pc, #428]	@ (8013f38 <tcp_input+0x4a0>)
 8013d8a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d12c      	bne.n	8013dea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	4b68      	ldr	r3, [pc, #416]	@ (8013f38 <tcp_input+0x4a0>)
 8013d96:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d126      	bne.n	8013dea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	69fa      	ldr	r2, [r7, #28]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d106      	bne.n	8013db4 <tcp_input+0x31c>
 8013da6:	4b65      	ldr	r3, [pc, #404]	@ (8013f3c <tcp_input+0x4a4>)
 8013da8:	f240 120d 	movw	r2, #269	@ 0x10d
 8013dac:	4964      	ldr	r1, [pc, #400]	@ (8013f40 <tcp_input+0x4a8>)
 8013dae:	4865      	ldr	r0, [pc, #404]	@ (8013f44 <tcp_input+0x4ac>)
 8013db0:	f00a fd32 	bl	801e818 <iprintf>
      if (prev != NULL) {
 8013db4:	69bb      	ldr	r3, [r7, #24]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d00a      	beq.n	8013dd0 <tcp_input+0x338>
        prev->next = pcb->next;
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	68da      	ldr	r2, [r3, #12]
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013dc2:	4b61      	ldr	r3, [pc, #388]	@ (8013f48 <tcp_input+0x4b0>)
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	69fb      	ldr	r3, [r7, #28]
 8013dc8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013dca:	4a5f      	ldr	r2, [pc, #380]	@ (8013f48 <tcp_input+0x4b0>)
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	69fa      	ldr	r2, [r7, #28]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d111      	bne.n	8013dfe <tcp_input+0x366>
 8013dda:	4b58      	ldr	r3, [pc, #352]	@ (8013f3c <tcp_input+0x4a4>)
 8013ddc:	f240 1215 	movw	r2, #277	@ 0x115
 8013de0:	495a      	ldr	r1, [pc, #360]	@ (8013f4c <tcp_input+0x4b4>)
 8013de2:	4858      	ldr	r0, [pc, #352]	@ (8013f44 <tcp_input+0x4ac>)
 8013de4:	f00a fd18 	bl	801e818 <iprintf>
      break;
 8013de8:	e009      	b.n	8013dfe <tcp_input+0x366>
    }
    prev = pcb;
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	68db      	ldr	r3, [r3, #12]
 8013df2:	61fb      	str	r3, [r7, #28]
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	f47f af5e 	bne.w	8013cb8 <tcp_input+0x220>
 8013dfc:	e000      	b.n	8013e00 <tcp_input+0x368>
      break;
 8013dfe:	bf00      	nop
  }

  if (pcb == NULL) {
 8013e00:	69fb      	ldr	r3, [r7, #28]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f040 80aa 	bne.w	8013f5c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e08:	4b51      	ldr	r3, [pc, #324]	@ (8013f50 <tcp_input+0x4b8>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	61fb      	str	r3, [r7, #28]
 8013e0e:	e03f      	b.n	8013e90 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013e10:	69fb      	ldr	r3, [r7, #28]
 8013e12:	7d1b      	ldrb	r3, [r3, #20]
 8013e14:	2b0a      	cmp	r3, #10
 8013e16:	d006      	beq.n	8013e26 <tcp_input+0x38e>
 8013e18:	4b48      	ldr	r3, [pc, #288]	@ (8013f3c <tcp_input+0x4a4>)
 8013e1a:	f240 121f 	movw	r2, #287	@ 0x11f
 8013e1e:	494d      	ldr	r1, [pc, #308]	@ (8013f54 <tcp_input+0x4bc>)
 8013e20:	4848      	ldr	r0, [pc, #288]	@ (8013f44 <tcp_input+0x4ac>)
 8013e22:	f00a fcf9 	bl	801e818 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	7a1b      	ldrb	r3, [r3, #8]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d009      	beq.n	8013e42 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013e2e:	69fb      	ldr	r3, [r7, #28]
 8013e30:	7a1a      	ldrb	r2, [r3, #8]
 8013e32:	4b41      	ldr	r3, [pc, #260]	@ (8013f38 <tcp_input+0x4a0>)
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d122      	bne.n	8013e88 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013e42:	69fb      	ldr	r3, [r7, #28]
 8013e44:	8b1a      	ldrh	r2, [r3, #24]
 8013e46:	4b3b      	ldr	r3, [pc, #236]	@ (8013f34 <tcp_input+0x49c>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	881b      	ldrh	r3, [r3, #0]
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d11b      	bne.n	8013e8a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	8ada      	ldrh	r2, [r3, #22]
 8013e56:	4b37      	ldr	r3, [pc, #220]	@ (8013f34 <tcp_input+0x49c>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	885b      	ldrh	r3, [r3, #2]
 8013e5c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d113      	bne.n	8013e8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013e62:	69fb      	ldr	r3, [r7, #28]
 8013e64:	685a      	ldr	r2, [r3, #4]
 8013e66:	4b34      	ldr	r3, [pc, #208]	@ (8013f38 <tcp_input+0x4a0>)
 8013e68:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d10d      	bne.n	8013e8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	681a      	ldr	r2, [r3, #0]
 8013e72:	4b31      	ldr	r3, [pc, #196]	@ (8013f38 <tcp_input+0x4a0>)
 8013e74:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d107      	bne.n	8013e8a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013e7a:	69f8      	ldr	r0, [r7, #28]
 8013e7c:	f000 fb56 	bl	801452c <tcp_timewait_input>
        }
        pbuf_free(p);
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f7fd fbe1 	bl	8011648 <pbuf_free>
        return;
 8013e86:	e1fd      	b.n	8014284 <tcp_input+0x7ec>
        continue;
 8013e88:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e8a:	69fb      	ldr	r3, [r7, #28]
 8013e8c:	68db      	ldr	r3, [r3, #12]
 8013e8e:	61fb      	str	r3, [r7, #28]
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d1bc      	bne.n	8013e10 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013e96:	2300      	movs	r3, #0
 8013e98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8013f58 <tcp_input+0x4c0>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	617b      	str	r3, [r7, #20]
 8013ea0:	e02a      	b.n	8013ef8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	7a1b      	ldrb	r3, [r3, #8]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d00c      	beq.n	8013ec4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	7a1a      	ldrb	r2, [r3, #8]
 8013eae:	4b22      	ldr	r3, [pc, #136]	@ (8013f38 <tcp_input+0x4a0>)
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d002      	beq.n	8013ec4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	61bb      	str	r3, [r7, #24]
        continue;
 8013ec2:	e016      	b.n	8013ef2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	8ada      	ldrh	r2, [r3, #22]
 8013ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8013f34 <tcp_input+0x49c>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	885b      	ldrh	r3, [r3, #2]
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d10c      	bne.n	8013eee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	4b17      	ldr	r3, [pc, #92]	@ (8013f38 <tcp_input+0x4a0>)
 8013eda:	695b      	ldr	r3, [r3, #20]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d00f      	beq.n	8013f00 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d00d      	beq.n	8013f02 <tcp_input+0x46a>
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d009      	beq.n	8013f02 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	617b      	str	r3, [r7, #20]
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d1d1      	bne.n	8013ea2 <tcp_input+0x40a>
 8013efe:	e000      	b.n	8013f02 <tcp_input+0x46a>
            break;
 8013f00:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d029      	beq.n	8013f5c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d00a      	beq.n	8013f24 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	68da      	ldr	r2, [r3, #12]
 8013f12:	69bb      	ldr	r3, [r7, #24]
 8013f14:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013f16:	4b10      	ldr	r3, [pc, #64]	@ (8013f58 <tcp_input+0x4c0>)
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8013f58 <tcp_input+0x4c0>)
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013f24:	6978      	ldr	r0, [r7, #20]
 8013f26:	f000 fa03 	bl	8014330 <tcp_listen_input>
      }
      pbuf_free(p);
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7fd fb8c 	bl	8011648 <pbuf_free>
      return;
 8013f30:	e1a8      	b.n	8014284 <tcp_input+0x7ec>
 8013f32:	bf00      	nop
 8013f34:	2000f4ac 	.word	0x2000f4ac
 8013f38:	2000bbc4 	.word	0x2000bbc4
 8013f3c:	08024410 	.word	0x08024410
 8013f40:	0802453c 	.word	0x0802453c
 8013f44:	0802445c 	.word	0x0802445c
 8013f48:	2000f490 	.word	0x2000f490
 8013f4c:	08024568 	.word	0x08024568
 8013f50:	2000f494 	.word	0x2000f494
 8013f54:	08024594 	.word	0x08024594
 8013f58:	2000f48c 	.word	0x2000f48c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013f5c:	69fb      	ldr	r3, [r7, #28]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	f000 8158 	beq.w	8014214 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013f64:	4b95      	ldr	r3, [pc, #596]	@ (80141bc <tcp_input+0x724>)
 8013f66:	2200      	movs	r2, #0
 8013f68:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	891a      	ldrh	r2, [r3, #8]
 8013f6e:	4b93      	ldr	r3, [pc, #588]	@ (80141bc <tcp_input+0x724>)
 8013f70:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013f72:	4a92      	ldr	r2, [pc, #584]	@ (80141bc <tcp_input+0x724>)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013f78:	4b91      	ldr	r3, [pc, #580]	@ (80141c0 <tcp_input+0x728>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	4a8f      	ldr	r2, [pc, #572]	@ (80141bc <tcp_input+0x724>)
 8013f7e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013f80:	4b90      	ldr	r3, [pc, #576]	@ (80141c4 <tcp_input+0x72c>)
 8013f82:	2200      	movs	r2, #0
 8013f84:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013f86:	4b90      	ldr	r3, [pc, #576]	@ (80141c8 <tcp_input+0x730>)
 8013f88:	2200      	movs	r2, #0
 8013f8a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80141cc <tcp_input+0x734>)
 8013f8e:	2200      	movs	r2, #0
 8013f90:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013f92:	4b8f      	ldr	r3, [pc, #572]	@ (80141d0 <tcp_input+0x738>)
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	f003 0308 	and.w	r3, r3, #8
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d006      	beq.n	8013fac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	7b5b      	ldrb	r3, [r3, #13]
 8013fa2:	f043 0301 	orr.w	r3, r3, #1
 8013fa6:	b2da      	uxtb	r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d017      	beq.n	8013fe4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013fb4:	69f8      	ldr	r0, [r7, #28]
 8013fb6:	f7ff f85b 	bl	8013070 <tcp_process_refused_data>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	f113 0f0d 	cmn.w	r3, #13
 8013fc0:	d007      	beq.n	8013fd2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013fc2:	69fb      	ldr	r3, [r7, #28]
 8013fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d00c      	beq.n	8013fe4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013fca:	4b82      	ldr	r3, [pc, #520]	@ (80141d4 <tcp_input+0x73c>)
 8013fcc:	881b      	ldrh	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d008      	beq.n	8013fe4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013fd2:	69fb      	ldr	r3, [r7, #28]
 8013fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f040 80e3 	bne.w	80141a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013fdc:	69f8      	ldr	r0, [r7, #28]
 8013fde:	f003 fdff 	bl	8017be0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013fe2:	e0de      	b.n	80141a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013fe4:	4a7c      	ldr	r2, [pc, #496]	@ (80141d8 <tcp_input+0x740>)
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013fea:	69f8      	ldr	r0, [r7, #28]
 8013fec:	f000 fb18 	bl	8014620 <tcp_process>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013ff4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ff8:	f113 0f0d 	cmn.w	r3, #13
 8013ffc:	f000 80d3 	beq.w	80141a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8014000:	4b71      	ldr	r3, [pc, #452]	@ (80141c8 <tcp_input+0x730>)
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	f003 0308 	and.w	r3, r3, #8
 8014008:	2b00      	cmp	r3, #0
 801400a:	d015      	beq.n	8014038 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014012:	2b00      	cmp	r3, #0
 8014014:	d008      	beq.n	8014028 <tcp_input+0x590>
 8014016:	69fb      	ldr	r3, [r7, #28]
 8014018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801401c:	69fa      	ldr	r2, [r7, #28]
 801401e:	6912      	ldr	r2, [r2, #16]
 8014020:	f06f 010d 	mvn.w	r1, #13
 8014024:	4610      	mov	r0, r2
 8014026:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014028:	69f9      	ldr	r1, [r7, #28]
 801402a:	486c      	ldr	r0, [pc, #432]	@ (80141dc <tcp_input+0x744>)
 801402c:	f7ff fbbc 	bl	80137a8 <tcp_pcb_remove>
        tcp_free(pcb);
 8014030:	69f8      	ldr	r0, [r7, #28]
 8014032:	f7fd ff1f 	bl	8011e74 <tcp_free>
 8014036:	e0da      	b.n	80141ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014038:	2300      	movs	r3, #0
 801403a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801403c:	4b63      	ldr	r3, [pc, #396]	@ (80141cc <tcp_input+0x734>)
 801403e:	881b      	ldrh	r3, [r3, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d01d      	beq.n	8014080 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014044:	4b61      	ldr	r3, [pc, #388]	@ (80141cc <tcp_input+0x734>)
 8014046:	881b      	ldrh	r3, [r3, #0]
 8014048:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801404a:	69fb      	ldr	r3, [r7, #28]
 801404c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00a      	beq.n	801406a <tcp_input+0x5d2>
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801405a:	69fa      	ldr	r2, [r7, #28]
 801405c:	6910      	ldr	r0, [r2, #16]
 801405e:	89fa      	ldrh	r2, [r7, #14]
 8014060:	69f9      	ldr	r1, [r7, #28]
 8014062:	4798      	blx	r3
 8014064:	4603      	mov	r3, r0
 8014066:	74fb      	strb	r3, [r7, #19]
 8014068:	e001      	b.n	801406e <tcp_input+0x5d6>
 801406a:	2300      	movs	r3, #0
 801406c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801406e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014072:	f113 0f0d 	cmn.w	r3, #13
 8014076:	f000 8098 	beq.w	80141aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801407a:	4b54      	ldr	r3, [pc, #336]	@ (80141cc <tcp_input+0x734>)
 801407c:	2200      	movs	r2, #0
 801407e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014080:	69f8      	ldr	r0, [r7, #28]
 8014082:	f000 f915 	bl	80142b0 <tcp_input_delayed_close>
 8014086:	4603      	mov	r3, r0
 8014088:	2b00      	cmp	r3, #0
 801408a:	f040 8090 	bne.w	80141ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801408e:	4b4d      	ldr	r3, [pc, #308]	@ (80141c4 <tcp_input+0x72c>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d041      	beq.n	801411a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014096:	69fb      	ldr	r3, [r7, #28]
 8014098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801409a:	2b00      	cmp	r3, #0
 801409c:	d006      	beq.n	80140ac <tcp_input+0x614>
 801409e:	4b50      	ldr	r3, [pc, #320]	@ (80141e0 <tcp_input+0x748>)
 80140a0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80140a4:	494f      	ldr	r1, [pc, #316]	@ (80141e4 <tcp_input+0x74c>)
 80140a6:	4850      	ldr	r0, [pc, #320]	@ (80141e8 <tcp_input+0x750>)
 80140a8:	f00a fbb6 	bl	801e818 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80140ac:	69fb      	ldr	r3, [r7, #28]
 80140ae:	8b5b      	ldrh	r3, [r3, #26]
 80140b0:	f003 0310 	and.w	r3, r3, #16
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d008      	beq.n	80140ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80140b8:	4b42      	ldr	r3, [pc, #264]	@ (80141c4 <tcp_input+0x72c>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fd fac3 	bl	8011648 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80140c2:	69f8      	ldr	r0, [r7, #28]
 80140c4:	f7fe fa1a 	bl	80124fc <tcp_abort>
            goto aborted;
 80140c8:	e091      	b.n	80141ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d00c      	beq.n	80140ee <tcp_input+0x656>
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80140da:	69fb      	ldr	r3, [r7, #28]
 80140dc:	6918      	ldr	r0, [r3, #16]
 80140de:	4b39      	ldr	r3, [pc, #228]	@ (80141c4 <tcp_input+0x72c>)
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	2300      	movs	r3, #0
 80140e4:	69f9      	ldr	r1, [r7, #28]
 80140e6:	47a0      	blx	r4
 80140e8:	4603      	mov	r3, r0
 80140ea:	74fb      	strb	r3, [r7, #19]
 80140ec:	e008      	b.n	8014100 <tcp_input+0x668>
 80140ee:	4b35      	ldr	r3, [pc, #212]	@ (80141c4 <tcp_input+0x72c>)
 80140f0:	681a      	ldr	r2, [r3, #0]
 80140f2:	2300      	movs	r3, #0
 80140f4:	69f9      	ldr	r1, [r7, #28]
 80140f6:	2000      	movs	r0, #0
 80140f8:	f7ff f890 	bl	801321c <tcp_recv_null>
 80140fc:	4603      	mov	r3, r0
 80140fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014100:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014104:	f113 0f0d 	cmn.w	r3, #13
 8014108:	d053      	beq.n	80141b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801410a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d003      	beq.n	801411a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014112:	4b2c      	ldr	r3, [pc, #176]	@ (80141c4 <tcp_input+0x72c>)
 8014114:	681a      	ldr	r2, [r3, #0]
 8014116:	69fb      	ldr	r3, [r7, #28]
 8014118:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801411a:	4b2b      	ldr	r3, [pc, #172]	@ (80141c8 <tcp_input+0x730>)
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	f003 0320 	and.w	r3, r3, #32
 8014122:	2b00      	cmp	r3, #0
 8014124:	d030      	beq.n	8014188 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014126:	69fb      	ldr	r3, [r7, #28]
 8014128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801412a:	2b00      	cmp	r3, #0
 801412c:	d009      	beq.n	8014142 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801412e:	69fb      	ldr	r3, [r7, #28]
 8014130:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014132:	7b5a      	ldrb	r2, [r3, #13]
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014138:	f042 0220 	orr.w	r2, r2, #32
 801413c:	b2d2      	uxtb	r2, r2
 801413e:	735a      	strb	r2, [r3, #13]
 8014140:	e022      	b.n	8014188 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014142:	69fb      	ldr	r3, [r7, #28]
 8014144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014146:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801414a:	d005      	beq.n	8014158 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014150:	3301      	adds	r3, #1
 8014152:	b29a      	uxth	r2, r3
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014158:	69fb      	ldr	r3, [r7, #28]
 801415a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801415e:	2b00      	cmp	r3, #0
 8014160:	d00b      	beq.n	801417a <tcp_input+0x6e2>
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	6918      	ldr	r0, [r3, #16]
 801416c:	2300      	movs	r3, #0
 801416e:	2200      	movs	r2, #0
 8014170:	69f9      	ldr	r1, [r7, #28]
 8014172:	47a0      	blx	r4
 8014174:	4603      	mov	r3, r0
 8014176:	74fb      	strb	r3, [r7, #19]
 8014178:	e001      	b.n	801417e <tcp_input+0x6e6>
 801417a:	2300      	movs	r3, #0
 801417c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801417e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014182:	f113 0f0d 	cmn.w	r3, #13
 8014186:	d016      	beq.n	80141b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014188:	4b13      	ldr	r3, [pc, #76]	@ (80141d8 <tcp_input+0x740>)
 801418a:	2200      	movs	r2, #0
 801418c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801418e:	69f8      	ldr	r0, [r7, #28]
 8014190:	f000 f88e 	bl	80142b0 <tcp_input_delayed_close>
 8014194:	4603      	mov	r3, r0
 8014196:	2b00      	cmp	r3, #0
 8014198:	d128      	bne.n	80141ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801419a:	69f8      	ldr	r0, [r7, #28]
 801419c:	f002 ff1a 	bl	8016fd4 <tcp_output>
 80141a0:	e025      	b.n	80141ee <tcp_input+0x756>
        goto aborted;
 80141a2:	bf00      	nop
 80141a4:	e023      	b.n	80141ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80141a6:	bf00      	nop
 80141a8:	e021      	b.n	80141ee <tcp_input+0x756>
              goto aborted;
 80141aa:	bf00      	nop
 80141ac:	e01f      	b.n	80141ee <tcp_input+0x756>
          goto aborted;
 80141ae:	bf00      	nop
 80141b0:	e01d      	b.n	80141ee <tcp_input+0x756>
            goto aborted;
 80141b2:	bf00      	nop
 80141b4:	e01b      	b.n	80141ee <tcp_input+0x756>
              goto aborted;
 80141b6:	bf00      	nop
 80141b8:	e019      	b.n	80141ee <tcp_input+0x756>
 80141ba:	bf00      	nop
 80141bc:	2000f49c 	.word	0x2000f49c
 80141c0:	2000f4ac 	.word	0x2000f4ac
 80141c4:	2000f4cc 	.word	0x2000f4cc
 80141c8:	2000f4c9 	.word	0x2000f4c9
 80141cc:	2000f4c4 	.word	0x2000f4c4
 80141d0:	2000f4c8 	.word	0x2000f4c8
 80141d4:	2000f4c6 	.word	0x2000f4c6
 80141d8:	2000f4d0 	.word	0x2000f4d0
 80141dc:	2000f490 	.word	0x2000f490
 80141e0:	08024410 	.word	0x08024410
 80141e4:	080245c4 	.word	0x080245c4
 80141e8:	0802445c 	.word	0x0802445c
          goto aborted;
 80141ec:	bf00      	nop
    tcp_input_pcb = NULL;
 80141ee:	4b27      	ldr	r3, [pc, #156]	@ (801428c <tcp_input+0x7f4>)
 80141f0:	2200      	movs	r2, #0
 80141f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80141f4:	4b26      	ldr	r3, [pc, #152]	@ (8014290 <tcp_input+0x7f8>)
 80141f6:	2200      	movs	r2, #0
 80141f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80141fa:	4b26      	ldr	r3, [pc, #152]	@ (8014294 <tcp_input+0x7fc>)
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d03f      	beq.n	8014282 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014202:	4b24      	ldr	r3, [pc, #144]	@ (8014294 <tcp_input+0x7fc>)
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	4618      	mov	r0, r3
 8014208:	f7fd fa1e 	bl	8011648 <pbuf_free>
      inseg.p = NULL;
 801420c:	4b21      	ldr	r3, [pc, #132]	@ (8014294 <tcp_input+0x7fc>)
 801420e:	2200      	movs	r2, #0
 8014210:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014212:	e036      	b.n	8014282 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014214:	4b20      	ldr	r3, [pc, #128]	@ (8014298 <tcp_input+0x800>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	899b      	ldrh	r3, [r3, #12]
 801421a:	b29b      	uxth	r3, r3
 801421c:	4618      	mov	r0, r3
 801421e:	f7fb faf5 	bl	800f80c <lwip_htons>
 8014222:	4603      	mov	r3, r0
 8014224:	b2db      	uxtb	r3, r3
 8014226:	f003 0304 	and.w	r3, r3, #4
 801422a:	2b00      	cmp	r3, #0
 801422c:	d118      	bne.n	8014260 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801422e:	4b1b      	ldr	r3, [pc, #108]	@ (801429c <tcp_input+0x804>)
 8014230:	6819      	ldr	r1, [r3, #0]
 8014232:	4b1b      	ldr	r3, [pc, #108]	@ (80142a0 <tcp_input+0x808>)
 8014234:	881b      	ldrh	r3, [r3, #0]
 8014236:	461a      	mov	r2, r3
 8014238:	4b1a      	ldr	r3, [pc, #104]	@ (80142a4 <tcp_input+0x80c>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801423e:	4b16      	ldr	r3, [pc, #88]	@ (8014298 <tcp_input+0x800>)
 8014240:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014242:	885b      	ldrh	r3, [r3, #2]
 8014244:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014246:	4a14      	ldr	r2, [pc, #80]	@ (8014298 <tcp_input+0x800>)
 8014248:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801424a:	8812      	ldrh	r2, [r2, #0]
 801424c:	b292      	uxth	r2, r2
 801424e:	9202      	str	r2, [sp, #8]
 8014250:	9301      	str	r3, [sp, #4]
 8014252:	4b15      	ldr	r3, [pc, #84]	@ (80142a8 <tcp_input+0x810>)
 8014254:	9300      	str	r3, [sp, #0]
 8014256:	4b15      	ldr	r3, [pc, #84]	@ (80142ac <tcp_input+0x814>)
 8014258:	4602      	mov	r2, r0
 801425a:	2000      	movs	r0, #0
 801425c:	f003 fc6e 	bl	8017b3c <tcp_rst>
    pbuf_free(p);
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f7fd f9f1 	bl	8011648 <pbuf_free>
  return;
 8014266:	e00c      	b.n	8014282 <tcp_input+0x7ea>
    goto dropped;
 8014268:	bf00      	nop
 801426a:	e006      	b.n	801427a <tcp_input+0x7e2>
    goto dropped;
 801426c:	bf00      	nop
 801426e:	e004      	b.n	801427a <tcp_input+0x7e2>
    goto dropped;
 8014270:	bf00      	nop
 8014272:	e002      	b.n	801427a <tcp_input+0x7e2>
      goto dropped;
 8014274:	bf00      	nop
 8014276:	e000      	b.n	801427a <tcp_input+0x7e2>
      goto dropped;
 8014278:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f7fd f9e4 	bl	8011648 <pbuf_free>
 8014280:	e000      	b.n	8014284 <tcp_input+0x7ec>
  return;
 8014282:	bf00      	nop
}
 8014284:	3724      	adds	r7, #36	@ 0x24
 8014286:	46bd      	mov	sp, r7
 8014288:	bd90      	pop	{r4, r7, pc}
 801428a:	bf00      	nop
 801428c:	2000f4d0 	.word	0x2000f4d0
 8014290:	2000f4cc 	.word	0x2000f4cc
 8014294:	2000f49c 	.word	0x2000f49c
 8014298:	2000f4ac 	.word	0x2000f4ac
 801429c:	2000f4c0 	.word	0x2000f4c0
 80142a0:	2000f4c6 	.word	0x2000f4c6
 80142a4:	2000f4bc 	.word	0x2000f4bc
 80142a8:	2000bbd4 	.word	0x2000bbd4
 80142ac:	2000bbd8 	.word	0x2000bbd8

080142b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d106      	bne.n	80142cc <tcp_input_delayed_close+0x1c>
 80142be:	4b17      	ldr	r3, [pc, #92]	@ (801431c <tcp_input_delayed_close+0x6c>)
 80142c0:	f240 225a 	movw	r2, #602	@ 0x25a
 80142c4:	4916      	ldr	r1, [pc, #88]	@ (8014320 <tcp_input_delayed_close+0x70>)
 80142c6:	4817      	ldr	r0, [pc, #92]	@ (8014324 <tcp_input_delayed_close+0x74>)
 80142c8:	f00a faa6 	bl	801e818 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80142cc:	4b16      	ldr	r3, [pc, #88]	@ (8014328 <tcp_input_delayed_close+0x78>)
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	f003 0310 	and.w	r3, r3, #16
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d01c      	beq.n	8014312 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	8b5b      	ldrh	r3, [r3, #26]
 80142dc:	f003 0310 	and.w	r3, r3, #16
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d10d      	bne.n	8014300 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d008      	beq.n	8014300 <tcp_input_delayed_close+0x50>
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	6912      	ldr	r2, [r2, #16]
 80142f8:	f06f 010e 	mvn.w	r1, #14
 80142fc:	4610      	mov	r0, r2
 80142fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014300:	6879      	ldr	r1, [r7, #4]
 8014302:	480a      	ldr	r0, [pc, #40]	@ (801432c <tcp_input_delayed_close+0x7c>)
 8014304:	f7ff fa50 	bl	80137a8 <tcp_pcb_remove>
    tcp_free(pcb);
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f7fd fdb3 	bl	8011e74 <tcp_free>
    return 1;
 801430e:	2301      	movs	r3, #1
 8014310:	e000      	b.n	8014314 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014312:	2300      	movs	r3, #0
}
 8014314:	4618      	mov	r0, r3
 8014316:	3708      	adds	r7, #8
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	08024410 	.word	0x08024410
 8014320:	080245e0 	.word	0x080245e0
 8014324:	0802445c 	.word	0x0802445c
 8014328:	2000f4c9 	.word	0x2000f4c9
 801432c:	2000f490 	.word	0x2000f490

08014330 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014330:	b590      	push	{r4, r7, lr}
 8014332:	b08b      	sub	sp, #44	@ 0x2c
 8014334:	af04      	add	r7, sp, #16
 8014336:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014338:	4b6f      	ldr	r3, [pc, #444]	@ (80144f8 <tcp_listen_input+0x1c8>)
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	f003 0304 	and.w	r3, r3, #4
 8014340:	2b00      	cmp	r3, #0
 8014342:	f040 80d2 	bne.w	80144ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d106      	bne.n	801435a <tcp_listen_input+0x2a>
 801434c:	4b6b      	ldr	r3, [pc, #428]	@ (80144fc <tcp_listen_input+0x1cc>)
 801434e:	f240 2281 	movw	r2, #641	@ 0x281
 8014352:	496b      	ldr	r1, [pc, #428]	@ (8014500 <tcp_listen_input+0x1d0>)
 8014354:	486b      	ldr	r0, [pc, #428]	@ (8014504 <tcp_listen_input+0x1d4>)
 8014356:	f00a fa5f 	bl	801e818 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801435a:	4b67      	ldr	r3, [pc, #412]	@ (80144f8 <tcp_listen_input+0x1c8>)
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	f003 0310 	and.w	r3, r3, #16
 8014362:	2b00      	cmp	r3, #0
 8014364:	d019      	beq.n	801439a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014366:	4b68      	ldr	r3, [pc, #416]	@ (8014508 <tcp_listen_input+0x1d8>)
 8014368:	6819      	ldr	r1, [r3, #0]
 801436a:	4b68      	ldr	r3, [pc, #416]	@ (801450c <tcp_listen_input+0x1dc>)
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	461a      	mov	r2, r3
 8014370:	4b67      	ldr	r3, [pc, #412]	@ (8014510 <tcp_listen_input+0x1e0>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014376:	4b67      	ldr	r3, [pc, #412]	@ (8014514 <tcp_listen_input+0x1e4>)
 8014378:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801437a:	885b      	ldrh	r3, [r3, #2]
 801437c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801437e:	4a65      	ldr	r2, [pc, #404]	@ (8014514 <tcp_listen_input+0x1e4>)
 8014380:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014382:	8812      	ldrh	r2, [r2, #0]
 8014384:	b292      	uxth	r2, r2
 8014386:	9202      	str	r2, [sp, #8]
 8014388:	9301      	str	r3, [sp, #4]
 801438a:	4b63      	ldr	r3, [pc, #396]	@ (8014518 <tcp_listen_input+0x1e8>)
 801438c:	9300      	str	r3, [sp, #0]
 801438e:	4b63      	ldr	r3, [pc, #396]	@ (801451c <tcp_listen_input+0x1ec>)
 8014390:	4602      	mov	r2, r0
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f003 fbd2 	bl	8017b3c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014398:	e0a9      	b.n	80144ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801439a:	4b57      	ldr	r3, [pc, #348]	@ (80144f8 <tcp_listen_input+0x1c8>)
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	f003 0302 	and.w	r3, r3, #2
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	f000 80a3 	beq.w	80144ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	7d5b      	ldrb	r3, [r3, #21]
 80143ac:	4618      	mov	r0, r3
 80143ae:	f7ff f859 	bl	8013464 <tcp_alloc>
 80143b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d111      	bne.n	80143de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	699b      	ldr	r3, [r3, #24]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d00a      	beq.n	80143d8 <tcp_listen_input+0xa8>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	699b      	ldr	r3, [r3, #24]
 80143c6:	687a      	ldr	r2, [r7, #4]
 80143c8:	6910      	ldr	r0, [r2, #16]
 80143ca:	f04f 32ff 	mov.w	r2, #4294967295
 80143ce:	2100      	movs	r1, #0
 80143d0:	4798      	blx	r3
 80143d2:	4603      	mov	r3, r0
 80143d4:	73bb      	strb	r3, [r7, #14]
      return;
 80143d6:	e08b      	b.n	80144f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80143d8:	23f0      	movs	r3, #240	@ 0xf0
 80143da:	73bb      	strb	r3, [r7, #14]
      return;
 80143dc:	e088      	b.n	80144f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80143de:	4b50      	ldr	r3, [pc, #320]	@ (8014520 <tcp_listen_input+0x1f0>)
 80143e0:	695a      	ldr	r2, [r3, #20]
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80143e6:	4b4e      	ldr	r3, [pc, #312]	@ (8014520 <tcp_listen_input+0x1f0>)
 80143e8:	691a      	ldr	r2, [r3, #16]
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	8ada      	ldrh	r2, [r3, #22]
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80143f6:	4b47      	ldr	r3, [pc, #284]	@ (8014514 <tcp_listen_input+0x1e4>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	881b      	ldrh	r3, [r3, #0]
 80143fc:	b29a      	uxth	r2, r3
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	2203      	movs	r2, #3
 8014406:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014408:	4b41      	ldr	r3, [pc, #260]	@ (8014510 <tcp_listen_input+0x1e0>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	1c5a      	adds	r2, r3, #1
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801441a:	6978      	ldr	r0, [r7, #20]
 801441c:	f7ff fa58 	bl	80138d0 <tcp_next_iss>
 8014420:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	693a      	ldr	r2, [r7, #16]
 8014426:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	693a      	ldr	r2, [r7, #16]
 801442c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	693a      	ldr	r2, [r7, #16]
 8014432:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	693a      	ldr	r2, [r7, #16]
 8014438:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801443a:	4b35      	ldr	r3, [pc, #212]	@ (8014510 <tcp_listen_input+0x1e0>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	1e5a      	subs	r2, r3, #1
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	691a      	ldr	r2, [r3, #16]
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	7a5b      	ldrb	r3, [r3, #9]
 8014456:	f003 030c 	and.w	r3, r3, #12
 801445a:	b2da      	uxtb	r2, r3
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	7a1a      	ldrb	r2, [r3, #8]
 8014464:	697b      	ldr	r3, [r7, #20]
 8014466:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014468:	4b2e      	ldr	r3, [pc, #184]	@ (8014524 <tcp_listen_input+0x1f4>)
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	60da      	str	r2, [r3, #12]
 8014470:	4a2c      	ldr	r2, [pc, #176]	@ (8014524 <tcp_listen_input+0x1f4>)
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	6013      	str	r3, [r2, #0]
 8014476:	f003 fd23 	bl	8017ec0 <tcp_timer_needed>
 801447a:	4b2b      	ldr	r3, [pc, #172]	@ (8014528 <tcp_listen_input+0x1f8>)
 801447c:	2201      	movs	r2, #1
 801447e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014480:	6978      	ldr	r0, [r7, #20]
 8014482:	f001 fd8b 	bl	8015f9c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014486:	4b23      	ldr	r3, [pc, #140]	@ (8014514 <tcp_listen_input+0x1e4>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	89db      	ldrh	r3, [r3, #14]
 801448c:	b29a      	uxth	r2, r3
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	3304      	adds	r3, #4
 80144a8:	4618      	mov	r0, r3
 80144aa:	f007 fbbd 	bl	801bc28 <ip4_route>
 80144ae:	4601      	mov	r1, r0
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	3304      	adds	r3, #4
 80144b4:	461a      	mov	r2, r3
 80144b6:	4620      	mov	r0, r4
 80144b8:	f7ff fa30 	bl	801391c <tcp_eff_send_mss_netif>
 80144bc:	4603      	mov	r3, r0
 80144be:	461a      	mov	r2, r3
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80144c4:	2112      	movs	r1, #18
 80144c6:	6978      	ldr	r0, [r7, #20]
 80144c8:	f002 fc96 	bl	8016df8 <tcp_enqueue_flags>
 80144cc:	4603      	mov	r3, r0
 80144ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80144d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d004      	beq.n	80144e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80144d8:	2100      	movs	r1, #0
 80144da:	6978      	ldr	r0, [r7, #20]
 80144dc:	f7fd ff50 	bl	8012380 <tcp_abandon>
      return;
 80144e0:	e006      	b.n	80144f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80144e2:	6978      	ldr	r0, [r7, #20]
 80144e4:	f002 fd76 	bl	8016fd4 <tcp_output>
  return;
 80144e8:	e001      	b.n	80144ee <tcp_listen_input+0x1be>
    return;
 80144ea:	bf00      	nop
 80144ec:	e000      	b.n	80144f0 <tcp_listen_input+0x1c0>
  return;
 80144ee:	bf00      	nop
}
 80144f0:	371c      	adds	r7, #28
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd90      	pop	{r4, r7, pc}
 80144f6:	bf00      	nop
 80144f8:	2000f4c8 	.word	0x2000f4c8
 80144fc:	08024410 	.word	0x08024410
 8014500:	08024608 	.word	0x08024608
 8014504:	0802445c 	.word	0x0802445c
 8014508:	2000f4c0 	.word	0x2000f4c0
 801450c:	2000f4c6 	.word	0x2000f4c6
 8014510:	2000f4bc 	.word	0x2000f4bc
 8014514:	2000f4ac 	.word	0x2000f4ac
 8014518:	2000bbd4 	.word	0x2000bbd4
 801451c:	2000bbd8 	.word	0x2000bbd8
 8014520:	2000bbc4 	.word	0x2000bbc4
 8014524:	2000f490 	.word	0x2000f490
 8014528:	2000f498 	.word	0x2000f498

0801452c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b086      	sub	sp, #24
 8014530:	af04      	add	r7, sp, #16
 8014532:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014534:	4b2f      	ldr	r3, [pc, #188]	@ (80145f4 <tcp_timewait_input+0xc8>)
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	f003 0304 	and.w	r3, r3, #4
 801453c:	2b00      	cmp	r3, #0
 801453e:	d153      	bne.n	80145e8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d106      	bne.n	8014554 <tcp_timewait_input+0x28>
 8014546:	4b2c      	ldr	r3, [pc, #176]	@ (80145f8 <tcp_timewait_input+0xcc>)
 8014548:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801454c:	492b      	ldr	r1, [pc, #172]	@ (80145fc <tcp_timewait_input+0xd0>)
 801454e:	482c      	ldr	r0, [pc, #176]	@ (8014600 <tcp_timewait_input+0xd4>)
 8014550:	f00a f962 	bl	801e818 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014554:	4b27      	ldr	r3, [pc, #156]	@ (80145f4 <tcp_timewait_input+0xc8>)
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	f003 0302 	and.w	r3, r3, #2
 801455c:	2b00      	cmp	r3, #0
 801455e:	d02a      	beq.n	80145b6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014560:	4b28      	ldr	r3, [pc, #160]	@ (8014604 <tcp_timewait_input+0xd8>)
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014568:	1ad3      	subs	r3, r2, r3
 801456a:	2b00      	cmp	r3, #0
 801456c:	db2d      	blt.n	80145ca <tcp_timewait_input+0x9e>
 801456e:	4b25      	ldr	r3, [pc, #148]	@ (8014604 <tcp_timewait_input+0xd8>)
 8014570:	681a      	ldr	r2, [r3, #0]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014576:	6879      	ldr	r1, [r7, #4]
 8014578:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801457a:	440b      	add	r3, r1
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	dc23      	bgt.n	80145ca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014582:	4b21      	ldr	r3, [pc, #132]	@ (8014608 <tcp_timewait_input+0xdc>)
 8014584:	6819      	ldr	r1, [r3, #0]
 8014586:	4b21      	ldr	r3, [pc, #132]	@ (801460c <tcp_timewait_input+0xe0>)
 8014588:	881b      	ldrh	r3, [r3, #0]
 801458a:	461a      	mov	r2, r3
 801458c:	4b1d      	ldr	r3, [pc, #116]	@ (8014604 <tcp_timewait_input+0xd8>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014592:	4b1f      	ldr	r3, [pc, #124]	@ (8014610 <tcp_timewait_input+0xe4>)
 8014594:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014596:	885b      	ldrh	r3, [r3, #2]
 8014598:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801459a:	4a1d      	ldr	r2, [pc, #116]	@ (8014610 <tcp_timewait_input+0xe4>)
 801459c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801459e:	8812      	ldrh	r2, [r2, #0]
 80145a0:	b292      	uxth	r2, r2
 80145a2:	9202      	str	r2, [sp, #8]
 80145a4:	9301      	str	r3, [sp, #4]
 80145a6:	4b1b      	ldr	r3, [pc, #108]	@ (8014614 <tcp_timewait_input+0xe8>)
 80145a8:	9300      	str	r3, [sp, #0]
 80145aa:	4b1b      	ldr	r3, [pc, #108]	@ (8014618 <tcp_timewait_input+0xec>)
 80145ac:	4602      	mov	r2, r0
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f003 fac4 	bl	8017b3c <tcp_rst>
      return;
 80145b4:	e01b      	b.n	80145ee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80145b6:	4b0f      	ldr	r3, [pc, #60]	@ (80145f4 <tcp_timewait_input+0xc8>)
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	f003 0301 	and.w	r3, r3, #1
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d003      	beq.n	80145ca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80145c2:	4b16      	ldr	r3, [pc, #88]	@ (801461c <tcp_timewait_input+0xf0>)
 80145c4:	681a      	ldr	r2, [r3, #0]
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80145ca:	4b10      	ldr	r3, [pc, #64]	@ (801460c <tcp_timewait_input+0xe0>)
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00c      	beq.n	80145ec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	8b5b      	ldrh	r3, [r3, #26]
 80145d6:	f043 0302 	orr.w	r3, r3, #2
 80145da:	b29a      	uxth	r2, r3
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f002 fcf7 	bl	8016fd4 <tcp_output>
  }
  return;
 80145e6:	e001      	b.n	80145ec <tcp_timewait_input+0xc0>
    return;
 80145e8:	bf00      	nop
 80145ea:	e000      	b.n	80145ee <tcp_timewait_input+0xc2>
  return;
 80145ec:	bf00      	nop
}
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	2000f4c8 	.word	0x2000f4c8
 80145f8:	08024410 	.word	0x08024410
 80145fc:	08024628 	.word	0x08024628
 8014600:	0802445c 	.word	0x0802445c
 8014604:	2000f4bc 	.word	0x2000f4bc
 8014608:	2000f4c0 	.word	0x2000f4c0
 801460c:	2000f4c6 	.word	0x2000f4c6
 8014610:	2000f4ac 	.word	0x2000f4ac
 8014614:	2000bbd4 	.word	0x2000bbd4
 8014618:	2000bbd8 	.word	0x2000bbd8
 801461c:	2000f484 	.word	0x2000f484

08014620 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014620:	b590      	push	{r4, r7, lr}
 8014622:	b08d      	sub	sp, #52	@ 0x34
 8014624:	af04      	add	r7, sp, #16
 8014626:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014628:	2300      	movs	r3, #0
 801462a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801462c:	2300      	movs	r3, #0
 801462e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d106      	bne.n	8014644 <tcp_process+0x24>
 8014636:	4b9d      	ldr	r3, [pc, #628]	@ (80148ac <tcp_process+0x28c>)
 8014638:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801463c:	499c      	ldr	r1, [pc, #624]	@ (80148b0 <tcp_process+0x290>)
 801463e:	489d      	ldr	r0, [pc, #628]	@ (80148b4 <tcp_process+0x294>)
 8014640:	f00a f8ea 	bl	801e818 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014644:	4b9c      	ldr	r3, [pc, #624]	@ (80148b8 <tcp_process+0x298>)
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	f003 0304 	and.w	r3, r3, #4
 801464c:	2b00      	cmp	r3, #0
 801464e:	d04e      	beq.n	80146ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	7d1b      	ldrb	r3, [r3, #20]
 8014654:	2b02      	cmp	r3, #2
 8014656:	d108      	bne.n	801466a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801465c:	4b97      	ldr	r3, [pc, #604]	@ (80148bc <tcp_process+0x29c>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	429a      	cmp	r2, r3
 8014662:	d123      	bne.n	80146ac <tcp_process+0x8c>
        acceptable = 1;
 8014664:	2301      	movs	r3, #1
 8014666:	76fb      	strb	r3, [r7, #27]
 8014668:	e020      	b.n	80146ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801466e:	4b94      	ldr	r3, [pc, #592]	@ (80148c0 <tcp_process+0x2a0>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	429a      	cmp	r2, r3
 8014674:	d102      	bne.n	801467c <tcp_process+0x5c>
        acceptable = 1;
 8014676:	2301      	movs	r3, #1
 8014678:	76fb      	strb	r3, [r7, #27]
 801467a:	e017      	b.n	80146ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801467c:	4b90      	ldr	r3, [pc, #576]	@ (80148c0 <tcp_process+0x2a0>)
 801467e:	681a      	ldr	r2, [r3, #0]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014684:	1ad3      	subs	r3, r2, r3
 8014686:	2b00      	cmp	r3, #0
 8014688:	db10      	blt.n	80146ac <tcp_process+0x8c>
 801468a:	4b8d      	ldr	r3, [pc, #564]	@ (80148c0 <tcp_process+0x2a0>)
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014692:	6879      	ldr	r1, [r7, #4]
 8014694:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014696:	440b      	add	r3, r1
 8014698:	1ad3      	subs	r3, r2, r3
 801469a:	2b00      	cmp	r3, #0
 801469c:	dc06      	bgt.n	80146ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	8b5b      	ldrh	r3, [r3, #26]
 80146a2:	f043 0302 	orr.w	r3, r3, #2
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80146ac:	7efb      	ldrb	r3, [r7, #27]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d01b      	beq.n	80146ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	7d1b      	ldrb	r3, [r3, #20]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d106      	bne.n	80146c8 <tcp_process+0xa8>
 80146ba:	4b7c      	ldr	r3, [pc, #496]	@ (80148ac <tcp_process+0x28c>)
 80146bc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80146c0:	4980      	ldr	r1, [pc, #512]	@ (80148c4 <tcp_process+0x2a4>)
 80146c2:	487c      	ldr	r0, [pc, #496]	@ (80148b4 <tcp_process+0x294>)
 80146c4:	f00a f8a8 	bl	801e818 <iprintf>
      recv_flags |= TF_RESET;
 80146c8:	4b7f      	ldr	r3, [pc, #508]	@ (80148c8 <tcp_process+0x2a8>)
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	f043 0308 	orr.w	r3, r3, #8
 80146d0:	b2da      	uxtb	r2, r3
 80146d2:	4b7d      	ldr	r3, [pc, #500]	@ (80148c8 <tcp_process+0x2a8>)
 80146d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	8b5b      	ldrh	r3, [r3, #26]
 80146da:	f023 0301 	bic.w	r3, r3, #1
 80146de:	b29a      	uxth	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80146e4:	f06f 030d 	mvn.w	r3, #13
 80146e8:	e37a      	b.n	8014de0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80146ea:	2300      	movs	r3, #0
 80146ec:	e378      	b.n	8014de0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80146ee:	4b72      	ldr	r3, [pc, #456]	@ (80148b8 <tcp_process+0x298>)
 80146f0:	781b      	ldrb	r3, [r3, #0]
 80146f2:	f003 0302 	and.w	r3, r3, #2
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d010      	beq.n	801471c <tcp_process+0xfc>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	7d1b      	ldrb	r3, [r3, #20]
 80146fe:	2b02      	cmp	r3, #2
 8014700:	d00c      	beq.n	801471c <tcp_process+0xfc>
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	7d1b      	ldrb	r3, [r3, #20]
 8014706:	2b03      	cmp	r3, #3
 8014708:	d008      	beq.n	801471c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	8b5b      	ldrh	r3, [r3, #26]
 801470e:	f043 0302 	orr.w	r3, r3, #2
 8014712:	b29a      	uxth	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014718:	2300      	movs	r3, #0
 801471a:	e361      	b.n	8014de0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f003 0310 	and.w	r3, r3, #16
 8014724:	2b00      	cmp	r3, #0
 8014726:	d103      	bne.n	8014730 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014728:	4b68      	ldr	r3, [pc, #416]	@ (80148cc <tcp_process+0x2ac>)
 801472a:	681a      	ldr	r2, [r3, #0]
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2200      	movs	r2, #0
 8014734:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2200      	movs	r2, #0
 801473c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f001 fc2b 	bl	8015f9c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	7d1b      	ldrb	r3, [r3, #20]
 801474a:	3b02      	subs	r3, #2
 801474c:	2b07      	cmp	r3, #7
 801474e:	f200 8337 	bhi.w	8014dc0 <tcp_process+0x7a0>
 8014752:	a201      	add	r2, pc, #4	@ (adr r2, 8014758 <tcp_process+0x138>)
 8014754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014758:	08014779 	.word	0x08014779
 801475c:	080149a9 	.word	0x080149a9
 8014760:	08014b21 	.word	0x08014b21
 8014764:	08014b4b 	.word	0x08014b4b
 8014768:	08014c6f 	.word	0x08014c6f
 801476c:	08014b21 	.word	0x08014b21
 8014770:	08014cfb 	.word	0x08014cfb
 8014774:	08014d8b 	.word	0x08014d8b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014778:	4b4f      	ldr	r3, [pc, #316]	@ (80148b8 <tcp_process+0x298>)
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	f003 0310 	and.w	r3, r3, #16
 8014780:	2b00      	cmp	r3, #0
 8014782:	f000 80e4 	beq.w	801494e <tcp_process+0x32e>
 8014786:	4b4c      	ldr	r3, [pc, #304]	@ (80148b8 <tcp_process+0x298>)
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	f003 0302 	and.w	r3, r3, #2
 801478e:	2b00      	cmp	r3, #0
 8014790:	f000 80dd 	beq.w	801494e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014798:	1c5a      	adds	r2, r3, #1
 801479a:	4b48      	ldr	r3, [pc, #288]	@ (80148bc <tcp_process+0x29c>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	429a      	cmp	r2, r3
 80147a0:	f040 80d5 	bne.w	801494e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80147a4:	4b46      	ldr	r3, [pc, #280]	@ (80148c0 <tcp_process+0x2a0>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	1c5a      	adds	r2, r3, #1
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80147b6:	4b41      	ldr	r3, [pc, #260]	@ (80148bc <tcp_process+0x29c>)
 80147b8:	681a      	ldr	r2, [r3, #0]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80147be:	4b44      	ldr	r3, [pc, #272]	@ (80148d0 <tcp_process+0x2b0>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	89db      	ldrh	r3, [r3, #14]
 80147c4:	b29a      	uxth	r2, r3
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80147d8:	4b39      	ldr	r3, [pc, #228]	@ (80148c0 <tcp_process+0x2a0>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	1e5a      	subs	r2, r3, #1
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2204      	movs	r2, #4
 80147e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	3304      	adds	r3, #4
 80147f0:	4618      	mov	r0, r3
 80147f2:	f007 fa19 	bl	801bc28 <ip4_route>
 80147f6:	4601      	mov	r1, r0
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	3304      	adds	r3, #4
 80147fc:	461a      	mov	r2, r3
 80147fe:	4620      	mov	r0, r4
 8014800:	f7ff f88c 	bl	801391c <tcp_eff_send_mss_netif>
 8014804:	4603      	mov	r3, r0
 8014806:	461a      	mov	r2, r3
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014810:	009a      	lsls	r2, r3, #2
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014816:	005b      	lsls	r3, r3, #1
 8014818:	f241 111c 	movw	r1, #4380	@ 0x111c
 801481c:	428b      	cmp	r3, r1
 801481e:	bf38      	it	cc
 8014820:	460b      	movcc	r3, r1
 8014822:	429a      	cmp	r2, r3
 8014824:	d204      	bcs.n	8014830 <tcp_process+0x210>
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	b29b      	uxth	r3, r3
 801482e:	e00d      	b.n	801484c <tcp_process+0x22c>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014834:	005b      	lsls	r3, r3, #1
 8014836:	f241 121c 	movw	r2, #4380	@ 0x111c
 801483a:	4293      	cmp	r3, r2
 801483c:	d904      	bls.n	8014848 <tcp_process+0x228>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014842:	005b      	lsls	r3, r3, #1
 8014844:	b29b      	uxth	r3, r3
 8014846:	e001      	b.n	801484c <tcp_process+0x22c>
 8014848:	f241 131c 	movw	r3, #4380	@ 0x111c
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014858:	2b00      	cmp	r3, #0
 801485a:	d106      	bne.n	801486a <tcp_process+0x24a>
 801485c:	4b13      	ldr	r3, [pc, #76]	@ (80148ac <tcp_process+0x28c>)
 801485e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014862:	491c      	ldr	r1, [pc, #112]	@ (80148d4 <tcp_process+0x2b4>)
 8014864:	4813      	ldr	r0, [pc, #76]	@ (80148b4 <tcp_process+0x294>)
 8014866:	f009 ffd7 	bl	801e818 <iprintf>
        --pcb->snd_queuelen;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014870:	3b01      	subs	r3, #1
 8014872:	b29a      	uxth	r2, r3
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801487e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014880:	69fb      	ldr	r3, [r7, #28]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d12a      	bne.n	80148dc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801488a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801488c:	69fb      	ldr	r3, [r7, #28]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d106      	bne.n	80148a0 <tcp_process+0x280>
 8014892:	4b06      	ldr	r3, [pc, #24]	@ (80148ac <tcp_process+0x28c>)
 8014894:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014898:	490f      	ldr	r1, [pc, #60]	@ (80148d8 <tcp_process+0x2b8>)
 801489a:	4806      	ldr	r0, [pc, #24]	@ (80148b4 <tcp_process+0x294>)
 801489c:	f009 ffbc 	bl	801e818 <iprintf>
          pcb->unsent = rseg->next;
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	681a      	ldr	r2, [r3, #0]
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80148a8:	e01c      	b.n	80148e4 <tcp_process+0x2c4>
 80148aa:	bf00      	nop
 80148ac:	08024410 	.word	0x08024410
 80148b0:	08024648 	.word	0x08024648
 80148b4:	0802445c 	.word	0x0802445c
 80148b8:	2000f4c8 	.word	0x2000f4c8
 80148bc:	2000f4c0 	.word	0x2000f4c0
 80148c0:	2000f4bc 	.word	0x2000f4bc
 80148c4:	08024664 	.word	0x08024664
 80148c8:	2000f4c9 	.word	0x2000f4c9
 80148cc:	2000f484 	.word	0x2000f484
 80148d0:	2000f4ac 	.word	0x2000f4ac
 80148d4:	08024684 	.word	0x08024684
 80148d8:	0802469c 	.word	0x0802469c
        } else {
          pcb->unacked = rseg->next;
 80148dc:	69fb      	ldr	r3, [r7, #28]
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80148e4:	69f8      	ldr	r0, [r7, #28]
 80148e6:	f7fe fc54 	bl	8013192 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d104      	bne.n	80148fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80148f8:	861a      	strh	r2, [r3, #48]	@ 0x30
 80148fa:	e006      	b.n	801490a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2200      	movs	r2, #0
 8014900:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2200      	movs	r2, #0
 8014906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014910:	2b00      	cmp	r3, #0
 8014912:	d00a      	beq.n	801492a <tcp_process+0x30a>
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801491a:	687a      	ldr	r2, [r7, #4]
 801491c:	6910      	ldr	r0, [r2, #16]
 801491e:	2200      	movs	r2, #0
 8014920:	6879      	ldr	r1, [r7, #4]
 8014922:	4798      	blx	r3
 8014924:	4603      	mov	r3, r0
 8014926:	76bb      	strb	r3, [r7, #26]
 8014928:	e001      	b.n	801492e <tcp_process+0x30e>
 801492a:	2300      	movs	r3, #0
 801492c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801492e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014932:	f113 0f0d 	cmn.w	r3, #13
 8014936:	d102      	bne.n	801493e <tcp_process+0x31e>
          return ERR_ABRT;
 8014938:	f06f 030c 	mvn.w	r3, #12
 801493c:	e250      	b.n	8014de0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	8b5b      	ldrh	r3, [r3, #26]
 8014942:	f043 0302 	orr.w	r3, r3, #2
 8014946:	b29a      	uxth	r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801494c:	e23a      	b.n	8014dc4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801494e:	4b98      	ldr	r3, [pc, #608]	@ (8014bb0 <tcp_process+0x590>)
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	f003 0310 	and.w	r3, r3, #16
 8014956:	2b00      	cmp	r3, #0
 8014958:	f000 8234 	beq.w	8014dc4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801495c:	4b95      	ldr	r3, [pc, #596]	@ (8014bb4 <tcp_process+0x594>)
 801495e:	6819      	ldr	r1, [r3, #0]
 8014960:	4b95      	ldr	r3, [pc, #596]	@ (8014bb8 <tcp_process+0x598>)
 8014962:	881b      	ldrh	r3, [r3, #0]
 8014964:	461a      	mov	r2, r3
 8014966:	4b95      	ldr	r3, [pc, #596]	@ (8014bbc <tcp_process+0x59c>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801496c:	4b94      	ldr	r3, [pc, #592]	@ (8014bc0 <tcp_process+0x5a0>)
 801496e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014970:	885b      	ldrh	r3, [r3, #2]
 8014972:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014974:	4a92      	ldr	r2, [pc, #584]	@ (8014bc0 <tcp_process+0x5a0>)
 8014976:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014978:	8812      	ldrh	r2, [r2, #0]
 801497a:	b292      	uxth	r2, r2
 801497c:	9202      	str	r2, [sp, #8]
 801497e:	9301      	str	r3, [sp, #4]
 8014980:	4b90      	ldr	r3, [pc, #576]	@ (8014bc4 <tcp_process+0x5a4>)
 8014982:	9300      	str	r3, [sp, #0]
 8014984:	4b90      	ldr	r3, [pc, #576]	@ (8014bc8 <tcp_process+0x5a8>)
 8014986:	4602      	mov	r2, r0
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f003 f8d7 	bl	8017b3c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014994:	2b05      	cmp	r3, #5
 8014996:	f200 8215 	bhi.w	8014dc4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2200      	movs	r2, #0
 801499e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f002 fea3 	bl	80176ec <tcp_rexmit_rto>
      break;
 80149a6:	e20d      	b.n	8014dc4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80149a8:	4b81      	ldr	r3, [pc, #516]	@ (8014bb0 <tcp_process+0x590>)
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	f003 0310 	and.w	r3, r3, #16
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f000 80a1 	beq.w	8014af8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80149b6:	4b7f      	ldr	r3, [pc, #508]	@ (8014bb4 <tcp_process+0x594>)
 80149b8:	681a      	ldr	r2, [r3, #0]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149be:	1ad3      	subs	r3, r2, r3
 80149c0:	3b01      	subs	r3, #1
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	db7e      	blt.n	8014ac4 <tcp_process+0x4a4>
 80149c6:	4b7b      	ldr	r3, [pc, #492]	@ (8014bb4 <tcp_process+0x594>)
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149ce:	1ad3      	subs	r3, r2, r3
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	dc77      	bgt.n	8014ac4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2204      	movs	r2, #4
 80149d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d102      	bne.n	80149e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80149e2:	23fa      	movs	r3, #250	@ 0xfa
 80149e4:	76bb      	strb	r3, [r7, #26]
 80149e6:	e01d      	b.n	8014a24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149ec:	699b      	ldr	r3, [r3, #24]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d106      	bne.n	8014a00 <tcp_process+0x3e0>
 80149f2:	4b76      	ldr	r3, [pc, #472]	@ (8014bcc <tcp_process+0x5ac>)
 80149f4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80149f8:	4975      	ldr	r1, [pc, #468]	@ (8014bd0 <tcp_process+0x5b0>)
 80149fa:	4876      	ldr	r0, [pc, #472]	@ (8014bd4 <tcp_process+0x5b4>)
 80149fc:	f009 ff0c 	bl	801e818 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014a04:	699b      	ldr	r3, [r3, #24]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d00a      	beq.n	8014a20 <tcp_process+0x400>
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014a0e:	699b      	ldr	r3, [r3, #24]
 8014a10:	687a      	ldr	r2, [r7, #4]
 8014a12:	6910      	ldr	r0, [r2, #16]
 8014a14:	2200      	movs	r2, #0
 8014a16:	6879      	ldr	r1, [r7, #4]
 8014a18:	4798      	blx	r3
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	76bb      	strb	r3, [r7, #26]
 8014a1e:	e001      	b.n	8014a24 <tcp_process+0x404>
 8014a20:	23f0      	movs	r3, #240	@ 0xf0
 8014a22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014a24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d00a      	beq.n	8014a42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014a2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014a30:	f113 0f0d 	cmn.w	r3, #13
 8014a34:	d002      	beq.n	8014a3c <tcp_process+0x41c>
              tcp_abort(pcb);
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7fd fd60 	bl	80124fc <tcp_abort>
            }
            return ERR_ABRT;
 8014a3c:	f06f 030c 	mvn.w	r3, #12
 8014a40:	e1ce      	b.n	8014de0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 fae0 	bl	8015008 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014a48:	4b63      	ldr	r3, [pc, #396]	@ (8014bd8 <tcp_process+0x5b8>)
 8014a4a:	881b      	ldrh	r3, [r3, #0]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d005      	beq.n	8014a5c <tcp_process+0x43c>
            recv_acked--;
 8014a50:	4b61      	ldr	r3, [pc, #388]	@ (8014bd8 <tcp_process+0x5b8>)
 8014a52:	881b      	ldrh	r3, [r3, #0]
 8014a54:	3b01      	subs	r3, #1
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	4b5f      	ldr	r3, [pc, #380]	@ (8014bd8 <tcp_process+0x5b8>)
 8014a5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a60:	009a      	lsls	r2, r3, #2
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a66:	005b      	lsls	r3, r3, #1
 8014a68:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014a6c:	428b      	cmp	r3, r1
 8014a6e:	bf38      	it	cc
 8014a70:	460b      	movcc	r3, r1
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d204      	bcs.n	8014a80 <tcp_process+0x460>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a7a:	009b      	lsls	r3, r3, #2
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	e00d      	b.n	8014a9c <tcp_process+0x47c>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	d904      	bls.n	8014a98 <tcp_process+0x478>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	b29b      	uxth	r3, r3
 8014a96:	e001      	b.n	8014a9c <tcp_process+0x47c>
 8014a98:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8014bdc <tcp_process+0x5bc>)
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	f003 0320 	and.w	r3, r3, #32
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d037      	beq.n	8014b1e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	8b5b      	ldrh	r3, [r3, #26]
 8014ab2:	f043 0302 	orr.w	r3, r3, #2
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2207      	movs	r2, #7
 8014ac0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014ac2:	e02c      	b.n	8014b1e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8014bb4 <tcp_process+0x594>)
 8014ac6:	6819      	ldr	r1, [r3, #0]
 8014ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8014bb8 <tcp_process+0x598>)
 8014aca:	881b      	ldrh	r3, [r3, #0]
 8014acc:	461a      	mov	r2, r3
 8014ace:	4b3b      	ldr	r3, [pc, #236]	@ (8014bbc <tcp_process+0x59c>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8014bc0 <tcp_process+0x5a0>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ad8:	885b      	ldrh	r3, [r3, #2]
 8014ada:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014adc:	4a38      	ldr	r2, [pc, #224]	@ (8014bc0 <tcp_process+0x5a0>)
 8014ade:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ae0:	8812      	ldrh	r2, [r2, #0]
 8014ae2:	b292      	uxth	r2, r2
 8014ae4:	9202      	str	r2, [sp, #8]
 8014ae6:	9301      	str	r3, [sp, #4]
 8014ae8:	4b36      	ldr	r3, [pc, #216]	@ (8014bc4 <tcp_process+0x5a4>)
 8014aea:	9300      	str	r3, [sp, #0]
 8014aec:	4b36      	ldr	r3, [pc, #216]	@ (8014bc8 <tcp_process+0x5a8>)
 8014aee:	4602      	mov	r2, r0
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f003 f823 	bl	8017b3c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014af6:	e167      	b.n	8014dc8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014af8:	4b2d      	ldr	r3, [pc, #180]	@ (8014bb0 <tcp_process+0x590>)
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	f003 0302 	and.w	r3, r3, #2
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	f000 8161 	beq.w	8014dc8 <tcp_process+0x7a8>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b0a:	1e5a      	subs	r2, r3, #1
 8014b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8014bbc <tcp_process+0x59c>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	f040 8159 	bne.w	8014dc8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f002 fe0a 	bl	8017730 <tcp_rexmit>
      break;
 8014b1c:	e154      	b.n	8014dc8 <tcp_process+0x7a8>
 8014b1e:	e153      	b.n	8014dc8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f000 fa71 	bl	8015008 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014b26:	4b2d      	ldr	r3, [pc, #180]	@ (8014bdc <tcp_process+0x5bc>)
 8014b28:	781b      	ldrb	r3, [r3, #0]
 8014b2a:	f003 0320 	and.w	r3, r3, #32
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	f000 814c 	beq.w	8014dcc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	8b5b      	ldrh	r3, [r3, #26]
 8014b38:	f043 0302 	orr.w	r3, r3, #2
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2207      	movs	r2, #7
 8014b46:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014b48:	e140      	b.n	8014dcc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f000 fa5c 	bl	8015008 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014b50:	4b22      	ldr	r3, [pc, #136]	@ (8014bdc <tcp_process+0x5bc>)
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	f003 0320 	and.w	r3, r3, #32
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d071      	beq.n	8014c40 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b5c:	4b14      	ldr	r3, [pc, #80]	@ (8014bb0 <tcp_process+0x590>)
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	f003 0310 	and.w	r3, r3, #16
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d060      	beq.n	8014c2a <tcp_process+0x60a>
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b6c:	4b11      	ldr	r3, [pc, #68]	@ (8014bb4 <tcp_process+0x594>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d15a      	bne.n	8014c2a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d156      	bne.n	8014c2a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	8b5b      	ldrh	r3, [r3, #26]
 8014b80:	f043 0302 	orr.w	r3, r3, #2
 8014b84:	b29a      	uxth	r2, r3
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f7fe fdbc 	bl	8013708 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014b90:	4b13      	ldr	r3, [pc, #76]	@ (8014be0 <tcp_process+0x5c0>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d105      	bne.n	8014ba6 <tcp_process+0x586>
 8014b9a:	4b11      	ldr	r3, [pc, #68]	@ (8014be0 <tcp_process+0x5c0>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	68db      	ldr	r3, [r3, #12]
 8014ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8014be0 <tcp_process+0x5c0>)
 8014ba2:	6013      	str	r3, [r2, #0]
 8014ba4:	e02e      	b.n	8014c04 <tcp_process+0x5e4>
 8014ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8014be0 <tcp_process+0x5c0>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	617b      	str	r3, [r7, #20]
 8014bac:	e027      	b.n	8014bfe <tcp_process+0x5de>
 8014bae:	bf00      	nop
 8014bb0:	2000f4c8 	.word	0x2000f4c8
 8014bb4:	2000f4c0 	.word	0x2000f4c0
 8014bb8:	2000f4c6 	.word	0x2000f4c6
 8014bbc:	2000f4bc 	.word	0x2000f4bc
 8014bc0:	2000f4ac 	.word	0x2000f4ac
 8014bc4:	2000bbd4 	.word	0x2000bbd4
 8014bc8:	2000bbd8 	.word	0x2000bbd8
 8014bcc:	08024410 	.word	0x08024410
 8014bd0:	080246b0 	.word	0x080246b0
 8014bd4:	0802445c 	.word	0x0802445c
 8014bd8:	2000f4c4 	.word	0x2000f4c4
 8014bdc:	2000f4c9 	.word	0x2000f4c9
 8014be0:	2000f490 	.word	0x2000f490
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	687a      	ldr	r2, [r7, #4]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	d104      	bne.n	8014bf8 <tcp_process+0x5d8>
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	68da      	ldr	r2, [r3, #12]
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	60da      	str	r2, [r3, #12]
 8014bf6:	e005      	b.n	8014c04 <tcp_process+0x5e4>
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	617b      	str	r3, [r7, #20]
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d1ef      	bne.n	8014be4 <tcp_process+0x5c4>
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2200      	movs	r2, #0
 8014c08:	60da      	str	r2, [r3, #12]
 8014c0a:	4b77      	ldr	r3, [pc, #476]	@ (8014de8 <tcp_process+0x7c8>)
 8014c0c:	2201      	movs	r2, #1
 8014c0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	220a      	movs	r2, #10
 8014c14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014c16:	4b75      	ldr	r3, [pc, #468]	@ (8014dec <tcp_process+0x7cc>)
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	60da      	str	r2, [r3, #12]
 8014c1e:	4a73      	ldr	r2, [pc, #460]	@ (8014dec <tcp_process+0x7cc>)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6013      	str	r3, [r2, #0]
 8014c24:	f003 f94c 	bl	8017ec0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014c28:	e0d2      	b.n	8014dd0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	8b5b      	ldrh	r3, [r3, #26]
 8014c2e:	f043 0302 	orr.w	r3, r3, #2
 8014c32:	b29a      	uxth	r2, r3
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2208      	movs	r2, #8
 8014c3c:	751a      	strb	r2, [r3, #20]
      break;
 8014c3e:	e0c7      	b.n	8014dd0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014c40:	4b6b      	ldr	r3, [pc, #428]	@ (8014df0 <tcp_process+0x7d0>)
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	f003 0310 	and.w	r3, r3, #16
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	f000 80c1 	beq.w	8014dd0 <tcp_process+0x7b0>
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014c52:	4b68      	ldr	r3, [pc, #416]	@ (8014df4 <tcp_process+0x7d4>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	f040 80ba 	bne.w	8014dd0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f040 80b5 	bne.w	8014dd0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2206      	movs	r2, #6
 8014c6a:	751a      	strb	r2, [r3, #20]
      break;
 8014c6c:	e0b0      	b.n	8014dd0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f000 f9ca 	bl	8015008 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014c74:	4b60      	ldr	r3, [pc, #384]	@ (8014df8 <tcp_process+0x7d8>)
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 0320 	and.w	r3, r3, #32
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	f000 80a9 	beq.w	8014dd4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	8b5b      	ldrh	r3, [r3, #26]
 8014c86:	f043 0302 	orr.w	r3, r3, #2
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f7fe fd39 	bl	8013708 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014c96:	4b59      	ldr	r3, [pc, #356]	@ (8014dfc <tcp_process+0x7dc>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d105      	bne.n	8014cac <tcp_process+0x68c>
 8014ca0:	4b56      	ldr	r3, [pc, #344]	@ (8014dfc <tcp_process+0x7dc>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	4a55      	ldr	r2, [pc, #340]	@ (8014dfc <tcp_process+0x7dc>)
 8014ca8:	6013      	str	r3, [r2, #0]
 8014caa:	e013      	b.n	8014cd4 <tcp_process+0x6b4>
 8014cac:	4b53      	ldr	r3, [pc, #332]	@ (8014dfc <tcp_process+0x7dc>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	613b      	str	r3, [r7, #16]
 8014cb2:	e00c      	b.n	8014cce <tcp_process+0x6ae>
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d104      	bne.n	8014cc8 <tcp_process+0x6a8>
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	68da      	ldr	r2, [r3, #12]
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	60da      	str	r2, [r3, #12]
 8014cc6:	e005      	b.n	8014cd4 <tcp_process+0x6b4>
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	613b      	str	r3, [r7, #16]
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d1ef      	bne.n	8014cb4 <tcp_process+0x694>
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	60da      	str	r2, [r3, #12]
 8014cda:	4b43      	ldr	r3, [pc, #268]	@ (8014de8 <tcp_process+0x7c8>)
 8014cdc:	2201      	movs	r2, #1
 8014cde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	220a      	movs	r2, #10
 8014ce4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014ce6:	4b41      	ldr	r3, [pc, #260]	@ (8014dec <tcp_process+0x7cc>)
 8014ce8:	681a      	ldr	r2, [r3, #0]
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	60da      	str	r2, [r3, #12]
 8014cee:	4a3f      	ldr	r2, [pc, #252]	@ (8014dec <tcp_process+0x7cc>)
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6013      	str	r3, [r2, #0]
 8014cf4:	f003 f8e4 	bl	8017ec0 <tcp_timer_needed>
      }
      break;
 8014cf8:	e06c      	b.n	8014dd4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014cfa:	6878      	ldr	r0, [r7, #4]
 8014cfc:	f000 f984 	bl	8015008 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014d00:	4b3b      	ldr	r3, [pc, #236]	@ (8014df0 <tcp_process+0x7d0>)
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	f003 0310 	and.w	r3, r3, #16
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d065      	beq.n	8014dd8 <tcp_process+0x7b8>
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d10:	4b38      	ldr	r3, [pc, #224]	@ (8014df4 <tcp_process+0x7d4>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d15f      	bne.n	8014dd8 <tcp_process+0x7b8>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d15b      	bne.n	8014dd8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f7fe fcf1 	bl	8013708 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014d26:	4b35      	ldr	r3, [pc, #212]	@ (8014dfc <tcp_process+0x7dc>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d105      	bne.n	8014d3c <tcp_process+0x71c>
 8014d30:	4b32      	ldr	r3, [pc, #200]	@ (8014dfc <tcp_process+0x7dc>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	4a31      	ldr	r2, [pc, #196]	@ (8014dfc <tcp_process+0x7dc>)
 8014d38:	6013      	str	r3, [r2, #0]
 8014d3a:	e013      	b.n	8014d64 <tcp_process+0x744>
 8014d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8014dfc <tcp_process+0x7dc>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	60fb      	str	r3, [r7, #12]
 8014d42:	e00c      	b.n	8014d5e <tcp_process+0x73e>
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	68db      	ldr	r3, [r3, #12]
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d104      	bne.n	8014d58 <tcp_process+0x738>
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	68da      	ldr	r2, [r3, #12]
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	60da      	str	r2, [r3, #12]
 8014d56:	e005      	b.n	8014d64 <tcp_process+0x744>
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	60fb      	str	r3, [r7, #12]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d1ef      	bne.n	8014d44 <tcp_process+0x724>
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2200      	movs	r2, #0
 8014d68:	60da      	str	r2, [r3, #12]
 8014d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8014de8 <tcp_process+0x7c8>)
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	220a      	movs	r2, #10
 8014d74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014d76:	4b1d      	ldr	r3, [pc, #116]	@ (8014dec <tcp_process+0x7cc>)
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	60da      	str	r2, [r3, #12]
 8014d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8014dec <tcp_process+0x7cc>)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	6013      	str	r3, [r2, #0]
 8014d84:	f003 f89c 	bl	8017ec0 <tcp_timer_needed>
      }
      break;
 8014d88:	e026      	b.n	8014dd8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f000 f93c 	bl	8015008 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014d90:	4b17      	ldr	r3, [pc, #92]	@ (8014df0 <tcp_process+0x7d0>)
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	f003 0310 	and.w	r3, r3, #16
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d01f      	beq.n	8014ddc <tcp_process+0x7bc>
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014da0:	4b14      	ldr	r3, [pc, #80]	@ (8014df4 <tcp_process+0x7d4>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d119      	bne.n	8014ddc <tcp_process+0x7bc>
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d115      	bne.n	8014ddc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014db0:	4b11      	ldr	r3, [pc, #68]	@ (8014df8 <tcp_process+0x7d8>)
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	f043 0310 	orr.w	r3, r3, #16
 8014db8:	b2da      	uxtb	r2, r3
 8014dba:	4b0f      	ldr	r3, [pc, #60]	@ (8014df8 <tcp_process+0x7d8>)
 8014dbc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014dbe:	e00d      	b.n	8014ddc <tcp_process+0x7bc>
    default:
      break;
 8014dc0:	bf00      	nop
 8014dc2:	e00c      	b.n	8014dde <tcp_process+0x7be>
      break;
 8014dc4:	bf00      	nop
 8014dc6:	e00a      	b.n	8014dde <tcp_process+0x7be>
      break;
 8014dc8:	bf00      	nop
 8014dca:	e008      	b.n	8014dde <tcp_process+0x7be>
      break;
 8014dcc:	bf00      	nop
 8014dce:	e006      	b.n	8014dde <tcp_process+0x7be>
      break;
 8014dd0:	bf00      	nop
 8014dd2:	e004      	b.n	8014dde <tcp_process+0x7be>
      break;
 8014dd4:	bf00      	nop
 8014dd6:	e002      	b.n	8014dde <tcp_process+0x7be>
      break;
 8014dd8:	bf00      	nop
 8014dda:	e000      	b.n	8014dde <tcp_process+0x7be>
      break;
 8014ddc:	bf00      	nop
  }
  return ERR_OK;
 8014dde:	2300      	movs	r3, #0
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3724      	adds	r7, #36	@ 0x24
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd90      	pop	{r4, r7, pc}
 8014de8:	2000f498 	.word	0x2000f498
 8014dec:	2000f494 	.word	0x2000f494
 8014df0:	2000f4c8 	.word	0x2000f4c8
 8014df4:	2000f4c0 	.word	0x2000f4c0
 8014df8:	2000f4c9 	.word	0x2000f4c9
 8014dfc:	2000f490 	.word	0x2000f490

08014e00 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014e00:	b590      	push	{r4, r7, lr}
 8014e02:	b085      	sub	sp, #20
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d106      	bne.n	8014e1e <tcp_oos_insert_segment+0x1e>
 8014e10:	4b3b      	ldr	r3, [pc, #236]	@ (8014f00 <tcp_oos_insert_segment+0x100>)
 8014e12:	f240 421f 	movw	r2, #1055	@ 0x41f
 8014e16:	493b      	ldr	r1, [pc, #236]	@ (8014f04 <tcp_oos_insert_segment+0x104>)
 8014e18:	483b      	ldr	r0, [pc, #236]	@ (8014f08 <tcp_oos_insert_segment+0x108>)
 8014e1a:	f009 fcfd 	bl	801e818 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	68db      	ldr	r3, [r3, #12]
 8014e22:	899b      	ldrh	r3, [r3, #12]
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7fa fcf0 	bl	800f80c <lwip_htons>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	b2db      	uxtb	r3, r3
 8014e30:	f003 0301 	and.w	r3, r3, #1
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d028      	beq.n	8014e8a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014e38:	6838      	ldr	r0, [r7, #0]
 8014e3a:	f7fe f995 	bl	8013168 <tcp_segs_free>
    next = NULL;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	603b      	str	r3, [r7, #0]
 8014e42:	e056      	b.n	8014ef2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	68db      	ldr	r3, [r3, #12]
 8014e48:	899b      	ldrh	r3, [r3, #12]
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7fa fcdd 	bl	800f80c <lwip_htons>
 8014e52:	4603      	mov	r3, r0
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	f003 0301 	and.w	r3, r3, #1
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00d      	beq.n	8014e7a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	899b      	ldrh	r3, [r3, #12]
 8014e64:	b29c      	uxth	r4, r3
 8014e66:	2001      	movs	r0, #1
 8014e68:	f7fa fcd0 	bl	800f80c <lwip_htons>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	461a      	mov	r2, r3
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	4322      	orrs	r2, r4
 8014e76:	b292      	uxth	r2, r2
 8014e78:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014e84:	68f8      	ldr	r0, [r7, #12]
 8014e86:	f7fe f984 	bl	8013192 <tcp_seg_free>
    while (next &&
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d00e      	beq.n	8014eae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	891b      	ldrh	r3, [r3, #8]
 8014e94:	461a      	mov	r2, r3
 8014e96:	4b1d      	ldr	r3, [pc, #116]	@ (8014f0c <tcp_oos_insert_segment+0x10c>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	441a      	add	r2, r3
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	685b      	ldr	r3, [r3, #4]
 8014ea2:	6839      	ldr	r1, [r7, #0]
 8014ea4:	8909      	ldrh	r1, [r1, #8]
 8014ea6:	440b      	add	r3, r1
 8014ea8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	daca      	bge.n	8014e44 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d01e      	beq.n	8014ef2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	891b      	ldrh	r3, [r3, #8]
 8014eb8:	461a      	mov	r2, r3
 8014eba:	4b14      	ldr	r3, [pc, #80]	@ (8014f0c <tcp_oos_insert_segment+0x10c>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	441a      	add	r2, r3
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	dd12      	ble.n	8014ef2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	b29a      	uxth	r2, r3
 8014ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8014f0c <tcp_oos_insert_segment+0x10c>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	1ad3      	subs	r3, r2, r3
 8014edc:	b29a      	uxth	r2, r3
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	685a      	ldr	r2, [r3, #4]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	891b      	ldrh	r3, [r3, #8]
 8014eea:	4619      	mov	r1, r3
 8014eec:	4610      	mov	r0, r2
 8014eee:	f7fc f9f3 	bl	80112d8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	683a      	ldr	r2, [r7, #0]
 8014ef6:	601a      	str	r2, [r3, #0]
}
 8014ef8:	bf00      	nop
 8014efa:	3714      	adds	r7, #20
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd90      	pop	{r4, r7, pc}
 8014f00:	08024410 	.word	0x08024410
 8014f04:	080246d0 	.word	0x080246d0
 8014f08:	0802445c 	.word	0x0802445c
 8014f0c:	2000f4bc 	.word	0x2000f4bc

08014f10 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014f10:	b5b0      	push	{r4, r5, r7, lr}
 8014f12:	b086      	sub	sp, #24
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	607a      	str	r2, [r7, #4]
 8014f1c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014f1e:	e03e      	b.n	8014f9e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f7fc fc18 	bl	8011764 <pbuf_clen>
 8014f34:	4603      	mov	r3, r0
 8014f36:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f3e:	8a7a      	ldrh	r2, [r7, #18]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d906      	bls.n	8014f52 <tcp_free_acked_segments+0x42>
 8014f44:	4b2a      	ldr	r3, [pc, #168]	@ (8014ff0 <tcp_free_acked_segments+0xe0>)
 8014f46:	f240 4257 	movw	r2, #1111	@ 0x457
 8014f4a:	492a      	ldr	r1, [pc, #168]	@ (8014ff4 <tcp_free_acked_segments+0xe4>)
 8014f4c:	482a      	ldr	r0, [pc, #168]	@ (8014ff8 <tcp_free_acked_segments+0xe8>)
 8014f4e:	f009 fc63 	bl	801e818 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014f58:	8a7b      	ldrh	r3, [r7, #18]
 8014f5a:	1ad3      	subs	r3, r2, r3
 8014f5c:	b29a      	uxth	r2, r3
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014f64:	697b      	ldr	r3, [r7, #20]
 8014f66:	891a      	ldrh	r2, [r3, #8]
 8014f68:	4b24      	ldr	r3, [pc, #144]	@ (8014ffc <tcp_free_acked_segments+0xec>)
 8014f6a:	881b      	ldrh	r3, [r3, #0]
 8014f6c:	4413      	add	r3, r2
 8014f6e:	b29a      	uxth	r2, r3
 8014f70:	4b22      	ldr	r3, [pc, #136]	@ (8014ffc <tcp_free_acked_segments+0xec>)
 8014f72:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014f74:	6978      	ldr	r0, [r7, #20]
 8014f76:	f7fe f90c 	bl	8013192 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d00c      	beq.n	8014f9e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d109      	bne.n	8014f9e <tcp_free_acked_segments+0x8e>
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d106      	bne.n	8014f9e <tcp_free_acked_segments+0x8e>
 8014f90:	4b17      	ldr	r3, [pc, #92]	@ (8014ff0 <tcp_free_acked_segments+0xe0>)
 8014f92:	f240 4261 	movw	r2, #1121	@ 0x461
 8014f96:	491a      	ldr	r1, [pc, #104]	@ (8015000 <tcp_free_acked_segments+0xf0>)
 8014f98:	4817      	ldr	r0, [pc, #92]	@ (8014ff8 <tcp_free_acked_segments+0xe8>)
 8014f9a:	f009 fc3d 	bl	801e818 <iprintf>
  while (seg_list != NULL &&
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d020      	beq.n	8014fe6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	685b      	ldr	r3, [r3, #4]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fa fc43 	bl	800f836 <lwip_htonl>
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	891b      	ldrh	r3, [r3, #8]
 8014fb6:	461d      	mov	r5, r3
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	899b      	ldrh	r3, [r3, #12]
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7fa fc23 	bl	800f80c <lwip_htons>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	b2db      	uxtb	r3, r3
 8014fca:	f003 0303 	and.w	r3, r3, #3
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d001      	beq.n	8014fd6 <tcp_free_acked_segments+0xc6>
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	e000      	b.n	8014fd8 <tcp_free_acked_segments+0xc8>
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	442b      	add	r3, r5
 8014fda:	18e2      	adds	r2, r4, r3
 8014fdc:	4b09      	ldr	r3, [pc, #36]	@ (8015004 <tcp_free_acked_segments+0xf4>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	dd9c      	ble.n	8014f20 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014fe6:	68bb      	ldr	r3, [r7, #8]
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3718      	adds	r7, #24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bdb0      	pop	{r4, r5, r7, pc}
 8014ff0:	08024410 	.word	0x08024410
 8014ff4:	080246f8 	.word	0x080246f8
 8014ff8:	0802445c 	.word	0x0802445c
 8014ffc:	2000f4c4 	.word	0x2000f4c4
 8015000:	08024720 	.word	0x08024720
 8015004:	2000f4c0 	.word	0x2000f4c0

08015008 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015008:	b5b0      	push	{r4, r5, r7, lr}
 801500a:	b094      	sub	sp, #80	@ 0x50
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015010:	2300      	movs	r3, #0
 8015012:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d106      	bne.n	8015028 <tcp_receive+0x20>
 801501a:	4b91      	ldr	r3, [pc, #580]	@ (8015260 <tcp_receive+0x258>)
 801501c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8015020:	4990      	ldr	r1, [pc, #576]	@ (8015264 <tcp_receive+0x25c>)
 8015022:	4891      	ldr	r0, [pc, #580]	@ (8015268 <tcp_receive+0x260>)
 8015024:	f009 fbf8 	bl	801e818 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	7d1b      	ldrb	r3, [r3, #20]
 801502c:	2b03      	cmp	r3, #3
 801502e:	d806      	bhi.n	801503e <tcp_receive+0x36>
 8015030:	4b8b      	ldr	r3, [pc, #556]	@ (8015260 <tcp_receive+0x258>)
 8015032:	f240 427c 	movw	r2, #1148	@ 0x47c
 8015036:	498d      	ldr	r1, [pc, #564]	@ (801526c <tcp_receive+0x264>)
 8015038:	488b      	ldr	r0, [pc, #556]	@ (8015268 <tcp_receive+0x260>)
 801503a:	f009 fbed 	bl	801e818 <iprintf>

  if (flags & TCP_ACK) {
 801503e:	4b8c      	ldr	r3, [pc, #560]	@ (8015270 <tcp_receive+0x268>)
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	f003 0310 	and.w	r3, r3, #16
 8015046:	2b00      	cmp	r3, #0
 8015048:	f000 8264 	beq.w	8015514 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015052:	461a      	mov	r2, r3
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015058:	4413      	add	r3, r2
 801505a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015060:	4b84      	ldr	r3, [pc, #528]	@ (8015274 <tcp_receive+0x26c>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	1ad3      	subs	r3, r2, r3
 8015066:	2b00      	cmp	r3, #0
 8015068:	db1b      	blt.n	80150a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801506e:	4b81      	ldr	r3, [pc, #516]	@ (8015274 <tcp_receive+0x26c>)
 8015070:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015072:	429a      	cmp	r2, r3
 8015074:	d106      	bne.n	8015084 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801507a:	4b7f      	ldr	r3, [pc, #508]	@ (8015278 <tcp_receive+0x270>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	1ad3      	subs	r3, r2, r3
 8015080:	2b00      	cmp	r3, #0
 8015082:	db0e      	blt.n	80150a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015088:	4b7b      	ldr	r3, [pc, #492]	@ (8015278 <tcp_receive+0x270>)
 801508a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801508c:	429a      	cmp	r2, r3
 801508e:	d125      	bne.n	80150dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015090:	4b7a      	ldr	r3, [pc, #488]	@ (801527c <tcp_receive+0x274>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	89db      	ldrh	r3, [r3, #14]
 8015096:	b29a      	uxth	r2, r3
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801509e:	429a      	cmp	r2, r3
 80150a0:	d91c      	bls.n	80150dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80150a2:	4b76      	ldr	r3, [pc, #472]	@ (801527c <tcp_receive+0x274>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	89db      	ldrh	r3, [r3, #14]
 80150a8:	b29a      	uxth	r2, r3
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80150bc:	429a      	cmp	r2, r3
 80150be:	d205      	bcs.n	80150cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80150cc:	4b69      	ldr	r3, [pc, #420]	@ (8015274 <tcp_receive+0x26c>)
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80150d4:	4b68      	ldr	r3, [pc, #416]	@ (8015278 <tcp_receive+0x270>)
 80150d6:	681a      	ldr	r2, [r3, #0]
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80150dc:	4b66      	ldr	r3, [pc, #408]	@ (8015278 <tcp_receive+0x270>)
 80150de:	681a      	ldr	r2, [r3, #0]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150e4:	1ad3      	subs	r3, r2, r3
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	dc58      	bgt.n	801519c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80150ea:	4b65      	ldr	r3, [pc, #404]	@ (8015280 <tcp_receive+0x278>)
 80150ec:	881b      	ldrh	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d14b      	bne.n	801518a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80150fc:	4413      	add	r3, r2
 80150fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015100:	429a      	cmp	r2, r3
 8015102:	d142      	bne.n	801518a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801510a:	2b00      	cmp	r3, #0
 801510c:	db3d      	blt.n	801518a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015112:	4b59      	ldr	r3, [pc, #356]	@ (8015278 <tcp_receive+0x270>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	429a      	cmp	r2, r3
 8015118:	d137      	bne.n	801518a <tcp_receive+0x182>
              found_dupack = 1;
 801511a:	2301      	movs	r3, #1
 801511c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015124:	2bff      	cmp	r3, #255	@ 0xff
 8015126:	d007      	beq.n	8015138 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801512e:	3301      	adds	r3, #1
 8015130:	b2da      	uxtb	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801513e:	2b03      	cmp	r3, #3
 8015140:	d91b      	bls.n	801517a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801514c:	4413      	add	r3, r2
 801514e:	b29a      	uxth	r2, r3
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015156:	429a      	cmp	r2, r3
 8015158:	d30a      	bcc.n	8015170 <tcp_receive+0x168>
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015164:	4413      	add	r3, r2
 8015166:	b29a      	uxth	r2, r3
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801516e:	e004      	b.n	801517a <tcp_receive+0x172>
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015176:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015180:	2b02      	cmp	r3, #2
 8015182:	d902      	bls.n	801518a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f002 fb3f 	bl	8017808 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801518a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801518c:	2b00      	cmp	r3, #0
 801518e:	f040 8161 	bne.w	8015454 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	2200      	movs	r2, #0
 8015196:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801519a:	e15b      	b.n	8015454 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801519c:	4b36      	ldr	r3, [pc, #216]	@ (8015278 <tcp_receive+0x270>)
 801519e:	681a      	ldr	r2, [r3, #0]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	3b01      	subs	r3, #1
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	f2c0 814e 	blt.w	801544a <tcp_receive+0x442>
 80151ae:	4b32      	ldr	r3, [pc, #200]	@ (8015278 <tcp_receive+0x270>)
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151b6:	1ad3      	subs	r3, r2, r3
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f300 8146 	bgt.w	801544a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	8b5b      	ldrh	r3, [r3, #26]
 80151c2:	f003 0304 	and.w	r3, r3, #4
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d010      	beq.n	80151ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	8b5b      	ldrh	r3, [r3, #26]
 80151ce:	f023 0304 	bic.w	r3, r3, #4
 80151d2:	b29a      	uxth	r2, r3
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2200      	movs	r2, #0
 80151e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2200      	movs	r2, #0
 80151f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80151fa:	10db      	asrs	r3, r3, #3
 80151fc:	b21b      	sxth	r3, r3
 80151fe:	b29a      	uxth	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015206:	b29b      	uxth	r3, r3
 8015208:	4413      	add	r3, r2
 801520a:	b29b      	uxth	r3, r3
 801520c:	b21a      	sxth	r2, r3
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015214:	4b18      	ldr	r3, [pc, #96]	@ (8015278 <tcp_receive+0x270>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	b29a      	uxth	r2, r3
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801521e:	b29b      	uxth	r3, r3
 8015220:	1ad3      	subs	r3, r2, r3
 8015222:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2200      	movs	r2, #0
 8015228:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801522c:	4b12      	ldr	r3, [pc, #72]	@ (8015278 <tcp_receive+0x270>)
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	7d1b      	ldrb	r3, [r3, #20]
 8015238:	2b03      	cmp	r3, #3
 801523a:	f240 8097 	bls.w	801536c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801524a:	429a      	cmp	r2, r3
 801524c:	d245      	bcs.n	80152da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	8b5b      	ldrh	r3, [r3, #26]
 8015252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015256:	2b00      	cmp	r3, #0
 8015258:	d014      	beq.n	8015284 <tcp_receive+0x27c>
 801525a:	2301      	movs	r3, #1
 801525c:	e013      	b.n	8015286 <tcp_receive+0x27e>
 801525e:	bf00      	nop
 8015260:	08024410 	.word	0x08024410
 8015264:	08024740 	.word	0x08024740
 8015268:	0802445c 	.word	0x0802445c
 801526c:	0802475c 	.word	0x0802475c
 8015270:	2000f4c8 	.word	0x2000f4c8
 8015274:	2000f4bc 	.word	0x2000f4bc
 8015278:	2000f4c0 	.word	0x2000f4c0
 801527c:	2000f4ac 	.word	0x2000f4ac
 8015280:	2000f4c6 	.word	0x2000f4c6
 8015284:	2302      	movs	r3, #2
 8015286:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801528a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801528e:	b29a      	uxth	r2, r3
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015294:	fb12 f303 	smulbb	r3, r2, r3
 8015298:	b29b      	uxth	r3, r3
 801529a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801529c:	4293      	cmp	r3, r2
 801529e:	bf28      	it	cs
 80152a0:	4613      	movcs	r3, r2
 80152a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80152aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152ac:	4413      	add	r3, r2
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d309      	bcc.n	80152ce <tcp_receive+0x2c6>
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80152c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152c2:	4413      	add	r3, r2
 80152c4:	b29a      	uxth	r2, r3
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80152cc:	e04e      	b.n	801536c <tcp_receive+0x364>
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80152d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80152d8:	e048      	b.n	801536c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80152e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80152e2:	4413      	add	r3, r2
 80152e4:	b29a      	uxth	r2, r3
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d309      	bcc.n	8015304 <tcp_receive+0x2fc>
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80152f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80152f8:	4413      	add	r3, r2
 80152fa:	b29a      	uxth	r2, r3
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015302:	e004      	b.n	801530e <tcp_receive+0x306>
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801530a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801531a:	429a      	cmp	r2, r3
 801531c:	d326      	bcc.n	801536c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801532a:	1ad3      	subs	r3, r2, r3
 801532c:	b29a      	uxth	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801533e:	4413      	add	r3, r2
 8015340:	b29a      	uxth	r2, r3
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015348:	429a      	cmp	r2, r3
 801534a:	d30a      	bcc.n	8015362 <tcp_receive+0x35a>
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015356:	4413      	add	r3, r2
 8015358:	b29a      	uxth	r2, r3
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015360:	e004      	b.n	801536c <tcp_receive+0x364>
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015368:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015374:	4a98      	ldr	r2, [pc, #608]	@ (80155d8 <tcp_receive+0x5d0>)
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f7ff fdca 	bl	8014f10 <tcp_free_acked_segments>
 801537c:	4602      	mov	r2, r0
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801538a:	4a94      	ldr	r2, [pc, #592]	@ (80155dc <tcp_receive+0x5d4>)
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f7ff fdbf 	bl	8014f10 <tcp_free_acked_segments>
 8015392:	4602      	mov	r2, r0
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801539c:	2b00      	cmp	r3, #0
 801539e:	d104      	bne.n	80153aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80153a6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80153a8:	e002      	b.n	80153b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2200      	movs	r2, #0
 80153ae:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	2200      	movs	r2, #0
 80153b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d103      	bne.n	80153c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2200      	movs	r2, #0
 80153c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80153cc:	4b84      	ldr	r3, [pc, #528]	@ (80155e0 <tcp_receive+0x5d8>)
 80153ce:	881b      	ldrh	r3, [r3, #0]
 80153d0:	4413      	add	r3, r2
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	8b5b      	ldrh	r3, [r3, #26]
 80153de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d035      	beq.n	8015452 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d118      	bne.n	8015420 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d00c      	beq.n	8015410 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	685b      	ldr	r3, [r3, #4]
 8015402:	4618      	mov	r0, r3
 8015404:	f7fa fa17 	bl	800f836 <lwip_htonl>
 8015408:	4603      	mov	r3, r0
 801540a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801540c:	2b00      	cmp	r3, #0
 801540e:	dc20      	bgt.n	8015452 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	8b5b      	ldrh	r3, [r3, #26]
 8015414:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015418:	b29a      	uxth	r2, r3
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801541e:	e018      	b.n	8015452 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015428:	68db      	ldr	r3, [r3, #12]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	4618      	mov	r0, r3
 801542e:	f7fa fa02 	bl	800f836 <lwip_htonl>
 8015432:	4603      	mov	r3, r0
 8015434:	1ae3      	subs	r3, r4, r3
 8015436:	2b00      	cmp	r3, #0
 8015438:	dc0b      	bgt.n	8015452 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	8b5b      	ldrh	r3, [r3, #26]
 801543e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015442:	b29a      	uxth	r2, r3
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015448:	e003      	b.n	8015452 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f002 fbc8 	bl	8017be0 <tcp_send_empty_ack>
 8015450:	e000      	b.n	8015454 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015452:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015458:	2b00      	cmp	r3, #0
 801545a:	d05b      	beq.n	8015514 <tcp_receive+0x50c>
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015460:	4b60      	ldr	r3, [pc, #384]	@ (80155e4 <tcp_receive+0x5dc>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	1ad3      	subs	r3, r2, r3
 8015466:	2b00      	cmp	r3, #0
 8015468:	da54      	bge.n	8015514 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801546a:	4b5f      	ldr	r3, [pc, #380]	@ (80155e8 <tcp_receive+0x5e0>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	b29a      	uxth	r2, r3
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015474:	b29b      	uxth	r3, r3
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	b29b      	uxth	r3, r3
 801547a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801547e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015488:	10db      	asrs	r3, r3, #3
 801548a:	b21b      	sxth	r3, r3
 801548c:	b29b      	uxth	r3, r3
 801548e:	1ad3      	subs	r3, r2, r3
 8015490:	b29b      	uxth	r3, r3
 8015492:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801549c:	b29a      	uxth	r2, r3
 801549e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80154a2:	4413      	add	r3, r2
 80154a4:	b29b      	uxth	r3, r3
 80154a6:	b21a      	sxth	r2, r3
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80154ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	da05      	bge.n	80154c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80154b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80154b8:	425b      	negs	r3, r3
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80154c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80154ca:	109b      	asrs	r3, r3, #2
 80154cc:	b21b      	sxth	r3, r3
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	1ad3      	subs	r3, r2, r3
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80154de:	b29a      	uxth	r2, r3
 80154e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80154e4:	4413      	add	r3, r2
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	b21a      	sxth	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80154f4:	10db      	asrs	r3, r3, #3
 80154f6:	b21b      	sxth	r3, r3
 80154f8:	b29a      	uxth	r2, r3
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015500:	b29b      	uxth	r3, r3
 8015502:	4413      	add	r3, r2
 8015504:	b29b      	uxth	r3, r3
 8015506:	b21a      	sxth	r2, r3
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2200      	movs	r2, #0
 8015512:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015514:	4b35      	ldr	r3, [pc, #212]	@ (80155ec <tcp_receive+0x5e4>)
 8015516:	881b      	ldrh	r3, [r3, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	f000 84df 	beq.w	8015edc <tcp_receive+0xed4>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	7d1b      	ldrb	r3, [r3, #20]
 8015522:	2b06      	cmp	r3, #6
 8015524:	f200 84da 	bhi.w	8015edc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801552c:	4b30      	ldr	r3, [pc, #192]	@ (80155f0 <tcp_receive+0x5e8>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	1ad3      	subs	r3, r2, r3
 8015532:	3b01      	subs	r3, #1
 8015534:	2b00      	cmp	r3, #0
 8015536:	f2c0 808f 	blt.w	8015658 <tcp_receive+0x650>
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801553e:	4b2b      	ldr	r3, [pc, #172]	@ (80155ec <tcp_receive+0x5e4>)
 8015540:	881b      	ldrh	r3, [r3, #0]
 8015542:	4619      	mov	r1, r3
 8015544:	4b2a      	ldr	r3, [pc, #168]	@ (80155f0 <tcp_receive+0x5e8>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	440b      	add	r3, r1
 801554a:	1ad3      	subs	r3, r2, r3
 801554c:	3301      	adds	r3, #1
 801554e:	2b00      	cmp	r3, #0
 8015550:	f300 8082 	bgt.w	8015658 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015554:	4b27      	ldr	r3, [pc, #156]	@ (80155f4 <tcp_receive+0x5ec>)
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801555e:	4b24      	ldr	r3, [pc, #144]	@ (80155f0 <tcp_receive+0x5e8>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	1ad3      	subs	r3, r2, r3
 8015564:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015566:	4b23      	ldr	r3, [pc, #140]	@ (80155f4 <tcp_receive+0x5ec>)
 8015568:	685b      	ldr	r3, [r3, #4]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d106      	bne.n	801557c <tcp_receive+0x574>
 801556e:	4b22      	ldr	r3, [pc, #136]	@ (80155f8 <tcp_receive+0x5f0>)
 8015570:	f240 5294 	movw	r2, #1428	@ 0x594
 8015574:	4921      	ldr	r1, [pc, #132]	@ (80155fc <tcp_receive+0x5f4>)
 8015576:	4822      	ldr	r0, [pc, #136]	@ (8015600 <tcp_receive+0x5f8>)
 8015578:	f009 f94e 	bl	801e818 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801557e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015582:	4293      	cmp	r3, r2
 8015584:	d906      	bls.n	8015594 <tcp_receive+0x58c>
 8015586:	4b1c      	ldr	r3, [pc, #112]	@ (80155f8 <tcp_receive+0x5f0>)
 8015588:	f240 5295 	movw	r2, #1429	@ 0x595
 801558c:	491d      	ldr	r1, [pc, #116]	@ (8015604 <tcp_receive+0x5fc>)
 801558e:	481c      	ldr	r0, [pc, #112]	@ (8015600 <tcp_receive+0x5f8>)
 8015590:	f009 f942 	bl	801e818 <iprintf>
      off = (u16_t)off32;
 8015594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015596:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801559a:	4b16      	ldr	r3, [pc, #88]	@ (80155f4 <tcp_receive+0x5ec>)
 801559c:	685b      	ldr	r3, [r3, #4]
 801559e:	891b      	ldrh	r3, [r3, #8]
 80155a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d906      	bls.n	80155b6 <tcp_receive+0x5ae>
 80155a8:	4b13      	ldr	r3, [pc, #76]	@ (80155f8 <tcp_receive+0x5f0>)
 80155aa:	f240 5297 	movw	r2, #1431	@ 0x597
 80155ae:	4916      	ldr	r1, [pc, #88]	@ (8015608 <tcp_receive+0x600>)
 80155b0:	4813      	ldr	r0, [pc, #76]	@ (8015600 <tcp_receive+0x5f8>)
 80155b2:	f009 f931 	bl	801e818 <iprintf>
      inseg.len -= off;
 80155b6:	4b0f      	ldr	r3, [pc, #60]	@ (80155f4 <tcp_receive+0x5ec>)
 80155b8:	891a      	ldrh	r2, [r3, #8]
 80155ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80155be:	1ad3      	subs	r3, r2, r3
 80155c0:	b29a      	uxth	r2, r3
 80155c2:	4b0c      	ldr	r3, [pc, #48]	@ (80155f4 <tcp_receive+0x5ec>)
 80155c4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80155c6:	4b0b      	ldr	r3, [pc, #44]	@ (80155f4 <tcp_receive+0x5ec>)
 80155c8:	685b      	ldr	r3, [r3, #4]
 80155ca:	891a      	ldrh	r2, [r3, #8]
 80155cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80155d0:	1ad3      	subs	r3, r2, r3
 80155d2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80155d4:	e02a      	b.n	801562c <tcp_receive+0x624>
 80155d6:	bf00      	nop
 80155d8:	08024778 	.word	0x08024778
 80155dc:	08024780 	.word	0x08024780
 80155e0:	2000f4c4 	.word	0x2000f4c4
 80155e4:	2000f4c0 	.word	0x2000f4c0
 80155e8:	2000f484 	.word	0x2000f484
 80155ec:	2000f4c6 	.word	0x2000f4c6
 80155f0:	2000f4bc 	.word	0x2000f4bc
 80155f4:	2000f49c 	.word	0x2000f49c
 80155f8:	08024410 	.word	0x08024410
 80155fc:	08024788 	.word	0x08024788
 8015600:	0802445c 	.word	0x0802445c
 8015604:	08024798 	.word	0x08024798
 8015608:	080247a8 	.word	0x080247a8
        off -= p->len;
 801560c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801560e:	895b      	ldrh	r3, [r3, #10]
 8015610:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015614:	1ad3      	subs	r3, r2, r3
 8015616:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801561a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801561c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801561e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015622:	2200      	movs	r2, #0
 8015624:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801562c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801562e:	895b      	ldrh	r3, [r3, #10]
 8015630:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015634:	429a      	cmp	r2, r3
 8015636:	d8e9      	bhi.n	801560c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015638:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801563c:	4619      	mov	r1, r3
 801563e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015640:	f7fb ff4a 	bl	80114d8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015648:	4a90      	ldr	r2, [pc, #576]	@ (801588c <tcp_receive+0x884>)
 801564a:	6013      	str	r3, [r2, #0]
 801564c:	4b90      	ldr	r3, [pc, #576]	@ (8015890 <tcp_receive+0x888>)
 801564e:	68db      	ldr	r3, [r3, #12]
 8015650:	4a8e      	ldr	r2, [pc, #568]	@ (801588c <tcp_receive+0x884>)
 8015652:	6812      	ldr	r2, [r2, #0]
 8015654:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015656:	e00d      	b.n	8015674 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015658:	4b8c      	ldr	r3, [pc, #560]	@ (801588c <tcp_receive+0x884>)
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015660:	1ad3      	subs	r3, r2, r3
 8015662:	2b00      	cmp	r3, #0
 8015664:	da06      	bge.n	8015674 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	8b5b      	ldrh	r3, [r3, #26]
 801566a:	f043 0302 	orr.w	r3, r3, #2
 801566e:	b29a      	uxth	r2, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015674:	4b85      	ldr	r3, [pc, #532]	@ (801588c <tcp_receive+0x884>)
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801567c:	1ad3      	subs	r3, r2, r3
 801567e:	2b00      	cmp	r3, #0
 8015680:	f2c0 8427 	blt.w	8015ed2 <tcp_receive+0xeca>
 8015684:	4b81      	ldr	r3, [pc, #516]	@ (801588c <tcp_receive+0x884>)
 8015686:	681a      	ldr	r2, [r3, #0]
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801568c:	6879      	ldr	r1, [r7, #4]
 801568e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015690:	440b      	add	r3, r1
 8015692:	1ad3      	subs	r3, r2, r3
 8015694:	3301      	adds	r3, #1
 8015696:	2b00      	cmp	r3, #0
 8015698:	f300 841b 	bgt.w	8015ed2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156a0:	4b7a      	ldr	r3, [pc, #488]	@ (801588c <tcp_receive+0x884>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	429a      	cmp	r2, r3
 80156a6:	f040 8298 	bne.w	8015bda <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80156aa:	4b79      	ldr	r3, [pc, #484]	@ (8015890 <tcp_receive+0x888>)
 80156ac:	891c      	ldrh	r4, [r3, #8]
 80156ae:	4b78      	ldr	r3, [pc, #480]	@ (8015890 <tcp_receive+0x888>)
 80156b0:	68db      	ldr	r3, [r3, #12]
 80156b2:	899b      	ldrh	r3, [r3, #12]
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	4618      	mov	r0, r3
 80156b8:	f7fa f8a8 	bl	800f80c <lwip_htons>
 80156bc:	4603      	mov	r3, r0
 80156be:	b2db      	uxtb	r3, r3
 80156c0:	f003 0303 	and.w	r3, r3, #3
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d001      	beq.n	80156cc <tcp_receive+0x6c4>
 80156c8:	2301      	movs	r3, #1
 80156ca:	e000      	b.n	80156ce <tcp_receive+0x6c6>
 80156cc:	2300      	movs	r3, #0
 80156ce:	4423      	add	r3, r4
 80156d0:	b29a      	uxth	r2, r3
 80156d2:	4b70      	ldr	r3, [pc, #448]	@ (8015894 <tcp_receive+0x88c>)
 80156d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80156da:	4b6e      	ldr	r3, [pc, #440]	@ (8015894 <tcp_receive+0x88c>)
 80156dc:	881b      	ldrh	r3, [r3, #0]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d274      	bcs.n	80157cc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80156e2:	4b6b      	ldr	r3, [pc, #428]	@ (8015890 <tcp_receive+0x888>)
 80156e4:	68db      	ldr	r3, [r3, #12]
 80156e6:	899b      	ldrh	r3, [r3, #12]
 80156e8:	b29b      	uxth	r3, r3
 80156ea:	4618      	mov	r0, r3
 80156ec:	f7fa f88e 	bl	800f80c <lwip_htons>
 80156f0:	4603      	mov	r3, r0
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	f003 0301 	and.w	r3, r3, #1
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d01e      	beq.n	801573a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80156fc:	4b64      	ldr	r3, [pc, #400]	@ (8015890 <tcp_receive+0x888>)
 80156fe:	68db      	ldr	r3, [r3, #12]
 8015700:	899b      	ldrh	r3, [r3, #12]
 8015702:	b29b      	uxth	r3, r3
 8015704:	b21b      	sxth	r3, r3
 8015706:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801570a:	b21c      	sxth	r4, r3
 801570c:	4b60      	ldr	r3, [pc, #384]	@ (8015890 <tcp_receive+0x888>)
 801570e:	68db      	ldr	r3, [r3, #12]
 8015710:	899b      	ldrh	r3, [r3, #12]
 8015712:	b29b      	uxth	r3, r3
 8015714:	4618      	mov	r0, r3
 8015716:	f7fa f879 	bl	800f80c <lwip_htons>
 801571a:	4603      	mov	r3, r0
 801571c:	b2db      	uxtb	r3, r3
 801571e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015722:	b29b      	uxth	r3, r3
 8015724:	4618      	mov	r0, r3
 8015726:	f7fa f871 	bl	800f80c <lwip_htons>
 801572a:	4603      	mov	r3, r0
 801572c:	b21b      	sxth	r3, r3
 801572e:	4323      	orrs	r3, r4
 8015730:	b21a      	sxth	r2, r3
 8015732:	4b57      	ldr	r3, [pc, #348]	@ (8015890 <tcp_receive+0x888>)
 8015734:	68db      	ldr	r3, [r3, #12]
 8015736:	b292      	uxth	r2, r2
 8015738:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801573e:	4b54      	ldr	r3, [pc, #336]	@ (8015890 <tcp_receive+0x888>)
 8015740:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015742:	4b53      	ldr	r3, [pc, #332]	@ (8015890 <tcp_receive+0x888>)
 8015744:	68db      	ldr	r3, [r3, #12]
 8015746:	899b      	ldrh	r3, [r3, #12]
 8015748:	b29b      	uxth	r3, r3
 801574a:	4618      	mov	r0, r3
 801574c:	f7fa f85e 	bl	800f80c <lwip_htons>
 8015750:	4603      	mov	r3, r0
 8015752:	b2db      	uxtb	r3, r3
 8015754:	f003 0302 	and.w	r3, r3, #2
 8015758:	2b00      	cmp	r3, #0
 801575a:	d005      	beq.n	8015768 <tcp_receive+0x760>
            inseg.len -= 1;
 801575c:	4b4c      	ldr	r3, [pc, #304]	@ (8015890 <tcp_receive+0x888>)
 801575e:	891b      	ldrh	r3, [r3, #8]
 8015760:	3b01      	subs	r3, #1
 8015762:	b29a      	uxth	r2, r3
 8015764:	4b4a      	ldr	r3, [pc, #296]	@ (8015890 <tcp_receive+0x888>)
 8015766:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015768:	4b49      	ldr	r3, [pc, #292]	@ (8015890 <tcp_receive+0x888>)
 801576a:	685b      	ldr	r3, [r3, #4]
 801576c:	4a48      	ldr	r2, [pc, #288]	@ (8015890 <tcp_receive+0x888>)
 801576e:	8912      	ldrh	r2, [r2, #8]
 8015770:	4611      	mov	r1, r2
 8015772:	4618      	mov	r0, r3
 8015774:	f7fb fdb0 	bl	80112d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015778:	4b45      	ldr	r3, [pc, #276]	@ (8015890 <tcp_receive+0x888>)
 801577a:	891c      	ldrh	r4, [r3, #8]
 801577c:	4b44      	ldr	r3, [pc, #272]	@ (8015890 <tcp_receive+0x888>)
 801577e:	68db      	ldr	r3, [r3, #12]
 8015780:	899b      	ldrh	r3, [r3, #12]
 8015782:	b29b      	uxth	r3, r3
 8015784:	4618      	mov	r0, r3
 8015786:	f7fa f841 	bl	800f80c <lwip_htons>
 801578a:	4603      	mov	r3, r0
 801578c:	b2db      	uxtb	r3, r3
 801578e:	f003 0303 	and.w	r3, r3, #3
 8015792:	2b00      	cmp	r3, #0
 8015794:	d001      	beq.n	801579a <tcp_receive+0x792>
 8015796:	2301      	movs	r3, #1
 8015798:	e000      	b.n	801579c <tcp_receive+0x794>
 801579a:	2300      	movs	r3, #0
 801579c:	4423      	add	r3, r4
 801579e:	b29a      	uxth	r2, r3
 80157a0:	4b3c      	ldr	r3, [pc, #240]	@ (8015894 <tcp_receive+0x88c>)
 80157a2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80157a4:	4b3b      	ldr	r3, [pc, #236]	@ (8015894 <tcp_receive+0x88c>)
 80157a6:	881b      	ldrh	r3, [r3, #0]
 80157a8:	461a      	mov	r2, r3
 80157aa:	4b38      	ldr	r3, [pc, #224]	@ (801588c <tcp_receive+0x884>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	441a      	add	r2, r3
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157b4:	6879      	ldr	r1, [r7, #4]
 80157b6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80157b8:	440b      	add	r3, r1
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d006      	beq.n	80157cc <tcp_receive+0x7c4>
 80157be:	4b36      	ldr	r3, [pc, #216]	@ (8015898 <tcp_receive+0x890>)
 80157c0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80157c4:	4935      	ldr	r1, [pc, #212]	@ (801589c <tcp_receive+0x894>)
 80157c6:	4836      	ldr	r0, [pc, #216]	@ (80158a0 <tcp_receive+0x898>)
 80157c8:	f009 f826 	bl	801e818 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	f000 80e6 	beq.w	80159a2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80157d6:	4b2e      	ldr	r3, [pc, #184]	@ (8015890 <tcp_receive+0x888>)
 80157d8:	68db      	ldr	r3, [r3, #12]
 80157da:	899b      	ldrh	r3, [r3, #12]
 80157dc:	b29b      	uxth	r3, r3
 80157de:	4618      	mov	r0, r3
 80157e0:	f7fa f814 	bl	800f80c <lwip_htons>
 80157e4:	4603      	mov	r3, r0
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	f003 0301 	and.w	r3, r3, #1
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d010      	beq.n	8015812 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80157f0:	e00a      	b.n	8015808 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157f6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8015802:	68f8      	ldr	r0, [r7, #12]
 8015804:	f7fd fcc5 	bl	8013192 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801580c:	2b00      	cmp	r3, #0
 801580e:	d1f0      	bne.n	80157f2 <tcp_receive+0x7ea>
 8015810:	e0c7      	b.n	80159a2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015816:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015818:	e051      	b.n	80158be <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801581a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801581c:	68db      	ldr	r3, [r3, #12]
 801581e:	899b      	ldrh	r3, [r3, #12]
 8015820:	b29b      	uxth	r3, r3
 8015822:	4618      	mov	r0, r3
 8015824:	f7f9 fff2 	bl	800f80c <lwip_htons>
 8015828:	4603      	mov	r3, r0
 801582a:	b2db      	uxtb	r3, r3
 801582c:	f003 0301 	and.w	r3, r3, #1
 8015830:	2b00      	cmp	r3, #0
 8015832:	d03c      	beq.n	80158ae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015834:	4b16      	ldr	r3, [pc, #88]	@ (8015890 <tcp_receive+0x888>)
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	899b      	ldrh	r3, [r3, #12]
 801583a:	b29b      	uxth	r3, r3
 801583c:	4618      	mov	r0, r3
 801583e:	f7f9 ffe5 	bl	800f80c <lwip_htons>
 8015842:	4603      	mov	r3, r0
 8015844:	b2db      	uxtb	r3, r3
 8015846:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801584a:	2b00      	cmp	r3, #0
 801584c:	d12f      	bne.n	80158ae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801584e:	4b10      	ldr	r3, [pc, #64]	@ (8015890 <tcp_receive+0x888>)
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	899b      	ldrh	r3, [r3, #12]
 8015854:	b29c      	uxth	r4, r3
 8015856:	2001      	movs	r0, #1
 8015858:	f7f9 ffd8 	bl	800f80c <lwip_htons>
 801585c:	4603      	mov	r3, r0
 801585e:	461a      	mov	r2, r3
 8015860:	4b0b      	ldr	r3, [pc, #44]	@ (8015890 <tcp_receive+0x888>)
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	4322      	orrs	r2, r4
 8015866:	b292      	uxth	r2, r2
 8015868:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801586a:	4b09      	ldr	r3, [pc, #36]	@ (8015890 <tcp_receive+0x888>)
 801586c:	891c      	ldrh	r4, [r3, #8]
 801586e:	4b08      	ldr	r3, [pc, #32]	@ (8015890 <tcp_receive+0x888>)
 8015870:	68db      	ldr	r3, [r3, #12]
 8015872:	899b      	ldrh	r3, [r3, #12]
 8015874:	b29b      	uxth	r3, r3
 8015876:	4618      	mov	r0, r3
 8015878:	f7f9 ffc8 	bl	800f80c <lwip_htons>
 801587c:	4603      	mov	r3, r0
 801587e:	b2db      	uxtb	r3, r3
 8015880:	f003 0303 	and.w	r3, r3, #3
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00d      	beq.n	80158a4 <tcp_receive+0x89c>
 8015888:	2301      	movs	r3, #1
 801588a:	e00c      	b.n	80158a6 <tcp_receive+0x89e>
 801588c:	2000f4bc 	.word	0x2000f4bc
 8015890:	2000f49c 	.word	0x2000f49c
 8015894:	2000f4c6 	.word	0x2000f4c6
 8015898:	08024410 	.word	0x08024410
 801589c:	080247b8 	.word	0x080247b8
 80158a0:	0802445c 	.word	0x0802445c
 80158a4:	2300      	movs	r3, #0
 80158a6:	4423      	add	r3, r4
 80158a8:	b29a      	uxth	r2, r3
 80158aa:	4b98      	ldr	r3, [pc, #608]	@ (8015b0c <tcp_receive+0xb04>)
 80158ac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80158ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158b0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80158b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80158b8:	6938      	ldr	r0, [r7, #16]
 80158ba:	f7fd fc6a 	bl	8013192 <tcp_seg_free>
            while (next &&
 80158be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d00e      	beq.n	80158e2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80158c4:	4b91      	ldr	r3, [pc, #580]	@ (8015b0c <tcp_receive+0xb04>)
 80158c6:	881b      	ldrh	r3, [r3, #0]
 80158c8:	461a      	mov	r2, r3
 80158ca:	4b91      	ldr	r3, [pc, #580]	@ (8015b10 <tcp_receive+0xb08>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	441a      	add	r2, r3
 80158d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158d2:	68db      	ldr	r3, [r3, #12]
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80158d8:	8909      	ldrh	r1, [r1, #8]
 80158da:	440b      	add	r3, r1
 80158dc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80158de:	2b00      	cmp	r3, #0
 80158e0:	da9b      	bge.n	801581a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80158e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d059      	beq.n	801599c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80158e8:	4b88      	ldr	r3, [pc, #544]	@ (8015b0c <tcp_receive+0xb04>)
 80158ea:	881b      	ldrh	r3, [r3, #0]
 80158ec:	461a      	mov	r2, r3
 80158ee:	4b88      	ldr	r3, [pc, #544]	@ (8015b10 <tcp_receive+0xb08>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	441a      	add	r2, r3
 80158f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158f6:	68db      	ldr	r3, [r3, #12]
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	dd4d      	ble.n	801599c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015902:	68db      	ldr	r3, [r3, #12]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	b29a      	uxth	r2, r3
 8015908:	4b81      	ldr	r3, [pc, #516]	@ (8015b10 <tcp_receive+0xb08>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	b29b      	uxth	r3, r3
 801590e:	1ad3      	subs	r3, r2, r3
 8015910:	b29a      	uxth	r2, r3
 8015912:	4b80      	ldr	r3, [pc, #512]	@ (8015b14 <tcp_receive+0xb0c>)
 8015914:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015916:	4b7f      	ldr	r3, [pc, #508]	@ (8015b14 <tcp_receive+0xb0c>)
 8015918:	68db      	ldr	r3, [r3, #12]
 801591a:	899b      	ldrh	r3, [r3, #12]
 801591c:	b29b      	uxth	r3, r3
 801591e:	4618      	mov	r0, r3
 8015920:	f7f9 ff74 	bl	800f80c <lwip_htons>
 8015924:	4603      	mov	r3, r0
 8015926:	b2db      	uxtb	r3, r3
 8015928:	f003 0302 	and.w	r3, r3, #2
 801592c:	2b00      	cmp	r3, #0
 801592e:	d005      	beq.n	801593c <tcp_receive+0x934>
                inseg.len -= 1;
 8015930:	4b78      	ldr	r3, [pc, #480]	@ (8015b14 <tcp_receive+0xb0c>)
 8015932:	891b      	ldrh	r3, [r3, #8]
 8015934:	3b01      	subs	r3, #1
 8015936:	b29a      	uxth	r2, r3
 8015938:	4b76      	ldr	r3, [pc, #472]	@ (8015b14 <tcp_receive+0xb0c>)
 801593a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801593c:	4b75      	ldr	r3, [pc, #468]	@ (8015b14 <tcp_receive+0xb0c>)
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	4a74      	ldr	r2, [pc, #464]	@ (8015b14 <tcp_receive+0xb0c>)
 8015942:	8912      	ldrh	r2, [r2, #8]
 8015944:	4611      	mov	r1, r2
 8015946:	4618      	mov	r0, r3
 8015948:	f7fb fcc6 	bl	80112d8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801594c:	4b71      	ldr	r3, [pc, #452]	@ (8015b14 <tcp_receive+0xb0c>)
 801594e:	891c      	ldrh	r4, [r3, #8]
 8015950:	4b70      	ldr	r3, [pc, #448]	@ (8015b14 <tcp_receive+0xb0c>)
 8015952:	68db      	ldr	r3, [r3, #12]
 8015954:	899b      	ldrh	r3, [r3, #12]
 8015956:	b29b      	uxth	r3, r3
 8015958:	4618      	mov	r0, r3
 801595a:	f7f9 ff57 	bl	800f80c <lwip_htons>
 801595e:	4603      	mov	r3, r0
 8015960:	b2db      	uxtb	r3, r3
 8015962:	f003 0303 	and.w	r3, r3, #3
 8015966:	2b00      	cmp	r3, #0
 8015968:	d001      	beq.n	801596e <tcp_receive+0x966>
 801596a:	2301      	movs	r3, #1
 801596c:	e000      	b.n	8015970 <tcp_receive+0x968>
 801596e:	2300      	movs	r3, #0
 8015970:	4423      	add	r3, r4
 8015972:	b29a      	uxth	r2, r3
 8015974:	4b65      	ldr	r3, [pc, #404]	@ (8015b0c <tcp_receive+0xb04>)
 8015976:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015978:	4b64      	ldr	r3, [pc, #400]	@ (8015b0c <tcp_receive+0xb04>)
 801597a:	881b      	ldrh	r3, [r3, #0]
 801597c:	461a      	mov	r2, r3
 801597e:	4b64      	ldr	r3, [pc, #400]	@ (8015b10 <tcp_receive+0xb08>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	441a      	add	r2, r3
 8015984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015986:	68db      	ldr	r3, [r3, #12]
 8015988:	685b      	ldr	r3, [r3, #4]
 801598a:	429a      	cmp	r2, r3
 801598c:	d006      	beq.n	801599c <tcp_receive+0x994>
 801598e:	4b62      	ldr	r3, [pc, #392]	@ (8015b18 <tcp_receive+0xb10>)
 8015990:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015994:	4961      	ldr	r1, [pc, #388]	@ (8015b1c <tcp_receive+0xb14>)
 8015996:	4862      	ldr	r0, [pc, #392]	@ (8015b20 <tcp_receive+0xb18>)
 8015998:	f008 ff3e 	bl	801e818 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80159a0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80159a2:	4b5a      	ldr	r3, [pc, #360]	@ (8015b0c <tcp_receive+0xb04>)
 80159a4:	881b      	ldrh	r3, [r3, #0]
 80159a6:	461a      	mov	r2, r3
 80159a8:	4b59      	ldr	r3, [pc, #356]	@ (8015b10 <tcp_receive+0xb08>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	441a      	add	r2, r3
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80159b6:	4b55      	ldr	r3, [pc, #340]	@ (8015b0c <tcp_receive+0xb04>)
 80159b8:	881b      	ldrh	r3, [r3, #0]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d206      	bcs.n	80159cc <tcp_receive+0x9c4>
 80159be:	4b56      	ldr	r3, [pc, #344]	@ (8015b18 <tcp_receive+0xb10>)
 80159c0:	f240 6207 	movw	r2, #1543	@ 0x607
 80159c4:	4957      	ldr	r1, [pc, #348]	@ (8015b24 <tcp_receive+0xb1c>)
 80159c6:	4856      	ldr	r0, [pc, #344]	@ (8015b20 <tcp_receive+0xb18>)
 80159c8:	f008 ff26 	bl	801e818 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80159d0:	4b4e      	ldr	r3, [pc, #312]	@ (8015b0c <tcp_receive+0xb04>)
 80159d2:	881b      	ldrh	r3, [r3, #0]
 80159d4:	1ad3      	subs	r3, r2, r3
 80159d6:	b29a      	uxth	r2, r3
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80159dc:	6878      	ldr	r0, [r7, #4]
 80159de:	f7fc fd99 	bl	8012514 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80159e2:	4b4c      	ldr	r3, [pc, #304]	@ (8015b14 <tcp_receive+0xb0c>)
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	891b      	ldrh	r3, [r3, #8]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d006      	beq.n	80159fa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80159ec:	4b49      	ldr	r3, [pc, #292]	@ (8015b14 <tcp_receive+0xb0c>)
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	4a4d      	ldr	r2, [pc, #308]	@ (8015b28 <tcp_receive+0xb20>)
 80159f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80159f4:	4b47      	ldr	r3, [pc, #284]	@ (8015b14 <tcp_receive+0xb0c>)
 80159f6:	2200      	movs	r2, #0
 80159f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80159fa:	4b46      	ldr	r3, [pc, #280]	@ (8015b14 <tcp_receive+0xb0c>)
 80159fc:	68db      	ldr	r3, [r3, #12]
 80159fe:	899b      	ldrh	r3, [r3, #12]
 8015a00:	b29b      	uxth	r3, r3
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f9 ff02 	bl	800f80c <lwip_htons>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	b2db      	uxtb	r3, r3
 8015a0c:	f003 0301 	and.w	r3, r3, #1
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	f000 80b8 	beq.w	8015b86 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015a16:	4b45      	ldr	r3, [pc, #276]	@ (8015b2c <tcp_receive+0xb24>)
 8015a18:	781b      	ldrb	r3, [r3, #0]
 8015a1a:	f043 0320 	orr.w	r3, r3, #32
 8015a1e:	b2da      	uxtb	r2, r3
 8015a20:	4b42      	ldr	r3, [pc, #264]	@ (8015b2c <tcp_receive+0xb24>)
 8015a22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015a24:	e0af      	b.n	8015b86 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a30:	68db      	ldr	r3, [r3, #12]
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	4a36      	ldr	r2, [pc, #216]	@ (8015b10 <tcp_receive+0xb08>)
 8015a36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	891b      	ldrh	r3, [r3, #8]
 8015a3c:	461c      	mov	r4, r3
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	68db      	ldr	r3, [r3, #12]
 8015a42:	899b      	ldrh	r3, [r3, #12]
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7f9 fee0 	bl	800f80c <lwip_htons>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	f003 0303 	and.w	r3, r3, #3
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d001      	beq.n	8015a5c <tcp_receive+0xa54>
 8015a58:	2301      	movs	r3, #1
 8015a5a:	e000      	b.n	8015a5e <tcp_receive+0xa56>
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	191a      	adds	r2, r3, r4
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a64:	441a      	add	r2, r3
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a6e:	461c      	mov	r4, r3
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	891b      	ldrh	r3, [r3, #8]
 8015a74:	461d      	mov	r5, r3
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	68db      	ldr	r3, [r3, #12]
 8015a7a:	899b      	ldrh	r3, [r3, #12]
 8015a7c:	b29b      	uxth	r3, r3
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f7f9 fec4 	bl	800f80c <lwip_htons>
 8015a84:	4603      	mov	r3, r0
 8015a86:	b2db      	uxtb	r3, r3
 8015a88:	f003 0303 	and.w	r3, r3, #3
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d001      	beq.n	8015a94 <tcp_receive+0xa8c>
 8015a90:	2301      	movs	r3, #1
 8015a92:	e000      	b.n	8015a96 <tcp_receive+0xa8e>
 8015a94:	2300      	movs	r3, #0
 8015a96:	442b      	add	r3, r5
 8015a98:	429c      	cmp	r4, r3
 8015a9a:	d206      	bcs.n	8015aaa <tcp_receive+0xaa2>
 8015a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8015b18 <tcp_receive+0xb10>)
 8015a9e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015aa2:	4923      	ldr	r1, [pc, #140]	@ (8015b30 <tcp_receive+0xb28>)
 8015aa4:	481e      	ldr	r0, [pc, #120]	@ (8015b20 <tcp_receive+0xb18>)
 8015aa6:	f008 feb7 	bl	801e818 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	891b      	ldrh	r3, [r3, #8]
 8015aae:	461c      	mov	r4, r3
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	68db      	ldr	r3, [r3, #12]
 8015ab4:	899b      	ldrh	r3, [r3, #12]
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7f9 fea7 	bl	800f80c <lwip_htons>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	b2db      	uxtb	r3, r3
 8015ac2:	f003 0303 	and.w	r3, r3, #3
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d001      	beq.n	8015ace <tcp_receive+0xac6>
 8015aca:	2301      	movs	r3, #1
 8015acc:	e000      	b.n	8015ad0 <tcp_receive+0xac8>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	1919      	adds	r1, r3, r4
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015ad6:	b28b      	uxth	r3, r1
 8015ad8:	1ad3      	subs	r3, r2, r3
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f7fc fd17 	bl	8012514 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	685b      	ldr	r3, [r3, #4]
 8015aea:	891b      	ldrh	r3, [r3, #8]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d028      	beq.n	8015b42 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015af0:	4b0d      	ldr	r3, [pc, #52]	@ (8015b28 <tcp_receive+0xb20>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d01d      	beq.n	8015b34 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015af8:	4b0b      	ldr	r3, [pc, #44]	@ (8015b28 <tcp_receive+0xb20>)
 8015afa:	681a      	ldr	r2, [r3, #0]
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	685b      	ldr	r3, [r3, #4]
 8015b00:	4619      	mov	r1, r3
 8015b02:	4610      	mov	r0, r2
 8015b04:	f7fb fe6e 	bl	80117e4 <pbuf_cat>
 8015b08:	e018      	b.n	8015b3c <tcp_receive+0xb34>
 8015b0a:	bf00      	nop
 8015b0c:	2000f4c6 	.word	0x2000f4c6
 8015b10:	2000f4bc 	.word	0x2000f4bc
 8015b14:	2000f49c 	.word	0x2000f49c
 8015b18:	08024410 	.word	0x08024410
 8015b1c:	080247f0 	.word	0x080247f0
 8015b20:	0802445c 	.word	0x0802445c
 8015b24:	0802482c 	.word	0x0802482c
 8015b28:	2000f4cc 	.word	0x2000f4cc
 8015b2c:	2000f4c9 	.word	0x2000f4c9
 8015b30:	0802484c 	.word	0x0802484c
            } else {
              recv_data = cseg->p;
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	4a70      	ldr	r2, [pc, #448]	@ (8015cfc <tcp_receive+0xcf4>)
 8015b3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	68db      	ldr	r3, [r3, #12]
 8015b46:	899b      	ldrh	r3, [r3, #12]
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f9 fe5e 	bl	800f80c <lwip_htons>
 8015b50:	4603      	mov	r3, r0
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	f003 0301 	and.w	r3, r3, #1
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d00d      	beq.n	8015b78 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015b5c:	4b68      	ldr	r3, [pc, #416]	@ (8015d00 <tcp_receive+0xcf8>)
 8015b5e:	781b      	ldrb	r3, [r3, #0]
 8015b60:	f043 0320 	orr.w	r3, r3, #32
 8015b64:	b2da      	uxtb	r2, r3
 8015b66:	4b66      	ldr	r3, [pc, #408]	@ (8015d00 <tcp_receive+0xcf8>)
 8015b68:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	7d1b      	ldrb	r3, [r3, #20]
 8015b6e:	2b04      	cmp	r3, #4
 8015b70:	d102      	bne.n	8015b78 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2207      	movs	r2, #7
 8015b76:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	681a      	ldr	r2, [r3, #0]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015b80:	68b8      	ldr	r0, [r7, #8]
 8015b82:	f7fd fb06 	bl	8013192 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d008      	beq.n	8015ba0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	685a      	ldr	r2, [r3, #4]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	f43f af43 	beq.w	8015a26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	8b5b      	ldrh	r3, [r3, #26]
 8015ba4:	f003 0301 	and.w	r3, r3, #1
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d00e      	beq.n	8015bca <tcp_receive+0xbc2>
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	8b5b      	ldrh	r3, [r3, #26]
 8015bb0:	f023 0301 	bic.w	r3, r3, #1
 8015bb4:	b29a      	uxth	r2, r3
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	835a      	strh	r2, [r3, #26]
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	8b5b      	ldrh	r3, [r3, #26]
 8015bbe:	f043 0302 	orr.w	r3, r3, #2
 8015bc2:	b29a      	uxth	r2, r3
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015bc8:	e187      	b.n	8015eda <tcp_receive+0xed2>
        tcp_ack(pcb);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	8b5b      	ldrh	r3, [r3, #26]
 8015bce:	f043 0301 	orr.w	r3, r3, #1
 8015bd2:	b29a      	uxth	r2, r3
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015bd8:	e17f      	b.n	8015eda <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d106      	bne.n	8015bf0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015be2:	4848      	ldr	r0, [pc, #288]	@ (8015d04 <tcp_receive+0xcfc>)
 8015be4:	f7fd faee 	bl	80131c4 <tcp_seg_copy>
 8015be8:	4602      	mov	r2, r0
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	675a      	str	r2, [r3, #116]	@ 0x74
 8015bee:	e16c      	b.n	8015eca <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015bfa:	e156      	b.n	8015eaa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8015bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bfe:	68db      	ldr	r3, [r3, #12]
 8015c00:	685a      	ldr	r2, [r3, #4]
 8015c02:	4b41      	ldr	r3, [pc, #260]	@ (8015d08 <tcp_receive+0xd00>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d11d      	bne.n	8015c46 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8015d04 <tcp_receive+0xcfc>)
 8015c0c:	891a      	ldrh	r2, [r3, #8]
 8015c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c10:	891b      	ldrh	r3, [r3, #8]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	f240 814e 	bls.w	8015eb4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015c18:	483a      	ldr	r0, [pc, #232]	@ (8015d04 <tcp_receive+0xcfc>)
 8015c1a:	f7fd fad3 	bl	80131c4 <tcp_seg_copy>
 8015c1e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	f000 8148 	beq.w	8015eb8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8015c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d003      	beq.n	8015c36 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c30:	697a      	ldr	r2, [r7, #20]
 8015c32:	601a      	str	r2, [r3, #0]
 8015c34:	e002      	b.n	8015c3c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	697a      	ldr	r2, [r7, #20]
 8015c3a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015c3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015c3e:	6978      	ldr	r0, [r7, #20]
 8015c40:	f7ff f8de 	bl	8014e00 <tcp_oos_insert_segment>
                }
                break;
 8015c44:	e138      	b.n	8015eb8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d117      	bne.n	8015c7c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8015d08 <tcp_receive+0xd00>)
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c52:	68db      	ldr	r3, [r3, #12]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	1ad3      	subs	r3, r2, r3
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	da57      	bge.n	8015d0c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015c5c:	4829      	ldr	r0, [pc, #164]	@ (8015d04 <tcp_receive+0xcfc>)
 8015c5e:	f7fd fab1 	bl	80131c4 <tcp_seg_copy>
 8015c62:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015c64:	69bb      	ldr	r3, [r7, #24]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	f000 8128 	beq.w	8015ebc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	69ba      	ldr	r2, [r7, #24]
 8015c70:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015c72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015c74:	69b8      	ldr	r0, [r7, #24]
 8015c76:	f7ff f8c3 	bl	8014e00 <tcp_oos_insert_segment>
                  }
                  break;
 8015c7a:	e11f      	b.n	8015ebc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015c7c:	4b22      	ldr	r3, [pc, #136]	@ (8015d08 <tcp_receive+0xd00>)
 8015c7e:	681a      	ldr	r2, [r3, #0]
 8015c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	1ad3      	subs	r3, r2, r3
 8015c88:	3b01      	subs	r3, #1
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	db3e      	blt.n	8015d0c <tcp_receive+0xd04>
 8015c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8015d08 <tcp_receive+0xd00>)
 8015c90:	681a      	ldr	r2, [r3, #0]
 8015c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c94:	68db      	ldr	r3, [r3, #12]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	1ad3      	subs	r3, r2, r3
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	dc35      	bgt.n	8015d0c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015ca0:	4818      	ldr	r0, [pc, #96]	@ (8015d04 <tcp_receive+0xcfc>)
 8015ca2:	f7fd fa8f 	bl	80131c4 <tcp_seg_copy>
 8015ca6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	f000 8108 	beq.w	8015ec0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015cb8:	8912      	ldrh	r2, [r2, #8]
 8015cba:	441a      	add	r2, r3
 8015cbc:	4b12      	ldr	r3, [pc, #72]	@ (8015d08 <tcp_receive+0xd00>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	1ad3      	subs	r3, r2, r3
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	dd12      	ble.n	8015cec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015cc6:	4b10      	ldr	r3, [pc, #64]	@ (8015d08 <tcp_receive+0xd00>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	b29a      	uxth	r2, r3
 8015ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	1ad3      	subs	r3, r2, r3
 8015cd6:	b29a      	uxth	r2, r3
 8015cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cda:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cde:	685a      	ldr	r2, [r3, #4]
 8015ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ce2:	891b      	ldrh	r3, [r3, #8]
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	4610      	mov	r0, r2
 8015ce8:	f7fb faf6 	bl	80112d8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cee:	69fa      	ldr	r2, [r7, #28]
 8015cf0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015cf2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015cf4:	69f8      	ldr	r0, [r7, #28]
 8015cf6:	f7ff f883 	bl	8014e00 <tcp_oos_insert_segment>
                  }
                  break;
 8015cfa:	e0e1      	b.n	8015ec0 <tcp_receive+0xeb8>
 8015cfc:	2000f4cc 	.word	0x2000f4cc
 8015d00:	2000f4c9 	.word	0x2000f4c9
 8015d04:	2000f49c 	.word	0x2000f49c
 8015d08:	2000f4bc 	.word	0x2000f4bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d0e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	f040 80c5 	bne.w	8015ea4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8015f18 <tcp_receive+0xf10>)
 8015d1c:	681a      	ldr	r2, [r3, #0]
 8015d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d20:	68db      	ldr	r3, [r3, #12]
 8015d22:	685b      	ldr	r3, [r3, #4]
 8015d24:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	f340 80bc 	ble.w	8015ea4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d2e:	68db      	ldr	r3, [r3, #12]
 8015d30:	899b      	ldrh	r3, [r3, #12]
 8015d32:	b29b      	uxth	r3, r3
 8015d34:	4618      	mov	r0, r3
 8015d36:	f7f9 fd69 	bl	800f80c <lwip_htons>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	f003 0301 	and.w	r3, r3, #1
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	f040 80be 	bne.w	8015ec4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015d48:	4874      	ldr	r0, [pc, #464]	@ (8015f1c <tcp_receive+0xf14>)
 8015d4a:	f7fd fa3b 	bl	80131c4 <tcp_seg_copy>
 8015d4e:	4602      	mov	r2, r0
 8015d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d52:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	f000 80b5 	beq.w	8015ec8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d60:	68db      	ldr	r3, [r3, #12]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d66:	8912      	ldrh	r2, [r2, #8]
 8015d68:	441a      	add	r2, r3
 8015d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8015f18 <tcp_receive+0xf10>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	1ad3      	subs	r3, r2, r3
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	dd12      	ble.n	8015d9a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015d74:	4b68      	ldr	r3, [pc, #416]	@ (8015f18 <tcp_receive+0xf10>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	b29a      	uxth	r2, r3
 8015d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	1ad3      	subs	r3, r2, r3
 8015d84:	b29a      	uxth	r2, r3
 8015d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d88:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d8c:	685a      	ldr	r2, [r3, #4]
 8015d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d90:	891b      	ldrh	r3, [r3, #8]
 8015d92:	4619      	mov	r1, r3
 8015d94:	4610      	mov	r0, r2
 8015d96:	f7fb fa9f 	bl	80112d8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015d9a:	4b61      	ldr	r3, [pc, #388]	@ (8015f20 <tcp_receive+0xf18>)
 8015d9c:	881b      	ldrh	r3, [r3, #0]
 8015d9e:	461a      	mov	r2, r3
 8015da0:	4b5d      	ldr	r3, [pc, #372]	@ (8015f18 <tcp_receive+0xf10>)
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	441a      	add	r2, r3
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015daa:	6879      	ldr	r1, [r7, #4]
 8015dac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015dae:	440b      	add	r3, r1
 8015db0:	1ad3      	subs	r3, r2, r3
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	f340 8088 	ble.w	8015ec8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	68db      	ldr	r3, [r3, #12]
 8015dbe:	899b      	ldrh	r3, [r3, #12]
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7f9 fd22 	bl	800f80c <lwip_htons>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	f003 0301 	and.w	r3, r3, #1
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d021      	beq.n	8015e18 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	68db      	ldr	r3, [r3, #12]
 8015dda:	899b      	ldrh	r3, [r3, #12]
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	b21b      	sxth	r3, r3
 8015de0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015de4:	b21c      	sxth	r4, r3
 8015de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	68db      	ldr	r3, [r3, #12]
 8015dec:	899b      	ldrh	r3, [r3, #12]
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7f9 fd0b 	bl	800f80c <lwip_htons>
 8015df6:	4603      	mov	r3, r0
 8015df8:	b2db      	uxtb	r3, r3
 8015dfa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015dfe:	b29b      	uxth	r3, r3
 8015e00:	4618      	mov	r0, r3
 8015e02:	f7f9 fd03 	bl	800f80c <lwip_htons>
 8015e06:	4603      	mov	r3, r0
 8015e08:	b21b      	sxth	r3, r3
 8015e0a:	4323      	orrs	r3, r4
 8015e0c:	b21a      	sxth	r2, r3
 8015e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	68db      	ldr	r3, [r3, #12]
 8015e14:	b292      	uxth	r2, r2
 8015e16:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e22:	4413      	add	r3, r2
 8015e24:	b299      	uxth	r1, r3
 8015e26:	4b3c      	ldr	r3, [pc, #240]	@ (8015f18 <tcp_receive+0xf10>)
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	b29a      	uxth	r2, r3
 8015e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	1a8a      	subs	r2, r1, r2
 8015e32:	b292      	uxth	r2, r2
 8015e34:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	685a      	ldr	r2, [r3, #4]
 8015e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	891b      	ldrh	r3, [r3, #8]
 8015e42:	4619      	mov	r1, r3
 8015e44:	4610      	mov	r0, r2
 8015e46:	f7fb fa47 	bl	80112d8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	891c      	ldrh	r4, [r3, #8]
 8015e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	68db      	ldr	r3, [r3, #12]
 8015e56:	899b      	ldrh	r3, [r3, #12]
 8015e58:	b29b      	uxth	r3, r3
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7f9 fcd6 	bl	800f80c <lwip_htons>
 8015e60:	4603      	mov	r3, r0
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	f003 0303 	and.w	r3, r3, #3
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d001      	beq.n	8015e70 <tcp_receive+0xe68>
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	e000      	b.n	8015e72 <tcp_receive+0xe6a>
 8015e70:	2300      	movs	r3, #0
 8015e72:	4423      	add	r3, r4
 8015e74:	b29a      	uxth	r2, r3
 8015e76:	4b2a      	ldr	r3, [pc, #168]	@ (8015f20 <tcp_receive+0xf18>)
 8015e78:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015e7a:	4b29      	ldr	r3, [pc, #164]	@ (8015f20 <tcp_receive+0xf18>)
 8015e7c:	881b      	ldrh	r3, [r3, #0]
 8015e7e:	461a      	mov	r2, r3
 8015e80:	4b25      	ldr	r3, [pc, #148]	@ (8015f18 <tcp_receive+0xf10>)
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	441a      	add	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e8a:	6879      	ldr	r1, [r7, #4]
 8015e8c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015e8e:	440b      	add	r3, r1
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d019      	beq.n	8015ec8 <tcp_receive+0xec0>
 8015e94:	4b23      	ldr	r3, [pc, #140]	@ (8015f24 <tcp_receive+0xf1c>)
 8015e96:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8015e9a:	4923      	ldr	r1, [pc, #140]	@ (8015f28 <tcp_receive+0xf20>)
 8015e9c:	4823      	ldr	r0, [pc, #140]	@ (8015f2c <tcp_receive+0xf24>)
 8015e9e:	f008 fcbb 	bl	801e818 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015ea2:	e011      	b.n	8015ec8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	f47f aea5 	bne.w	8015bfc <tcp_receive+0xbf4>
 8015eb2:	e00a      	b.n	8015eca <tcp_receive+0xec2>
                break;
 8015eb4:	bf00      	nop
 8015eb6:	e008      	b.n	8015eca <tcp_receive+0xec2>
                break;
 8015eb8:	bf00      	nop
 8015eba:	e006      	b.n	8015eca <tcp_receive+0xec2>
                  break;
 8015ebc:	bf00      	nop
 8015ebe:	e004      	b.n	8015eca <tcp_receive+0xec2>
                  break;
 8015ec0:	bf00      	nop
 8015ec2:	e002      	b.n	8015eca <tcp_receive+0xec2>
                  break;
 8015ec4:	bf00      	nop
 8015ec6:	e000      	b.n	8015eca <tcp_receive+0xec2>
                break;
 8015ec8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	f001 fe88 	bl	8017be0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015ed0:	e003      	b.n	8015eda <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f001 fe84 	bl	8017be0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015ed8:	e01a      	b.n	8015f10 <tcp_receive+0xf08>
 8015eda:	e019      	b.n	8015f10 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015edc:	4b0e      	ldr	r3, [pc, #56]	@ (8015f18 <tcp_receive+0xf10>)
 8015ede:	681a      	ldr	r2, [r3, #0]
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ee4:	1ad3      	subs	r3, r2, r3
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	db0a      	blt.n	8015f00 <tcp_receive+0xef8>
 8015eea:	4b0b      	ldr	r3, [pc, #44]	@ (8015f18 <tcp_receive+0xf10>)
 8015eec:	681a      	ldr	r2, [r3, #0]
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ef2:	6879      	ldr	r1, [r7, #4]
 8015ef4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015ef6:	440b      	add	r3, r1
 8015ef8:	1ad3      	subs	r3, r2, r3
 8015efa:	3301      	adds	r3, #1
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	dd07      	ble.n	8015f10 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	8b5b      	ldrh	r3, [r3, #26]
 8015f04:	f043 0302 	orr.w	r3, r3, #2
 8015f08:	b29a      	uxth	r2, r3
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015f0e:	e7ff      	b.n	8015f10 <tcp_receive+0xf08>
 8015f10:	bf00      	nop
 8015f12:	3750      	adds	r7, #80	@ 0x50
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bdb0      	pop	{r4, r5, r7, pc}
 8015f18:	2000f4bc 	.word	0x2000f4bc
 8015f1c:	2000f49c 	.word	0x2000f49c
 8015f20:	2000f4c6 	.word	0x2000f4c6
 8015f24:	08024410 	.word	0x08024410
 8015f28:	080247b8 	.word	0x080247b8
 8015f2c:	0802445c 	.word	0x0802445c

08015f30 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015f36:	4b15      	ldr	r3, [pc, #84]	@ (8015f8c <tcp_get_next_optbyte+0x5c>)
 8015f38:	881b      	ldrh	r3, [r3, #0]
 8015f3a:	1c5a      	adds	r2, r3, #1
 8015f3c:	b291      	uxth	r1, r2
 8015f3e:	4a13      	ldr	r2, [pc, #76]	@ (8015f8c <tcp_get_next_optbyte+0x5c>)
 8015f40:	8011      	strh	r1, [r2, #0]
 8015f42:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015f44:	4b12      	ldr	r3, [pc, #72]	@ (8015f90 <tcp_get_next_optbyte+0x60>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d004      	beq.n	8015f56 <tcp_get_next_optbyte+0x26>
 8015f4c:	4b11      	ldr	r3, [pc, #68]	@ (8015f94 <tcp_get_next_optbyte+0x64>)
 8015f4e:	881b      	ldrh	r3, [r3, #0]
 8015f50:	88fa      	ldrh	r2, [r7, #6]
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d208      	bcs.n	8015f68 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015f56:	4b10      	ldr	r3, [pc, #64]	@ (8015f98 <tcp_get_next_optbyte+0x68>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	3314      	adds	r3, #20
 8015f5c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015f5e:	88fb      	ldrh	r3, [r7, #6]
 8015f60:	683a      	ldr	r2, [r7, #0]
 8015f62:	4413      	add	r3, r2
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	e00b      	b.n	8015f80 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015f68:	88fb      	ldrh	r3, [r7, #6]
 8015f6a:	b2da      	uxtb	r2, r3
 8015f6c:	4b09      	ldr	r3, [pc, #36]	@ (8015f94 <tcp_get_next_optbyte+0x64>)
 8015f6e:	881b      	ldrh	r3, [r3, #0]
 8015f70:	b2db      	uxtb	r3, r3
 8015f72:	1ad3      	subs	r3, r2, r3
 8015f74:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015f76:	4b06      	ldr	r3, [pc, #24]	@ (8015f90 <tcp_get_next_optbyte+0x60>)
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	797b      	ldrb	r3, [r7, #5]
 8015f7c:	4413      	add	r3, r2
 8015f7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	370c      	adds	r7, #12
 8015f84:	46bd      	mov	sp, r7
 8015f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8a:	4770      	bx	lr
 8015f8c:	2000f4b8 	.word	0x2000f4b8
 8015f90:	2000f4b4 	.word	0x2000f4b4
 8015f94:	2000f4b2 	.word	0x2000f4b2
 8015f98:	2000f4ac 	.word	0x2000f4ac

08015f9c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b084      	sub	sp, #16
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d106      	bne.n	8015fb8 <tcp_parseopt+0x1c>
 8015faa:	4b32      	ldr	r3, [pc, #200]	@ (8016074 <tcp_parseopt+0xd8>)
 8015fac:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015fb0:	4931      	ldr	r1, [pc, #196]	@ (8016078 <tcp_parseopt+0xdc>)
 8015fb2:	4832      	ldr	r0, [pc, #200]	@ (801607c <tcp_parseopt+0xe0>)
 8015fb4:	f008 fc30 	bl	801e818 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015fb8:	4b31      	ldr	r3, [pc, #196]	@ (8016080 <tcp_parseopt+0xe4>)
 8015fba:	881b      	ldrh	r3, [r3, #0]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d056      	beq.n	801606e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015fc0:	4b30      	ldr	r3, [pc, #192]	@ (8016084 <tcp_parseopt+0xe8>)
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	801a      	strh	r2, [r3, #0]
 8015fc6:	e046      	b.n	8016056 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015fc8:	f7ff ffb2 	bl	8015f30 <tcp_get_next_optbyte>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015fd0:	7bfb      	ldrb	r3, [r7, #15]
 8015fd2:	2b02      	cmp	r3, #2
 8015fd4:	d006      	beq.n	8015fe4 <tcp_parseopt+0x48>
 8015fd6:	2b02      	cmp	r3, #2
 8015fd8:	dc2a      	bgt.n	8016030 <tcp_parseopt+0x94>
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d042      	beq.n	8016064 <tcp_parseopt+0xc8>
 8015fde:	2b01      	cmp	r3, #1
 8015fe0:	d038      	beq.n	8016054 <tcp_parseopt+0xb8>
 8015fe2:	e025      	b.n	8016030 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015fe4:	f7ff ffa4 	bl	8015f30 <tcp_get_next_optbyte>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	2b04      	cmp	r3, #4
 8015fec:	d13c      	bne.n	8016068 <tcp_parseopt+0xcc>
 8015fee:	4b25      	ldr	r3, [pc, #148]	@ (8016084 <tcp_parseopt+0xe8>)
 8015ff0:	881b      	ldrh	r3, [r3, #0]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	4a22      	ldr	r2, [pc, #136]	@ (8016080 <tcp_parseopt+0xe4>)
 8015ff6:	8812      	ldrh	r2, [r2, #0]
 8015ff8:	4293      	cmp	r3, r2
 8015ffa:	da35      	bge.n	8016068 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015ffc:	f7ff ff98 	bl	8015f30 <tcp_get_next_optbyte>
 8016000:	4603      	mov	r3, r0
 8016002:	021b      	lsls	r3, r3, #8
 8016004:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016006:	f7ff ff93 	bl	8015f30 <tcp_get_next_optbyte>
 801600a:	4603      	mov	r3, r0
 801600c:	461a      	mov	r2, r3
 801600e:	89bb      	ldrh	r3, [r7, #12]
 8016010:	4313      	orrs	r3, r2
 8016012:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016014:	89bb      	ldrh	r3, [r7, #12]
 8016016:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801601a:	d804      	bhi.n	8016026 <tcp_parseopt+0x8a>
 801601c:	89bb      	ldrh	r3, [r7, #12]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d001      	beq.n	8016026 <tcp_parseopt+0x8a>
 8016022:	89ba      	ldrh	r2, [r7, #12]
 8016024:	e001      	b.n	801602a <tcp_parseopt+0x8e>
 8016026:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801602e:	e012      	b.n	8016056 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016030:	f7ff ff7e 	bl	8015f30 <tcp_get_next_optbyte>
 8016034:	4603      	mov	r3, r0
 8016036:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016038:	7afb      	ldrb	r3, [r7, #11]
 801603a:	2b01      	cmp	r3, #1
 801603c:	d916      	bls.n	801606c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801603e:	7afb      	ldrb	r3, [r7, #11]
 8016040:	b29a      	uxth	r2, r3
 8016042:	4b10      	ldr	r3, [pc, #64]	@ (8016084 <tcp_parseopt+0xe8>)
 8016044:	881b      	ldrh	r3, [r3, #0]
 8016046:	4413      	add	r3, r2
 8016048:	b29b      	uxth	r3, r3
 801604a:	3b02      	subs	r3, #2
 801604c:	b29a      	uxth	r2, r3
 801604e:	4b0d      	ldr	r3, [pc, #52]	@ (8016084 <tcp_parseopt+0xe8>)
 8016050:	801a      	strh	r2, [r3, #0]
 8016052:	e000      	b.n	8016056 <tcp_parseopt+0xba>
          break;
 8016054:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016056:	4b0b      	ldr	r3, [pc, #44]	@ (8016084 <tcp_parseopt+0xe8>)
 8016058:	881a      	ldrh	r2, [r3, #0]
 801605a:	4b09      	ldr	r3, [pc, #36]	@ (8016080 <tcp_parseopt+0xe4>)
 801605c:	881b      	ldrh	r3, [r3, #0]
 801605e:	429a      	cmp	r2, r3
 8016060:	d3b2      	bcc.n	8015fc8 <tcp_parseopt+0x2c>
 8016062:	e004      	b.n	801606e <tcp_parseopt+0xd2>
          return;
 8016064:	bf00      	nop
 8016066:	e002      	b.n	801606e <tcp_parseopt+0xd2>
            return;
 8016068:	bf00      	nop
 801606a:	e000      	b.n	801606e <tcp_parseopt+0xd2>
            return;
 801606c:	bf00      	nop
      }
    }
  }
}
 801606e:	3710      	adds	r7, #16
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}
 8016074:	08024410 	.word	0x08024410
 8016078:	08024874 	.word	0x08024874
 801607c:	0802445c 	.word	0x0802445c
 8016080:	2000f4b0 	.word	0x2000f4b0
 8016084:	2000f4b8 	.word	0x2000f4b8

08016088 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016088:	b480      	push	{r7}
 801608a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801608c:	4b05      	ldr	r3, [pc, #20]	@ (80160a4 <tcp_trigger_input_pcb_close+0x1c>)
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	f043 0310 	orr.w	r3, r3, #16
 8016094:	b2da      	uxtb	r2, r3
 8016096:	4b03      	ldr	r3, [pc, #12]	@ (80160a4 <tcp_trigger_input_pcb_close+0x1c>)
 8016098:	701a      	strb	r2, [r3, #0]
}
 801609a:	bf00      	nop
 801609c:	46bd      	mov	sp, r7
 801609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a2:	4770      	bx	lr
 80160a4:	2000f4c9 	.word	0x2000f4c9

080160a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	60f8      	str	r0, [r7, #12]
 80160b0:	60b9      	str	r1, [r7, #8]
 80160b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d00a      	beq.n	80160d0 <tcp_route+0x28>
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	7a1b      	ldrb	r3, [r3, #8]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d006      	beq.n	80160d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	7a1b      	ldrb	r3, [r3, #8]
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7fa fefe 	bl	8010ec8 <netif_get_by_index>
 80160cc:	4603      	mov	r3, r0
 80160ce:	e003      	b.n	80160d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f005 fda9 	bl	801bc28 <ip4_route>
 80160d6:	4603      	mov	r3, r0
  }
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3710      	adds	r7, #16
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80160e0:	b590      	push	{r4, r7, lr}
 80160e2:	b087      	sub	sp, #28
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	60f8      	str	r0, [r7, #12]
 80160e8:	60b9      	str	r1, [r7, #8]
 80160ea:	603b      	str	r3, [r7, #0]
 80160ec:	4613      	mov	r3, r2
 80160ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d105      	bne.n	8016102 <tcp_create_segment+0x22>
 80160f6:	4b43      	ldr	r3, [pc, #268]	@ (8016204 <tcp_create_segment+0x124>)
 80160f8:	22a3      	movs	r2, #163	@ 0xa3
 80160fa:	4943      	ldr	r1, [pc, #268]	@ (8016208 <tcp_create_segment+0x128>)
 80160fc:	4843      	ldr	r0, [pc, #268]	@ (801620c <tcp_create_segment+0x12c>)
 80160fe:	f008 fb8b 	bl	801e818 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d105      	bne.n	8016114 <tcp_create_segment+0x34>
 8016108:	4b3e      	ldr	r3, [pc, #248]	@ (8016204 <tcp_create_segment+0x124>)
 801610a:	22a4      	movs	r2, #164	@ 0xa4
 801610c:	4940      	ldr	r1, [pc, #256]	@ (8016210 <tcp_create_segment+0x130>)
 801610e:	483f      	ldr	r0, [pc, #252]	@ (801620c <tcp_create_segment+0x12c>)
 8016110:	f008 fb82 	bl	801e818 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016114:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016118:	009b      	lsls	r3, r3, #2
 801611a:	b2db      	uxtb	r3, r3
 801611c:	f003 0304 	and.w	r3, r3, #4
 8016120:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016122:	2003      	movs	r0, #3
 8016124:	f7fa fb38 	bl	8010798 <memp_malloc>
 8016128:	6138      	str	r0, [r7, #16]
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d104      	bne.n	801613a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016130:	68b8      	ldr	r0, [r7, #8]
 8016132:	f7fb fa89 	bl	8011648 <pbuf_free>
    return NULL;
 8016136:	2300      	movs	r3, #0
 8016138:	e060      	b.n	80161fc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801613a:	693b      	ldr	r3, [r7, #16]
 801613c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016140:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016142:	693b      	ldr	r3, [r7, #16]
 8016144:	2200      	movs	r2, #0
 8016146:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016148:	693b      	ldr	r3, [r7, #16]
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	891a      	ldrh	r2, [r3, #8]
 8016152:	7dfb      	ldrb	r3, [r7, #23]
 8016154:	b29b      	uxth	r3, r3
 8016156:	429a      	cmp	r2, r3
 8016158:	d205      	bcs.n	8016166 <tcp_create_segment+0x86>
 801615a:	4b2a      	ldr	r3, [pc, #168]	@ (8016204 <tcp_create_segment+0x124>)
 801615c:	22b0      	movs	r2, #176	@ 0xb0
 801615e:	492d      	ldr	r1, [pc, #180]	@ (8016214 <tcp_create_segment+0x134>)
 8016160:	482a      	ldr	r0, [pc, #168]	@ (801620c <tcp_create_segment+0x12c>)
 8016162:	f008 fb59 	bl	801e818 <iprintf>
  seg->len = p->tot_len - optlen;
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	891a      	ldrh	r2, [r3, #8]
 801616a:	7dfb      	ldrb	r3, [r7, #23]
 801616c:	b29b      	uxth	r3, r3
 801616e:	1ad3      	subs	r3, r2, r3
 8016170:	b29a      	uxth	r2, r3
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016176:	2114      	movs	r1, #20
 8016178:	68b8      	ldr	r0, [r7, #8]
 801617a:	f7fb f99d 	bl	80114b8 <pbuf_add_header>
 801617e:	4603      	mov	r3, r0
 8016180:	2b00      	cmp	r3, #0
 8016182:	d004      	beq.n	801618e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016184:	6938      	ldr	r0, [r7, #16]
 8016186:	f7fd f804 	bl	8013192 <tcp_seg_free>
    return NULL;
 801618a:	2300      	movs	r3, #0
 801618c:	e036      	b.n	80161fc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	685a      	ldr	r2, [r3, #4]
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	8ada      	ldrh	r2, [r3, #22]
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	68dc      	ldr	r4, [r3, #12]
 80161a0:	4610      	mov	r0, r2
 80161a2:	f7f9 fb33 	bl	800f80c <lwip_htons>
 80161a6:	4603      	mov	r3, r0
 80161a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	8b1a      	ldrh	r2, [r3, #24]
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	68dc      	ldr	r4, [r3, #12]
 80161b2:	4610      	mov	r0, r2
 80161b4:	f7f9 fb2a 	bl	800f80c <lwip_htons>
 80161b8:	4603      	mov	r3, r0
 80161ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	68dc      	ldr	r4, [r3, #12]
 80161c0:	6838      	ldr	r0, [r7, #0]
 80161c2:	f7f9 fb38 	bl	800f836 <lwip_htonl>
 80161c6:	4603      	mov	r3, r0
 80161c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80161ca:	7dfb      	ldrb	r3, [r7, #23]
 80161cc:	089b      	lsrs	r3, r3, #2
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	3305      	adds	r3, #5
 80161d2:	b29b      	uxth	r3, r3
 80161d4:	031b      	lsls	r3, r3, #12
 80161d6:	b29a      	uxth	r2, r3
 80161d8:	79fb      	ldrb	r3, [r7, #7]
 80161da:	b29b      	uxth	r3, r3
 80161dc:	4313      	orrs	r3, r2
 80161de:	b29a      	uxth	r2, r3
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	68dc      	ldr	r4, [r3, #12]
 80161e4:	4610      	mov	r0, r2
 80161e6:	f7f9 fb11 	bl	800f80c <lwip_htons>
 80161ea:	4603      	mov	r3, r0
 80161ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80161ee:	693b      	ldr	r3, [r7, #16]
 80161f0:	68db      	ldr	r3, [r3, #12]
 80161f2:	2200      	movs	r2, #0
 80161f4:	749a      	strb	r2, [r3, #18]
 80161f6:	2200      	movs	r2, #0
 80161f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80161fa:	693b      	ldr	r3, [r7, #16]
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	371c      	adds	r7, #28
 8016200:	46bd      	mov	sp, r7
 8016202:	bd90      	pop	{r4, r7, pc}
 8016204:	08024890 	.word	0x08024890
 8016208:	080248c4 	.word	0x080248c4
 801620c:	080248e4 	.word	0x080248e4
 8016210:	0802490c 	.word	0x0802490c
 8016214:	08024930 	.word	0x08024930

08016218 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b086      	sub	sp, #24
 801621c:	af00      	add	r7, sp, #0
 801621e:	607b      	str	r3, [r7, #4]
 8016220:	4603      	mov	r3, r0
 8016222:	73fb      	strb	r3, [r7, #15]
 8016224:	460b      	mov	r3, r1
 8016226:	81bb      	strh	r3, [r7, #12]
 8016228:	4613      	mov	r3, r2
 801622a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801622c:	89bb      	ldrh	r3, [r7, #12]
 801622e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d105      	bne.n	8016242 <tcp_pbuf_prealloc+0x2a>
 8016236:	4b30      	ldr	r3, [pc, #192]	@ (80162f8 <tcp_pbuf_prealloc+0xe0>)
 8016238:	22e8      	movs	r2, #232	@ 0xe8
 801623a:	4930      	ldr	r1, [pc, #192]	@ (80162fc <tcp_pbuf_prealloc+0xe4>)
 801623c:	4830      	ldr	r0, [pc, #192]	@ (8016300 <tcp_pbuf_prealloc+0xe8>)
 801623e:	f008 faeb 	bl	801e818 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016242:	6a3b      	ldr	r3, [r7, #32]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d105      	bne.n	8016254 <tcp_pbuf_prealloc+0x3c>
 8016248:	4b2b      	ldr	r3, [pc, #172]	@ (80162f8 <tcp_pbuf_prealloc+0xe0>)
 801624a:	22e9      	movs	r2, #233	@ 0xe9
 801624c:	492d      	ldr	r1, [pc, #180]	@ (8016304 <tcp_pbuf_prealloc+0xec>)
 801624e:	482c      	ldr	r0, [pc, #176]	@ (8016300 <tcp_pbuf_prealloc+0xe8>)
 8016250:	f008 fae2 	bl	801e818 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016254:	89ba      	ldrh	r2, [r7, #12]
 8016256:	897b      	ldrh	r3, [r7, #10]
 8016258:	429a      	cmp	r2, r3
 801625a:	d221      	bcs.n	80162a0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801625c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016260:	f003 0302 	and.w	r3, r3, #2
 8016264:	2b00      	cmp	r3, #0
 8016266:	d111      	bne.n	801628c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016268:	6a3b      	ldr	r3, [r7, #32]
 801626a:	8b5b      	ldrh	r3, [r3, #26]
 801626c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016270:	2b00      	cmp	r3, #0
 8016272:	d115      	bne.n	80162a0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016274:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016278:	2b00      	cmp	r3, #0
 801627a:	d007      	beq.n	801628c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801627c:	6a3b      	ldr	r3, [r7, #32]
 801627e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8016280:	2b00      	cmp	r3, #0
 8016282:	d103      	bne.n	801628c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016284:	6a3b      	ldr	r3, [r7, #32]
 8016286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8016288:	2b00      	cmp	r3, #0
 801628a:	d009      	beq.n	80162a0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801628c:	89bb      	ldrh	r3, [r7, #12]
 801628e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8016292:	f023 0203 	bic.w	r2, r3, #3
 8016296:	897b      	ldrh	r3, [r7, #10]
 8016298:	4293      	cmp	r3, r2
 801629a:	bf28      	it	cs
 801629c:	4613      	movcs	r3, r2
 801629e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80162a0:	8af9      	ldrh	r1, [r7, #22]
 80162a2:	7bfb      	ldrb	r3, [r7, #15]
 80162a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7fa feb7 	bl	801101c <pbuf_alloc>
 80162ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d101      	bne.n	80162ba <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80162b6:	2300      	movs	r3, #0
 80162b8:	e019      	b.n	80162ee <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80162ba:	693b      	ldr	r3, [r7, #16]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d006      	beq.n	80162d0 <tcp_pbuf_prealloc+0xb8>
 80162c2:	4b0d      	ldr	r3, [pc, #52]	@ (80162f8 <tcp_pbuf_prealloc+0xe0>)
 80162c4:	f240 120b 	movw	r2, #267	@ 0x10b
 80162c8:	490f      	ldr	r1, [pc, #60]	@ (8016308 <tcp_pbuf_prealloc+0xf0>)
 80162ca:	480d      	ldr	r0, [pc, #52]	@ (8016300 <tcp_pbuf_prealloc+0xe8>)
 80162cc:	f008 faa4 	bl	801e818 <iprintf>
  *oversize = p->len - length;
 80162d0:	693b      	ldr	r3, [r7, #16]
 80162d2:	895a      	ldrh	r2, [r3, #10]
 80162d4:	89bb      	ldrh	r3, [r7, #12]
 80162d6:	1ad3      	subs	r3, r2, r3
 80162d8:	b29a      	uxth	r2, r3
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80162de:	693b      	ldr	r3, [r7, #16]
 80162e0:	89ba      	ldrh	r2, [r7, #12]
 80162e2:	811a      	strh	r2, [r3, #8]
 80162e4:	693b      	ldr	r3, [r7, #16]
 80162e6:	891a      	ldrh	r2, [r3, #8]
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	815a      	strh	r2, [r3, #10]
  return p;
 80162ec:	693b      	ldr	r3, [r7, #16]
}
 80162ee:	4618      	mov	r0, r3
 80162f0:	3718      	adds	r7, #24
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}
 80162f6:	bf00      	nop
 80162f8:	08024890 	.word	0x08024890
 80162fc:	08024948 	.word	0x08024948
 8016300:	080248e4 	.word	0x080248e4
 8016304:	0802496c 	.word	0x0802496c
 8016308:	0802498c 	.word	0x0802498c

0801630c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b082      	sub	sp, #8
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	460b      	mov	r3, r1
 8016316:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d106      	bne.n	801632c <tcp_write_checks+0x20>
 801631e:	4b33      	ldr	r3, [pc, #204]	@ (80163ec <tcp_write_checks+0xe0>)
 8016320:	f240 1233 	movw	r2, #307	@ 0x133
 8016324:	4932      	ldr	r1, [pc, #200]	@ (80163f0 <tcp_write_checks+0xe4>)
 8016326:	4833      	ldr	r0, [pc, #204]	@ (80163f4 <tcp_write_checks+0xe8>)
 8016328:	f008 fa76 	bl	801e818 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	7d1b      	ldrb	r3, [r3, #20]
 8016330:	2b04      	cmp	r3, #4
 8016332:	d00e      	beq.n	8016352 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8016338:	2b07      	cmp	r3, #7
 801633a:	d00a      	beq.n	8016352 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016340:	2b02      	cmp	r3, #2
 8016342:	d006      	beq.n	8016352 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016348:	2b03      	cmp	r3, #3
 801634a:	d002      	beq.n	8016352 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801634c:	f06f 030a 	mvn.w	r3, #10
 8016350:	e048      	b.n	80163e4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016352:	887b      	ldrh	r3, [r7, #2]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d101      	bne.n	801635c <tcp_write_checks+0x50>
    return ERR_OK;
 8016358:	2300      	movs	r3, #0
 801635a:	e043      	b.n	80163e4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016362:	887a      	ldrh	r2, [r7, #2]
 8016364:	429a      	cmp	r2, r3
 8016366:	d909      	bls.n	801637c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	8b5b      	ldrh	r3, [r3, #26]
 801636c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016370:	b29a      	uxth	r2, r3
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016376:	f04f 33ff 	mov.w	r3, #4294967295
 801637a:	e033      	b.n	80163e4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016382:	2b08      	cmp	r3, #8
 8016384:	d909      	bls.n	801639a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	8b5b      	ldrh	r3, [r3, #26]
 801638a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801638e:	b29a      	uxth	r2, r3
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016394:	f04f 33ff 	mov.w	r3, #4294967295
 8016398:	e024      	b.n	80163e4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d00f      	beq.n	80163c4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d11a      	bne.n	80163e2 <tcp_write_checks+0xd6>
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d116      	bne.n	80163e2 <tcp_write_checks+0xd6>
 80163b4:	4b0d      	ldr	r3, [pc, #52]	@ (80163ec <tcp_write_checks+0xe0>)
 80163b6:	f240 1255 	movw	r2, #341	@ 0x155
 80163ba:	490f      	ldr	r1, [pc, #60]	@ (80163f8 <tcp_write_checks+0xec>)
 80163bc:	480d      	ldr	r0, [pc, #52]	@ (80163f4 <tcp_write_checks+0xe8>)
 80163be:	f008 fa2b 	bl	801e818 <iprintf>
 80163c2:	e00e      	b.n	80163e2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d103      	bne.n	80163d4 <tcp_write_checks+0xc8>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d006      	beq.n	80163e2 <tcp_write_checks+0xd6>
 80163d4:	4b05      	ldr	r3, [pc, #20]	@ (80163ec <tcp_write_checks+0xe0>)
 80163d6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80163da:	4908      	ldr	r1, [pc, #32]	@ (80163fc <tcp_write_checks+0xf0>)
 80163dc:	4805      	ldr	r0, [pc, #20]	@ (80163f4 <tcp_write_checks+0xe8>)
 80163de:	f008 fa1b 	bl	801e818 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80163e2:	2300      	movs	r3, #0
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3708      	adds	r7, #8
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	08024890 	.word	0x08024890
 80163f0:	080249a0 	.word	0x080249a0
 80163f4:	080248e4 	.word	0x080248e4
 80163f8:	080249c0 	.word	0x080249c0
 80163fc:	080249fc 	.word	0x080249fc

08016400 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016400:	b590      	push	{r4, r7, lr}
 8016402:	b09b      	sub	sp, #108	@ 0x6c
 8016404:	af04      	add	r7, sp, #16
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	4611      	mov	r1, r2
 801640c:	461a      	mov	r2, r3
 801640e:	460b      	mov	r3, r1
 8016410:	80fb      	strh	r3, [r7, #6]
 8016412:	4613      	mov	r3, r2
 8016414:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016416:	2300      	movs	r3, #0
 8016418:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801641a:	2300      	movs	r3, #0
 801641c:	653b      	str	r3, [r7, #80]	@ 0x50
 801641e:	2300      	movs	r3, #0
 8016420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016422:	2300      	movs	r3, #0
 8016424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016426:	2300      	movs	r3, #0
 8016428:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801642a:	2300      	movs	r3, #0
 801642c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016430:	2300      	movs	r3, #0
 8016432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016436:	2300      	movs	r3, #0
 8016438:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801643a:	2300      	movs	r3, #0
 801643c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801643e:	2300      	movs	r3, #0
 8016440:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d109      	bne.n	801645c <tcp_write+0x5c>
 8016448:	4ba4      	ldr	r3, [pc, #656]	@ (80166dc <tcp_write+0x2dc>)
 801644a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801644e:	49a4      	ldr	r1, [pc, #656]	@ (80166e0 <tcp_write+0x2e0>)
 8016450:	48a4      	ldr	r0, [pc, #656]	@ (80166e4 <tcp_write+0x2e4>)
 8016452:	f008 f9e1 	bl	801e818 <iprintf>
 8016456:	f06f 030f 	mvn.w	r3, #15
 801645a:	e32a      	b.n	8016ab2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016462:	085b      	lsrs	r3, r3, #1
 8016464:	b29a      	uxth	r2, r3
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801646a:	4293      	cmp	r3, r2
 801646c:	bf28      	it	cs
 801646e:	4613      	movcs	r3, r2
 8016470:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016472:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016474:	2b00      	cmp	r3, #0
 8016476:	d102      	bne.n	801647e <tcp_write+0x7e>
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801647c:	e000      	b.n	8016480 <tcp_write+0x80>
 801647e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016480:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d109      	bne.n	801649c <tcp_write+0x9c>
 8016488:	4b94      	ldr	r3, [pc, #592]	@ (80166dc <tcp_write+0x2dc>)
 801648a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801648e:	4996      	ldr	r1, [pc, #600]	@ (80166e8 <tcp_write+0x2e8>)
 8016490:	4894      	ldr	r0, [pc, #592]	@ (80166e4 <tcp_write+0x2e4>)
 8016492:	f008 f9c1 	bl	801e818 <iprintf>
 8016496:	f06f 030f 	mvn.w	r3, #15
 801649a:	e30a      	b.n	8016ab2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801649c:	88fb      	ldrh	r3, [r7, #6]
 801649e:	4619      	mov	r1, r3
 80164a0:	68f8      	ldr	r0, [r7, #12]
 80164a2:	f7ff ff33 	bl	801630c <tcp_write_checks>
 80164a6:	4603      	mov	r3, r0
 80164a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80164ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d002      	beq.n	80164ba <tcp_write+0xba>
    return err;
 80164b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80164b8:	e2fb      	b.n	8016ab2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80164c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80164c4:	2300      	movs	r3, #0
 80164c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	f000 80f6 	beq.w	80166c0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80164da:	e002      	b.n	80164e2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80164dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80164e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d1f8      	bne.n	80164dc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80164ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164ec:	7a9b      	ldrb	r3, [r3, #10]
 80164ee:	009b      	lsls	r3, r3, #2
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	f003 0304 	and.w	r3, r3, #4
 80164f6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80164f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80164fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164fc:	891b      	ldrh	r3, [r3, #8]
 80164fe:	4619      	mov	r1, r3
 8016500:	8c3b      	ldrh	r3, [r7, #32]
 8016502:	440b      	add	r3, r1
 8016504:	429a      	cmp	r2, r3
 8016506:	da06      	bge.n	8016516 <tcp_write+0x116>
 8016508:	4b74      	ldr	r3, [pc, #464]	@ (80166dc <tcp_write+0x2dc>)
 801650a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801650e:	4977      	ldr	r1, [pc, #476]	@ (80166ec <tcp_write+0x2ec>)
 8016510:	4874      	ldr	r0, [pc, #464]	@ (80166e4 <tcp_write+0x2e4>)
 8016512:	f008 f981 	bl	801e818 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016518:	891a      	ldrh	r2, [r3, #8]
 801651a:	8c3b      	ldrh	r3, [r7, #32]
 801651c:	4413      	add	r3, r2
 801651e:	b29b      	uxth	r3, r3
 8016520:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016522:	1ad3      	subs	r3, r2, r3
 8016524:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801652c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801652e:	8a7b      	ldrh	r3, [r7, #18]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d026      	beq.n	8016582 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016534:	8a7b      	ldrh	r3, [r7, #18]
 8016536:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016538:	429a      	cmp	r2, r3
 801653a:	d206      	bcs.n	801654a <tcp_write+0x14a>
 801653c:	4b67      	ldr	r3, [pc, #412]	@ (80166dc <tcp_write+0x2dc>)
 801653e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8016542:	496b      	ldr	r1, [pc, #428]	@ (80166f0 <tcp_write+0x2f0>)
 8016544:	4867      	ldr	r0, [pc, #412]	@ (80166e4 <tcp_write+0x2e4>)
 8016546:	f008 f967 	bl	801e818 <iprintf>
      seg = last_unsent;
 801654a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801654c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801654e:	8a7b      	ldrh	r3, [r7, #18]
 8016550:	88fa      	ldrh	r2, [r7, #6]
 8016552:	4293      	cmp	r3, r2
 8016554:	bf28      	it	cs
 8016556:	4613      	movcs	r3, r2
 8016558:	b29b      	uxth	r3, r3
 801655a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801655c:	4293      	cmp	r3, r2
 801655e:	bf28      	it	cs
 8016560:	4613      	movcs	r3, r2
 8016562:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8016564:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016568:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801656a:	4413      	add	r3, r2
 801656c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8016570:	8a7a      	ldrh	r2, [r7, #18]
 8016572:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016574:	1ad3      	subs	r3, r2, r3
 8016576:	b29b      	uxth	r3, r3
 8016578:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801657a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801657c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801657e:	1ad3      	subs	r3, r2, r3
 8016580:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016582:	8a7b      	ldrh	r3, [r7, #18]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d00b      	beq.n	80165a0 <tcp_write+0x1a0>
 8016588:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801658c:	88fb      	ldrh	r3, [r7, #6]
 801658e:	429a      	cmp	r2, r3
 8016590:	d006      	beq.n	80165a0 <tcp_write+0x1a0>
 8016592:	4b52      	ldr	r3, [pc, #328]	@ (80166dc <tcp_write+0x2dc>)
 8016594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016598:	4956      	ldr	r1, [pc, #344]	@ (80166f4 <tcp_write+0x2f4>)
 801659a:	4852      	ldr	r0, [pc, #328]	@ (80166e4 <tcp_write+0x2e4>)
 801659c:	f008 f93c 	bl	801e818 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80165a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80165a4:	88fb      	ldrh	r3, [r7, #6]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	f080 8167 	bcs.w	801687a <tcp_write+0x47a>
 80165ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	f000 8163 	beq.w	801687a <tcp_write+0x47a>
 80165b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80165b6:	891b      	ldrh	r3, [r3, #8]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	f000 815e 	beq.w	801687a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80165be:	88fa      	ldrh	r2, [r7, #6]
 80165c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80165c4:	1ad2      	subs	r2, r2, r3
 80165c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80165c8:	4293      	cmp	r3, r2
 80165ca:	bfa8      	it	ge
 80165cc:	4613      	movge	r3, r2
 80165ce:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80165d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80165d2:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80165d4:	797b      	ldrb	r3, [r7, #5]
 80165d6:	f003 0301 	and.w	r3, r3, #1
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d027      	beq.n	801662e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80165de:	f107 0012 	add.w	r0, r7, #18
 80165e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80165e4:	8bf9      	ldrh	r1, [r7, #30]
 80165e6:	2301      	movs	r3, #1
 80165e8:	9302      	str	r3, [sp, #8]
 80165ea:	797b      	ldrb	r3, [r7, #5]
 80165ec:	9301      	str	r3, [sp, #4]
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	9300      	str	r3, [sp, #0]
 80165f2:	4603      	mov	r3, r0
 80165f4:	2000      	movs	r0, #0
 80165f6:	f7ff fe0f 	bl	8016218 <tcp_pbuf_prealloc>
 80165fa:	6578      	str	r0, [r7, #84]	@ 0x54
 80165fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165fe:	2b00      	cmp	r3, #0
 8016600:	f000 8225 	beq.w	8016a4e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016606:	6858      	ldr	r0, [r3, #4]
 8016608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801660c:	68ba      	ldr	r2, [r7, #8]
 801660e:	4413      	add	r3, r2
 8016610:	8bfa      	ldrh	r2, [r7, #30]
 8016612:	4619      	mov	r1, r3
 8016614:	f008 faa1 	bl	801eb5a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016618:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801661a:	f7fb f8a3 	bl	8011764 <pbuf_clen>
 801661e:	4603      	mov	r3, r0
 8016620:	461a      	mov	r2, r3
 8016622:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016626:	4413      	add	r3, r2
 8016628:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801662c:	e041      	b.n	80166b2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801662e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	637b      	str	r3, [r7, #52]	@ 0x34
 8016634:	e002      	b.n	801663c <tcp_write+0x23c>
 8016636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	637b      	str	r3, [r7, #52]	@ 0x34
 801663c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d1f8      	bne.n	8016636 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016646:	7b1b      	ldrb	r3, [r3, #12]
 8016648:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801664c:	2b00      	cmp	r3, #0
 801664e:	d115      	bne.n	801667c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016652:	685b      	ldr	r3, [r3, #4]
 8016654:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016656:	8952      	ldrh	r2, [r2, #10]
 8016658:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801665a:	68ba      	ldr	r2, [r7, #8]
 801665c:	429a      	cmp	r2, r3
 801665e:	d10d      	bne.n	801667c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016660:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016664:	2b00      	cmp	r3, #0
 8016666:	d006      	beq.n	8016676 <tcp_write+0x276>
 8016668:	4b1c      	ldr	r3, [pc, #112]	@ (80166dc <tcp_write+0x2dc>)
 801666a:	f240 2231 	movw	r2, #561	@ 0x231
 801666e:	4922      	ldr	r1, [pc, #136]	@ (80166f8 <tcp_write+0x2f8>)
 8016670:	481c      	ldr	r0, [pc, #112]	@ (80166e4 <tcp_write+0x2e4>)
 8016672:	f008 f8d1 	bl	801e818 <iprintf>
          extendlen = seglen;
 8016676:	8bfb      	ldrh	r3, [r7, #30]
 8016678:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801667a:	e01a      	b.n	80166b2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801667c:	8bfb      	ldrh	r3, [r7, #30]
 801667e:	2201      	movs	r2, #1
 8016680:	4619      	mov	r1, r3
 8016682:	2000      	movs	r0, #0
 8016684:	f7fa fcca 	bl	801101c <pbuf_alloc>
 8016688:	6578      	str	r0, [r7, #84]	@ 0x54
 801668a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801668c:	2b00      	cmp	r3, #0
 801668e:	f000 81e0 	beq.w	8016a52 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016692:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016696:	68ba      	ldr	r2, [r7, #8]
 8016698:	441a      	add	r2, r3
 801669a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801669c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801669e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80166a0:	f7fb f860 	bl	8011764 <pbuf_clen>
 80166a4:	4603      	mov	r3, r0
 80166a6:	461a      	mov	r2, r3
 80166a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80166ac:	4413      	add	r3, r2
 80166ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80166b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80166b6:	8bfb      	ldrh	r3, [r7, #30]
 80166b8:	4413      	add	r3, r2
 80166ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80166be:	e0dc      	b.n	801687a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	f000 80d7 	beq.w	801687a <tcp_write+0x47a>
 80166cc:	4b03      	ldr	r3, [pc, #12]	@ (80166dc <tcp_write+0x2dc>)
 80166ce:	f240 224a 	movw	r2, #586	@ 0x24a
 80166d2:	490a      	ldr	r1, [pc, #40]	@ (80166fc <tcp_write+0x2fc>)
 80166d4:	4803      	ldr	r0, [pc, #12]	@ (80166e4 <tcp_write+0x2e4>)
 80166d6:	f008 f89f 	bl	801e818 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80166da:	e0ce      	b.n	801687a <tcp_write+0x47a>
 80166dc:	08024890 	.word	0x08024890
 80166e0:	08024a30 	.word	0x08024a30
 80166e4:	080248e4 	.word	0x080248e4
 80166e8:	08024a48 	.word	0x08024a48
 80166ec:	08024a7c 	.word	0x08024a7c
 80166f0:	08024a94 	.word	0x08024a94
 80166f4:	08024ab4 	.word	0x08024ab4
 80166f8:	08024ad4 	.word	0x08024ad4
 80166fc:	08024b00 	.word	0x08024b00
    struct pbuf *p;
    u16_t left = len - pos;
 8016700:	88fa      	ldrh	r2, [r7, #6]
 8016702:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016706:	1ad3      	subs	r3, r2, r3
 8016708:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801670a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801670e:	b29b      	uxth	r3, r3
 8016710:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016712:	1ad3      	subs	r3, r2, r3
 8016714:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016716:	8b7a      	ldrh	r2, [r7, #26]
 8016718:	8bbb      	ldrh	r3, [r7, #28]
 801671a:	4293      	cmp	r3, r2
 801671c:	bf28      	it	cs
 801671e:	4613      	movcs	r3, r2
 8016720:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016722:	797b      	ldrb	r3, [r7, #5]
 8016724:	f003 0301 	and.w	r3, r3, #1
 8016728:	2b00      	cmp	r3, #0
 801672a:	d036      	beq.n	801679a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801672c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016730:	b29a      	uxth	r2, r3
 8016732:	8b3b      	ldrh	r3, [r7, #24]
 8016734:	4413      	add	r3, r2
 8016736:	b299      	uxth	r1, r3
 8016738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801673a:	2b00      	cmp	r3, #0
 801673c:	bf0c      	ite	eq
 801673e:	2301      	moveq	r3, #1
 8016740:	2300      	movne	r3, #0
 8016742:	b2db      	uxtb	r3, r3
 8016744:	f107 0012 	add.w	r0, r7, #18
 8016748:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801674a:	9302      	str	r3, [sp, #8]
 801674c:	797b      	ldrb	r3, [r7, #5]
 801674e:	9301      	str	r3, [sp, #4]
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	9300      	str	r3, [sp, #0]
 8016754:	4603      	mov	r3, r0
 8016756:	2036      	movs	r0, #54	@ 0x36
 8016758:	f7ff fd5e 	bl	8016218 <tcp_pbuf_prealloc>
 801675c:	6338      	str	r0, [r7, #48]	@ 0x30
 801675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016760:	2b00      	cmp	r3, #0
 8016762:	f000 8178 	beq.w	8016a56 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016768:	895b      	ldrh	r3, [r3, #10]
 801676a:	8b3a      	ldrh	r2, [r7, #24]
 801676c:	429a      	cmp	r2, r3
 801676e:	d906      	bls.n	801677e <tcp_write+0x37e>
 8016770:	4b8c      	ldr	r3, [pc, #560]	@ (80169a4 <tcp_write+0x5a4>)
 8016772:	f240 2266 	movw	r2, #614	@ 0x266
 8016776:	498c      	ldr	r1, [pc, #560]	@ (80169a8 <tcp_write+0x5a8>)
 8016778:	488c      	ldr	r0, [pc, #560]	@ (80169ac <tcp_write+0x5ac>)
 801677a:	f008 f84d 	bl	801e818 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016780:	685a      	ldr	r2, [r3, #4]
 8016782:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016786:	18d0      	adds	r0, r2, r3
 8016788:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801678c:	68ba      	ldr	r2, [r7, #8]
 801678e:	4413      	add	r3, r2
 8016790:	8b3a      	ldrh	r2, [r7, #24]
 8016792:	4619      	mov	r1, r3
 8016794:	f008 f9e1 	bl	801eb5a <memcpy>
 8016798:	e02f      	b.n	80167fa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801679a:	8a7b      	ldrh	r3, [r7, #18]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d006      	beq.n	80167ae <tcp_write+0x3ae>
 80167a0:	4b80      	ldr	r3, [pc, #512]	@ (80169a4 <tcp_write+0x5a4>)
 80167a2:	f240 2271 	movw	r2, #625	@ 0x271
 80167a6:	4982      	ldr	r1, [pc, #520]	@ (80169b0 <tcp_write+0x5b0>)
 80167a8:	4880      	ldr	r0, [pc, #512]	@ (80169ac <tcp_write+0x5ac>)
 80167aa:	f008 f835 	bl	801e818 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80167ae:	8b3b      	ldrh	r3, [r7, #24]
 80167b0:	2201      	movs	r2, #1
 80167b2:	4619      	mov	r1, r3
 80167b4:	2036      	movs	r0, #54	@ 0x36
 80167b6:	f7fa fc31 	bl	801101c <pbuf_alloc>
 80167ba:	6178      	str	r0, [r7, #20]
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	f000 814b 	beq.w	8016a5a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80167c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80167c8:	68ba      	ldr	r2, [r7, #8]
 80167ca:	441a      	add	r2, r3
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80167d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80167da:	4619      	mov	r1, r3
 80167dc:	2036      	movs	r0, #54	@ 0x36
 80167de:	f7fa fc1d 	bl	801101c <pbuf_alloc>
 80167e2:	6338      	str	r0, [r7, #48]	@ 0x30
 80167e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d103      	bne.n	80167f2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80167ea:	6978      	ldr	r0, [r7, #20]
 80167ec:	f7fa ff2c 	bl	8011648 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80167f0:	e136      	b.n	8016a60 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80167f2:	6979      	ldr	r1, [r7, #20]
 80167f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80167f6:	f7fa fff5 	bl	80117e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80167fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80167fc:	f7fa ffb2 	bl	8011764 <pbuf_clen>
 8016800:	4603      	mov	r3, r0
 8016802:	461a      	mov	r2, r3
 8016804:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016808:	4413      	add	r3, r2
 801680a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801680e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016812:	2b09      	cmp	r3, #9
 8016814:	d903      	bls.n	801681e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016816:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016818:	f7fa ff16 	bl	8011648 <pbuf_free>
      goto memerr;
 801681c:	e120      	b.n	8016a60 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8016822:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016826:	441a      	add	r2, r3
 8016828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801682c:	9300      	str	r3, [sp, #0]
 801682e:	4613      	mov	r3, r2
 8016830:	2200      	movs	r2, #0
 8016832:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016834:	68f8      	ldr	r0, [r7, #12]
 8016836:	f7ff fc53 	bl	80160e0 <tcp_create_segment>
 801683a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801683c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801683e:	2b00      	cmp	r3, #0
 8016840:	f000 810d 	beq.w	8016a5e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016846:	2b00      	cmp	r3, #0
 8016848:	d102      	bne.n	8016850 <tcp_write+0x450>
      queue = seg;
 801684a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801684c:	647b      	str	r3, [r7, #68]	@ 0x44
 801684e:	e00c      	b.n	801686a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016852:	2b00      	cmp	r3, #0
 8016854:	d106      	bne.n	8016864 <tcp_write+0x464>
 8016856:	4b53      	ldr	r3, [pc, #332]	@ (80169a4 <tcp_write+0x5a4>)
 8016858:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801685c:	4955      	ldr	r1, [pc, #340]	@ (80169b4 <tcp_write+0x5b4>)
 801685e:	4853      	ldr	r0, [pc, #332]	@ (80169ac <tcp_write+0x5ac>)
 8016860:	f007 ffda 	bl	801e818 <iprintf>
      prev_seg->next = seg;
 8016864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016866:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016868:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801686a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801686c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801686e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016872:	8b3b      	ldrh	r3, [r7, #24]
 8016874:	4413      	add	r3, r2
 8016876:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801687a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801687e:	88fb      	ldrh	r3, [r7, #6]
 8016880:	429a      	cmp	r2, r3
 8016882:	f4ff af3d 	bcc.w	8016700 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016886:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016888:	2b00      	cmp	r3, #0
 801688a:	d02c      	beq.n	80168e6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801688c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016892:	e01e      	b.n	80168d2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016896:	891a      	ldrh	r2, [r3, #8]
 8016898:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801689a:	4413      	add	r3, r2
 801689c:	b29a      	uxth	r2, r3
 801689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168a0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80168a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d110      	bne.n	80168cc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80168aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80168b0:	8952      	ldrh	r2, [r2, #10]
 80168b2:	4413      	add	r3, r2
 80168b4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80168b6:	68b9      	ldr	r1, [r7, #8]
 80168b8:	4618      	mov	r0, r3
 80168ba:	f008 f94e 	bl	801eb5a <memcpy>
        p->len += oversize_used;
 80168be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168c0:	895a      	ldrh	r2, [r3, #10]
 80168c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80168c4:	4413      	add	r3, r2
 80168c6:	b29a      	uxth	r2, r3
 80168c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168ca:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80168cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80168d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d1dd      	bne.n	8016894 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80168d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168da:	891a      	ldrh	r2, [r3, #8]
 80168dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80168de:	4413      	add	r3, r2
 80168e0:	b29a      	uxth	r2, r3
 80168e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168e4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80168e6:	8a7a      	ldrh	r2, [r7, #18]
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80168ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d018      	beq.n	8016926 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80168f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d106      	bne.n	8016908 <tcp_write+0x508>
 80168fa:	4b2a      	ldr	r3, [pc, #168]	@ (80169a4 <tcp_write+0x5a4>)
 80168fc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8016900:	492d      	ldr	r1, [pc, #180]	@ (80169b8 <tcp_write+0x5b8>)
 8016902:	482a      	ldr	r0, [pc, #168]	@ (80169ac <tcp_write+0x5ac>)
 8016904:	f007 ff88 	bl	801e818 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801690a:	685b      	ldr	r3, [r3, #4]
 801690c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801690e:	4618      	mov	r0, r3
 8016910:	f7fa ff68 	bl	80117e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016916:	891a      	ldrh	r2, [r3, #8]
 8016918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801691a:	891b      	ldrh	r3, [r3, #8]
 801691c:	4413      	add	r3, r2
 801691e:	b29a      	uxth	r2, r3
 8016920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016922:	811a      	strh	r2, [r3, #8]
 8016924:	e037      	b.n	8016996 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016926:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016928:	2b00      	cmp	r3, #0
 801692a:	d034      	beq.n	8016996 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801692c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801692e:	2b00      	cmp	r3, #0
 8016930:	d003      	beq.n	801693a <tcp_write+0x53a>
 8016932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016934:	685b      	ldr	r3, [r3, #4]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d106      	bne.n	8016948 <tcp_write+0x548>
 801693a:	4b1a      	ldr	r3, [pc, #104]	@ (80169a4 <tcp_write+0x5a4>)
 801693c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8016940:	491e      	ldr	r1, [pc, #120]	@ (80169bc <tcp_write+0x5bc>)
 8016942:	481a      	ldr	r0, [pc, #104]	@ (80169ac <tcp_write+0x5ac>)
 8016944:	f007 ff68 	bl	801e818 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801694e:	e009      	b.n	8016964 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016952:	891a      	ldrh	r2, [r3, #8]
 8016954:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016956:	4413      	add	r3, r2
 8016958:	b29a      	uxth	r2, r3
 801695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801695c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d1f1      	bne.n	8016950 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801696c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801696e:	891a      	ldrh	r2, [r3, #8]
 8016970:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016972:	4413      	add	r3, r2
 8016974:	b29a      	uxth	r2, r3
 8016976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016978:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801697c:	895a      	ldrh	r2, [r3, #10]
 801697e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016980:	4413      	add	r3, r2
 8016982:	b29a      	uxth	r2, r3
 8016984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016986:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801698a:	891a      	ldrh	r2, [r3, #8]
 801698c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801698e:	4413      	add	r3, r2
 8016990:	b29a      	uxth	r2, r3
 8016992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016994:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016998:	2b00      	cmp	r3, #0
 801699a:	d111      	bne.n	80169c0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80169a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80169a2:	e010      	b.n	80169c6 <tcp_write+0x5c6>
 80169a4:	08024890 	.word	0x08024890
 80169a8:	08024b30 	.word	0x08024b30
 80169ac:	080248e4 	.word	0x080248e4
 80169b0:	08024b70 	.word	0x08024b70
 80169b4:	08024b80 	.word	0x08024b80
 80169b8:	08024b94 	.word	0x08024b94
 80169bc:	08024bcc 	.word	0x08024bcc
  } else {
    last_unsent->next = queue;
 80169c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80169c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80169c4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80169ca:	88fb      	ldrh	r3, [r7, #6]
 80169cc:	441a      	add	r2, r3
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80169d8:	88fb      	ldrh	r3, [r7, #6]
 80169da:	1ad3      	subs	r3, r2, r3
 80169dc:	b29a      	uxth	r2, r3
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80169ea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d00e      	beq.n	8016a16 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d10a      	bne.n	8016a16 <tcp_write+0x616>
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d106      	bne.n	8016a16 <tcp_write+0x616>
 8016a08:	4b2c      	ldr	r3, [pc, #176]	@ (8016abc <tcp_write+0x6bc>)
 8016a0a:	f240 3212 	movw	r2, #786	@ 0x312
 8016a0e:	492c      	ldr	r1, [pc, #176]	@ (8016ac0 <tcp_write+0x6c0>)
 8016a10:	482c      	ldr	r0, [pc, #176]	@ (8016ac4 <tcp_write+0x6c4>)
 8016a12:	f007 ff01 	bl	801e818 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d016      	beq.n	8016a4a <tcp_write+0x64a>
 8016a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a1e:	68db      	ldr	r3, [r3, #12]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d012      	beq.n	8016a4a <tcp_write+0x64a>
 8016a24:	797b      	ldrb	r3, [r7, #5]
 8016a26:	f003 0302 	and.w	r3, r3, #2
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d10d      	bne.n	8016a4a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a30:	68db      	ldr	r3, [r3, #12]
 8016a32:	899b      	ldrh	r3, [r3, #12]
 8016a34:	b29c      	uxth	r4, r3
 8016a36:	2008      	movs	r0, #8
 8016a38:	f7f8 fee8 	bl	800f80c <lwip_htons>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	461a      	mov	r2, r3
 8016a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a42:	68db      	ldr	r3, [r3, #12]
 8016a44:	4322      	orrs	r2, r4
 8016a46:	b292      	uxth	r2, r2
 8016a48:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	e031      	b.n	8016ab2 <tcp_write+0x6b2>
          goto memerr;
 8016a4e:	bf00      	nop
 8016a50:	e006      	b.n	8016a60 <tcp_write+0x660>
            goto memerr;
 8016a52:	bf00      	nop
 8016a54:	e004      	b.n	8016a60 <tcp_write+0x660>
        goto memerr;
 8016a56:	bf00      	nop
 8016a58:	e002      	b.n	8016a60 <tcp_write+0x660>
        goto memerr;
 8016a5a:	bf00      	nop
 8016a5c:	e000      	b.n	8016a60 <tcp_write+0x660>
      goto memerr;
 8016a5e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	8b5b      	ldrh	r3, [r3, #26]
 8016a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a68:	b29a      	uxth	r2, r3
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d002      	beq.n	8016a7a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016a74:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016a76:	f7fa fde7 	bl	8011648 <pbuf_free>
  }
  if (queue != NULL) {
 8016a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d002      	beq.n	8016a86 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016a80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016a82:	f7fc fb71 	bl	8013168 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d00e      	beq.n	8016aae <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d10a      	bne.n	8016aae <tcp_write+0x6ae>
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d106      	bne.n	8016aae <tcp_write+0x6ae>
 8016aa0:	4b06      	ldr	r3, [pc, #24]	@ (8016abc <tcp_write+0x6bc>)
 8016aa2:	f240 3227 	movw	r2, #807	@ 0x327
 8016aa6:	4906      	ldr	r1, [pc, #24]	@ (8016ac0 <tcp_write+0x6c0>)
 8016aa8:	4806      	ldr	r0, [pc, #24]	@ (8016ac4 <tcp_write+0x6c4>)
 8016aaa:	f007 feb5 	bl	801e818 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8016aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	375c      	adds	r7, #92	@ 0x5c
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd90      	pop	{r4, r7, pc}
 8016aba:	bf00      	nop
 8016abc:	08024890 	.word	0x08024890
 8016ac0:	08024c04 	.word	0x08024c04
 8016ac4:	080248e4 	.word	0x080248e4

08016ac8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016ac8:	b590      	push	{r4, r7, lr}
 8016aca:	b08b      	sub	sp, #44	@ 0x2c
 8016acc:	af02      	add	r7, sp, #8
 8016ace:	6078      	str	r0, [r7, #4]
 8016ad0:	460b      	mov	r3, r1
 8016ad2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	61fb      	str	r3, [r7, #28]
 8016ad8:	2300      	movs	r3, #0
 8016ada:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016adc:	2300      	movs	r3, #0
 8016ade:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d106      	bne.n	8016af4 <tcp_split_unsent_seg+0x2c>
 8016ae6:	4b95      	ldr	r3, [pc, #596]	@ (8016d3c <tcp_split_unsent_seg+0x274>)
 8016ae8:	f240 324b 	movw	r2, #843	@ 0x34b
 8016aec:	4994      	ldr	r1, [pc, #592]	@ (8016d40 <tcp_split_unsent_seg+0x278>)
 8016aee:	4895      	ldr	r0, [pc, #596]	@ (8016d44 <tcp_split_unsent_seg+0x27c>)
 8016af0:	f007 fe92 	bl	801e818 <iprintf>

  useg = pcb->unsent;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016af8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d102      	bne.n	8016b06 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016b00:	f04f 33ff 	mov.w	r3, #4294967295
 8016b04:	e116      	b.n	8016d34 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016b06:	887b      	ldrh	r3, [r7, #2]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d109      	bne.n	8016b20 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016b0c:	4b8b      	ldr	r3, [pc, #556]	@ (8016d3c <tcp_split_unsent_seg+0x274>)
 8016b0e:	f240 3253 	movw	r2, #851	@ 0x353
 8016b12:	498d      	ldr	r1, [pc, #564]	@ (8016d48 <tcp_split_unsent_seg+0x280>)
 8016b14:	488b      	ldr	r0, [pc, #556]	@ (8016d44 <tcp_split_unsent_seg+0x27c>)
 8016b16:	f007 fe7f 	bl	801e818 <iprintf>
    return ERR_VAL;
 8016b1a:	f06f 0305 	mvn.w	r3, #5
 8016b1e:	e109      	b.n	8016d34 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	891b      	ldrh	r3, [r3, #8]
 8016b24:	887a      	ldrh	r2, [r7, #2]
 8016b26:	429a      	cmp	r2, r3
 8016b28:	d301      	bcc.n	8016b2e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	e102      	b.n	8016d34 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b32:	887a      	ldrh	r2, [r7, #2]
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d906      	bls.n	8016b46 <tcp_split_unsent_seg+0x7e>
 8016b38:	4b80      	ldr	r3, [pc, #512]	@ (8016d3c <tcp_split_unsent_seg+0x274>)
 8016b3a:	f240 325b 	movw	r2, #859	@ 0x35b
 8016b3e:	4983      	ldr	r1, [pc, #524]	@ (8016d4c <tcp_split_unsent_seg+0x284>)
 8016b40:	4880      	ldr	r0, [pc, #512]	@ (8016d44 <tcp_split_unsent_seg+0x27c>)
 8016b42:	f007 fe69 	bl	801e818 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	891b      	ldrh	r3, [r3, #8]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d106      	bne.n	8016b5c <tcp_split_unsent_seg+0x94>
 8016b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8016d3c <tcp_split_unsent_seg+0x274>)
 8016b50:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016b54:	497e      	ldr	r1, [pc, #504]	@ (8016d50 <tcp_split_unsent_seg+0x288>)
 8016b56:	487b      	ldr	r0, [pc, #492]	@ (8016d44 <tcp_split_unsent_seg+0x27c>)
 8016b58:	f007 fe5e 	bl	801e818 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	7a9b      	ldrb	r3, [r3, #10]
 8016b60:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016b62:	7bfb      	ldrb	r3, [r7, #15]
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	b2db      	uxtb	r3, r3
 8016b68:	f003 0304 	and.w	r3, r3, #4
 8016b6c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	891a      	ldrh	r2, [r3, #8]
 8016b72:	887b      	ldrh	r3, [r7, #2]
 8016b74:	1ad3      	subs	r3, r2, r3
 8016b76:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016b78:	7bbb      	ldrb	r3, [r7, #14]
 8016b7a:	b29a      	uxth	r2, r3
 8016b7c:	89bb      	ldrh	r3, [r7, #12]
 8016b7e:	4413      	add	r3, r2
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016b86:	4619      	mov	r1, r3
 8016b88:	2036      	movs	r0, #54	@ 0x36
 8016b8a:	f7fa fa47 	bl	801101c <pbuf_alloc>
 8016b8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	f000 80b7 	beq.w	8016d06 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016b98:	697b      	ldr	r3, [r7, #20]
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	891a      	ldrh	r2, [r3, #8]
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	891b      	ldrh	r3, [r3, #8]
 8016ba2:	1ad3      	subs	r3, r2, r3
 8016ba4:	b29a      	uxth	r2, r3
 8016ba6:	887b      	ldrh	r3, [r7, #2]
 8016ba8:	4413      	add	r3, r2
 8016baa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016bac:	697b      	ldr	r3, [r7, #20]
 8016bae:	6858      	ldr	r0, [r3, #4]
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	685a      	ldr	r2, [r3, #4]
 8016bb4:	7bbb      	ldrb	r3, [r7, #14]
 8016bb6:	18d1      	adds	r1, r2, r3
 8016bb8:	897b      	ldrh	r3, [r7, #10]
 8016bba:	89ba      	ldrh	r2, [r7, #12]
 8016bbc:	f7fa ff4a 	bl	8011a54 <pbuf_copy_partial>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	461a      	mov	r2, r3
 8016bc4:	89bb      	ldrh	r3, [r7, #12]
 8016bc6:	4293      	cmp	r3, r2
 8016bc8:	f040 809f 	bne.w	8016d0a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016bcc:	697b      	ldr	r3, [r7, #20]
 8016bce:	68db      	ldr	r3, [r3, #12]
 8016bd0:	899b      	ldrh	r3, [r3, #12]
 8016bd2:	b29b      	uxth	r3, r3
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f8 fe19 	bl	800f80c <lwip_htons>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	b2db      	uxtb	r3, r3
 8016bde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016be2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016be4:	2300      	movs	r3, #0
 8016be6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016be8:	7efb      	ldrb	r3, [r7, #27]
 8016bea:	f003 0308 	and.w	r3, r3, #8
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d007      	beq.n	8016c02 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016bf2:	7efb      	ldrb	r3, [r7, #27]
 8016bf4:	f023 0308 	bic.w	r3, r3, #8
 8016bf8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016bfa:	7ebb      	ldrb	r3, [r7, #26]
 8016bfc:	f043 0308 	orr.w	r3, r3, #8
 8016c00:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016c02:	7efb      	ldrb	r3, [r7, #27]
 8016c04:	f003 0301 	and.w	r3, r3, #1
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d007      	beq.n	8016c1c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016c0c:	7efb      	ldrb	r3, [r7, #27]
 8016c0e:	f023 0301 	bic.w	r3, r3, #1
 8016c12:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016c14:	7ebb      	ldrb	r3, [r7, #26]
 8016c16:	f043 0301 	orr.w	r3, r3, #1
 8016c1a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016c1c:	697b      	ldr	r3, [r7, #20]
 8016c1e:	68db      	ldr	r3, [r3, #12]
 8016c20:	685b      	ldr	r3, [r3, #4]
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7f8 fe07 	bl	800f836 <lwip_htonl>
 8016c28:	4602      	mov	r2, r0
 8016c2a:	887b      	ldrh	r3, [r7, #2]
 8016c2c:	18d1      	adds	r1, r2, r3
 8016c2e:	7eba      	ldrb	r2, [r7, #26]
 8016c30:	7bfb      	ldrb	r3, [r7, #15]
 8016c32:	9300      	str	r3, [sp, #0]
 8016c34:	460b      	mov	r3, r1
 8016c36:	6939      	ldr	r1, [r7, #16]
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f7ff fa51 	bl	80160e0 <tcp_create_segment>
 8016c3e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d063      	beq.n	8016d0e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	685b      	ldr	r3, [r3, #4]
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fa fd8a 	bl	8011764 <pbuf_clen>
 8016c50:	4603      	mov	r3, r0
 8016c52:	461a      	mov	r2, r3
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016c5a:	1a9b      	subs	r3, r3, r2
 8016c5c:	b29a      	uxth	r2, r3
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016c64:	697b      	ldr	r3, [r7, #20]
 8016c66:	6858      	ldr	r0, [r3, #4]
 8016c68:	697b      	ldr	r3, [r7, #20]
 8016c6a:	685b      	ldr	r3, [r3, #4]
 8016c6c:	891a      	ldrh	r2, [r3, #8]
 8016c6e:	89bb      	ldrh	r3, [r7, #12]
 8016c70:	1ad3      	subs	r3, r2, r3
 8016c72:	b29b      	uxth	r3, r3
 8016c74:	4619      	mov	r1, r3
 8016c76:	f7fa fb2f 	bl	80112d8 <pbuf_realloc>
  useg->len -= remainder;
 8016c7a:	697b      	ldr	r3, [r7, #20]
 8016c7c:	891a      	ldrh	r2, [r3, #8]
 8016c7e:	89bb      	ldrh	r3, [r7, #12]
 8016c80:	1ad3      	subs	r3, r2, r3
 8016c82:	b29a      	uxth	r2, r3
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016c88:	697b      	ldr	r3, [r7, #20]
 8016c8a:	68db      	ldr	r3, [r3, #12]
 8016c8c:	899b      	ldrh	r3, [r3, #12]
 8016c8e:	b29c      	uxth	r4, r3
 8016c90:	7efb      	ldrb	r3, [r7, #27]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	4618      	mov	r0, r3
 8016c96:	f7f8 fdb9 	bl	800f80c <lwip_htons>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	461a      	mov	r2, r3
 8016c9e:	697b      	ldr	r3, [r7, #20]
 8016ca0:	68db      	ldr	r3, [r3, #12]
 8016ca2:	4322      	orrs	r2, r4
 8016ca4:	b292      	uxth	r2, r2
 8016ca6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	685b      	ldr	r3, [r3, #4]
 8016cac:	4618      	mov	r0, r3
 8016cae:	f7fa fd59 	bl	8011764 <pbuf_clen>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	461a      	mov	r2, r3
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016cbc:	4413      	add	r3, r2
 8016cbe:	b29a      	uxth	r2, r3
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016cc6:	69fb      	ldr	r3, [r7, #28]
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7fa fd4a 	bl	8011764 <pbuf_clen>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	461a      	mov	r2, r3
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016cda:	4413      	add	r3, r2
 8016cdc:	b29a      	uxth	r2, r3
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	681a      	ldr	r2, [r3, #0]
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016cec:	697b      	ldr	r3, [r7, #20]
 8016cee:	69fa      	ldr	r2, [r7, #28]
 8016cf0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d103      	bne.n	8016d02 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016d02:	2300      	movs	r3, #0
 8016d04:	e016      	b.n	8016d34 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016d06:	bf00      	nop
 8016d08:	e002      	b.n	8016d10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016d0a:	bf00      	nop
 8016d0c:	e000      	b.n	8016d10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016d0e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016d10:	69fb      	ldr	r3, [r7, #28]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d006      	beq.n	8016d24 <tcp_split_unsent_seg+0x25c>
 8016d16:	4b09      	ldr	r3, [pc, #36]	@ (8016d3c <tcp_split_unsent_seg+0x274>)
 8016d18:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016d1c:	490d      	ldr	r1, [pc, #52]	@ (8016d54 <tcp_split_unsent_seg+0x28c>)
 8016d1e:	4809      	ldr	r0, [pc, #36]	@ (8016d44 <tcp_split_unsent_seg+0x27c>)
 8016d20:	f007 fd7a 	bl	801e818 <iprintf>
  if (p != NULL) {
 8016d24:	693b      	ldr	r3, [r7, #16]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d002      	beq.n	8016d30 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016d2a:	6938      	ldr	r0, [r7, #16]
 8016d2c:	f7fa fc8c 	bl	8011648 <pbuf_free>
  }

  return ERR_MEM;
 8016d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	3724      	adds	r7, #36	@ 0x24
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd90      	pop	{r4, r7, pc}
 8016d3c:	08024890 	.word	0x08024890
 8016d40:	08024c24 	.word	0x08024c24
 8016d44:	080248e4 	.word	0x080248e4
 8016d48:	08024c48 	.word	0x08024c48
 8016d4c:	08024c6c 	.word	0x08024c6c
 8016d50:	08024c7c 	.word	0x08024c7c
 8016d54:	08024c8c 	.word	0x08024c8c

08016d58 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016d58:	b590      	push	{r4, r7, lr}
 8016d5a:	b085      	sub	sp, #20
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d106      	bne.n	8016d74 <tcp_send_fin+0x1c>
 8016d66:	4b21      	ldr	r3, [pc, #132]	@ (8016dec <tcp_send_fin+0x94>)
 8016d68:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016d6c:	4920      	ldr	r1, [pc, #128]	@ (8016df0 <tcp_send_fin+0x98>)
 8016d6e:	4821      	ldr	r0, [pc, #132]	@ (8016df4 <tcp_send_fin+0x9c>)
 8016d70:	f007 fd52 	bl	801e818 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d02e      	beq.n	8016dda <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d80:	60fb      	str	r3, [r7, #12]
 8016d82:	e002      	b.n	8016d8a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d1f8      	bne.n	8016d84 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	899b      	ldrh	r3, [r3, #12]
 8016d98:	b29b      	uxth	r3, r3
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7f8 fd36 	bl	800f80c <lwip_htons>
 8016da0:	4603      	mov	r3, r0
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	f003 0307 	and.w	r3, r3, #7
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d116      	bne.n	8016dda <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	68db      	ldr	r3, [r3, #12]
 8016db0:	899b      	ldrh	r3, [r3, #12]
 8016db2:	b29c      	uxth	r4, r3
 8016db4:	2001      	movs	r0, #1
 8016db6:	f7f8 fd29 	bl	800f80c <lwip_htons>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	461a      	mov	r2, r3
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	68db      	ldr	r3, [r3, #12]
 8016dc2:	4322      	orrs	r2, r4
 8016dc4:	b292      	uxth	r2, r2
 8016dc6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	8b5b      	ldrh	r3, [r3, #26]
 8016dcc:	f043 0320 	orr.w	r3, r3, #32
 8016dd0:	b29a      	uxth	r2, r3
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	e004      	b.n	8016de4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016dda:	2101      	movs	r1, #1
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f000 f80b 	bl	8016df8 <tcp_enqueue_flags>
 8016de2:	4603      	mov	r3, r0
}
 8016de4:	4618      	mov	r0, r3
 8016de6:	3714      	adds	r7, #20
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd90      	pop	{r4, r7, pc}
 8016dec:	08024890 	.word	0x08024890
 8016df0:	08024c98 	.word	0x08024c98
 8016df4:	080248e4 	.word	0x080248e4

08016df8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b08a      	sub	sp, #40	@ 0x28
 8016dfc:	af02      	add	r7, sp, #8
 8016dfe:	6078      	str	r0, [r7, #4]
 8016e00:	460b      	mov	r3, r1
 8016e02:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016e04:	2300      	movs	r3, #0
 8016e06:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016e08:	2300      	movs	r3, #0
 8016e0a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016e0c:	78fb      	ldrb	r3, [r7, #3]
 8016e0e:	f003 0303 	and.w	r3, r3, #3
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d106      	bne.n	8016e24 <tcp_enqueue_flags+0x2c>
 8016e16:	4b67      	ldr	r3, [pc, #412]	@ (8016fb4 <tcp_enqueue_flags+0x1bc>)
 8016e18:	f240 4211 	movw	r2, #1041	@ 0x411
 8016e1c:	4966      	ldr	r1, [pc, #408]	@ (8016fb8 <tcp_enqueue_flags+0x1c0>)
 8016e1e:	4867      	ldr	r0, [pc, #412]	@ (8016fbc <tcp_enqueue_flags+0x1c4>)
 8016e20:	f007 fcfa 	bl	801e818 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d106      	bne.n	8016e38 <tcp_enqueue_flags+0x40>
 8016e2a:	4b62      	ldr	r3, [pc, #392]	@ (8016fb4 <tcp_enqueue_flags+0x1bc>)
 8016e2c:	f240 4213 	movw	r2, #1043	@ 0x413
 8016e30:	4963      	ldr	r1, [pc, #396]	@ (8016fc0 <tcp_enqueue_flags+0x1c8>)
 8016e32:	4862      	ldr	r0, [pc, #392]	@ (8016fbc <tcp_enqueue_flags+0x1c4>)
 8016e34:	f007 fcf0 	bl	801e818 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016e38:	78fb      	ldrb	r3, [r7, #3]
 8016e3a:	f003 0302 	and.w	r3, r3, #2
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d001      	beq.n	8016e46 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016e42:	2301      	movs	r3, #1
 8016e44:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016e46:	7ffb      	ldrb	r3, [r7, #31]
 8016e48:	009b      	lsls	r3, r3, #2
 8016e4a:	b2db      	uxtb	r3, r3
 8016e4c:	f003 0304 	and.w	r3, r3, #4
 8016e50:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016e52:	7dfb      	ldrb	r3, [r7, #23]
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e5a:	4619      	mov	r1, r3
 8016e5c:	2036      	movs	r0, #54	@ 0x36
 8016e5e:	f7fa f8dd 	bl	801101c <pbuf_alloc>
 8016e62:	6138      	str	r0, [r7, #16]
 8016e64:	693b      	ldr	r3, [r7, #16]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d109      	bne.n	8016e7e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	8b5b      	ldrh	r3, [r3, #26]
 8016e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e72:	b29a      	uxth	r2, r3
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016e78:	f04f 33ff 	mov.w	r3, #4294967295
 8016e7c:	e095      	b.n	8016faa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	895a      	ldrh	r2, [r3, #10]
 8016e82:	7dfb      	ldrb	r3, [r7, #23]
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	429a      	cmp	r2, r3
 8016e88:	d206      	bcs.n	8016e98 <tcp_enqueue_flags+0xa0>
 8016e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8016fb4 <tcp_enqueue_flags+0x1bc>)
 8016e8c:	f240 4239 	movw	r2, #1081	@ 0x439
 8016e90:	494c      	ldr	r1, [pc, #304]	@ (8016fc4 <tcp_enqueue_flags+0x1cc>)
 8016e92:	484a      	ldr	r0, [pc, #296]	@ (8016fbc <tcp_enqueue_flags+0x1c4>)
 8016e94:	f007 fcc0 	bl	801e818 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016e9c:	78fa      	ldrb	r2, [r7, #3]
 8016e9e:	7ffb      	ldrb	r3, [r7, #31]
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	460b      	mov	r3, r1
 8016ea4:	6939      	ldr	r1, [r7, #16]
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f7ff f91a 	bl	80160e0 <tcp_create_segment>
 8016eac:	60f8      	str	r0, [r7, #12]
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d109      	bne.n	8016ec8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	8b5b      	ldrh	r3, [r3, #26]
 8016eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016ebc:	b29a      	uxth	r2, r3
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ec6:	e070      	b.n	8016faa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	68db      	ldr	r3, [r3, #12]
 8016ecc:	f003 0303 	and.w	r3, r3, #3
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d006      	beq.n	8016ee2 <tcp_enqueue_flags+0xea>
 8016ed4:	4b37      	ldr	r3, [pc, #220]	@ (8016fb4 <tcp_enqueue_flags+0x1bc>)
 8016ed6:	f240 4242 	movw	r2, #1090	@ 0x442
 8016eda:	493b      	ldr	r1, [pc, #236]	@ (8016fc8 <tcp_enqueue_flags+0x1d0>)
 8016edc:	4837      	ldr	r0, [pc, #220]	@ (8016fbc <tcp_enqueue_flags+0x1c4>)
 8016ede:	f007 fc9b 	bl	801e818 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	891b      	ldrh	r3, [r3, #8]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d006      	beq.n	8016ef8 <tcp_enqueue_flags+0x100>
 8016eea:	4b32      	ldr	r3, [pc, #200]	@ (8016fb4 <tcp_enqueue_flags+0x1bc>)
 8016eec:	f240 4243 	movw	r2, #1091	@ 0x443
 8016ef0:	4936      	ldr	r1, [pc, #216]	@ (8016fcc <tcp_enqueue_flags+0x1d4>)
 8016ef2:	4832      	ldr	r0, [pc, #200]	@ (8016fbc <tcp_enqueue_flags+0x1c4>)
 8016ef4:	f007 fc90 	bl	801e818 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d103      	bne.n	8016f08 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	68fa      	ldr	r2, [r7, #12]
 8016f04:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016f06:	e00d      	b.n	8016f24 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f0c:	61bb      	str	r3, [r7, #24]
 8016f0e:	e002      	b.n	8016f16 <tcp_enqueue_flags+0x11e>
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	61bb      	str	r3, [r7, #24]
 8016f16:	69bb      	ldr	r3, [r7, #24]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d1f8      	bne.n	8016f10 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016f1e:	69bb      	ldr	r3, [r7, #24]
 8016f20:	68fa      	ldr	r2, [r7, #12]
 8016f22:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2200      	movs	r2, #0
 8016f28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016f2c:	78fb      	ldrb	r3, [r7, #3]
 8016f2e:	f003 0302 	and.w	r3, r3, #2
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d104      	bne.n	8016f40 <tcp_enqueue_flags+0x148>
 8016f36:	78fb      	ldrb	r3, [r7, #3]
 8016f38:	f003 0301 	and.w	r3, r3, #1
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d004      	beq.n	8016f4a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016f44:	1c5a      	adds	r2, r3, #1
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016f4a:	78fb      	ldrb	r3, [r7, #3]
 8016f4c:	f003 0301 	and.w	r3, r3, #1
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d006      	beq.n	8016f62 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	8b5b      	ldrh	r3, [r3, #26]
 8016f58:	f043 0320 	orr.w	r3, r3, #32
 8016f5c:	b29a      	uxth	r2, r3
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7fa fbfc 	bl	8011764 <pbuf_clen>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	461a      	mov	r2, r3
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f76:	4413      	add	r3, r2
 8016f78:	b29a      	uxth	r2, r3
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d00e      	beq.n	8016fa8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d10a      	bne.n	8016fa8 <tcp_enqueue_flags+0x1b0>
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d106      	bne.n	8016fa8 <tcp_enqueue_flags+0x1b0>
 8016f9a:	4b06      	ldr	r3, [pc, #24]	@ (8016fb4 <tcp_enqueue_flags+0x1bc>)
 8016f9c:	f240 4265 	movw	r2, #1125	@ 0x465
 8016fa0:	490b      	ldr	r1, [pc, #44]	@ (8016fd0 <tcp_enqueue_flags+0x1d8>)
 8016fa2:	4806      	ldr	r0, [pc, #24]	@ (8016fbc <tcp_enqueue_flags+0x1c4>)
 8016fa4:	f007 fc38 	bl	801e818 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016fa8:	2300      	movs	r3, #0
}
 8016faa:	4618      	mov	r0, r3
 8016fac:	3720      	adds	r7, #32
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}
 8016fb2:	bf00      	nop
 8016fb4:	08024890 	.word	0x08024890
 8016fb8:	08024cb4 	.word	0x08024cb4
 8016fbc:	080248e4 	.word	0x080248e4
 8016fc0:	08024d0c 	.word	0x08024d0c
 8016fc4:	08024d2c 	.word	0x08024d2c
 8016fc8:	08024d68 	.word	0x08024d68
 8016fcc:	08024d80 	.word	0x08024d80
 8016fd0:	08024dac 	.word	0x08024dac

08016fd4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016fd4:	b5b0      	push	{r4, r5, r7, lr}
 8016fd6:	b08a      	sub	sp, #40	@ 0x28
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d106      	bne.n	8016ff0 <tcp_output+0x1c>
 8016fe2:	4b8a      	ldr	r3, [pc, #552]	@ (801720c <tcp_output+0x238>)
 8016fe4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016fe8:	4989      	ldr	r1, [pc, #548]	@ (8017210 <tcp_output+0x23c>)
 8016fea:	488a      	ldr	r0, [pc, #552]	@ (8017214 <tcp_output+0x240>)
 8016fec:	f007 fc14 	bl	801e818 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	7d1b      	ldrb	r3, [r3, #20]
 8016ff4:	2b01      	cmp	r3, #1
 8016ff6:	d106      	bne.n	8017006 <tcp_output+0x32>
 8016ff8:	4b84      	ldr	r3, [pc, #528]	@ (801720c <tcp_output+0x238>)
 8016ffa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016ffe:	4986      	ldr	r1, [pc, #536]	@ (8017218 <tcp_output+0x244>)
 8017000:	4884      	ldr	r0, [pc, #528]	@ (8017214 <tcp_output+0x240>)
 8017002:	f007 fc09 	bl	801e818 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017006:	4b85      	ldr	r3, [pc, #532]	@ (801721c <tcp_output+0x248>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	687a      	ldr	r2, [r7, #4]
 801700c:	429a      	cmp	r2, r3
 801700e:	d101      	bne.n	8017014 <tcp_output+0x40>
    return ERR_OK;
 8017010:	2300      	movs	r3, #0
 8017012:	e1ce      	b.n	80173b2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017020:	4293      	cmp	r3, r2
 8017022:	bf28      	it	cs
 8017024:	4613      	movcs	r3, r2
 8017026:	b29b      	uxth	r3, r3
 8017028:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801702e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8017030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017032:	2b00      	cmp	r3, #0
 8017034:	d10b      	bne.n	801704e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	8b5b      	ldrh	r3, [r3, #26]
 801703a:	f003 0302 	and.w	r3, r3, #2
 801703e:	2b00      	cmp	r3, #0
 8017040:	f000 81aa 	beq.w	8017398 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f000 fdcb 	bl	8017be0 <tcp_send_empty_ack>
 801704a:	4603      	mov	r3, r0
 801704c:	e1b1      	b.n	80173b2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801704e:	6879      	ldr	r1, [r7, #4]
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	3304      	adds	r3, #4
 8017054:	461a      	mov	r2, r3
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f7ff f826 	bl	80160a8 <tcp_route>
 801705c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d102      	bne.n	801706a <tcp_output+0x96>
    return ERR_RTE;
 8017064:	f06f 0303 	mvn.w	r3, #3
 8017068:	e1a3      	b.n	80173b2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d003      	beq.n	8017078 <tcp_output+0xa4>
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d111      	bne.n	801709c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d002      	beq.n	8017084 <tcp_output+0xb0>
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	3304      	adds	r3, #4
 8017082:	e000      	b.n	8017086 <tcp_output+0xb2>
 8017084:	2300      	movs	r3, #0
 8017086:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d102      	bne.n	8017094 <tcp_output+0xc0>
      return ERR_RTE;
 801708e:	f06f 0303 	mvn.w	r3, #3
 8017092:	e18e      	b.n	80173b2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017094:	693b      	ldr	r3, [r7, #16]
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801709e:	68db      	ldr	r3, [r3, #12]
 80170a0:	685b      	ldr	r3, [r3, #4]
 80170a2:	4618      	mov	r0, r3
 80170a4:	f7f8 fbc7 	bl	800f836 <lwip_htonl>
 80170a8:	4602      	mov	r2, r0
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170ae:	1ad3      	subs	r3, r2, r3
 80170b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80170b2:	8912      	ldrh	r2, [r2, #8]
 80170b4:	4413      	add	r3, r2
 80170b6:	69ba      	ldr	r2, [r7, #24]
 80170b8:	429a      	cmp	r2, r3
 80170ba:	d227      	bcs.n	801710c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80170c2:	461a      	mov	r2, r3
 80170c4:	69bb      	ldr	r3, [r7, #24]
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d114      	bne.n	80170f4 <tcp_output+0x120>
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d110      	bne.n	80170f4 <tcp_output+0x120>
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d10b      	bne.n	80170f4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	2200      	movs	r2, #0
 80170e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2201      	movs	r2, #1
 80170e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2200      	movs	r2, #0
 80170f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	8b5b      	ldrh	r3, [r3, #26]
 80170f8:	f003 0302 	and.w	r3, r3, #2
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	f000 814d 	beq.w	801739c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017102:	6878      	ldr	r0, [r7, #4]
 8017104:	f000 fd6c 	bl	8017be0 <tcp_send_empty_ack>
 8017108:	4603      	mov	r3, r0
 801710a:	e152      	b.n	80173b2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2200      	movs	r2, #0
 8017110:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017118:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801711a:	6a3b      	ldr	r3, [r7, #32]
 801711c:	2b00      	cmp	r3, #0
 801711e:	f000 811c 	beq.w	801735a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017122:	e002      	b.n	801712a <tcp_output+0x156>
 8017124:	6a3b      	ldr	r3, [r7, #32]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	623b      	str	r3, [r7, #32]
 801712a:	6a3b      	ldr	r3, [r7, #32]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d1f8      	bne.n	8017124 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017132:	e112      	b.n	801735a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	899b      	ldrh	r3, [r3, #12]
 801713a:	b29b      	uxth	r3, r3
 801713c:	4618      	mov	r0, r3
 801713e:	f7f8 fb65 	bl	800f80c <lwip_htons>
 8017142:	4603      	mov	r3, r0
 8017144:	b2db      	uxtb	r3, r3
 8017146:	f003 0304 	and.w	r3, r3, #4
 801714a:	2b00      	cmp	r3, #0
 801714c:	d006      	beq.n	801715c <tcp_output+0x188>
 801714e:	4b2f      	ldr	r3, [pc, #188]	@ (801720c <tcp_output+0x238>)
 8017150:	f240 5236 	movw	r2, #1334	@ 0x536
 8017154:	4932      	ldr	r1, [pc, #200]	@ (8017220 <tcp_output+0x24c>)
 8017156:	482f      	ldr	r0, [pc, #188]	@ (8017214 <tcp_output+0x240>)
 8017158:	f007 fb5e 	bl	801e818 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017160:	2b00      	cmp	r3, #0
 8017162:	d01f      	beq.n	80171a4 <tcp_output+0x1d0>
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	8b5b      	ldrh	r3, [r3, #26]
 8017168:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801716c:	2b00      	cmp	r3, #0
 801716e:	d119      	bne.n	80171a4 <tcp_output+0x1d0>
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017174:	2b00      	cmp	r3, #0
 8017176:	d00b      	beq.n	8017190 <tcp_output+0x1bc>
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d110      	bne.n	80171a4 <tcp_output+0x1d0>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017186:	891a      	ldrh	r2, [r3, #8]
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801718c:	429a      	cmp	r2, r3
 801718e:	d209      	bcs.n	80171a4 <tcp_output+0x1d0>
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017196:	2b00      	cmp	r3, #0
 8017198:	d004      	beq.n	80171a4 <tcp_output+0x1d0>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80171a0:	2b08      	cmp	r3, #8
 80171a2:	d901      	bls.n	80171a8 <tcp_output+0x1d4>
 80171a4:	2301      	movs	r3, #1
 80171a6:	e000      	b.n	80171aa <tcp_output+0x1d6>
 80171a8:	2300      	movs	r3, #0
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d106      	bne.n	80171bc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	8b5b      	ldrh	r3, [r3, #26]
 80171b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	f000 80e4 	beq.w	8017384 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	7d1b      	ldrb	r3, [r3, #20]
 80171c0:	2b02      	cmp	r3, #2
 80171c2:	d00d      	beq.n	80171e0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80171c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	899b      	ldrh	r3, [r3, #12]
 80171ca:	b29c      	uxth	r4, r3
 80171cc:	2010      	movs	r0, #16
 80171ce:	f7f8 fb1d 	bl	800f80c <lwip_htons>
 80171d2:	4603      	mov	r3, r0
 80171d4:	461a      	mov	r2, r3
 80171d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171d8:	68db      	ldr	r3, [r3, #12]
 80171da:	4322      	orrs	r2, r4
 80171dc:	b292      	uxth	r2, r2
 80171de:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80171e0:	697a      	ldr	r2, [r7, #20]
 80171e2:	6879      	ldr	r1, [r7, #4]
 80171e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80171e6:	f000 f909 	bl	80173fc <tcp_output_segment>
 80171ea:	4603      	mov	r3, r0
 80171ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80171ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d016      	beq.n	8017224 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	8b5b      	ldrh	r3, [r3, #26]
 80171fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171fe:	b29a      	uxth	r2, r3
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	835a      	strh	r2, [r3, #26]
      return err;
 8017204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017208:	e0d3      	b.n	80173b2 <tcp_output+0x3de>
 801720a:	bf00      	nop
 801720c:	08024890 	.word	0x08024890
 8017210:	08024dd4 	.word	0x08024dd4
 8017214:	080248e4 	.word	0x080248e4
 8017218:	08024dec 	.word	0x08024dec
 801721c:	2000f4d0 	.word	0x2000f4d0
 8017220:	08024e14 	.word	0x08024e14
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017226:	681a      	ldr	r2, [r3, #0]
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	7d1b      	ldrb	r3, [r3, #20]
 8017230:	2b02      	cmp	r3, #2
 8017232:	d006      	beq.n	8017242 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	8b5b      	ldrh	r3, [r3, #26]
 8017238:	f023 0303 	bic.w	r3, r3, #3
 801723c:	b29a      	uxth	r2, r3
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017244:	68db      	ldr	r3, [r3, #12]
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	4618      	mov	r0, r3
 801724a:	f7f8 faf4 	bl	800f836 <lwip_htonl>
 801724e:	4604      	mov	r4, r0
 8017250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017252:	891b      	ldrh	r3, [r3, #8]
 8017254:	461d      	mov	r5, r3
 8017256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017258:	68db      	ldr	r3, [r3, #12]
 801725a:	899b      	ldrh	r3, [r3, #12]
 801725c:	b29b      	uxth	r3, r3
 801725e:	4618      	mov	r0, r3
 8017260:	f7f8 fad4 	bl	800f80c <lwip_htons>
 8017264:	4603      	mov	r3, r0
 8017266:	b2db      	uxtb	r3, r3
 8017268:	f003 0303 	and.w	r3, r3, #3
 801726c:	2b00      	cmp	r3, #0
 801726e:	d001      	beq.n	8017274 <tcp_output+0x2a0>
 8017270:	2301      	movs	r3, #1
 8017272:	e000      	b.n	8017276 <tcp_output+0x2a2>
 8017274:	2300      	movs	r3, #0
 8017276:	442b      	add	r3, r5
 8017278:	4423      	add	r3, r4
 801727a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017280:	68bb      	ldr	r3, [r7, #8]
 8017282:	1ad3      	subs	r3, r2, r3
 8017284:	2b00      	cmp	r3, #0
 8017286:	da02      	bge.n	801728e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	68ba      	ldr	r2, [r7, #8]
 801728c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017290:	891b      	ldrh	r3, [r3, #8]
 8017292:	461c      	mov	r4, r3
 8017294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017296:	68db      	ldr	r3, [r3, #12]
 8017298:	899b      	ldrh	r3, [r3, #12]
 801729a:	b29b      	uxth	r3, r3
 801729c:	4618      	mov	r0, r3
 801729e:	f7f8 fab5 	bl	800f80c <lwip_htons>
 80172a2:	4603      	mov	r3, r0
 80172a4:	b2db      	uxtb	r3, r3
 80172a6:	f003 0303 	and.w	r3, r3, #3
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d001      	beq.n	80172b2 <tcp_output+0x2de>
 80172ae:	2301      	movs	r3, #1
 80172b0:	e000      	b.n	80172b4 <tcp_output+0x2e0>
 80172b2:	2300      	movs	r3, #0
 80172b4:	4423      	add	r3, r4
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d049      	beq.n	801734e <tcp_output+0x37a>
      seg->next = NULL;
 80172ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172bc:	2200      	movs	r2, #0
 80172be:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d105      	bne.n	80172d4 <tcp_output+0x300>
        pcb->unacked = seg;
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80172cc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80172ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172d0:	623b      	str	r3, [r7, #32]
 80172d2:	e03f      	b.n	8017354 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80172d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172d6:	68db      	ldr	r3, [r3, #12]
 80172d8:	685b      	ldr	r3, [r3, #4]
 80172da:	4618      	mov	r0, r3
 80172dc:	f7f8 faab 	bl	800f836 <lwip_htonl>
 80172e0:	4604      	mov	r4, r0
 80172e2:	6a3b      	ldr	r3, [r7, #32]
 80172e4:	68db      	ldr	r3, [r3, #12]
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7f8 faa4 	bl	800f836 <lwip_htonl>
 80172ee:	4603      	mov	r3, r0
 80172f0:	1ae3      	subs	r3, r4, r3
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	da24      	bge.n	8017340 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	3370      	adds	r3, #112	@ 0x70
 80172fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80172fc:	e002      	b.n	8017304 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80172fe:	69fb      	ldr	r3, [r7, #28]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017304:	69fb      	ldr	r3, [r7, #28]
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d011      	beq.n	8017330 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801730c:	69fb      	ldr	r3, [r7, #28]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	68db      	ldr	r3, [r3, #12]
 8017312:	685b      	ldr	r3, [r3, #4]
 8017314:	4618      	mov	r0, r3
 8017316:	f7f8 fa8e 	bl	800f836 <lwip_htonl>
 801731a:	4604      	mov	r4, r0
 801731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	4618      	mov	r0, r3
 8017324:	f7f8 fa87 	bl	800f836 <lwip_htonl>
 8017328:	4603      	mov	r3, r0
 801732a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801732c:	2b00      	cmp	r3, #0
 801732e:	dbe6      	blt.n	80172fe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8017330:	69fb      	ldr	r3, [r7, #28]
 8017332:	681a      	ldr	r2, [r3, #0]
 8017334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017336:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017338:	69fb      	ldr	r3, [r7, #28]
 801733a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801733c:	601a      	str	r2, [r3, #0]
 801733e:	e009      	b.n	8017354 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017340:	6a3b      	ldr	r3, [r7, #32]
 8017342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017344:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017346:	6a3b      	ldr	r3, [r7, #32]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	623b      	str	r3, [r7, #32]
 801734c:	e002      	b.n	8017354 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801734e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017350:	f7fb ff1f 	bl	8013192 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017358:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735c:	2b00      	cmp	r3, #0
 801735e:	d012      	beq.n	8017386 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017362:	68db      	ldr	r3, [r3, #12]
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	4618      	mov	r0, r3
 8017368:	f7f8 fa65 	bl	800f836 <lwip_htonl>
 801736c:	4602      	mov	r2, r0
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017372:	1ad3      	subs	r3, r2, r3
 8017374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017376:	8912      	ldrh	r2, [r2, #8]
 8017378:	4413      	add	r3, r2
  while (seg != NULL &&
 801737a:	69ba      	ldr	r2, [r7, #24]
 801737c:	429a      	cmp	r2, r3
 801737e:	f4bf aed9 	bcs.w	8017134 <tcp_output+0x160>
 8017382:	e000      	b.n	8017386 <tcp_output+0x3b2>
      break;
 8017384:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801738a:	2b00      	cmp	r3, #0
 801738c:	d108      	bne.n	80173a0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2200      	movs	r2, #0
 8017392:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8017396:	e004      	b.n	80173a2 <tcp_output+0x3ce>
    goto output_done;
 8017398:	bf00      	nop
 801739a:	e002      	b.n	80173a2 <tcp_output+0x3ce>
    goto output_done;
 801739c:	bf00      	nop
 801739e:	e000      	b.n	80173a2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80173a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	8b5b      	ldrh	r3, [r3, #26]
 80173a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80173aa:	b29a      	uxth	r2, r3
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80173b0:	2300      	movs	r3, #0
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	3728      	adds	r7, #40	@ 0x28
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bdb0      	pop	{r4, r5, r7, pc}
 80173ba:	bf00      	nop

080173bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d106      	bne.n	80173d8 <tcp_output_segment_busy+0x1c>
 80173ca:	4b09      	ldr	r3, [pc, #36]	@ (80173f0 <tcp_output_segment_busy+0x34>)
 80173cc:	f240 529a 	movw	r2, #1434	@ 0x59a
 80173d0:	4908      	ldr	r1, [pc, #32]	@ (80173f4 <tcp_output_segment_busy+0x38>)
 80173d2:	4809      	ldr	r0, [pc, #36]	@ (80173f8 <tcp_output_segment_busy+0x3c>)
 80173d4:	f007 fa20 	bl	801e818 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	7b9b      	ldrb	r3, [r3, #14]
 80173de:	2b01      	cmp	r3, #1
 80173e0:	d001      	beq.n	80173e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80173e2:	2301      	movs	r3, #1
 80173e4:	e000      	b.n	80173e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80173e6:	2300      	movs	r3, #0
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3708      	adds	r7, #8
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}
 80173f0:	08024890 	.word	0x08024890
 80173f4:	08024e2c 	.word	0x08024e2c
 80173f8:	080248e4 	.word	0x080248e4

080173fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80173fc:	b5b0      	push	{r4, r5, r7, lr}
 80173fe:	b08c      	sub	sp, #48	@ 0x30
 8017400:	af04      	add	r7, sp, #16
 8017402:	60f8      	str	r0, [r7, #12]
 8017404:	60b9      	str	r1, [r7, #8]
 8017406:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d106      	bne.n	801741c <tcp_output_segment+0x20>
 801740e:	4b64      	ldr	r3, [pc, #400]	@ (80175a0 <tcp_output_segment+0x1a4>)
 8017410:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017414:	4963      	ldr	r1, [pc, #396]	@ (80175a4 <tcp_output_segment+0x1a8>)
 8017416:	4864      	ldr	r0, [pc, #400]	@ (80175a8 <tcp_output_segment+0x1ac>)
 8017418:	f007 f9fe 	bl	801e818 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d106      	bne.n	8017430 <tcp_output_segment+0x34>
 8017422:	4b5f      	ldr	r3, [pc, #380]	@ (80175a0 <tcp_output_segment+0x1a4>)
 8017424:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017428:	4960      	ldr	r1, [pc, #384]	@ (80175ac <tcp_output_segment+0x1b0>)
 801742a:	485f      	ldr	r0, [pc, #380]	@ (80175a8 <tcp_output_segment+0x1ac>)
 801742c:	f007 f9f4 	bl	801e818 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d106      	bne.n	8017444 <tcp_output_segment+0x48>
 8017436:	4b5a      	ldr	r3, [pc, #360]	@ (80175a0 <tcp_output_segment+0x1a4>)
 8017438:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801743c:	495c      	ldr	r1, [pc, #368]	@ (80175b0 <tcp_output_segment+0x1b4>)
 801743e:	485a      	ldr	r0, [pc, #360]	@ (80175a8 <tcp_output_segment+0x1ac>)
 8017440:	f007 f9ea 	bl	801e818 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017444:	68f8      	ldr	r0, [r7, #12]
 8017446:	f7ff ffb9 	bl	80173bc <tcp_output_segment_busy>
 801744a:	4603      	mov	r3, r0
 801744c:	2b00      	cmp	r3, #0
 801744e:	d001      	beq.n	8017454 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017450:	2300      	movs	r3, #0
 8017452:	e0a1      	b.n	8017598 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	68dc      	ldr	r4, [r3, #12]
 801745c:	4610      	mov	r0, r2
 801745e:	f7f8 f9ea 	bl	800f836 <lwip_htonl>
 8017462:	4603      	mov	r3, r0
 8017464:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	68dc      	ldr	r4, [r3, #12]
 801746e:	4610      	mov	r0, r2
 8017470:	f7f8 f9cc 	bl	800f80c <lwip_htons>
 8017474:	4603      	mov	r3, r0
 8017476:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017478:	68bb      	ldr	r3, [r7, #8]
 801747a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801747c:	68ba      	ldr	r2, [r7, #8]
 801747e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017480:	441a      	add	r2, r3
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	68db      	ldr	r3, [r3, #12]
 801748a:	3314      	adds	r3, #20
 801748c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	7a9b      	ldrb	r3, [r3, #10]
 8017492:	f003 0301 	and.w	r3, r3, #1
 8017496:	2b00      	cmp	r3, #0
 8017498:	d015      	beq.n	80174c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801749a:	68bb      	ldr	r3, [r7, #8]
 801749c:	3304      	adds	r3, #4
 801749e:	461a      	mov	r2, r3
 80174a0:	6879      	ldr	r1, [r7, #4]
 80174a2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80174a6:	f7fc fa39 	bl	801391c <tcp_eff_send_mss_netif>
 80174aa:	4603      	mov	r3, r0
 80174ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80174ae:	8b7b      	ldrh	r3, [r7, #26]
 80174b0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80174b4:	4618      	mov	r0, r3
 80174b6:	f7f8 f9be 	bl	800f836 <lwip_htonl>
 80174ba:	4602      	mov	r2, r0
 80174bc:	69fb      	ldr	r3, [r7, #28]
 80174be:	601a      	str	r2, [r3, #0]
    opts += 1;
 80174c0:	69fb      	ldr	r3, [r7, #28]
 80174c2:	3304      	adds	r3, #4
 80174c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	da02      	bge.n	80174d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	2200      	movs	r2, #0
 80174d4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80174d6:	68bb      	ldr	r3, [r7, #8]
 80174d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d10c      	bne.n	80174f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80174de:	4b35      	ldr	r3, [pc, #212]	@ (80175b4 <tcp_output_segment+0x1b8>)
 80174e0:	681a      	ldr	r2, [r3, #0]
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	68db      	ldr	r3, [r3, #12]
 80174ea:	685b      	ldr	r3, [r3, #4]
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7f8 f9a2 	bl	800f836 <lwip_htonl>
 80174f2:	4602      	mov	r2, r0
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	68da      	ldr	r2, [r3, #12]
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	685b      	ldr	r3, [r3, #4]
 8017500:	685b      	ldr	r3, [r3, #4]
 8017502:	1ad3      	subs	r3, r2, r3
 8017504:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	8959      	ldrh	r1, [r3, #10]
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	685b      	ldr	r3, [r3, #4]
 8017510:	8b3a      	ldrh	r2, [r7, #24]
 8017512:	1a8a      	subs	r2, r1, r2
 8017514:	b292      	uxth	r2, r2
 8017516:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	8919      	ldrh	r1, [r3, #8]
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	685b      	ldr	r3, [r3, #4]
 8017522:	8b3a      	ldrh	r2, [r7, #24]
 8017524:	1a8a      	subs	r2, r1, r2
 8017526:	b292      	uxth	r2, r2
 8017528:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	685b      	ldr	r3, [r3, #4]
 801752e:	68fa      	ldr	r2, [r7, #12]
 8017530:	68d2      	ldr	r2, [r2, #12]
 8017532:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	68db      	ldr	r3, [r3, #12]
 8017538:	2200      	movs	r2, #0
 801753a:	741a      	strb	r2, [r3, #16]
 801753c:	2200      	movs	r2, #0
 801753e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	68da      	ldr	r2, [r3, #12]
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	7a9b      	ldrb	r3, [r3, #10]
 8017548:	f003 0301 	and.w	r3, r3, #1
 801754c:	2b00      	cmp	r3, #0
 801754e:	d001      	beq.n	8017554 <tcp_output_segment+0x158>
 8017550:	2318      	movs	r3, #24
 8017552:	e000      	b.n	8017556 <tcp_output_segment+0x15a>
 8017554:	2314      	movs	r3, #20
 8017556:	4413      	add	r3, r2
 8017558:	69fa      	ldr	r2, [r7, #28]
 801755a:	429a      	cmp	r2, r3
 801755c:	d006      	beq.n	801756c <tcp_output_segment+0x170>
 801755e:	4b10      	ldr	r3, [pc, #64]	@ (80175a0 <tcp_output_segment+0x1a4>)
 8017560:	f240 621c 	movw	r2, #1564	@ 0x61c
 8017564:	4914      	ldr	r1, [pc, #80]	@ (80175b8 <tcp_output_segment+0x1bc>)
 8017566:	4810      	ldr	r0, [pc, #64]	@ (80175a8 <tcp_output_segment+0x1ac>)
 8017568:	f007 f956 	bl	801e818 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	6858      	ldr	r0, [r3, #4]
 8017570:	68b9      	ldr	r1, [r7, #8]
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	1d1c      	adds	r4, r3, #4
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	7add      	ldrb	r5, [r3, #11]
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	7a9b      	ldrb	r3, [r3, #10]
 801757e:	687a      	ldr	r2, [r7, #4]
 8017580:	9202      	str	r2, [sp, #8]
 8017582:	2206      	movs	r2, #6
 8017584:	9201      	str	r2, [sp, #4]
 8017586:	9300      	str	r3, [sp, #0]
 8017588:	462b      	mov	r3, r5
 801758a:	4622      	mov	r2, r4
 801758c:	f004 fd28 	bl	801bfe0 <ip4_output_if>
 8017590:	4603      	mov	r3, r0
 8017592:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017594:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017598:	4618      	mov	r0, r3
 801759a:	3720      	adds	r7, #32
 801759c:	46bd      	mov	sp, r7
 801759e:	bdb0      	pop	{r4, r5, r7, pc}
 80175a0:	08024890 	.word	0x08024890
 80175a4:	08024e54 	.word	0x08024e54
 80175a8:	080248e4 	.word	0x080248e4
 80175ac:	08024e74 	.word	0x08024e74
 80175b0:	08024e94 	.word	0x08024e94
 80175b4:	2000f484 	.word	0x2000f484
 80175b8:	08024eb8 	.word	0x08024eb8

080175bc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80175bc:	b5b0      	push	{r4, r5, r7, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d106      	bne.n	80175d8 <tcp_rexmit_rto_prepare+0x1c>
 80175ca:	4b31      	ldr	r3, [pc, #196]	@ (8017690 <tcp_rexmit_rto_prepare+0xd4>)
 80175cc:	f240 6263 	movw	r2, #1635	@ 0x663
 80175d0:	4930      	ldr	r1, [pc, #192]	@ (8017694 <tcp_rexmit_rto_prepare+0xd8>)
 80175d2:	4831      	ldr	r0, [pc, #196]	@ (8017698 <tcp_rexmit_rto_prepare+0xdc>)
 80175d4:	f007 f920 	bl	801e818 <iprintf>

  if (pcb->unacked == NULL) {
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d102      	bne.n	80175e6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80175e0:	f06f 0305 	mvn.w	r3, #5
 80175e4:	e050      	b.n	8017688 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175ea:	60fb      	str	r3, [r7, #12]
 80175ec:	e00b      	b.n	8017606 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80175ee:	68f8      	ldr	r0, [r7, #12]
 80175f0:	f7ff fee4 	bl	80173bc <tcp_output_segment_busy>
 80175f4:	4603      	mov	r3, r0
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d002      	beq.n	8017600 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80175fa:	f06f 0305 	mvn.w	r3, #5
 80175fe:	e043      	b.n	8017688 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	60fb      	str	r3, [r7, #12]
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d1ef      	bne.n	80175ee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801760e:	68f8      	ldr	r0, [r7, #12]
 8017610:	f7ff fed4 	bl	80173bc <tcp_output_segment_busy>
 8017614:	4603      	mov	r3, r0
 8017616:	2b00      	cmp	r3, #0
 8017618:	d002      	beq.n	8017620 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801761a:	f06f 0305 	mvn.w	r3, #5
 801761e:	e033      	b.n	8017688 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2200      	movs	r2, #0
 8017634:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	8b5b      	ldrh	r3, [r3, #26]
 801763a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801763e:	b29a      	uxth	r2, r3
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	68db      	ldr	r3, [r3, #12]
 8017648:	685b      	ldr	r3, [r3, #4]
 801764a:	4618      	mov	r0, r3
 801764c:	f7f8 f8f3 	bl	800f836 <lwip_htonl>
 8017650:	4604      	mov	r4, r0
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	891b      	ldrh	r3, [r3, #8]
 8017656:	461d      	mov	r5, r3
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	68db      	ldr	r3, [r3, #12]
 801765c:	899b      	ldrh	r3, [r3, #12]
 801765e:	b29b      	uxth	r3, r3
 8017660:	4618      	mov	r0, r3
 8017662:	f7f8 f8d3 	bl	800f80c <lwip_htons>
 8017666:	4603      	mov	r3, r0
 8017668:	b2db      	uxtb	r3, r3
 801766a:	f003 0303 	and.w	r3, r3, #3
 801766e:	2b00      	cmp	r3, #0
 8017670:	d001      	beq.n	8017676 <tcp_rexmit_rto_prepare+0xba>
 8017672:	2301      	movs	r3, #1
 8017674:	e000      	b.n	8017678 <tcp_rexmit_rto_prepare+0xbc>
 8017676:	2300      	movs	r3, #0
 8017678:	442b      	add	r3, r5
 801767a:	18e2      	adds	r2, r4, r3
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2200      	movs	r2, #0
 8017684:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017686:	2300      	movs	r3, #0
}
 8017688:	4618      	mov	r0, r3
 801768a:	3710      	adds	r7, #16
 801768c:	46bd      	mov	sp, r7
 801768e:	bdb0      	pop	{r4, r5, r7, pc}
 8017690:	08024890 	.word	0x08024890
 8017694:	08024ecc 	.word	0x08024ecc
 8017698:	080248e4 	.word	0x080248e4

0801769c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b082      	sub	sp, #8
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d106      	bne.n	80176b8 <tcp_rexmit_rto_commit+0x1c>
 80176aa:	4b0d      	ldr	r3, [pc, #52]	@ (80176e0 <tcp_rexmit_rto_commit+0x44>)
 80176ac:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80176b0:	490c      	ldr	r1, [pc, #48]	@ (80176e4 <tcp_rexmit_rto_commit+0x48>)
 80176b2:	480d      	ldr	r0, [pc, #52]	@ (80176e8 <tcp_rexmit_rto_commit+0x4c>)
 80176b4:	f007 f8b0 	bl	801e818 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80176be:	2bff      	cmp	r3, #255	@ 0xff
 80176c0:	d007      	beq.n	80176d2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80176c8:	3301      	adds	r3, #1
 80176ca:	b2da      	uxtb	r2, r3
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f7ff fc7e 	bl	8016fd4 <tcp_output>
}
 80176d8:	bf00      	nop
 80176da:	3708      	adds	r7, #8
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	08024890 	.word	0x08024890
 80176e4:	08024ef0 	.word	0x08024ef0
 80176e8:	080248e4 	.word	0x080248e4

080176ec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b082      	sub	sp, #8
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d106      	bne.n	8017708 <tcp_rexmit_rto+0x1c>
 80176fa:	4b0a      	ldr	r3, [pc, #40]	@ (8017724 <tcp_rexmit_rto+0x38>)
 80176fc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8017700:	4909      	ldr	r1, [pc, #36]	@ (8017728 <tcp_rexmit_rto+0x3c>)
 8017702:	480a      	ldr	r0, [pc, #40]	@ (801772c <tcp_rexmit_rto+0x40>)
 8017704:	f007 f888 	bl	801e818 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f7ff ff57 	bl	80175bc <tcp_rexmit_rto_prepare>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d102      	bne.n	801771a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f7ff ffc1 	bl	801769c <tcp_rexmit_rto_commit>
  }
}
 801771a:	bf00      	nop
 801771c:	3708      	adds	r7, #8
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	08024890 	.word	0x08024890
 8017728:	08024f14 	.word	0x08024f14
 801772c:	080248e4 	.word	0x080248e4

08017730 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017730:	b590      	push	{r4, r7, lr}
 8017732:	b085      	sub	sp, #20
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d106      	bne.n	801774c <tcp_rexmit+0x1c>
 801773e:	4b2f      	ldr	r3, [pc, #188]	@ (80177fc <tcp_rexmit+0xcc>)
 8017740:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017744:	492e      	ldr	r1, [pc, #184]	@ (8017800 <tcp_rexmit+0xd0>)
 8017746:	482f      	ldr	r0, [pc, #188]	@ (8017804 <tcp_rexmit+0xd4>)
 8017748:	f007 f866 	bl	801e818 <iprintf>

  if (pcb->unacked == NULL) {
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017750:	2b00      	cmp	r3, #0
 8017752:	d102      	bne.n	801775a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017754:	f06f 0305 	mvn.w	r3, #5
 8017758:	e04c      	b.n	80177f4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801775e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017760:	68b8      	ldr	r0, [r7, #8]
 8017762:	f7ff fe2b 	bl	80173bc <tcp_output_segment_busy>
 8017766:	4603      	mov	r3, r0
 8017768:	2b00      	cmp	r3, #0
 801776a:	d002      	beq.n	8017772 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801776c:	f06f 0305 	mvn.w	r3, #5
 8017770:	e040      	b.n	80177f4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017772:	68bb      	ldr	r3, [r7, #8]
 8017774:	681a      	ldr	r2, [r3, #0]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	336c      	adds	r3, #108	@ 0x6c
 801777e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017780:	e002      	b.n	8017788 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d011      	beq.n	80177b4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	68db      	ldr	r3, [r3, #12]
 8017796:	685b      	ldr	r3, [r3, #4]
 8017798:	4618      	mov	r0, r3
 801779a:	f7f8 f84c 	bl	800f836 <lwip_htonl>
 801779e:	4604      	mov	r4, r0
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	68db      	ldr	r3, [r3, #12]
 80177a4:	685b      	ldr	r3, [r3, #4]
 80177a6:	4618      	mov	r0, r3
 80177a8:	f7f8 f845 	bl	800f836 <lwip_htonl>
 80177ac:	4603      	mov	r3, r0
 80177ae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	dbe6      	blt.n	8017782 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	681a      	ldr	r2, [r3, #0]
 80177b8:	68bb      	ldr	r3, [r7, #8]
 80177ba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	68ba      	ldr	r2, [r7, #8]
 80177c0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d103      	bne.n	80177d2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2200      	movs	r2, #0
 80177ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80177d8:	2bff      	cmp	r3, #255	@ 0xff
 80177da:	d007      	beq.n	80177ec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80177e2:	3301      	adds	r3, #1
 80177e4:	b2da      	uxtb	r2, r3
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2200      	movs	r2, #0
 80177f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80177f2:	2300      	movs	r3, #0
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3714      	adds	r7, #20
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd90      	pop	{r4, r7, pc}
 80177fc:	08024890 	.word	0x08024890
 8017800:	08024f30 	.word	0x08024f30
 8017804:	080248e4 	.word	0x080248e4

08017808 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b082      	sub	sp, #8
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d106      	bne.n	8017824 <tcp_rexmit_fast+0x1c>
 8017816:	4b2a      	ldr	r3, [pc, #168]	@ (80178c0 <tcp_rexmit_fast+0xb8>)
 8017818:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801781c:	4929      	ldr	r1, [pc, #164]	@ (80178c4 <tcp_rexmit_fast+0xbc>)
 801781e:	482a      	ldr	r0, [pc, #168]	@ (80178c8 <tcp_rexmit_fast+0xc0>)
 8017820:	f006 fffa 	bl	801e818 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017828:	2b00      	cmp	r3, #0
 801782a:	d044      	beq.n	80178b6 <tcp_rexmit_fast+0xae>
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	8b5b      	ldrh	r3, [r3, #26]
 8017830:	f003 0304 	and.w	r3, r3, #4
 8017834:	2b00      	cmp	r3, #0
 8017836:	d13e      	bne.n	80178b6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f7ff ff79 	bl	8017730 <tcp_rexmit>
 801783e:	4603      	mov	r3, r0
 8017840:	2b00      	cmp	r3, #0
 8017842:	d138      	bne.n	80178b6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017850:	4293      	cmp	r3, r2
 8017852:	bf28      	it	cs
 8017854:	4613      	movcs	r3, r2
 8017856:	b29b      	uxth	r3, r3
 8017858:	0fda      	lsrs	r2, r3, #31
 801785a:	4413      	add	r3, r2
 801785c:	105b      	asrs	r3, r3, #1
 801785e:	b29a      	uxth	r2, r3
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801786c:	461a      	mov	r2, r3
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017872:	005b      	lsls	r3, r3, #1
 8017874:	429a      	cmp	r2, r3
 8017876:	d206      	bcs.n	8017886 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801787c:	005b      	lsls	r3, r3, #1
 801787e:	b29a      	uxth	r2, r3
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017890:	4619      	mov	r1, r3
 8017892:	0049      	lsls	r1, r1, #1
 8017894:	440b      	add	r3, r1
 8017896:	b29b      	uxth	r3, r3
 8017898:	4413      	add	r3, r2
 801789a:	b29a      	uxth	r2, r3
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	8b5b      	ldrh	r3, [r3, #26]
 80178a6:	f043 0304 	orr.w	r3, r3, #4
 80178aa:	b29a      	uxth	r2, r3
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	2200      	movs	r2, #0
 80178b4:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80178b6:	bf00      	nop
 80178b8:	3708      	adds	r7, #8
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bd80      	pop	{r7, pc}
 80178be:	bf00      	nop
 80178c0:	08024890 	.word	0x08024890
 80178c4:	08024f48 	.word	0x08024f48
 80178c8:	080248e4 	.word	0x080248e4

080178cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b086      	sub	sp, #24
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	60f8      	str	r0, [r7, #12]
 80178d4:	607b      	str	r3, [r7, #4]
 80178d6:	460b      	mov	r3, r1
 80178d8:	817b      	strh	r3, [r7, #10]
 80178da:	4613      	mov	r3, r2
 80178dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80178de:	897a      	ldrh	r2, [r7, #10]
 80178e0:	893b      	ldrh	r3, [r7, #8]
 80178e2:	4413      	add	r3, r2
 80178e4:	b29b      	uxth	r3, r3
 80178e6:	3314      	adds	r3, #20
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80178ee:	4619      	mov	r1, r3
 80178f0:	2022      	movs	r0, #34	@ 0x22
 80178f2:	f7f9 fb93 	bl	801101c <pbuf_alloc>
 80178f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80178f8:	697b      	ldr	r3, [r7, #20]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d04d      	beq.n	801799a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80178fe:	897b      	ldrh	r3, [r7, #10]
 8017900:	3313      	adds	r3, #19
 8017902:	697a      	ldr	r2, [r7, #20]
 8017904:	8952      	ldrh	r2, [r2, #10]
 8017906:	4293      	cmp	r3, r2
 8017908:	db06      	blt.n	8017918 <tcp_output_alloc_header_common+0x4c>
 801790a:	4b26      	ldr	r3, [pc, #152]	@ (80179a4 <tcp_output_alloc_header_common+0xd8>)
 801790c:	f240 7223 	movw	r2, #1827	@ 0x723
 8017910:	4925      	ldr	r1, [pc, #148]	@ (80179a8 <tcp_output_alloc_header_common+0xdc>)
 8017912:	4826      	ldr	r0, [pc, #152]	@ (80179ac <tcp_output_alloc_header_common+0xe0>)
 8017914:	f006 ff80 	bl	801e818 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	685b      	ldr	r3, [r3, #4]
 801791c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801791e:	8c3b      	ldrh	r3, [r7, #32]
 8017920:	4618      	mov	r0, r3
 8017922:	f7f7 ff73 	bl	800f80c <lwip_htons>
 8017926:	4603      	mov	r3, r0
 8017928:	461a      	mov	r2, r3
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801792e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017930:	4618      	mov	r0, r3
 8017932:	f7f7 ff6b 	bl	800f80c <lwip_htons>
 8017936:	4603      	mov	r3, r0
 8017938:	461a      	mov	r2, r3
 801793a:	693b      	ldr	r3, [r7, #16]
 801793c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801793e:	693b      	ldr	r3, [r7, #16]
 8017940:	687a      	ldr	r2, [r7, #4]
 8017942:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017944:	68f8      	ldr	r0, [r7, #12]
 8017946:	f7f7 ff76 	bl	800f836 <lwip_htonl>
 801794a:	4602      	mov	r2, r0
 801794c:	693b      	ldr	r3, [r7, #16]
 801794e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017950:	897b      	ldrh	r3, [r7, #10]
 8017952:	089b      	lsrs	r3, r3, #2
 8017954:	b29b      	uxth	r3, r3
 8017956:	3305      	adds	r3, #5
 8017958:	b29b      	uxth	r3, r3
 801795a:	031b      	lsls	r3, r3, #12
 801795c:	b29a      	uxth	r2, r3
 801795e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017962:	b29b      	uxth	r3, r3
 8017964:	4313      	orrs	r3, r2
 8017966:	b29b      	uxth	r3, r3
 8017968:	4618      	mov	r0, r3
 801796a:	f7f7 ff4f 	bl	800f80c <lwip_htons>
 801796e:	4603      	mov	r3, r0
 8017970:	461a      	mov	r2, r3
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017976:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017978:	4618      	mov	r0, r3
 801797a:	f7f7 ff47 	bl	800f80c <lwip_htons>
 801797e:	4603      	mov	r3, r0
 8017980:	461a      	mov	r2, r3
 8017982:	693b      	ldr	r3, [r7, #16]
 8017984:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017986:	693b      	ldr	r3, [r7, #16]
 8017988:	2200      	movs	r2, #0
 801798a:	741a      	strb	r2, [r3, #16]
 801798c:	2200      	movs	r2, #0
 801798e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	2200      	movs	r2, #0
 8017994:	749a      	strb	r2, [r3, #18]
 8017996:	2200      	movs	r2, #0
 8017998:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801799a:	697b      	ldr	r3, [r7, #20]
}
 801799c:	4618      	mov	r0, r3
 801799e:	3718      	adds	r7, #24
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	08024890 	.word	0x08024890
 80179a8:	08024f68 	.word	0x08024f68
 80179ac:	080248e4 	.word	0x080248e4

080179b0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80179b0:	b5b0      	push	{r4, r5, r7, lr}
 80179b2:	b08a      	sub	sp, #40	@ 0x28
 80179b4:	af04      	add	r7, sp, #16
 80179b6:	60f8      	str	r0, [r7, #12]
 80179b8:	607b      	str	r3, [r7, #4]
 80179ba:	460b      	mov	r3, r1
 80179bc:	817b      	strh	r3, [r7, #10]
 80179be:	4613      	mov	r3, r2
 80179c0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d106      	bne.n	80179d6 <tcp_output_alloc_header+0x26>
 80179c8:	4b15      	ldr	r3, [pc, #84]	@ (8017a20 <tcp_output_alloc_header+0x70>)
 80179ca:	f240 7242 	movw	r2, #1858	@ 0x742
 80179ce:	4915      	ldr	r1, [pc, #84]	@ (8017a24 <tcp_output_alloc_header+0x74>)
 80179d0:	4815      	ldr	r0, [pc, #84]	@ (8017a28 <tcp_output_alloc_header+0x78>)
 80179d2:	f006 ff21 	bl	801e818 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	8adb      	ldrh	r3, [r3, #22]
 80179de:	68fa      	ldr	r2, [r7, #12]
 80179e0:	8b12      	ldrh	r2, [r2, #24]
 80179e2:	68f9      	ldr	r1, [r7, #12]
 80179e4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80179e6:	893d      	ldrh	r5, [r7, #8]
 80179e8:	897c      	ldrh	r4, [r7, #10]
 80179ea:	9103      	str	r1, [sp, #12]
 80179ec:	2110      	movs	r1, #16
 80179ee:	9102      	str	r1, [sp, #8]
 80179f0:	9201      	str	r2, [sp, #4]
 80179f2:	9300      	str	r3, [sp, #0]
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	462a      	mov	r2, r5
 80179f8:	4621      	mov	r1, r4
 80179fa:	f7ff ff67 	bl	80178cc <tcp_output_alloc_header_common>
 80179fe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d006      	beq.n	8017a14 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a0a:	68fa      	ldr	r2, [r7, #12]
 8017a0c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017a0e:	441a      	add	r2, r3
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017a14:	697b      	ldr	r3, [r7, #20]
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3718      	adds	r7, #24
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	08024890 	.word	0x08024890
 8017a24:	08024f98 	.word	0x08024f98
 8017a28:	080248e4 	.word	0x080248e4

08017a2c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b088      	sub	sp, #32
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	4611      	mov	r1, r2
 8017a38:	461a      	mov	r2, r3
 8017a3a:	460b      	mov	r3, r1
 8017a3c:	71fb      	strb	r3, [r7, #7]
 8017a3e:	4613      	mov	r3, r2
 8017a40:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017a42:	2300      	movs	r3, #0
 8017a44:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d106      	bne.n	8017a5a <tcp_output_fill_options+0x2e>
 8017a4c:	4b12      	ldr	r3, [pc, #72]	@ (8017a98 <tcp_output_fill_options+0x6c>)
 8017a4e:	f240 7256 	movw	r2, #1878	@ 0x756
 8017a52:	4912      	ldr	r1, [pc, #72]	@ (8017a9c <tcp_output_fill_options+0x70>)
 8017a54:	4812      	ldr	r0, [pc, #72]	@ (8017aa0 <tcp_output_fill_options+0x74>)
 8017a56:	f006 fedf 	bl	801e818 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017a60:	69bb      	ldr	r3, [r7, #24]
 8017a62:	3314      	adds	r3, #20
 8017a64:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017a66:	8bfb      	ldrh	r3, [r7, #30]
 8017a68:	009b      	lsls	r3, r3, #2
 8017a6a:	461a      	mov	r2, r3
 8017a6c:	79fb      	ldrb	r3, [r7, #7]
 8017a6e:	009b      	lsls	r3, r3, #2
 8017a70:	f003 0304 	and.w	r3, r3, #4
 8017a74:	4413      	add	r3, r2
 8017a76:	3314      	adds	r3, #20
 8017a78:	69ba      	ldr	r2, [r7, #24]
 8017a7a:	4413      	add	r3, r2
 8017a7c:	697a      	ldr	r2, [r7, #20]
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	d006      	beq.n	8017a90 <tcp_output_fill_options+0x64>
 8017a82:	4b05      	ldr	r3, [pc, #20]	@ (8017a98 <tcp_output_fill_options+0x6c>)
 8017a84:	f240 7275 	movw	r2, #1909	@ 0x775
 8017a88:	4906      	ldr	r1, [pc, #24]	@ (8017aa4 <tcp_output_fill_options+0x78>)
 8017a8a:	4805      	ldr	r0, [pc, #20]	@ (8017aa0 <tcp_output_fill_options+0x74>)
 8017a8c:	f006 fec4 	bl	801e818 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017a90:	bf00      	nop
 8017a92:	3720      	adds	r7, #32
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}
 8017a98:	08024890 	.word	0x08024890
 8017a9c:	08024fc0 	.word	0x08024fc0
 8017aa0:	080248e4 	.word	0x080248e4
 8017aa4:	08024eb8 	.word	0x08024eb8

08017aa8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b08a      	sub	sp, #40	@ 0x28
 8017aac:	af04      	add	r7, sp, #16
 8017aae:	60f8      	str	r0, [r7, #12]
 8017ab0:	60b9      	str	r1, [r7, #8]
 8017ab2:	607a      	str	r2, [r7, #4]
 8017ab4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d106      	bne.n	8017aca <tcp_output_control_segment+0x22>
 8017abc:	4b1c      	ldr	r3, [pc, #112]	@ (8017b30 <tcp_output_control_segment+0x88>)
 8017abe:	f240 7287 	movw	r2, #1927	@ 0x787
 8017ac2:	491c      	ldr	r1, [pc, #112]	@ (8017b34 <tcp_output_control_segment+0x8c>)
 8017ac4:	481c      	ldr	r0, [pc, #112]	@ (8017b38 <tcp_output_control_segment+0x90>)
 8017ac6:	f006 fea7 	bl	801e818 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017aca:	683a      	ldr	r2, [r7, #0]
 8017acc:	6879      	ldr	r1, [r7, #4]
 8017ace:	68f8      	ldr	r0, [r7, #12]
 8017ad0:	f7fe faea 	bl	80160a8 <tcp_route>
 8017ad4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d102      	bne.n	8017ae2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017adc:	23fc      	movs	r3, #252	@ 0xfc
 8017ade:	75fb      	strb	r3, [r7, #23]
 8017ae0:	e01c      	b.n	8017b1c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d006      	beq.n	8017af6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	7adb      	ldrb	r3, [r3, #11]
 8017aec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	7a9b      	ldrb	r3, [r3, #10]
 8017af2:	757b      	strb	r3, [r7, #21]
 8017af4:	e003      	b.n	8017afe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017af6:	23ff      	movs	r3, #255	@ 0xff
 8017af8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017afa:	2300      	movs	r3, #0
 8017afc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017afe:	7dba      	ldrb	r2, [r7, #22]
 8017b00:	693b      	ldr	r3, [r7, #16]
 8017b02:	9302      	str	r3, [sp, #8]
 8017b04:	2306      	movs	r3, #6
 8017b06:	9301      	str	r3, [sp, #4]
 8017b08:	7d7b      	ldrb	r3, [r7, #21]
 8017b0a:	9300      	str	r3, [sp, #0]
 8017b0c:	4613      	mov	r3, r2
 8017b0e:	683a      	ldr	r2, [r7, #0]
 8017b10:	6879      	ldr	r1, [r7, #4]
 8017b12:	68b8      	ldr	r0, [r7, #8]
 8017b14:	f004 fa64 	bl	801bfe0 <ip4_output_if>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017b1c:	68b8      	ldr	r0, [r7, #8]
 8017b1e:	f7f9 fd93 	bl	8011648 <pbuf_free>
  return err;
 8017b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3718      	adds	r7, #24
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	08024890 	.word	0x08024890
 8017b34:	08024fe8 	.word	0x08024fe8
 8017b38:	080248e4 	.word	0x080248e4

08017b3c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017b3c:	b590      	push	{r4, r7, lr}
 8017b3e:	b08b      	sub	sp, #44	@ 0x2c
 8017b40:	af04      	add	r7, sp, #16
 8017b42:	60f8      	str	r0, [r7, #12]
 8017b44:	60b9      	str	r1, [r7, #8]
 8017b46:	607a      	str	r2, [r7, #4]
 8017b48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d106      	bne.n	8017b5e <tcp_rst+0x22>
 8017b50:	4b1f      	ldr	r3, [pc, #124]	@ (8017bd0 <tcp_rst+0x94>)
 8017b52:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017b56:	491f      	ldr	r1, [pc, #124]	@ (8017bd4 <tcp_rst+0x98>)
 8017b58:	481f      	ldr	r0, [pc, #124]	@ (8017bd8 <tcp_rst+0x9c>)
 8017b5a:	f006 fe5d 	bl	801e818 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d106      	bne.n	8017b72 <tcp_rst+0x36>
 8017b64:	4b1a      	ldr	r3, [pc, #104]	@ (8017bd0 <tcp_rst+0x94>)
 8017b66:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017b6a:	491c      	ldr	r1, [pc, #112]	@ (8017bdc <tcp_rst+0xa0>)
 8017b6c:	481a      	ldr	r0, [pc, #104]	@ (8017bd8 <tcp_rst+0x9c>)
 8017b6e:	f006 fe53 	bl	801e818 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017b72:	2300      	movs	r3, #0
 8017b74:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017b76:	f246 0308 	movw	r3, #24584	@ 0x6008
 8017b7a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017b7c:	7dfb      	ldrb	r3, [r7, #23]
 8017b7e:	b29c      	uxth	r4, r3
 8017b80:	68b8      	ldr	r0, [r7, #8]
 8017b82:	f7f7 fe58 	bl	800f836 <lwip_htonl>
 8017b86:	4602      	mov	r2, r0
 8017b88:	8abb      	ldrh	r3, [r7, #20]
 8017b8a:	9303      	str	r3, [sp, #12]
 8017b8c:	2314      	movs	r3, #20
 8017b8e:	9302      	str	r3, [sp, #8]
 8017b90:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017b92:	9301      	str	r3, [sp, #4]
 8017b94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017b96:	9300      	str	r3, [sp, #0]
 8017b98:	4613      	mov	r3, r2
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	4621      	mov	r1, r4
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f7ff fe94 	bl	80178cc <tcp_output_alloc_header_common>
 8017ba4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d00c      	beq.n	8017bc6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017bac:	7dfb      	ldrb	r3, [r7, #23]
 8017bae:	2200      	movs	r2, #0
 8017bb0:	6939      	ldr	r1, [r7, #16]
 8017bb2:	68f8      	ldr	r0, [r7, #12]
 8017bb4:	f7ff ff3a 	bl	8017a2c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bba:	683a      	ldr	r2, [r7, #0]
 8017bbc:	6939      	ldr	r1, [r7, #16]
 8017bbe:	68f8      	ldr	r0, [r7, #12]
 8017bc0:	f7ff ff72 	bl	8017aa8 <tcp_output_control_segment>
 8017bc4:	e000      	b.n	8017bc8 <tcp_rst+0x8c>
    return;
 8017bc6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017bc8:	371c      	adds	r7, #28
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd90      	pop	{r4, r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	08024890 	.word	0x08024890
 8017bd4:	08025014 	.word	0x08025014
 8017bd8:	080248e4 	.word	0x080248e4
 8017bdc:	08025030 	.word	0x08025030

08017be0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017be0:	b590      	push	{r4, r7, lr}
 8017be2:	b087      	sub	sp, #28
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017be8:	2300      	movs	r3, #0
 8017bea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017bec:	2300      	movs	r3, #0
 8017bee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d106      	bne.n	8017c04 <tcp_send_empty_ack+0x24>
 8017bf6:	4b28      	ldr	r3, [pc, #160]	@ (8017c98 <tcp_send_empty_ack+0xb8>)
 8017bf8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017bfc:	4927      	ldr	r1, [pc, #156]	@ (8017c9c <tcp_send_empty_ack+0xbc>)
 8017bfe:	4828      	ldr	r0, [pc, #160]	@ (8017ca0 <tcp_send_empty_ack+0xc0>)
 8017c00:	f006 fe0a 	bl	801e818 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017c04:	7dfb      	ldrb	r3, [r7, #23]
 8017c06:	009b      	lsls	r3, r3, #2
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	f003 0304 	and.w	r3, r3, #4
 8017c0e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017c10:	7d7b      	ldrb	r3, [r7, #21]
 8017c12:	b29c      	uxth	r4, r3
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f7f7 fe0c 	bl	800f836 <lwip_htonl>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	2200      	movs	r2, #0
 8017c22:	4621      	mov	r1, r4
 8017c24:	6878      	ldr	r0, [r7, #4]
 8017c26:	f7ff fec3 	bl	80179b0 <tcp_output_alloc_header>
 8017c2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d109      	bne.n	8017c46 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	8b5b      	ldrh	r3, [r3, #26]
 8017c36:	f043 0303 	orr.w	r3, r3, #3
 8017c3a:	b29a      	uxth	r2, r3
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017c40:	f06f 0301 	mvn.w	r3, #1
 8017c44:	e023      	b.n	8017c8e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017c46:	7dbb      	ldrb	r3, [r7, #22]
 8017c48:	7dfa      	ldrb	r2, [r7, #23]
 8017c4a:	6939      	ldr	r1, [r7, #16]
 8017c4c:	6878      	ldr	r0, [r7, #4]
 8017c4e:	f7ff feed 	bl	8017a2c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017c52:	687a      	ldr	r2, [r7, #4]
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	3304      	adds	r3, #4
 8017c58:	6939      	ldr	r1, [r7, #16]
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f7ff ff24 	bl	8017aa8 <tcp_output_control_segment>
 8017c60:	4603      	mov	r3, r0
 8017c62:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d007      	beq.n	8017c7c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	8b5b      	ldrh	r3, [r3, #26]
 8017c70:	f043 0303 	orr.w	r3, r3, #3
 8017c74:	b29a      	uxth	r2, r3
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	835a      	strh	r2, [r3, #26]
 8017c7a:	e006      	b.n	8017c8a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	8b5b      	ldrh	r3, [r3, #26]
 8017c80:	f023 0303 	bic.w	r3, r3, #3
 8017c84:	b29a      	uxth	r2, r3
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017c8e:	4618      	mov	r0, r3
 8017c90:	371c      	adds	r7, #28
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd90      	pop	{r4, r7, pc}
 8017c96:	bf00      	nop
 8017c98:	08024890 	.word	0x08024890
 8017c9c:	0802504c 	.word	0x0802504c
 8017ca0:	080248e4 	.word	0x080248e4

08017ca4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017ca4:	b590      	push	{r4, r7, lr}
 8017ca6:	b087      	sub	sp, #28
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017cac:	2300      	movs	r3, #0
 8017cae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d106      	bne.n	8017cc4 <tcp_keepalive+0x20>
 8017cb6:	4b18      	ldr	r3, [pc, #96]	@ (8017d18 <tcp_keepalive+0x74>)
 8017cb8:	f640 0224 	movw	r2, #2084	@ 0x824
 8017cbc:	4917      	ldr	r1, [pc, #92]	@ (8017d1c <tcp_keepalive+0x78>)
 8017cbe:	4818      	ldr	r0, [pc, #96]	@ (8017d20 <tcp_keepalive+0x7c>)
 8017cc0:	f006 fdaa 	bl	801e818 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017cc4:	7dfb      	ldrb	r3, [r7, #23]
 8017cc6:	b29c      	uxth	r4, r3
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ccc:	3b01      	subs	r3, #1
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7f7 fdb1 	bl	800f836 <lwip_htonl>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	4621      	mov	r1, r4
 8017cda:	6878      	ldr	r0, [r7, #4]
 8017cdc:	f7ff fe68 	bl	80179b0 <tcp_output_alloc_header>
 8017ce0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017ce2:	693b      	ldr	r3, [r7, #16]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d102      	bne.n	8017cee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8017cec:	e010      	b.n	8017d10 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017cee:	7dfb      	ldrb	r3, [r7, #23]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	6939      	ldr	r1, [r7, #16]
 8017cf4:	6878      	ldr	r0, [r7, #4]
 8017cf6:	f7ff fe99 	bl	8017a2c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017cfa:	687a      	ldr	r2, [r7, #4]
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	3304      	adds	r3, #4
 8017d00:	6939      	ldr	r1, [r7, #16]
 8017d02:	6878      	ldr	r0, [r7, #4]
 8017d04:	f7ff fed0 	bl	8017aa8 <tcp_output_control_segment>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017d10:	4618      	mov	r0, r3
 8017d12:	371c      	adds	r7, #28
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd90      	pop	{r4, r7, pc}
 8017d18:	08024890 	.word	0x08024890
 8017d1c:	0802506c 	.word	0x0802506c
 8017d20:	080248e4 	.word	0x080248e4

08017d24 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017d24:	b590      	push	{r4, r7, lr}
 8017d26:	b08b      	sub	sp, #44	@ 0x2c
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d106      	bne.n	8017d46 <tcp_zero_window_probe+0x22>
 8017d38:	4b4c      	ldr	r3, [pc, #304]	@ (8017e6c <tcp_zero_window_probe+0x148>)
 8017d3a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017d3e:	494c      	ldr	r1, [pc, #304]	@ (8017e70 <tcp_zero_window_probe+0x14c>)
 8017d40:	484c      	ldr	r0, [pc, #304]	@ (8017e74 <tcp_zero_window_probe+0x150>)
 8017d42:	f006 fd69 	bl	801e818 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d4a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017d4c:	6a3b      	ldr	r3, [r7, #32]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d101      	bne.n	8017d56 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017d52:	2300      	movs	r3, #0
 8017d54:	e086      	b.n	8017e64 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017d5c:	2bff      	cmp	r3, #255	@ 0xff
 8017d5e:	d007      	beq.n	8017d70 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017d66:	3301      	adds	r3, #1
 8017d68:	b2da      	uxtb	r2, r3
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017d70:	6a3b      	ldr	r3, [r7, #32]
 8017d72:	68db      	ldr	r3, [r3, #12]
 8017d74:	899b      	ldrh	r3, [r3, #12]
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f7f7 fd47 	bl	800f80c <lwip_htons>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	b2db      	uxtb	r3, r3
 8017d82:	f003 0301 	and.w	r3, r3, #1
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d005      	beq.n	8017d96 <tcp_zero_window_probe+0x72>
 8017d8a:	6a3b      	ldr	r3, [r7, #32]
 8017d8c:	891b      	ldrh	r3, [r3, #8]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d101      	bne.n	8017d96 <tcp_zero_window_probe+0x72>
 8017d92:	2301      	movs	r3, #1
 8017d94:	e000      	b.n	8017d98 <tcp_zero_window_probe+0x74>
 8017d96:	2300      	movs	r3, #0
 8017d98:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017d9a:	7ffb      	ldrb	r3, [r7, #31]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	bf0c      	ite	eq
 8017da0:	2301      	moveq	r3, #1
 8017da2:	2300      	movne	r3, #0
 8017da4:	b2db      	uxtb	r3, r3
 8017da6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017dac:	b299      	uxth	r1, r3
 8017dae:	6a3b      	ldr	r3, [r7, #32]
 8017db0:	68db      	ldr	r3, [r3, #12]
 8017db2:	685b      	ldr	r3, [r3, #4]
 8017db4:	8bba      	ldrh	r2, [r7, #28]
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f7ff fdfa 	bl	80179b0 <tcp_output_alloc_header>
 8017dbc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017dbe:	69bb      	ldr	r3, [r7, #24]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d102      	bne.n	8017dca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8017dc8:	e04c      	b.n	8017e64 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017dca:	69bb      	ldr	r3, [r7, #24]
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017dd0:	7ffb      	ldrb	r3, [r7, #31]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d011      	beq.n	8017dfa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017dd6:	697b      	ldr	r3, [r7, #20]
 8017dd8:	899b      	ldrh	r3, [r3, #12]
 8017dda:	b29b      	uxth	r3, r3
 8017ddc:	b21b      	sxth	r3, r3
 8017dde:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017de2:	b21c      	sxth	r4, r3
 8017de4:	2011      	movs	r0, #17
 8017de6:	f7f7 fd11 	bl	800f80c <lwip_htons>
 8017dea:	4603      	mov	r3, r0
 8017dec:	b21b      	sxth	r3, r3
 8017dee:	4323      	orrs	r3, r4
 8017df0:	b21b      	sxth	r3, r3
 8017df2:	b29a      	uxth	r2, r3
 8017df4:	697b      	ldr	r3, [r7, #20]
 8017df6:	819a      	strh	r2, [r3, #12]
 8017df8:	e010      	b.n	8017e1c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017dfa:	69bb      	ldr	r3, [r7, #24]
 8017dfc:	685b      	ldr	r3, [r3, #4]
 8017dfe:	3314      	adds	r3, #20
 8017e00:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017e02:	6a3b      	ldr	r3, [r7, #32]
 8017e04:	6858      	ldr	r0, [r3, #4]
 8017e06:	6a3b      	ldr	r3, [r7, #32]
 8017e08:	685b      	ldr	r3, [r3, #4]
 8017e0a:	891a      	ldrh	r2, [r3, #8]
 8017e0c:	6a3b      	ldr	r3, [r7, #32]
 8017e0e:	891b      	ldrh	r3, [r3, #8]
 8017e10:	1ad3      	subs	r3, r2, r3
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	2201      	movs	r2, #1
 8017e16:	6939      	ldr	r1, [r7, #16]
 8017e18:	f7f9 fe1c 	bl	8011a54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017e1c:	6a3b      	ldr	r3, [r7, #32]
 8017e1e:	68db      	ldr	r3, [r3, #12]
 8017e20:	685b      	ldr	r3, [r3, #4]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7f7 fd07 	bl	800f836 <lwip_htonl>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	3301      	adds	r3, #1
 8017e2c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	1ad3      	subs	r3, r2, r3
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	da02      	bge.n	8017e40 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	68fa      	ldr	r2, [r7, #12]
 8017e3e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e44:	2200      	movs	r2, #0
 8017e46:	69b9      	ldr	r1, [r7, #24]
 8017e48:	6878      	ldr	r0, [r7, #4]
 8017e4a:	f7ff fdef 	bl	8017a2c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017e4e:	687a      	ldr	r2, [r7, #4]
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	3304      	adds	r3, #4
 8017e54:	69b9      	ldr	r1, [r7, #24]
 8017e56:	6878      	ldr	r0, [r7, #4]
 8017e58:	f7ff fe26 	bl	8017aa8 <tcp_output_control_segment>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017e60:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	372c      	adds	r7, #44	@ 0x2c
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd90      	pop	{r4, r7, pc}
 8017e6c:	08024890 	.word	0x08024890
 8017e70:	08025088 	.word	0x08025088
 8017e74:	080248e4 	.word	0x080248e4

08017e78 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b082      	sub	sp, #8
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017e80:	f7fa f830 	bl	8011ee4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017e84:	4b0a      	ldr	r3, [pc, #40]	@ (8017eb0 <tcpip_tcp_timer+0x38>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d103      	bne.n	8017e94 <tcpip_tcp_timer+0x1c>
 8017e8c:	4b09      	ldr	r3, [pc, #36]	@ (8017eb4 <tcpip_tcp_timer+0x3c>)
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d005      	beq.n	8017ea0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017e94:	2200      	movs	r2, #0
 8017e96:	4908      	ldr	r1, [pc, #32]	@ (8017eb8 <tcpip_tcp_timer+0x40>)
 8017e98:	20fa      	movs	r0, #250	@ 0xfa
 8017e9a:	f000 f8f3 	bl	8018084 <sys_timeout>
 8017e9e:	e003      	b.n	8017ea8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017ea0:	4b06      	ldr	r3, [pc, #24]	@ (8017ebc <tcpip_tcp_timer+0x44>)
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	601a      	str	r2, [r3, #0]
  }
}
 8017ea6:	bf00      	nop
 8017ea8:	bf00      	nop
 8017eaa:	3708      	adds	r7, #8
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}
 8017eb0:	2000f490 	.word	0x2000f490
 8017eb4:	2000f494 	.word	0x2000f494
 8017eb8:	08017e79 	.word	0x08017e79
 8017ebc:	2000f4dc 	.word	0x2000f4dc

08017ec0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8017ef0 <tcp_timer_needed+0x30>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d10f      	bne.n	8017eec <tcp_timer_needed+0x2c>
 8017ecc:	4b09      	ldr	r3, [pc, #36]	@ (8017ef4 <tcp_timer_needed+0x34>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d103      	bne.n	8017edc <tcp_timer_needed+0x1c>
 8017ed4:	4b08      	ldr	r3, [pc, #32]	@ (8017ef8 <tcp_timer_needed+0x38>)
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d007      	beq.n	8017eec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017edc:	4b04      	ldr	r3, [pc, #16]	@ (8017ef0 <tcp_timer_needed+0x30>)
 8017ede:	2201      	movs	r2, #1
 8017ee0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	4905      	ldr	r1, [pc, #20]	@ (8017efc <tcp_timer_needed+0x3c>)
 8017ee6:	20fa      	movs	r0, #250	@ 0xfa
 8017ee8:	f000 f8cc 	bl	8018084 <sys_timeout>
  }
}
 8017eec:	bf00      	nop
 8017eee:	bd80      	pop	{r7, pc}
 8017ef0:	2000f4dc 	.word	0x2000f4dc
 8017ef4:	2000f490 	.word	0x2000f490
 8017ef8:	2000f494 	.word	0x2000f494
 8017efc:	08017e79 	.word	0x08017e79

08017f00 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b086      	sub	sp, #24
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	60f8      	str	r0, [r7, #12]
 8017f08:	60b9      	str	r1, [r7, #8]
 8017f0a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017f0c:	200a      	movs	r0, #10
 8017f0e:	f7f8 fc43 	bl	8010798 <memp_malloc>
 8017f12:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d109      	bne.n	8017f2e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017f1a:	693b      	ldr	r3, [r7, #16]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d151      	bne.n	8017fc4 <sys_timeout_abs+0xc4>
 8017f20:	4b2a      	ldr	r3, [pc, #168]	@ (8017fcc <sys_timeout_abs+0xcc>)
 8017f22:	22be      	movs	r2, #190	@ 0xbe
 8017f24:	492a      	ldr	r1, [pc, #168]	@ (8017fd0 <sys_timeout_abs+0xd0>)
 8017f26:	482b      	ldr	r0, [pc, #172]	@ (8017fd4 <sys_timeout_abs+0xd4>)
 8017f28:	f006 fc76 	bl	801e818 <iprintf>
    return;
 8017f2c:	e04a      	b.n	8017fc4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	2200      	movs	r2, #0
 8017f32:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	68ba      	ldr	r2, [r7, #8]
 8017f38:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017f3a:	693b      	ldr	r3, [r7, #16]
 8017f3c:	687a      	ldr	r2, [r7, #4]
 8017f3e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	68fa      	ldr	r2, [r7, #12]
 8017f44:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017f46:	4b24      	ldr	r3, [pc, #144]	@ (8017fd8 <sys_timeout_abs+0xd8>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d103      	bne.n	8017f56 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017f4e:	4a22      	ldr	r2, [pc, #136]	@ (8017fd8 <sys_timeout_abs+0xd8>)
 8017f50:	693b      	ldr	r3, [r7, #16]
 8017f52:	6013      	str	r3, [r2, #0]
    return;
 8017f54:	e037      	b.n	8017fc6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	685a      	ldr	r2, [r3, #4]
 8017f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8017fd8 <sys_timeout_abs+0xd8>)
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	685b      	ldr	r3, [r3, #4]
 8017f60:	1ad3      	subs	r3, r2, r3
 8017f62:	0fdb      	lsrs	r3, r3, #31
 8017f64:	f003 0301 	and.w	r3, r3, #1
 8017f68:	b2db      	uxtb	r3, r3
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d007      	beq.n	8017f7e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8017fd8 <sys_timeout_abs+0xd8>)
 8017f70:	681a      	ldr	r2, [r3, #0]
 8017f72:	693b      	ldr	r3, [r7, #16]
 8017f74:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017f76:	4a18      	ldr	r2, [pc, #96]	@ (8017fd8 <sys_timeout_abs+0xd8>)
 8017f78:	693b      	ldr	r3, [r7, #16]
 8017f7a:	6013      	str	r3, [r2, #0]
 8017f7c:	e023      	b.n	8017fc6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017f7e:	4b16      	ldr	r3, [pc, #88]	@ (8017fd8 <sys_timeout_abs+0xd8>)
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	617b      	str	r3, [r7, #20]
 8017f84:	e01a      	b.n	8017fbc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017f86:	697b      	ldr	r3, [r7, #20]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d00b      	beq.n	8017fa6 <sys_timeout_abs+0xa6>
 8017f8e:	693b      	ldr	r3, [r7, #16]
 8017f90:	685a      	ldr	r2, [r3, #4]
 8017f92:	697b      	ldr	r3, [r7, #20]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	685b      	ldr	r3, [r3, #4]
 8017f98:	1ad3      	subs	r3, r2, r3
 8017f9a:	0fdb      	lsrs	r3, r3, #31
 8017f9c:	f003 0301 	and.w	r3, r3, #1
 8017fa0:	b2db      	uxtb	r3, r3
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d007      	beq.n	8017fb6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017fa6:	697b      	ldr	r3, [r7, #20]
 8017fa8:	681a      	ldr	r2, [r3, #0]
 8017faa:	693b      	ldr	r3, [r7, #16]
 8017fac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017fae:	697b      	ldr	r3, [r7, #20]
 8017fb0:	693a      	ldr	r2, [r7, #16]
 8017fb2:	601a      	str	r2, [r3, #0]
        break;
 8017fb4:	e007      	b.n	8017fc6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017fb6:	697b      	ldr	r3, [r7, #20]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	617b      	str	r3, [r7, #20]
 8017fbc:	697b      	ldr	r3, [r7, #20]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d1e1      	bne.n	8017f86 <sys_timeout_abs+0x86>
 8017fc2:	e000      	b.n	8017fc6 <sys_timeout_abs+0xc6>
    return;
 8017fc4:	bf00      	nop
      }
    }
  }
}
 8017fc6:	3718      	adds	r7, #24
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}
 8017fcc:	080250ac 	.word	0x080250ac
 8017fd0:	080250e0 	.word	0x080250e0
 8017fd4:	08025120 	.word	0x08025120
 8017fd8:	2000f4d4 	.word	0x2000f4d4

08017fdc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b086      	sub	sp, #24
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017fe8:	697b      	ldr	r3, [r7, #20]
 8017fea:	685b      	ldr	r3, [r3, #4]
 8017fec:	4798      	blx	r3

  now = sys_now();
 8017fee:	f7ef fe2f 	bl	8007c50 <sys_now>
 8017ff2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017ff4:	697b      	ldr	r3, [r7, #20]
 8017ff6:	681a      	ldr	r2, [r3, #0]
 8017ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8018038 <lwip_cyclic_timer+0x5c>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	4413      	add	r3, r2
 8017ffe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018000:	68fa      	ldr	r2, [r7, #12]
 8018002:	693b      	ldr	r3, [r7, #16]
 8018004:	1ad3      	subs	r3, r2, r3
 8018006:	0fdb      	lsrs	r3, r3, #31
 8018008:	f003 0301 	and.w	r3, r3, #1
 801800c:	b2db      	uxtb	r3, r3
 801800e:	2b00      	cmp	r3, #0
 8018010:	d009      	beq.n	8018026 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	681a      	ldr	r2, [r3, #0]
 8018016:	693b      	ldr	r3, [r7, #16]
 8018018:	4413      	add	r3, r2
 801801a:	687a      	ldr	r2, [r7, #4]
 801801c:	4907      	ldr	r1, [pc, #28]	@ (801803c <lwip_cyclic_timer+0x60>)
 801801e:	4618      	mov	r0, r3
 8018020:	f7ff ff6e 	bl	8017f00 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018024:	e004      	b.n	8018030 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018026:	687a      	ldr	r2, [r7, #4]
 8018028:	4904      	ldr	r1, [pc, #16]	@ (801803c <lwip_cyclic_timer+0x60>)
 801802a:	68f8      	ldr	r0, [r7, #12]
 801802c:	f7ff ff68 	bl	8017f00 <sys_timeout_abs>
}
 8018030:	bf00      	nop
 8018032:	3718      	adds	r7, #24
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	2000f4d8 	.word	0x2000f4d8
 801803c:	08017fdd 	.word	0x08017fdd

08018040 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b082      	sub	sp, #8
 8018044:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018046:	2301      	movs	r3, #1
 8018048:	607b      	str	r3, [r7, #4]
 801804a:	e00e      	b.n	801806a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801804c:	4a0b      	ldr	r2, [pc, #44]	@ (801807c <sys_timeouts_init+0x3c>)
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	00db      	lsls	r3, r3, #3
 8018058:	4a08      	ldr	r2, [pc, #32]	@ (801807c <sys_timeouts_init+0x3c>)
 801805a:	4413      	add	r3, r2
 801805c:	461a      	mov	r2, r3
 801805e:	4908      	ldr	r1, [pc, #32]	@ (8018080 <sys_timeouts_init+0x40>)
 8018060:	f000 f810 	bl	8018084 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	3301      	adds	r3, #1
 8018068:	607b      	str	r3, [r7, #4]
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	2b05      	cmp	r3, #5
 801806e:	d9ed      	bls.n	801804c <sys_timeouts_init+0xc>
  }
}
 8018070:	bf00      	nop
 8018072:	bf00      	nop
 8018074:	3708      	adds	r7, #8
 8018076:	46bd      	mov	sp, r7
 8018078:	bd80      	pop	{r7, pc}
 801807a:	bf00      	nop
 801807c:	08026240 	.word	0x08026240
 8018080:	08017fdd 	.word	0x08017fdd

08018084 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b086      	sub	sp, #24
 8018088:	af00      	add	r7, sp, #0
 801808a:	60f8      	str	r0, [r7, #12]
 801808c:	60b9      	str	r1, [r7, #8]
 801808e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018096:	d306      	bcc.n	80180a6 <sys_timeout+0x22>
 8018098:	4b0a      	ldr	r3, [pc, #40]	@ (80180c4 <sys_timeout+0x40>)
 801809a:	f240 1229 	movw	r2, #297	@ 0x129
 801809e:	490a      	ldr	r1, [pc, #40]	@ (80180c8 <sys_timeout+0x44>)
 80180a0:	480a      	ldr	r0, [pc, #40]	@ (80180cc <sys_timeout+0x48>)
 80180a2:	f006 fbb9 	bl	801e818 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80180a6:	f7ef fdd3 	bl	8007c50 <sys_now>
 80180aa:	4602      	mov	r2, r0
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	4413      	add	r3, r2
 80180b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80180b2:	687a      	ldr	r2, [r7, #4]
 80180b4:	68b9      	ldr	r1, [r7, #8]
 80180b6:	6978      	ldr	r0, [r7, #20]
 80180b8:	f7ff ff22 	bl	8017f00 <sys_timeout_abs>
#endif
}
 80180bc:	bf00      	nop
 80180be:	3718      	adds	r7, #24
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	080250ac 	.word	0x080250ac
 80180c8:	08025148 	.word	0x08025148
 80180cc:	08025120 	.word	0x08025120

080180d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b084      	sub	sp, #16
 80180d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80180d6:	f7ef fdbb 	bl	8007c50 <sys_now>
 80180da:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80180dc:	4b17      	ldr	r3, [pc, #92]	@ (801813c <sys_check_timeouts+0x6c>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80180e2:	68bb      	ldr	r3, [r7, #8]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d022      	beq.n	801812e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	68fa      	ldr	r2, [r7, #12]
 80180ee:	1ad3      	subs	r3, r2, r3
 80180f0:	0fdb      	lsrs	r3, r3, #31
 80180f2:	f003 0301 	and.w	r3, r3, #1
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d11a      	bne.n	8018132 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80180fc:	68bb      	ldr	r3, [r7, #8]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	4a0e      	ldr	r2, [pc, #56]	@ (801813c <sys_check_timeouts+0x6c>)
 8018102:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	689b      	ldr	r3, [r3, #8]
 8018108:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801810a:	68bb      	ldr	r3, [r7, #8]
 801810c:	68db      	ldr	r3, [r3, #12]
 801810e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	4a0a      	ldr	r2, [pc, #40]	@ (8018140 <sys_check_timeouts+0x70>)
 8018116:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018118:	68b9      	ldr	r1, [r7, #8]
 801811a:	200a      	movs	r0, #10
 801811c:	f7f8 fbb2 	bl	8010884 <memp_free>
    if (handler != NULL) {
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d0da      	beq.n	80180dc <sys_check_timeouts+0xc>
      handler(arg);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	6838      	ldr	r0, [r7, #0]
 801812a:	4798      	blx	r3
  do {
 801812c:	e7d6      	b.n	80180dc <sys_check_timeouts+0xc>
      return;
 801812e:	bf00      	nop
 8018130:	e000      	b.n	8018134 <sys_check_timeouts+0x64>
      return;
 8018132:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018134:	3710      	adds	r7, #16
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}
 801813a:	bf00      	nop
 801813c:	2000f4d4 	.word	0x2000f4d4
 8018140:	2000f4d8 	.word	0x2000f4d8

08018144 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018144:	b580      	push	{r7, lr}
 8018146:	b082      	sub	sp, #8
 8018148:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801814a:	4b16      	ldr	r3, [pc, #88]	@ (80181a4 <sys_timeouts_sleeptime+0x60>)
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d102      	bne.n	8018158 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018152:	f04f 33ff 	mov.w	r3, #4294967295
 8018156:	e020      	b.n	801819a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018158:	f7ef fd7a 	bl	8007c50 <sys_now>
 801815c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801815e:	4b11      	ldr	r3, [pc, #68]	@ (80181a4 <sys_timeouts_sleeptime+0x60>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	685a      	ldr	r2, [r3, #4]
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	1ad3      	subs	r3, r2, r3
 8018168:	0fdb      	lsrs	r3, r3, #31
 801816a:	f003 0301 	and.w	r3, r3, #1
 801816e:	b2db      	uxtb	r3, r3
 8018170:	2b00      	cmp	r3, #0
 8018172:	d001      	beq.n	8018178 <sys_timeouts_sleeptime+0x34>
    return 0;
 8018174:	2300      	movs	r3, #0
 8018176:	e010      	b.n	801819a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018178:	4b0a      	ldr	r3, [pc, #40]	@ (80181a4 <sys_timeouts_sleeptime+0x60>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	685a      	ldr	r2, [r3, #4]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	1ad3      	subs	r3, r2, r3
 8018182:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	2b00      	cmp	r3, #0
 8018188:	da06      	bge.n	8018198 <sys_timeouts_sleeptime+0x54>
 801818a:	4b07      	ldr	r3, [pc, #28]	@ (80181a8 <sys_timeouts_sleeptime+0x64>)
 801818c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8018190:	4906      	ldr	r1, [pc, #24]	@ (80181ac <sys_timeouts_sleeptime+0x68>)
 8018192:	4807      	ldr	r0, [pc, #28]	@ (80181b0 <sys_timeouts_sleeptime+0x6c>)
 8018194:	f006 fb40 	bl	801e818 <iprintf>
    return ret;
 8018198:	683b      	ldr	r3, [r7, #0]
  }
}
 801819a:	4618      	mov	r0, r3
 801819c:	3708      	adds	r7, #8
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}
 80181a2:	bf00      	nop
 80181a4:	2000f4d4 	.word	0x2000f4d4
 80181a8:	080250ac 	.word	0x080250ac
 80181ac:	08025180 	.word	0x08025180
 80181b0:	08025120 	.word	0x08025120

080181b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80181b8:	f005 fa3a 	bl	801d630 <rand>
 80181bc:	4603      	mov	r3, r0
 80181be:	b29b      	uxth	r3, r3
 80181c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80181ca:	b29a      	uxth	r2, r3
 80181cc:	4b01      	ldr	r3, [pc, #4]	@ (80181d4 <udp_init+0x20>)
 80181ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80181d0:	bf00      	nop
 80181d2:	bd80      	pop	{r7, pc}
 80181d4:	20000040 	.word	0x20000040

080181d8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80181d8:	b480      	push	{r7}
 80181da:	b083      	sub	sp, #12
 80181dc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80181de:	2300      	movs	r3, #0
 80181e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80181e2:	4b17      	ldr	r3, [pc, #92]	@ (8018240 <udp_new_port+0x68>)
 80181e4:	881b      	ldrh	r3, [r3, #0]
 80181e6:	1c5a      	adds	r2, r3, #1
 80181e8:	b291      	uxth	r1, r2
 80181ea:	4a15      	ldr	r2, [pc, #84]	@ (8018240 <udp_new_port+0x68>)
 80181ec:	8011      	strh	r1, [r2, #0]
 80181ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80181f2:	4293      	cmp	r3, r2
 80181f4:	d103      	bne.n	80181fe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80181f6:	4b12      	ldr	r3, [pc, #72]	@ (8018240 <udp_new_port+0x68>)
 80181f8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80181fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80181fe:	4b11      	ldr	r3, [pc, #68]	@ (8018244 <udp_new_port+0x6c>)
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	603b      	str	r3, [r7, #0]
 8018204:	e011      	b.n	801822a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8018206:	683b      	ldr	r3, [r7, #0]
 8018208:	8a5a      	ldrh	r2, [r3, #18]
 801820a:	4b0d      	ldr	r3, [pc, #52]	@ (8018240 <udp_new_port+0x68>)
 801820c:	881b      	ldrh	r3, [r3, #0]
 801820e:	429a      	cmp	r2, r3
 8018210:	d108      	bne.n	8018224 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8018212:	88fb      	ldrh	r3, [r7, #6]
 8018214:	3301      	adds	r3, #1
 8018216:	80fb      	strh	r3, [r7, #6]
 8018218:	88fb      	ldrh	r3, [r7, #6]
 801821a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801821e:	d3e0      	bcc.n	80181e2 <udp_new_port+0xa>
        return 0;
 8018220:	2300      	movs	r3, #0
 8018222:	e007      	b.n	8018234 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	68db      	ldr	r3, [r3, #12]
 8018228:	603b      	str	r3, [r7, #0]
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d1ea      	bne.n	8018206 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8018230:	4b03      	ldr	r3, [pc, #12]	@ (8018240 <udp_new_port+0x68>)
 8018232:	881b      	ldrh	r3, [r3, #0]
}
 8018234:	4618      	mov	r0, r3
 8018236:	370c      	adds	r7, #12
 8018238:	46bd      	mov	sp, r7
 801823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823e:	4770      	bx	lr
 8018240:	20000040 	.word	0x20000040
 8018244:	2000f4e0 	.word	0x2000f4e0

08018248 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b084      	sub	sp, #16
 801824c:	af00      	add	r7, sp, #0
 801824e:	60f8      	str	r0, [r7, #12]
 8018250:	60b9      	str	r1, [r7, #8]
 8018252:	4613      	mov	r3, r2
 8018254:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d105      	bne.n	8018268 <udp_input_local_match+0x20>
 801825c:	4b27      	ldr	r3, [pc, #156]	@ (80182fc <udp_input_local_match+0xb4>)
 801825e:	2287      	movs	r2, #135	@ 0x87
 8018260:	4927      	ldr	r1, [pc, #156]	@ (8018300 <udp_input_local_match+0xb8>)
 8018262:	4828      	ldr	r0, [pc, #160]	@ (8018304 <udp_input_local_match+0xbc>)
 8018264:	f006 fad8 	bl	801e818 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d105      	bne.n	801827a <udp_input_local_match+0x32>
 801826e:	4b23      	ldr	r3, [pc, #140]	@ (80182fc <udp_input_local_match+0xb4>)
 8018270:	2288      	movs	r2, #136	@ 0x88
 8018272:	4925      	ldr	r1, [pc, #148]	@ (8018308 <udp_input_local_match+0xc0>)
 8018274:	4823      	ldr	r0, [pc, #140]	@ (8018304 <udp_input_local_match+0xbc>)
 8018276:	f006 facf 	bl	801e818 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	7a1b      	ldrb	r3, [r3, #8]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d00b      	beq.n	801829a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	7a1a      	ldrb	r2, [r3, #8]
 8018286:	4b21      	ldr	r3, [pc, #132]	@ (801830c <udp_input_local_match+0xc4>)
 8018288:	685b      	ldr	r3, [r3, #4]
 801828a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801828e:	3301      	adds	r3, #1
 8018290:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018292:	429a      	cmp	r2, r3
 8018294:	d001      	beq.n	801829a <udp_input_local_match+0x52>
    return 0;
 8018296:	2300      	movs	r3, #0
 8018298:	e02b      	b.n	80182f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801829a:	79fb      	ldrb	r3, [r7, #7]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d018      	beq.n	80182d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d013      	beq.n	80182ce <udp_input_local_match+0x86>
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d00f      	beq.n	80182ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80182ae:	4b17      	ldr	r3, [pc, #92]	@ (801830c <udp_input_local_match+0xc4>)
 80182b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182b6:	d00a      	beq.n	80182ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	681a      	ldr	r2, [r3, #0]
 80182bc:	4b13      	ldr	r3, [pc, #76]	@ (801830c <udp_input_local_match+0xc4>)
 80182be:	695b      	ldr	r3, [r3, #20]
 80182c0:	405a      	eors	r2, r3
 80182c2:	68bb      	ldr	r3, [r7, #8]
 80182c4:	3308      	adds	r3, #8
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d110      	bne.n	80182f0 <udp_input_local_match+0xa8>
          return 1;
 80182ce:	2301      	movs	r3, #1
 80182d0:	e00f      	b.n	80182f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d009      	beq.n	80182ec <udp_input_local_match+0xa4>
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d005      	beq.n	80182ec <udp_input_local_match+0xa4>
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	681a      	ldr	r2, [r3, #0]
 80182e4:	4b09      	ldr	r3, [pc, #36]	@ (801830c <udp_input_local_match+0xc4>)
 80182e6:	695b      	ldr	r3, [r3, #20]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d101      	bne.n	80182f0 <udp_input_local_match+0xa8>
        return 1;
 80182ec:	2301      	movs	r3, #1
 80182ee:	e000      	b.n	80182f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80182f0:	2300      	movs	r3, #0
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3710      	adds	r7, #16
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}
 80182fa:	bf00      	nop
 80182fc:	08025194 	.word	0x08025194
 8018300:	080251c4 	.word	0x080251c4
 8018304:	080251e8 	.word	0x080251e8
 8018308:	08025210 	.word	0x08025210
 801830c:	2000bbc4 	.word	0x2000bbc4

08018310 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018310:	b590      	push	{r4, r7, lr}
 8018312:	b08d      	sub	sp, #52	@ 0x34
 8018314:	af02      	add	r7, sp, #8
 8018316:	6078      	str	r0, [r7, #4]
 8018318:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801831a:	2300      	movs	r3, #0
 801831c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d105      	bne.n	8018330 <udp_input+0x20>
 8018324:	4b7c      	ldr	r3, [pc, #496]	@ (8018518 <udp_input+0x208>)
 8018326:	22cf      	movs	r2, #207	@ 0xcf
 8018328:	497c      	ldr	r1, [pc, #496]	@ (801851c <udp_input+0x20c>)
 801832a:	487d      	ldr	r0, [pc, #500]	@ (8018520 <udp_input+0x210>)
 801832c:	f006 fa74 	bl	801e818 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018330:	683b      	ldr	r3, [r7, #0]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d105      	bne.n	8018342 <udp_input+0x32>
 8018336:	4b78      	ldr	r3, [pc, #480]	@ (8018518 <udp_input+0x208>)
 8018338:	22d0      	movs	r2, #208	@ 0xd0
 801833a:	497a      	ldr	r1, [pc, #488]	@ (8018524 <udp_input+0x214>)
 801833c:	4878      	ldr	r0, [pc, #480]	@ (8018520 <udp_input+0x210>)
 801833e:	f006 fa6b 	bl	801e818 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	895b      	ldrh	r3, [r3, #10]
 8018346:	2b07      	cmp	r3, #7
 8018348:	d803      	bhi.n	8018352 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7f9 f97c 	bl	8011648 <pbuf_free>
    goto end;
 8018350:	e0de      	b.n	8018510 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	685b      	ldr	r3, [r3, #4]
 8018356:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018358:	4b73      	ldr	r3, [pc, #460]	@ (8018528 <udp_input+0x218>)
 801835a:	695b      	ldr	r3, [r3, #20]
 801835c:	4a72      	ldr	r2, [pc, #456]	@ (8018528 <udp_input+0x218>)
 801835e:	6812      	ldr	r2, [r2, #0]
 8018360:	4611      	mov	r1, r2
 8018362:	4618      	mov	r0, r3
 8018364:	f003 ff14 	bl	801c190 <ip4_addr_isbroadcast_u32>
 8018368:	4603      	mov	r3, r0
 801836a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801836c:	697b      	ldr	r3, [r7, #20]
 801836e:	881b      	ldrh	r3, [r3, #0]
 8018370:	b29b      	uxth	r3, r3
 8018372:	4618      	mov	r0, r3
 8018374:	f7f7 fa4a 	bl	800f80c <lwip_htons>
 8018378:	4603      	mov	r3, r0
 801837a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801837c:	697b      	ldr	r3, [r7, #20]
 801837e:	885b      	ldrh	r3, [r3, #2]
 8018380:	b29b      	uxth	r3, r3
 8018382:	4618      	mov	r0, r3
 8018384:	f7f7 fa42 	bl	800f80c <lwip_htons>
 8018388:	4603      	mov	r3, r0
 801838a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801838c:	2300      	movs	r3, #0
 801838e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8018390:	2300      	movs	r3, #0
 8018392:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018394:	2300      	movs	r3, #0
 8018396:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018398:	4b64      	ldr	r3, [pc, #400]	@ (801852c <udp_input+0x21c>)
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	627b      	str	r3, [r7, #36]	@ 0x24
 801839e:	e054      	b.n	801844a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80183a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183a2:	8a5b      	ldrh	r3, [r3, #18]
 80183a4:	89fa      	ldrh	r2, [r7, #14]
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d14a      	bne.n	8018440 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80183aa:	7cfb      	ldrb	r3, [r7, #19]
 80183ac:	461a      	mov	r2, r3
 80183ae:	6839      	ldr	r1, [r7, #0]
 80183b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80183b2:	f7ff ff49 	bl	8018248 <udp_input_local_match>
 80183b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d041      	beq.n	8018440 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80183bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183be:	7c1b      	ldrb	r3, [r3, #16]
 80183c0:	f003 0304 	and.w	r3, r3, #4
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d11d      	bne.n	8018404 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80183c8:	69fb      	ldr	r3, [r7, #28]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d102      	bne.n	80183d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80183ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183d0:	61fb      	str	r3, [r7, #28]
 80183d2:	e017      	b.n	8018404 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80183d4:	7cfb      	ldrb	r3, [r7, #19]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d014      	beq.n	8018404 <udp_input+0xf4>
 80183da:	4b53      	ldr	r3, [pc, #332]	@ (8018528 <udp_input+0x218>)
 80183dc:	695b      	ldr	r3, [r3, #20]
 80183de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183e2:	d10f      	bne.n	8018404 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80183e4:	69fb      	ldr	r3, [r7, #28]
 80183e6:	681a      	ldr	r2, [r3, #0]
 80183e8:	683b      	ldr	r3, [r7, #0]
 80183ea:	3304      	adds	r3, #4
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d008      	beq.n	8018404 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80183f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183f4:	681a      	ldr	r2, [r3, #0]
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	3304      	adds	r3, #4
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	429a      	cmp	r2, r3
 80183fe:	d101      	bne.n	8018404 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018402:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018406:	8a9b      	ldrh	r3, [r3, #20]
 8018408:	8a3a      	ldrh	r2, [r7, #16]
 801840a:	429a      	cmp	r2, r3
 801840c:	d118      	bne.n	8018440 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018410:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018412:	2b00      	cmp	r3, #0
 8018414:	d005      	beq.n	8018422 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018418:	685a      	ldr	r2, [r3, #4]
 801841a:	4b43      	ldr	r3, [pc, #268]	@ (8018528 <udp_input+0x218>)
 801841c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801841e:	429a      	cmp	r2, r3
 8018420:	d10e      	bne.n	8018440 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018422:	6a3b      	ldr	r3, [r7, #32]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d014      	beq.n	8018452 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801842a:	68da      	ldr	r2, [r3, #12]
 801842c:	6a3b      	ldr	r3, [r7, #32]
 801842e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018430:	4b3e      	ldr	r3, [pc, #248]	@ (801852c <udp_input+0x21c>)
 8018432:	681a      	ldr	r2, [r3, #0]
 8018434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018436:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018438:	4a3c      	ldr	r2, [pc, #240]	@ (801852c <udp_input+0x21c>)
 801843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801843c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801843e:	e008      	b.n	8018452 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018442:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018446:	68db      	ldr	r3, [r3, #12]
 8018448:	627b      	str	r3, [r7, #36]	@ 0x24
 801844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801844c:	2b00      	cmp	r3, #0
 801844e:	d1a7      	bne.n	80183a0 <udp_input+0x90>
 8018450:	e000      	b.n	8018454 <udp_input+0x144>
        break;
 8018452:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018456:	2b00      	cmp	r3, #0
 8018458:	d101      	bne.n	801845e <udp_input+0x14e>
    pcb = uncon_pcb;
 801845a:	69fb      	ldr	r3, [r7, #28]
 801845c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018460:	2b00      	cmp	r3, #0
 8018462:	d002      	beq.n	801846a <udp_input+0x15a>
    for_us = 1;
 8018464:	2301      	movs	r3, #1
 8018466:	76fb      	strb	r3, [r7, #27]
 8018468:	e00a      	b.n	8018480 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801846a:	683b      	ldr	r3, [r7, #0]
 801846c:	3304      	adds	r3, #4
 801846e:	681a      	ldr	r2, [r3, #0]
 8018470:	4b2d      	ldr	r3, [pc, #180]	@ (8018528 <udp_input+0x218>)
 8018472:	695b      	ldr	r3, [r3, #20]
 8018474:	429a      	cmp	r2, r3
 8018476:	bf0c      	ite	eq
 8018478:	2301      	moveq	r3, #1
 801847a:	2300      	movne	r3, #0
 801847c:	b2db      	uxtb	r3, r3
 801847e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018480:	7efb      	ldrb	r3, [r7, #27]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d041      	beq.n	801850a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018486:	2108      	movs	r1, #8
 8018488:	6878      	ldr	r0, [r7, #4]
 801848a:	f7f9 f825 	bl	80114d8 <pbuf_remove_header>
 801848e:	4603      	mov	r3, r0
 8018490:	2b00      	cmp	r3, #0
 8018492:	d00a      	beq.n	80184aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018494:	4b20      	ldr	r3, [pc, #128]	@ (8018518 <udp_input+0x208>)
 8018496:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801849a:	4925      	ldr	r1, [pc, #148]	@ (8018530 <udp_input+0x220>)
 801849c:	4820      	ldr	r0, [pc, #128]	@ (8018520 <udp_input+0x210>)
 801849e:	f006 f9bb 	bl	801e818 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f7f9 f8d0 	bl	8011648 <pbuf_free>
      goto end;
 80184a8:	e032      	b.n	8018510 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80184aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d012      	beq.n	80184d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80184b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184b2:	699b      	ldr	r3, [r3, #24]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d00a      	beq.n	80184ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80184b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184ba:	699c      	ldr	r4, [r3, #24]
 80184bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184be:	69d8      	ldr	r0, [r3, #28]
 80184c0:	8a3b      	ldrh	r3, [r7, #16]
 80184c2:	9300      	str	r3, [sp, #0]
 80184c4:	4b1b      	ldr	r3, [pc, #108]	@ (8018534 <udp_input+0x224>)
 80184c6:	687a      	ldr	r2, [r7, #4]
 80184c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80184ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80184cc:	e021      	b.n	8018512 <udp_input+0x202>
        pbuf_free(p);
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	f7f9 f8ba 	bl	8011648 <pbuf_free>
        goto end;
 80184d4:	e01c      	b.n	8018510 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80184d6:	7cfb      	ldrb	r3, [r7, #19]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d112      	bne.n	8018502 <udp_input+0x1f2>
 80184dc:	4b12      	ldr	r3, [pc, #72]	@ (8018528 <udp_input+0x218>)
 80184de:	695b      	ldr	r3, [r3, #20]
 80184e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80184e4:	2be0      	cmp	r3, #224	@ 0xe0
 80184e6:	d00c      	beq.n	8018502 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80184e8:	4b0f      	ldr	r3, [pc, #60]	@ (8018528 <udp_input+0x218>)
 80184ea:	899b      	ldrh	r3, [r3, #12]
 80184ec:	3308      	adds	r3, #8
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	b21b      	sxth	r3, r3
 80184f2:	4619      	mov	r1, r3
 80184f4:	6878      	ldr	r0, [r7, #4]
 80184f6:	f7f9 f862 	bl	80115be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80184fa:	2103      	movs	r1, #3
 80184fc:	6878      	ldr	r0, [r7, #4]
 80184fe:	f003 fb09 	bl	801bb14 <icmp_dest_unreach>
      pbuf_free(p);
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f7f9 f8a0 	bl	8011648 <pbuf_free>
  return;
 8018508:	e003      	b.n	8018512 <udp_input+0x202>
    pbuf_free(p);
 801850a:	6878      	ldr	r0, [r7, #4]
 801850c:	f7f9 f89c 	bl	8011648 <pbuf_free>
  return;
 8018510:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018512:	372c      	adds	r7, #44	@ 0x2c
 8018514:	46bd      	mov	sp, r7
 8018516:	bd90      	pop	{r4, r7, pc}
 8018518:	08025194 	.word	0x08025194
 801851c:	08025238 	.word	0x08025238
 8018520:	080251e8 	.word	0x080251e8
 8018524:	08025250 	.word	0x08025250
 8018528:	2000bbc4 	.word	0x2000bbc4
 801852c:	2000f4e0 	.word	0x2000f4e0
 8018530:	0802526c 	.word	0x0802526c
 8018534:	2000bbd4 	.word	0x2000bbd4

08018538 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d109      	bne.n	801855c <udp_send+0x24>
 8018548:	4b11      	ldr	r3, [pc, #68]	@ (8018590 <udp_send+0x58>)
 801854a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801854e:	4911      	ldr	r1, [pc, #68]	@ (8018594 <udp_send+0x5c>)
 8018550:	4811      	ldr	r0, [pc, #68]	@ (8018598 <udp_send+0x60>)
 8018552:	f006 f961 	bl	801e818 <iprintf>
 8018556:	f06f 030f 	mvn.w	r3, #15
 801855a:	e015      	b.n	8018588 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801855c:	683b      	ldr	r3, [r7, #0]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d109      	bne.n	8018576 <udp_send+0x3e>
 8018562:	4b0b      	ldr	r3, [pc, #44]	@ (8018590 <udp_send+0x58>)
 8018564:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8018568:	490c      	ldr	r1, [pc, #48]	@ (801859c <udp_send+0x64>)
 801856a:	480b      	ldr	r0, [pc, #44]	@ (8018598 <udp_send+0x60>)
 801856c:	f006 f954 	bl	801e818 <iprintf>
 8018570:	f06f 030f 	mvn.w	r3, #15
 8018574:	e008      	b.n	8018588 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	1d1a      	adds	r2, r3, #4
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	8a9b      	ldrh	r3, [r3, #20]
 801857e:	6839      	ldr	r1, [r7, #0]
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f000 f80d 	bl	80185a0 <udp_sendto>
 8018586:	4603      	mov	r3, r0
}
 8018588:	4618      	mov	r0, r3
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}
 8018590:	08025194 	.word	0x08025194
 8018594:	08025288 	.word	0x08025288
 8018598:	080251e8 	.word	0x080251e8
 801859c:	080252a0 	.word	0x080252a0

080185a0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b088      	sub	sp, #32
 80185a4:	af02      	add	r7, sp, #8
 80185a6:	60f8      	str	r0, [r7, #12]
 80185a8:	60b9      	str	r1, [r7, #8]
 80185aa:	607a      	str	r2, [r7, #4]
 80185ac:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d109      	bne.n	80185c8 <udp_sendto+0x28>
 80185b4:	4b23      	ldr	r3, [pc, #140]	@ (8018644 <udp_sendto+0xa4>)
 80185b6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80185ba:	4923      	ldr	r1, [pc, #140]	@ (8018648 <udp_sendto+0xa8>)
 80185bc:	4823      	ldr	r0, [pc, #140]	@ (801864c <udp_sendto+0xac>)
 80185be:	f006 f92b 	bl	801e818 <iprintf>
 80185c2:	f06f 030f 	mvn.w	r3, #15
 80185c6:	e038      	b.n	801863a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d109      	bne.n	80185e2 <udp_sendto+0x42>
 80185ce:	4b1d      	ldr	r3, [pc, #116]	@ (8018644 <udp_sendto+0xa4>)
 80185d0:	f240 2219 	movw	r2, #537	@ 0x219
 80185d4:	491e      	ldr	r1, [pc, #120]	@ (8018650 <udp_sendto+0xb0>)
 80185d6:	481d      	ldr	r0, [pc, #116]	@ (801864c <udp_sendto+0xac>)
 80185d8:	f006 f91e 	bl	801e818 <iprintf>
 80185dc:	f06f 030f 	mvn.w	r3, #15
 80185e0:	e02b      	b.n	801863a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d109      	bne.n	80185fc <udp_sendto+0x5c>
 80185e8:	4b16      	ldr	r3, [pc, #88]	@ (8018644 <udp_sendto+0xa4>)
 80185ea:	f240 221a 	movw	r2, #538	@ 0x21a
 80185ee:	4919      	ldr	r1, [pc, #100]	@ (8018654 <udp_sendto+0xb4>)
 80185f0:	4816      	ldr	r0, [pc, #88]	@ (801864c <udp_sendto+0xac>)
 80185f2:	f006 f911 	bl	801e818 <iprintf>
 80185f6:	f06f 030f 	mvn.w	r3, #15
 80185fa:	e01e      	b.n	801863a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	7a1b      	ldrb	r3, [r3, #8]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d006      	beq.n	8018612 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	7a1b      	ldrb	r3, [r3, #8]
 8018608:	4618      	mov	r0, r3
 801860a:	f7f8 fc5d 	bl	8010ec8 <netif_get_by_index>
 801860e:	6178      	str	r0, [r7, #20]
 8018610:	e003      	b.n	801861a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018612:	6878      	ldr	r0, [r7, #4]
 8018614:	f003 fb08 	bl	801bc28 <ip4_route>
 8018618:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801861a:	697b      	ldr	r3, [r7, #20]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d102      	bne.n	8018626 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018620:	f06f 0303 	mvn.w	r3, #3
 8018624:	e009      	b.n	801863a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018626:	887a      	ldrh	r2, [r7, #2]
 8018628:	697b      	ldr	r3, [r7, #20]
 801862a:	9300      	str	r3, [sp, #0]
 801862c:	4613      	mov	r3, r2
 801862e:	687a      	ldr	r2, [r7, #4]
 8018630:	68b9      	ldr	r1, [r7, #8]
 8018632:	68f8      	ldr	r0, [r7, #12]
 8018634:	f000 f810 	bl	8018658 <udp_sendto_if>
 8018638:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801863a:	4618      	mov	r0, r3
 801863c:	3718      	adds	r7, #24
 801863e:	46bd      	mov	sp, r7
 8018640:	bd80      	pop	{r7, pc}
 8018642:	bf00      	nop
 8018644:	08025194 	.word	0x08025194
 8018648:	080252b8 	.word	0x080252b8
 801864c:	080251e8 	.word	0x080251e8
 8018650:	080252d0 	.word	0x080252d0
 8018654:	080252ec 	.word	0x080252ec

08018658 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b088      	sub	sp, #32
 801865c:	af02      	add	r7, sp, #8
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	607a      	str	r2, [r7, #4]
 8018664:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d109      	bne.n	8018680 <udp_sendto_if+0x28>
 801866c:	4b2e      	ldr	r3, [pc, #184]	@ (8018728 <udp_sendto_if+0xd0>)
 801866e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018672:	492e      	ldr	r1, [pc, #184]	@ (801872c <udp_sendto_if+0xd4>)
 8018674:	482e      	ldr	r0, [pc, #184]	@ (8018730 <udp_sendto_if+0xd8>)
 8018676:	f006 f8cf 	bl	801e818 <iprintf>
 801867a:	f06f 030f 	mvn.w	r3, #15
 801867e:	e04f      	b.n	8018720 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d109      	bne.n	801869a <udp_sendto_if+0x42>
 8018686:	4b28      	ldr	r3, [pc, #160]	@ (8018728 <udp_sendto_if+0xd0>)
 8018688:	f240 2281 	movw	r2, #641	@ 0x281
 801868c:	4929      	ldr	r1, [pc, #164]	@ (8018734 <udp_sendto_if+0xdc>)
 801868e:	4828      	ldr	r0, [pc, #160]	@ (8018730 <udp_sendto_if+0xd8>)
 8018690:	f006 f8c2 	bl	801e818 <iprintf>
 8018694:	f06f 030f 	mvn.w	r3, #15
 8018698:	e042      	b.n	8018720 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d109      	bne.n	80186b4 <udp_sendto_if+0x5c>
 80186a0:	4b21      	ldr	r3, [pc, #132]	@ (8018728 <udp_sendto_if+0xd0>)
 80186a2:	f240 2282 	movw	r2, #642	@ 0x282
 80186a6:	4924      	ldr	r1, [pc, #144]	@ (8018738 <udp_sendto_if+0xe0>)
 80186a8:	4821      	ldr	r0, [pc, #132]	@ (8018730 <udp_sendto_if+0xd8>)
 80186aa:	f006 f8b5 	bl	801e818 <iprintf>
 80186ae:	f06f 030f 	mvn.w	r3, #15
 80186b2:	e035      	b.n	8018720 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80186b4:	6a3b      	ldr	r3, [r7, #32]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d109      	bne.n	80186ce <udp_sendto_if+0x76>
 80186ba:	4b1b      	ldr	r3, [pc, #108]	@ (8018728 <udp_sendto_if+0xd0>)
 80186bc:	f240 2283 	movw	r2, #643	@ 0x283
 80186c0:	491e      	ldr	r1, [pc, #120]	@ (801873c <udp_sendto_if+0xe4>)
 80186c2:	481b      	ldr	r0, [pc, #108]	@ (8018730 <udp_sendto_if+0xd8>)
 80186c4:	f006 f8a8 	bl	801e818 <iprintf>
 80186c8:	f06f 030f 	mvn.w	r3, #15
 80186cc:	e028      	b.n	8018720 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d009      	beq.n	80186e8 <udp_sendto_if+0x90>
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d005      	beq.n	80186e8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80186e4:	2be0      	cmp	r3, #224	@ 0xe0
 80186e6:	d103      	bne.n	80186f0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80186e8:	6a3b      	ldr	r3, [r7, #32]
 80186ea:	3304      	adds	r3, #4
 80186ec:	617b      	str	r3, [r7, #20]
 80186ee:	e00b      	b.n	8018708 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	681a      	ldr	r2, [r3, #0]
 80186f4:	6a3b      	ldr	r3, [r7, #32]
 80186f6:	3304      	adds	r3, #4
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	429a      	cmp	r2, r3
 80186fc:	d002      	beq.n	8018704 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80186fe:	f06f 0303 	mvn.w	r3, #3
 8018702:	e00d      	b.n	8018720 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018708:	887a      	ldrh	r2, [r7, #2]
 801870a:	697b      	ldr	r3, [r7, #20]
 801870c:	9301      	str	r3, [sp, #4]
 801870e:	6a3b      	ldr	r3, [r7, #32]
 8018710:	9300      	str	r3, [sp, #0]
 8018712:	4613      	mov	r3, r2
 8018714:	687a      	ldr	r2, [r7, #4]
 8018716:	68b9      	ldr	r1, [r7, #8]
 8018718:	68f8      	ldr	r0, [r7, #12]
 801871a:	f000 f811 	bl	8018740 <udp_sendto_if_src>
 801871e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018720:	4618      	mov	r0, r3
 8018722:	3718      	adds	r7, #24
 8018724:	46bd      	mov	sp, r7
 8018726:	bd80      	pop	{r7, pc}
 8018728:	08025194 	.word	0x08025194
 801872c:	08025308 	.word	0x08025308
 8018730:	080251e8 	.word	0x080251e8
 8018734:	08025324 	.word	0x08025324
 8018738:	08025340 	.word	0x08025340
 801873c:	08025360 	.word	0x08025360

08018740 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b08c      	sub	sp, #48	@ 0x30
 8018744:	af04      	add	r7, sp, #16
 8018746:	60f8      	str	r0, [r7, #12]
 8018748:	60b9      	str	r1, [r7, #8]
 801874a:	607a      	str	r2, [r7, #4]
 801874c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d109      	bne.n	8018768 <udp_sendto_if_src+0x28>
 8018754:	4b65      	ldr	r3, [pc, #404]	@ (80188ec <udp_sendto_if_src+0x1ac>)
 8018756:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801875a:	4965      	ldr	r1, [pc, #404]	@ (80188f0 <udp_sendto_if_src+0x1b0>)
 801875c:	4865      	ldr	r0, [pc, #404]	@ (80188f4 <udp_sendto_if_src+0x1b4>)
 801875e:	f006 f85b 	bl	801e818 <iprintf>
 8018762:	f06f 030f 	mvn.w	r3, #15
 8018766:	e0bc      	b.n	80188e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018768:	68bb      	ldr	r3, [r7, #8]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d109      	bne.n	8018782 <udp_sendto_if_src+0x42>
 801876e:	4b5f      	ldr	r3, [pc, #380]	@ (80188ec <udp_sendto_if_src+0x1ac>)
 8018770:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8018774:	4960      	ldr	r1, [pc, #384]	@ (80188f8 <udp_sendto_if_src+0x1b8>)
 8018776:	485f      	ldr	r0, [pc, #380]	@ (80188f4 <udp_sendto_if_src+0x1b4>)
 8018778:	f006 f84e 	bl	801e818 <iprintf>
 801877c:	f06f 030f 	mvn.w	r3, #15
 8018780:	e0af      	b.n	80188e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d109      	bne.n	801879c <udp_sendto_if_src+0x5c>
 8018788:	4b58      	ldr	r3, [pc, #352]	@ (80188ec <udp_sendto_if_src+0x1ac>)
 801878a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801878e:	495b      	ldr	r1, [pc, #364]	@ (80188fc <udp_sendto_if_src+0x1bc>)
 8018790:	4858      	ldr	r0, [pc, #352]	@ (80188f4 <udp_sendto_if_src+0x1b4>)
 8018792:	f006 f841 	bl	801e818 <iprintf>
 8018796:	f06f 030f 	mvn.w	r3, #15
 801879a:	e0a2      	b.n	80188e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801879c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d109      	bne.n	80187b6 <udp_sendto_if_src+0x76>
 80187a2:	4b52      	ldr	r3, [pc, #328]	@ (80188ec <udp_sendto_if_src+0x1ac>)
 80187a4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80187a8:	4955      	ldr	r1, [pc, #340]	@ (8018900 <udp_sendto_if_src+0x1c0>)
 80187aa:	4852      	ldr	r0, [pc, #328]	@ (80188f4 <udp_sendto_if_src+0x1b4>)
 80187ac:	f006 f834 	bl	801e818 <iprintf>
 80187b0:	f06f 030f 	mvn.w	r3, #15
 80187b4:	e095      	b.n	80188e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80187b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d109      	bne.n	80187d0 <udp_sendto_if_src+0x90>
 80187bc:	4b4b      	ldr	r3, [pc, #300]	@ (80188ec <udp_sendto_if_src+0x1ac>)
 80187be:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80187c2:	4950      	ldr	r1, [pc, #320]	@ (8018904 <udp_sendto_if_src+0x1c4>)
 80187c4:	484b      	ldr	r0, [pc, #300]	@ (80188f4 <udp_sendto_if_src+0x1b4>)
 80187c6:	f006 f827 	bl	801e818 <iprintf>
 80187ca:	f06f 030f 	mvn.w	r3, #15
 80187ce:	e088      	b.n	80188e2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	8a5b      	ldrh	r3, [r3, #18]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d10f      	bne.n	80187f8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80187d8:	68f9      	ldr	r1, [r7, #12]
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	8a5b      	ldrh	r3, [r3, #18]
 80187de:	461a      	mov	r2, r3
 80187e0:	68f8      	ldr	r0, [r7, #12]
 80187e2:	f000 f893 	bl	801890c <udp_bind>
 80187e6:	4603      	mov	r3, r0
 80187e8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80187ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d002      	beq.n	80187f8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80187f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80187f6:	e074      	b.n	80188e2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	891b      	ldrh	r3, [r3, #8]
 80187fc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018800:	4293      	cmp	r3, r2
 8018802:	d902      	bls.n	801880a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018804:	f04f 33ff 	mov.w	r3, #4294967295
 8018808:	e06b      	b.n	80188e2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801880a:	2108      	movs	r1, #8
 801880c:	68b8      	ldr	r0, [r7, #8]
 801880e:	f7f8 fe53 	bl	80114b8 <pbuf_add_header>
 8018812:	4603      	mov	r3, r0
 8018814:	2b00      	cmp	r3, #0
 8018816:	d015      	beq.n	8018844 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018818:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801881c:	2108      	movs	r1, #8
 801881e:	2022      	movs	r0, #34	@ 0x22
 8018820:	f7f8 fbfc 	bl	801101c <pbuf_alloc>
 8018824:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018826:	69fb      	ldr	r3, [r7, #28]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d102      	bne.n	8018832 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801882c:	f04f 33ff 	mov.w	r3, #4294967295
 8018830:	e057      	b.n	80188e2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018832:	68bb      	ldr	r3, [r7, #8]
 8018834:	891b      	ldrh	r3, [r3, #8]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d006      	beq.n	8018848 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801883a:	68b9      	ldr	r1, [r7, #8]
 801883c:	69f8      	ldr	r0, [r7, #28]
 801883e:	f7f9 f827 	bl	8011890 <pbuf_chain>
 8018842:	e001      	b.n	8018848 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018848:	69fb      	ldr	r3, [r7, #28]
 801884a:	895b      	ldrh	r3, [r3, #10]
 801884c:	2b07      	cmp	r3, #7
 801884e:	d806      	bhi.n	801885e <udp_sendto_if_src+0x11e>
 8018850:	4b26      	ldr	r3, [pc, #152]	@ (80188ec <udp_sendto_if_src+0x1ac>)
 8018852:	f240 320d 	movw	r2, #781	@ 0x30d
 8018856:	492c      	ldr	r1, [pc, #176]	@ (8018908 <udp_sendto_if_src+0x1c8>)
 8018858:	4826      	ldr	r0, [pc, #152]	@ (80188f4 <udp_sendto_if_src+0x1b4>)
 801885a:	f005 ffdd 	bl	801e818 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801885e:	69fb      	ldr	r3, [r7, #28]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	8a5b      	ldrh	r3, [r3, #18]
 8018868:	4618      	mov	r0, r3
 801886a:	f7f6 ffcf 	bl	800f80c <lwip_htons>
 801886e:	4603      	mov	r3, r0
 8018870:	461a      	mov	r2, r3
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018876:	887b      	ldrh	r3, [r7, #2]
 8018878:	4618      	mov	r0, r3
 801887a:	f7f6 ffc7 	bl	800f80c <lwip_htons>
 801887e:	4603      	mov	r3, r0
 8018880:	461a      	mov	r2, r3
 8018882:	697b      	ldr	r3, [r7, #20]
 8018884:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018886:	697b      	ldr	r3, [r7, #20]
 8018888:	2200      	movs	r2, #0
 801888a:	719a      	strb	r2, [r3, #6]
 801888c:	2200      	movs	r2, #0
 801888e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018890:	69fb      	ldr	r3, [r7, #28]
 8018892:	891b      	ldrh	r3, [r3, #8]
 8018894:	4618      	mov	r0, r3
 8018896:	f7f6 ffb9 	bl	800f80c <lwip_htons>
 801889a:	4603      	mov	r3, r0
 801889c:	461a      	mov	r2, r3
 801889e:	697b      	ldr	r3, [r7, #20]
 80188a0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80188a2:	2311      	movs	r3, #17
 80188a4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	7adb      	ldrb	r3, [r3, #11]
 80188aa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	7a9b      	ldrb	r3, [r3, #10]
 80188b0:	7cb9      	ldrb	r1, [r7, #18]
 80188b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80188b4:	9202      	str	r2, [sp, #8]
 80188b6:	7cfa      	ldrb	r2, [r7, #19]
 80188b8:	9201      	str	r2, [sp, #4]
 80188ba:	9300      	str	r3, [sp, #0]
 80188bc:	460b      	mov	r3, r1
 80188be:	687a      	ldr	r2, [r7, #4]
 80188c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80188c2:	69f8      	ldr	r0, [r7, #28]
 80188c4:	f003 fbb6 	bl	801c034 <ip4_output_if_src>
 80188c8:	4603      	mov	r3, r0
 80188ca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80188cc:	69fa      	ldr	r2, [r7, #28]
 80188ce:	68bb      	ldr	r3, [r7, #8]
 80188d0:	429a      	cmp	r2, r3
 80188d2:	d004      	beq.n	80188de <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80188d4:	69f8      	ldr	r0, [r7, #28]
 80188d6:	f7f8 feb7 	bl	8011648 <pbuf_free>
    q = NULL;
 80188da:	2300      	movs	r3, #0
 80188dc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80188de:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80188e2:	4618      	mov	r0, r3
 80188e4:	3720      	adds	r7, #32
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bd80      	pop	{r7, pc}
 80188ea:	bf00      	nop
 80188ec:	08025194 	.word	0x08025194
 80188f0:	08025380 	.word	0x08025380
 80188f4:	080251e8 	.word	0x080251e8
 80188f8:	080253a0 	.word	0x080253a0
 80188fc:	080253c0 	.word	0x080253c0
 8018900:	080253e4 	.word	0x080253e4
 8018904:	08025408 	.word	0x08025408
 8018908:	0802542c 	.word	0x0802542c

0801890c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b086      	sub	sp, #24
 8018910:	af00      	add	r7, sp, #0
 8018912:	60f8      	str	r0, [r7, #12]
 8018914:	60b9      	str	r1, [r7, #8]
 8018916:	4613      	mov	r3, r2
 8018918:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d101      	bne.n	8018924 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018920:	4b39      	ldr	r3, [pc, #228]	@ (8018a08 <udp_bind+0xfc>)
 8018922:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d109      	bne.n	801893e <udp_bind+0x32>
 801892a:	4b38      	ldr	r3, [pc, #224]	@ (8018a0c <udp_bind+0x100>)
 801892c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8018930:	4937      	ldr	r1, [pc, #220]	@ (8018a10 <udp_bind+0x104>)
 8018932:	4838      	ldr	r0, [pc, #224]	@ (8018a14 <udp_bind+0x108>)
 8018934:	f005 ff70 	bl	801e818 <iprintf>
 8018938:	f06f 030f 	mvn.w	r3, #15
 801893c:	e060      	b.n	8018a00 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801893e:	2300      	movs	r3, #0
 8018940:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018942:	4b35      	ldr	r3, [pc, #212]	@ (8018a18 <udp_bind+0x10c>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	617b      	str	r3, [r7, #20]
 8018948:	e009      	b.n	801895e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801894a:	68fa      	ldr	r2, [r7, #12]
 801894c:	697b      	ldr	r3, [r7, #20]
 801894e:	429a      	cmp	r2, r3
 8018950:	d102      	bne.n	8018958 <udp_bind+0x4c>
      rebind = 1;
 8018952:	2301      	movs	r3, #1
 8018954:	74fb      	strb	r3, [r7, #19]
      break;
 8018956:	e005      	b.n	8018964 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018958:	697b      	ldr	r3, [r7, #20]
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	617b      	str	r3, [r7, #20]
 801895e:	697b      	ldr	r3, [r7, #20]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d1f2      	bne.n	801894a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018964:	88fb      	ldrh	r3, [r7, #6]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d109      	bne.n	801897e <udp_bind+0x72>
    port = udp_new_port();
 801896a:	f7ff fc35 	bl	80181d8 <udp_new_port>
 801896e:	4603      	mov	r3, r0
 8018970:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018972:	88fb      	ldrh	r3, [r7, #6]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d12c      	bne.n	80189d2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018978:	f06f 0307 	mvn.w	r3, #7
 801897c:	e040      	b.n	8018a00 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801897e:	4b26      	ldr	r3, [pc, #152]	@ (8018a18 <udp_bind+0x10c>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	617b      	str	r3, [r7, #20]
 8018984:	e022      	b.n	80189cc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018986:	68fa      	ldr	r2, [r7, #12]
 8018988:	697b      	ldr	r3, [r7, #20]
 801898a:	429a      	cmp	r2, r3
 801898c:	d01b      	beq.n	80189c6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801898e:	697b      	ldr	r3, [r7, #20]
 8018990:	8a5b      	ldrh	r3, [r3, #18]
 8018992:	88fa      	ldrh	r2, [r7, #6]
 8018994:	429a      	cmp	r2, r3
 8018996:	d116      	bne.n	80189c6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018998:	697b      	ldr	r3, [r7, #20]
 801899a:	681a      	ldr	r2, [r3, #0]
 801899c:	68bb      	ldr	r3, [r7, #8]
 801899e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d00d      	beq.n	80189c0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d00a      	beq.n	80189c0 <udp_bind+0xb4>
 80189aa:	68bb      	ldr	r3, [r7, #8]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d006      	beq.n	80189c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80189b2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d003      	beq.n	80189c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80189b8:	697b      	ldr	r3, [r7, #20]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d102      	bne.n	80189c6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80189c0:	f06f 0307 	mvn.w	r3, #7
 80189c4:	e01c      	b.n	8018a00 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80189c6:	697b      	ldr	r3, [r7, #20]
 80189c8:	68db      	ldr	r3, [r3, #12]
 80189ca:	617b      	str	r3, [r7, #20]
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d1d9      	bne.n	8018986 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80189d2:	68bb      	ldr	r3, [r7, #8]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d002      	beq.n	80189de <udp_bind+0xd2>
 80189d8:	68bb      	ldr	r3, [r7, #8]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	e000      	b.n	80189e0 <udp_bind+0xd4>
 80189de:	2300      	movs	r3, #0
 80189e0:	68fa      	ldr	r2, [r7, #12]
 80189e2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	88fa      	ldrh	r2, [r7, #6]
 80189e8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80189ea:	7cfb      	ldrb	r3, [r7, #19]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d106      	bne.n	80189fe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80189f0:	4b09      	ldr	r3, [pc, #36]	@ (8018a18 <udp_bind+0x10c>)
 80189f2:	681a      	ldr	r2, [r3, #0]
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80189f8:	4a07      	ldr	r2, [pc, #28]	@ (8018a18 <udp_bind+0x10c>)
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80189fe:	2300      	movs	r3, #0
}
 8018a00:	4618      	mov	r0, r3
 8018a02:	3718      	adds	r7, #24
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bd80      	pop	{r7, pc}
 8018a08:	08026270 	.word	0x08026270
 8018a0c:	08025194 	.word	0x08025194
 8018a10:	0802545c 	.word	0x0802545c
 8018a14:	080251e8 	.word	0x080251e8
 8018a18:	2000f4e0 	.word	0x2000f4e0

08018a1c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b086      	sub	sp, #24
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	60f8      	str	r0, [r7, #12]
 8018a24:	60b9      	str	r1, [r7, #8]
 8018a26:	4613      	mov	r3, r2
 8018a28:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d109      	bne.n	8018a44 <udp_connect+0x28>
 8018a30:	4b2c      	ldr	r3, [pc, #176]	@ (8018ae4 <udp_connect+0xc8>)
 8018a32:	f240 4235 	movw	r2, #1077	@ 0x435
 8018a36:	492c      	ldr	r1, [pc, #176]	@ (8018ae8 <udp_connect+0xcc>)
 8018a38:	482c      	ldr	r0, [pc, #176]	@ (8018aec <udp_connect+0xd0>)
 8018a3a:	f005 feed 	bl	801e818 <iprintf>
 8018a3e:	f06f 030f 	mvn.w	r3, #15
 8018a42:	e04b      	b.n	8018adc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018a44:	68bb      	ldr	r3, [r7, #8]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d109      	bne.n	8018a5e <udp_connect+0x42>
 8018a4a:	4b26      	ldr	r3, [pc, #152]	@ (8018ae4 <udp_connect+0xc8>)
 8018a4c:	f240 4236 	movw	r2, #1078	@ 0x436
 8018a50:	4927      	ldr	r1, [pc, #156]	@ (8018af0 <udp_connect+0xd4>)
 8018a52:	4826      	ldr	r0, [pc, #152]	@ (8018aec <udp_connect+0xd0>)
 8018a54:	f005 fee0 	bl	801e818 <iprintf>
 8018a58:	f06f 030f 	mvn.w	r3, #15
 8018a5c:	e03e      	b.n	8018adc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	8a5b      	ldrh	r3, [r3, #18]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d10f      	bne.n	8018a86 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018a66:	68f9      	ldr	r1, [r7, #12]
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	8a5b      	ldrh	r3, [r3, #18]
 8018a6c:	461a      	mov	r2, r3
 8018a6e:	68f8      	ldr	r0, [r7, #12]
 8018a70:	f7ff ff4c 	bl	801890c <udp_bind>
 8018a74:	4603      	mov	r3, r0
 8018a76:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018a78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d002      	beq.n	8018a86 <udp_connect+0x6a>
      return err;
 8018a80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018a84:	e02a      	b.n	8018adc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018a86:	68bb      	ldr	r3, [r7, #8]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d002      	beq.n	8018a92 <udp_connect+0x76>
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	e000      	b.n	8018a94 <udp_connect+0x78>
 8018a92:	2300      	movs	r3, #0
 8018a94:	68fa      	ldr	r2, [r7, #12]
 8018a96:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	88fa      	ldrh	r2, [r7, #6]
 8018a9c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	7c1b      	ldrb	r3, [r3, #16]
 8018aa2:	f043 0304 	orr.w	r3, r3, #4
 8018aa6:	b2da      	uxtb	r2, r3
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018aac:	4b11      	ldr	r3, [pc, #68]	@ (8018af4 <udp_connect+0xd8>)
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	617b      	str	r3, [r7, #20]
 8018ab2:	e008      	b.n	8018ac6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018ab4:	68fa      	ldr	r2, [r7, #12]
 8018ab6:	697b      	ldr	r3, [r7, #20]
 8018ab8:	429a      	cmp	r2, r3
 8018aba:	d101      	bne.n	8018ac0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8018abc:	2300      	movs	r3, #0
 8018abe:	e00d      	b.n	8018adc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018ac0:	697b      	ldr	r3, [r7, #20]
 8018ac2:	68db      	ldr	r3, [r3, #12]
 8018ac4:	617b      	str	r3, [r7, #20]
 8018ac6:	697b      	ldr	r3, [r7, #20]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d1f3      	bne.n	8018ab4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018acc:	4b09      	ldr	r3, [pc, #36]	@ (8018af4 <udp_connect+0xd8>)
 8018ace:	681a      	ldr	r2, [r3, #0]
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018ad4:	4a07      	ldr	r2, [pc, #28]	@ (8018af4 <udp_connect+0xd8>)
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018ada:	2300      	movs	r3, #0
}
 8018adc:	4618      	mov	r0, r3
 8018ade:	3718      	adds	r7, #24
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}
 8018ae4:	08025194 	.word	0x08025194
 8018ae8:	08025474 	.word	0x08025474
 8018aec:	080251e8 	.word	0x080251e8
 8018af0:	08025490 	.word	0x08025490
 8018af4:	2000f4e0 	.word	0x2000f4e0

08018af8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b082      	sub	sp, #8
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d107      	bne.n	8018b16 <udp_disconnect+0x1e>
 8018b06:	4b0d      	ldr	r3, [pc, #52]	@ (8018b3c <udp_disconnect+0x44>)
 8018b08:	f240 426a 	movw	r2, #1130	@ 0x46a
 8018b0c:	490c      	ldr	r1, [pc, #48]	@ (8018b40 <udp_disconnect+0x48>)
 8018b0e:	480d      	ldr	r0, [pc, #52]	@ (8018b44 <udp_disconnect+0x4c>)
 8018b10:	f005 fe82 	bl	801e818 <iprintf>
 8018b14:	e00f      	b.n	8018b36 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2200      	movs	r2, #0
 8018b20:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	2200      	movs	r2, #0
 8018b26:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	7c1b      	ldrb	r3, [r3, #16]
 8018b2c:	f023 0304 	bic.w	r3, r3, #4
 8018b30:	b2da      	uxtb	r2, r3
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	741a      	strb	r2, [r3, #16]
}
 8018b36:	3708      	adds	r7, #8
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}
 8018b3c:	08025194 	.word	0x08025194
 8018b40:	080254ac 	.word	0x080254ac
 8018b44:	080251e8 	.word	0x080251e8

08018b48 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b084      	sub	sp, #16
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	60f8      	str	r0, [r7, #12]
 8018b50:	60b9      	str	r1, [r7, #8]
 8018b52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d107      	bne.n	8018b6a <udp_recv+0x22>
 8018b5a:	4b08      	ldr	r3, [pc, #32]	@ (8018b7c <udp_recv+0x34>)
 8018b5c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8018b60:	4907      	ldr	r1, [pc, #28]	@ (8018b80 <udp_recv+0x38>)
 8018b62:	4808      	ldr	r0, [pc, #32]	@ (8018b84 <udp_recv+0x3c>)
 8018b64:	f005 fe58 	bl	801e818 <iprintf>
 8018b68:	e005      	b.n	8018b76 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	68ba      	ldr	r2, [r7, #8]
 8018b6e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	687a      	ldr	r2, [r7, #4]
 8018b74:	61da      	str	r2, [r3, #28]
}
 8018b76:	3710      	adds	r7, #16
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	08025194 	.word	0x08025194
 8018b80:	080254c8 	.word	0x080254c8
 8018b84:	080251e8 	.word	0x080251e8

08018b88 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b084      	sub	sp, #16
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d107      	bne.n	8018ba6 <udp_remove+0x1e>
 8018b96:	4b19      	ldr	r3, [pc, #100]	@ (8018bfc <udp_remove+0x74>)
 8018b98:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8018b9c:	4918      	ldr	r1, [pc, #96]	@ (8018c00 <udp_remove+0x78>)
 8018b9e:	4819      	ldr	r0, [pc, #100]	@ (8018c04 <udp_remove+0x7c>)
 8018ba0:	f005 fe3a 	bl	801e818 <iprintf>
 8018ba4:	e026      	b.n	8018bf4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018ba6:	4b18      	ldr	r3, [pc, #96]	@ (8018c08 <udp_remove+0x80>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	687a      	ldr	r2, [r7, #4]
 8018bac:	429a      	cmp	r2, r3
 8018bae:	d105      	bne.n	8018bbc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018bb0:	4b15      	ldr	r3, [pc, #84]	@ (8018c08 <udp_remove+0x80>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	68db      	ldr	r3, [r3, #12]
 8018bb6:	4a14      	ldr	r2, [pc, #80]	@ (8018c08 <udp_remove+0x80>)
 8018bb8:	6013      	str	r3, [r2, #0]
 8018bba:	e017      	b.n	8018bec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018bbc:	4b12      	ldr	r3, [pc, #72]	@ (8018c08 <udp_remove+0x80>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	60fb      	str	r3, [r7, #12]
 8018bc2:	e010      	b.n	8018be6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	68db      	ldr	r3, [r3, #12]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d009      	beq.n	8018be0 <udp_remove+0x58>
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	68db      	ldr	r3, [r3, #12]
 8018bd0:	687a      	ldr	r2, [r7, #4]
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	d104      	bne.n	8018be0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	68da      	ldr	r2, [r3, #12]
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	60da      	str	r2, [r3, #12]
        break;
 8018bde:	e005      	b.n	8018bec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	60fb      	str	r3, [r7, #12]
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d1eb      	bne.n	8018bc4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018bec:	6879      	ldr	r1, [r7, #4]
 8018bee:	2000      	movs	r0, #0
 8018bf0:	f7f7 fe48 	bl	8010884 <memp_free>
}
 8018bf4:	3710      	adds	r7, #16
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	bd80      	pop	{r7, pc}
 8018bfa:	bf00      	nop
 8018bfc:	08025194 	.word	0x08025194
 8018c00:	080254e0 	.word	0x080254e0
 8018c04:	080251e8 	.word	0x080251e8
 8018c08:	2000f4e0 	.word	0x2000f4e0

08018c0c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b082      	sub	sp, #8
 8018c10:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018c12:	2000      	movs	r0, #0
 8018c14:	f7f7 fdc0 	bl	8010798 <memp_malloc>
 8018c18:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d007      	beq.n	8018c30 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018c20:	2220      	movs	r2, #32
 8018c22:	2100      	movs	r1, #0
 8018c24:	6878      	ldr	r0, [r7, #4]
 8018c26:	f005 fe96 	bl	801e956 <memset>
    pcb->ttl = UDP_TTL;
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	22ff      	movs	r2, #255	@ 0xff
 8018c2e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018c30:	687b      	ldr	r3, [r7, #4]
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	3708      	adds	r7, #8
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd80      	pop	{r7, pc}

08018c3a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018c3a:	b580      	push	{r7, lr}
 8018c3c:	b084      	sub	sp, #16
 8018c3e:	af00      	add	r7, sp, #0
 8018c40:	4603      	mov	r3, r0
 8018c42:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018c44:	f7ff ffe2 	bl	8018c0c <udp_new>
 8018c48:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018c4a:	68fb      	ldr	r3, [r7, #12]
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	3710      	adds	r7, #16
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}

08018c54 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018c54:	b480      	push	{r7}
 8018c56:	b085      	sub	sp, #20
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d01e      	beq.n	8018ca2 <udp_netif_ip_addr_changed+0x4e>
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d01a      	beq.n	8018ca2 <udp_netif_ip_addr_changed+0x4e>
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d017      	beq.n	8018ca2 <udp_netif_ip_addr_changed+0x4e>
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d013      	beq.n	8018ca2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8018cb0 <udp_netif_ip_addr_changed+0x5c>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	60fb      	str	r3, [r7, #12]
 8018c80:	e00c      	b.n	8018c9c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	681a      	ldr	r2, [r3, #0]
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d103      	bne.n	8018c96 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	681a      	ldr	r2, [r3, #0]
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	68db      	ldr	r3, [r3, #12]
 8018c9a:	60fb      	str	r3, [r7, #12]
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d1ef      	bne.n	8018c82 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018ca2:	bf00      	nop
 8018ca4:	3714      	adds	r7, #20
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cac:	4770      	bx	lr
 8018cae:	bf00      	nop
 8018cb0:	2000f4e0 	.word	0x2000f4e0

08018cb4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8018cb8:	4b20      	ldr	r3, [pc, #128]	@ (8018d3c <dhcp_inc_pcb_refcount+0x88>)
 8018cba:	781b      	ldrb	r3, [r3, #0]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d133      	bne.n	8018d28 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8018d40 <dhcp_inc_pcb_refcount+0x8c>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d005      	beq.n	8018cd4 <dhcp_inc_pcb_refcount+0x20>
 8018cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8018d44 <dhcp_inc_pcb_refcount+0x90>)
 8018cca:	22e5      	movs	r2, #229	@ 0xe5
 8018ccc:	491e      	ldr	r1, [pc, #120]	@ (8018d48 <dhcp_inc_pcb_refcount+0x94>)
 8018cce:	481f      	ldr	r0, [pc, #124]	@ (8018d4c <dhcp_inc_pcb_refcount+0x98>)
 8018cd0:	f005 fda2 	bl	801e818 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018cd4:	f7ff ff9a 	bl	8018c0c <udp_new>
 8018cd8:	4603      	mov	r3, r0
 8018cda:	4a19      	ldr	r2, [pc, #100]	@ (8018d40 <dhcp_inc_pcb_refcount+0x8c>)
 8018cdc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8018cde:	4b18      	ldr	r3, [pc, #96]	@ (8018d40 <dhcp_inc_pcb_refcount+0x8c>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d102      	bne.n	8018cec <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8018ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8018cea:	e024      	b.n	8018d36 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8018cec:	4b14      	ldr	r3, [pc, #80]	@ (8018d40 <dhcp_inc_pcb_refcount+0x8c>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	7a5a      	ldrb	r2, [r3, #9]
 8018cf2:	4b13      	ldr	r3, [pc, #76]	@ (8018d40 <dhcp_inc_pcb_refcount+0x8c>)
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	f042 0220 	orr.w	r2, r2, #32
 8018cfa:	b2d2      	uxtb	r2, r2
 8018cfc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8018cfe:	4b10      	ldr	r3, [pc, #64]	@ (8018d40 <dhcp_inc_pcb_refcount+0x8c>)
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	2244      	movs	r2, #68	@ 0x44
 8018d04:	4912      	ldr	r1, [pc, #72]	@ (8018d50 <dhcp_inc_pcb_refcount+0x9c>)
 8018d06:	4618      	mov	r0, r3
 8018d08:	f7ff fe00 	bl	801890c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8018d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8018d40 <dhcp_inc_pcb_refcount+0x8c>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	2243      	movs	r2, #67	@ 0x43
 8018d12:	490f      	ldr	r1, [pc, #60]	@ (8018d50 <dhcp_inc_pcb_refcount+0x9c>)
 8018d14:	4618      	mov	r0, r3
 8018d16:	f7ff fe81 	bl	8018a1c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8018d1a:	4b09      	ldr	r3, [pc, #36]	@ (8018d40 <dhcp_inc_pcb_refcount+0x8c>)
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	490c      	ldr	r1, [pc, #48]	@ (8018d54 <dhcp_inc_pcb_refcount+0xa0>)
 8018d22:	4618      	mov	r0, r3
 8018d24:	f7ff ff10 	bl	8018b48 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8018d28:	4b04      	ldr	r3, [pc, #16]	@ (8018d3c <dhcp_inc_pcb_refcount+0x88>)
 8018d2a:	781b      	ldrb	r3, [r3, #0]
 8018d2c:	3301      	adds	r3, #1
 8018d2e:	b2da      	uxtb	r2, r3
 8018d30:	4b02      	ldr	r3, [pc, #8]	@ (8018d3c <dhcp_inc_pcb_refcount+0x88>)
 8018d32:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8018d34:	2300      	movs	r3, #0
}
 8018d36:	4618      	mov	r0, r3
 8018d38:	bd80      	pop	{r7, pc}
 8018d3a:	bf00      	nop
 8018d3c:	2000f51c 	.word	0x2000f51c
 8018d40:	2000f518 	.word	0x2000f518
 8018d44:	080254f8 	.word	0x080254f8
 8018d48:	08025530 	.word	0x08025530
 8018d4c:	08025558 	.word	0x08025558
 8018d50:	08026270 	.word	0x08026270
 8018d54:	0801a67d 	.word	0x0801a67d

08018d58 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8018d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8018d98 <dhcp_dec_pcb_refcount+0x40>)
 8018d5e:	781b      	ldrb	r3, [r3, #0]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d105      	bne.n	8018d70 <dhcp_dec_pcb_refcount+0x18>
 8018d64:	4b0d      	ldr	r3, [pc, #52]	@ (8018d9c <dhcp_dec_pcb_refcount+0x44>)
 8018d66:	22ff      	movs	r2, #255	@ 0xff
 8018d68:	490d      	ldr	r1, [pc, #52]	@ (8018da0 <dhcp_dec_pcb_refcount+0x48>)
 8018d6a:	480e      	ldr	r0, [pc, #56]	@ (8018da4 <dhcp_dec_pcb_refcount+0x4c>)
 8018d6c:	f005 fd54 	bl	801e818 <iprintf>
  dhcp_pcb_refcount--;
 8018d70:	4b09      	ldr	r3, [pc, #36]	@ (8018d98 <dhcp_dec_pcb_refcount+0x40>)
 8018d72:	781b      	ldrb	r3, [r3, #0]
 8018d74:	3b01      	subs	r3, #1
 8018d76:	b2da      	uxtb	r2, r3
 8018d78:	4b07      	ldr	r3, [pc, #28]	@ (8018d98 <dhcp_dec_pcb_refcount+0x40>)
 8018d7a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8018d7c:	4b06      	ldr	r3, [pc, #24]	@ (8018d98 <dhcp_dec_pcb_refcount+0x40>)
 8018d7e:	781b      	ldrb	r3, [r3, #0]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d107      	bne.n	8018d94 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018d84:	4b08      	ldr	r3, [pc, #32]	@ (8018da8 <dhcp_dec_pcb_refcount+0x50>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f7ff fefd 	bl	8018b88 <udp_remove>
    dhcp_pcb = NULL;
 8018d8e:	4b06      	ldr	r3, [pc, #24]	@ (8018da8 <dhcp_dec_pcb_refcount+0x50>)
 8018d90:	2200      	movs	r2, #0
 8018d92:	601a      	str	r2, [r3, #0]
  }
}
 8018d94:	bf00      	nop
 8018d96:	bd80      	pop	{r7, pc}
 8018d98:	2000f51c 	.word	0x2000f51c
 8018d9c:	080254f8 	.word	0x080254f8
 8018da0:	08025580 	.word	0x08025580
 8018da4:	08025558 	.word	0x08025558
 8018da8:	2000f518 	.word	0x2000f518

08018dac <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b084      	sub	sp, #16
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018db8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018dba:	210c      	movs	r1, #12
 8018dbc:	68f8      	ldr	r0, [r7, #12]
 8018dbe:	f001 f86f 	bl	8019ea0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018dc2:	4b06      	ldr	r3, [pc, #24]	@ (8018ddc <dhcp_handle_nak+0x30>)
 8018dc4:	4a05      	ldr	r2, [pc, #20]	@ (8018ddc <dhcp_handle_nak+0x30>)
 8018dc6:	4905      	ldr	r1, [pc, #20]	@ (8018ddc <dhcp_handle_nak+0x30>)
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f7f7 fefd 	bl	8010bc8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8018dce:	6878      	ldr	r0, [r7, #4]
 8018dd0:	f000 fc68 	bl	80196a4 <dhcp_discover>
}
 8018dd4:	bf00      	nop
 8018dd6:	3710      	adds	r7, #16
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	bd80      	pop	{r7, pc}
 8018ddc:	08026270 	.word	0x08026270

08018de0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b084      	sub	sp, #16
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dec:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8018dee:	2108      	movs	r1, #8
 8018df0:	68f8      	ldr	r0, [r7, #12]
 8018df2:	f001 f855 	bl	8019ea0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	331c      	adds	r3, #28
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	4619      	mov	r1, r3
 8018dfe:	6878      	ldr	r0, [r7, #4]
 8018e00:	f002 fb86 	bl	801b510 <etharp_query>
 8018e04:	4603      	mov	r3, r0
 8018e06:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	799b      	ldrb	r3, [r3, #6]
 8018e0c:	2bff      	cmp	r3, #255	@ 0xff
 8018e0e:	d005      	beq.n	8018e1c <dhcp_check+0x3c>
    dhcp->tries++;
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	799b      	ldrb	r3, [r3, #6]
 8018e14:	3301      	adds	r3, #1
 8018e16:	b2da      	uxtb	r2, r3
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8018e1c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8018e20:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018e22:	893b      	ldrh	r3, [r7, #8]
 8018e24:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018e28:	4a06      	ldr	r2, [pc, #24]	@ (8018e44 <dhcp_check+0x64>)
 8018e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8018e2e:	1152      	asrs	r2, r2, #5
 8018e30:	17db      	asrs	r3, r3, #31
 8018e32:	1ad3      	subs	r3, r2, r3
 8018e34:	b29a      	uxth	r2, r3
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8018e3a:	bf00      	nop
 8018e3c:	3710      	adds	r7, #16
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bd80      	pop	{r7, pc}
 8018e42:	bf00      	nop
 8018e44:	10624dd3 	.word	0x10624dd3

08018e48 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b084      	sub	sp, #16
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
 8018e50:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8018e58:	4b0c      	ldr	r3, [pc, #48]	@ (8018e8c <dhcp_handle_offer+0x44>)
 8018e5a:	789b      	ldrb	r3, [r3, #2]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d011      	beq.n	8018e84 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	2200      	movs	r2, #0
 8018e64:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8018e66:	4b0a      	ldr	r3, [pc, #40]	@ (8018e90 <dhcp_handle_offer+0x48>)
 8018e68:	689b      	ldr	r3, [r3, #8]
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7f6 fce3 	bl	800f836 <lwip_htonl>
 8018e70:	4602      	mov	r2, r0
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	691a      	ldr	r2, [r3, #16]
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8018e7e:	6878      	ldr	r0, [r7, #4]
 8018e80:	f000 f808 	bl	8018e94 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018e84:	bf00      	nop
 8018e86:	3710      	adds	r7, #16
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	bd80      	pop	{r7, pc}
 8018e8c:	2000f50c 	.word	0x2000f50c
 8018e90:	2000f4e4 	.word	0x2000f4e4

08018e94 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018e94:	b5b0      	push	{r4, r5, r7, lr}
 8018e96:	b08a      	sub	sp, #40	@ 0x28
 8018e98:	af02      	add	r7, sp, #8
 8018e9a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d109      	bne.n	8018eb6 <dhcp_select+0x22>
 8018ea2:	4b71      	ldr	r3, [pc, #452]	@ (8019068 <dhcp_select+0x1d4>)
 8018ea4:	f240 1277 	movw	r2, #375	@ 0x177
 8018ea8:	4970      	ldr	r1, [pc, #448]	@ (801906c <dhcp_select+0x1d8>)
 8018eaa:	4871      	ldr	r0, [pc, #452]	@ (8019070 <dhcp_select+0x1dc>)
 8018eac:	f005 fcb4 	bl	801e818 <iprintf>
 8018eb0:	f06f 030f 	mvn.w	r3, #15
 8018eb4:	e0d3      	b.n	801905e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018eba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8018ebc:	69bb      	ldr	r3, [r7, #24]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d109      	bne.n	8018ed6 <dhcp_select+0x42>
 8018ec2:	4b69      	ldr	r3, [pc, #420]	@ (8019068 <dhcp_select+0x1d4>)
 8018ec4:	f240 1279 	movw	r2, #377	@ 0x179
 8018ec8:	496a      	ldr	r1, [pc, #424]	@ (8019074 <dhcp_select+0x1e0>)
 8018eca:	4869      	ldr	r0, [pc, #420]	@ (8019070 <dhcp_select+0x1dc>)
 8018ecc:	f005 fca4 	bl	801e818 <iprintf>
 8018ed0:	f06f 0305 	mvn.w	r3, #5
 8018ed4:	e0c3      	b.n	801905e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8018ed6:	2101      	movs	r1, #1
 8018ed8:	69b8      	ldr	r0, [r7, #24]
 8018eda:	f000 ffe1 	bl	8019ea0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018ede:	f107 030c 	add.w	r3, r7, #12
 8018ee2:	2203      	movs	r2, #3
 8018ee4:	69b9      	ldr	r1, [r7, #24]
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	f001 fc96 	bl	801a818 <dhcp_create_msg>
 8018eec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018eee:	697b      	ldr	r3, [r7, #20]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	f000 8085 	beq.w	8019000 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018ef6:	697b      	ldr	r3, [r7, #20]
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018efc:	89b8      	ldrh	r0, [r7, #12]
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f04:	2302      	movs	r3, #2
 8018f06:	2239      	movs	r2, #57	@ 0x39
 8018f08:	f000 ffe4 	bl	8019ed4 <dhcp_option>
 8018f0c:	4603      	mov	r3, r0
 8018f0e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018f10:	89b8      	ldrh	r0, [r7, #12]
 8018f12:	693b      	ldr	r3, [r7, #16]
 8018f14:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018f1c:	461a      	mov	r2, r3
 8018f1e:	f001 f833 	bl	8019f88 <dhcp_option_short>
 8018f22:	4603      	mov	r3, r0
 8018f24:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018f26:	89b8      	ldrh	r0, [r7, #12]
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f2e:	2304      	movs	r3, #4
 8018f30:	2232      	movs	r2, #50	@ 0x32
 8018f32:	f000 ffcf 	bl	8019ed4 <dhcp_option>
 8018f36:	4603      	mov	r3, r0
 8018f38:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018f3a:	89bc      	ldrh	r4, [r7, #12]
 8018f3c:	693b      	ldr	r3, [r7, #16]
 8018f3e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018f42:	69bb      	ldr	r3, [r7, #24]
 8018f44:	69db      	ldr	r3, [r3, #28]
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7f6 fc75 	bl	800f836 <lwip_htonl>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	461a      	mov	r2, r3
 8018f50:	4629      	mov	r1, r5
 8018f52:	4620      	mov	r0, r4
 8018f54:	f001 f84a 	bl	8019fec <dhcp_option_long>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018f5c:	89b8      	ldrh	r0, [r7, #12]
 8018f5e:	693b      	ldr	r3, [r7, #16]
 8018f60:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f64:	2304      	movs	r3, #4
 8018f66:	2236      	movs	r2, #54	@ 0x36
 8018f68:	f000 ffb4 	bl	8019ed4 <dhcp_option>
 8018f6c:	4603      	mov	r3, r0
 8018f6e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8018f70:	89bc      	ldrh	r4, [r7, #12]
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018f78:	69bb      	ldr	r3, [r7, #24]
 8018f7a:	699b      	ldr	r3, [r3, #24]
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f7f6 fc5a 	bl	800f836 <lwip_htonl>
 8018f82:	4603      	mov	r3, r0
 8018f84:	461a      	mov	r2, r3
 8018f86:	4629      	mov	r1, r5
 8018f88:	4620      	mov	r0, r4
 8018f8a:	f001 f82f 	bl	8019fec <dhcp_option_long>
 8018f8e:	4603      	mov	r3, r0
 8018f90:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018f92:	89b8      	ldrh	r0, [r7, #12]
 8018f94:	693b      	ldr	r3, [r7, #16]
 8018f96:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018f9a:	2304      	movs	r3, #4
 8018f9c:	2237      	movs	r2, #55	@ 0x37
 8018f9e:	f000 ff99 	bl	8019ed4 <dhcp_option>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	77bb      	strb	r3, [r7, #30]
 8018faa:	e00e      	b.n	8018fca <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018fac:	89b8      	ldrh	r0, [r7, #12]
 8018fae:	693b      	ldr	r3, [r7, #16]
 8018fb0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018fb4:	7fbb      	ldrb	r3, [r7, #30]
 8018fb6:	4a30      	ldr	r2, [pc, #192]	@ (8019078 <dhcp_select+0x1e4>)
 8018fb8:	5cd3      	ldrb	r3, [r2, r3]
 8018fba:	461a      	mov	r2, r3
 8018fbc:	f000 ffbe 	bl	8019f3c <dhcp_option_byte>
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018fc4:	7fbb      	ldrb	r3, [r7, #30]
 8018fc6:	3301      	adds	r3, #1
 8018fc8:	77bb      	strb	r3, [r7, #30]
 8018fca:	7fbb      	ldrb	r3, [r7, #30]
 8018fcc:	2b03      	cmp	r3, #3
 8018fce:	d9ed      	bls.n	8018fac <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018fd0:	89b8      	ldrh	r0, [r7, #12]
 8018fd2:	693b      	ldr	r3, [r7, #16]
 8018fd4:	33f0      	adds	r3, #240	@ 0xf0
 8018fd6:	697a      	ldr	r2, [r7, #20]
 8018fd8:	4619      	mov	r1, r3
 8018fda:	f001 fcf3 	bl	801a9c4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018fde:	4b27      	ldr	r3, [pc, #156]	@ (801907c <dhcp_select+0x1e8>)
 8018fe0:	6818      	ldr	r0, [r3, #0]
 8018fe2:	4b27      	ldr	r3, [pc, #156]	@ (8019080 <dhcp_select+0x1ec>)
 8018fe4:	9301      	str	r3, [sp, #4]
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	9300      	str	r3, [sp, #0]
 8018fea:	2343      	movs	r3, #67	@ 0x43
 8018fec:	4a25      	ldr	r2, [pc, #148]	@ (8019084 <dhcp_select+0x1f0>)
 8018fee:	6979      	ldr	r1, [r7, #20]
 8018ff0:	f7ff fba6 	bl	8018740 <udp_sendto_if_src>
 8018ff4:	4603      	mov	r3, r0
 8018ff6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018ff8:	6978      	ldr	r0, [r7, #20]
 8018ffa:	f7f8 fb25 	bl	8011648 <pbuf_free>
 8018ffe:	e001      	b.n	8019004 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019000:	23ff      	movs	r3, #255	@ 0xff
 8019002:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019004:	69bb      	ldr	r3, [r7, #24]
 8019006:	799b      	ldrb	r3, [r3, #6]
 8019008:	2bff      	cmp	r3, #255	@ 0xff
 801900a:	d005      	beq.n	8019018 <dhcp_select+0x184>
    dhcp->tries++;
 801900c:	69bb      	ldr	r3, [r7, #24]
 801900e:	799b      	ldrb	r3, [r3, #6]
 8019010:	3301      	adds	r3, #1
 8019012:	b2da      	uxtb	r2, r3
 8019014:	69bb      	ldr	r3, [r7, #24]
 8019016:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019018:	69bb      	ldr	r3, [r7, #24]
 801901a:	799b      	ldrb	r3, [r3, #6]
 801901c:	2b05      	cmp	r3, #5
 801901e:	d80d      	bhi.n	801903c <dhcp_select+0x1a8>
 8019020:	69bb      	ldr	r3, [r7, #24]
 8019022:	799b      	ldrb	r3, [r3, #6]
 8019024:	461a      	mov	r2, r3
 8019026:	2301      	movs	r3, #1
 8019028:	4093      	lsls	r3, r2
 801902a:	b29b      	uxth	r3, r3
 801902c:	461a      	mov	r2, r3
 801902e:	0152      	lsls	r2, r2, #5
 8019030:	1ad2      	subs	r2, r2, r3
 8019032:	0092      	lsls	r2, r2, #2
 8019034:	4413      	add	r3, r2
 8019036:	00db      	lsls	r3, r3, #3
 8019038:	b29b      	uxth	r3, r3
 801903a:	e001      	b.n	8019040 <dhcp_select+0x1ac>
 801903c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8019040:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019042:	89fb      	ldrh	r3, [r7, #14]
 8019044:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019048:	4a0f      	ldr	r2, [pc, #60]	@ (8019088 <dhcp_select+0x1f4>)
 801904a:	fb82 1203 	smull	r1, r2, r2, r3
 801904e:	1152      	asrs	r2, r2, #5
 8019050:	17db      	asrs	r3, r3, #31
 8019052:	1ad3      	subs	r3, r2, r3
 8019054:	b29a      	uxth	r2, r3
 8019056:	69bb      	ldr	r3, [r7, #24]
 8019058:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801905a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801905e:	4618      	mov	r0, r3
 8019060:	3720      	adds	r7, #32
 8019062:	46bd      	mov	sp, r7
 8019064:	bdb0      	pop	{r4, r5, r7, pc}
 8019066:	bf00      	nop
 8019068:	080254f8 	.word	0x080254f8
 801906c:	080255a4 	.word	0x080255a4
 8019070:	08025558 	.word	0x08025558
 8019074:	080255c0 	.word	0x080255c0
 8019078:	20000044 	.word	0x20000044
 801907c:	2000f518 	.word	0x2000f518
 8019080:	08026270 	.word	0x08026270
 8019084:	08026274 	.word	0x08026274
 8019088:	10624dd3 	.word	0x10624dd3

0801908c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b082      	sub	sp, #8
 8019090:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8019092:	4b27      	ldr	r3, [pc, #156]	@ (8019130 <dhcp_coarse_tmr+0xa4>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	607b      	str	r3, [r7, #4]
 8019098:	e042      	b.n	8019120 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801909e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80190a0:	683b      	ldr	r3, [r7, #0]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d039      	beq.n	801911a <dhcp_coarse_tmr+0x8e>
 80190a6:	683b      	ldr	r3, [r7, #0]
 80190a8:	795b      	ldrb	r3, [r3, #5]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d035      	beq.n	801911a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	8a9b      	ldrh	r3, [r3, #20]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d012      	beq.n	80190dc <dhcp_coarse_tmr+0x50>
 80190b6:	683b      	ldr	r3, [r7, #0]
 80190b8:	8a5b      	ldrh	r3, [r3, #18]
 80190ba:	3301      	adds	r3, #1
 80190bc:	b29a      	uxth	r2, r3
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	825a      	strh	r2, [r3, #18]
 80190c2:	683b      	ldr	r3, [r7, #0]
 80190c4:	8a5a      	ldrh	r2, [r3, #18]
 80190c6:	683b      	ldr	r3, [r7, #0]
 80190c8:	8a9b      	ldrh	r3, [r3, #20]
 80190ca:	429a      	cmp	r2, r3
 80190cc:	d106      	bne.n	80190dc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80190ce:	6878      	ldr	r0, [r7, #4]
 80190d0:	f000 fe4c 	bl	8019d6c <dhcp_release_and_stop>
        dhcp_start(netif);
 80190d4:	6878      	ldr	r0, [r7, #4]
 80190d6:	f000 f989 	bl	80193ec <dhcp_start>
 80190da:	e01e      	b.n	801911a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80190dc:	683b      	ldr	r3, [r7, #0]
 80190de:	8a1b      	ldrh	r3, [r3, #16]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d00b      	beq.n	80190fc <dhcp_coarse_tmr+0x70>
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	8a1b      	ldrh	r3, [r3, #16]
 80190e8:	1e5a      	subs	r2, r3, #1
 80190ea:	b291      	uxth	r1, r2
 80190ec:	683a      	ldr	r2, [r7, #0]
 80190ee:	8211      	strh	r1, [r2, #16]
 80190f0:	2b01      	cmp	r3, #1
 80190f2:	d103      	bne.n	80190fc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f000 f8c6 	bl	8019286 <dhcp_t2_timeout>
 80190fa:	e00e      	b.n	801911a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	89db      	ldrh	r3, [r3, #14]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d00a      	beq.n	801911a <dhcp_coarse_tmr+0x8e>
 8019104:	683b      	ldr	r3, [r7, #0]
 8019106:	89db      	ldrh	r3, [r3, #14]
 8019108:	1e5a      	subs	r2, r3, #1
 801910a:	b291      	uxth	r1, r2
 801910c:	683a      	ldr	r2, [r7, #0]
 801910e:	81d1      	strh	r1, [r2, #14]
 8019110:	2b01      	cmp	r3, #1
 8019112:	d102      	bne.n	801911a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8019114:	6878      	ldr	r0, [r7, #4]
 8019116:	f000 f888 	bl	801922a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	607b      	str	r3, [r7, #4]
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d1b9      	bne.n	801909a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8019126:	bf00      	nop
 8019128:	bf00      	nop
 801912a:	3708      	adds	r7, #8
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}
 8019130:	2000f478 	.word	0x2000f478

08019134 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b082      	sub	sp, #8
 8019138:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801913a:	4b16      	ldr	r3, [pc, #88]	@ (8019194 <dhcp_fine_tmr+0x60>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	607b      	str	r3, [r7, #4]
 8019140:	e020      	b.n	8019184 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019146:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8019148:	683b      	ldr	r3, [r7, #0]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d017      	beq.n	801917e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	891b      	ldrh	r3, [r3, #8]
 8019152:	2b01      	cmp	r3, #1
 8019154:	d906      	bls.n	8019164 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8019156:	683b      	ldr	r3, [r7, #0]
 8019158:	891b      	ldrh	r3, [r3, #8]
 801915a:	3b01      	subs	r3, #1
 801915c:	b29a      	uxth	r2, r3
 801915e:	683b      	ldr	r3, [r7, #0]
 8019160:	811a      	strh	r2, [r3, #8]
 8019162:	e00c      	b.n	801917e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8019164:	683b      	ldr	r3, [r7, #0]
 8019166:	891b      	ldrh	r3, [r3, #8]
 8019168:	2b01      	cmp	r3, #1
 801916a:	d108      	bne.n	801917e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801916c:	683b      	ldr	r3, [r7, #0]
 801916e:	891b      	ldrh	r3, [r3, #8]
 8019170:	3b01      	subs	r3, #1
 8019172:	b29a      	uxth	r2, r3
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8019178:	6878      	ldr	r0, [r7, #4]
 801917a:	f000 f80d 	bl	8019198 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	607b      	str	r3, [r7, #4]
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d1db      	bne.n	8019142 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801918a:	bf00      	nop
 801918c:	bf00      	nop
 801918e:	3708      	adds	r7, #8
 8019190:	46bd      	mov	sp, r7
 8019192:	bd80      	pop	{r7, pc}
 8019194:	2000f478 	.word	0x2000f478

08019198 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b084      	sub	sp, #16
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	795b      	ldrb	r3, [r3, #5]
 80191aa:	2b0c      	cmp	r3, #12
 80191ac:	d003      	beq.n	80191b6 <dhcp_timeout+0x1e>
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	795b      	ldrb	r3, [r3, #5]
 80191b2:	2b06      	cmp	r3, #6
 80191b4:	d103      	bne.n	80191be <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80191b6:	6878      	ldr	r0, [r7, #4]
 80191b8:	f000 fa74 	bl	80196a4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80191bc:	e031      	b.n	8019222 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	795b      	ldrb	r3, [r3, #5]
 80191c2:	2b01      	cmp	r3, #1
 80191c4:	d10e      	bne.n	80191e4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	799b      	ldrb	r3, [r3, #6]
 80191ca:	2b05      	cmp	r3, #5
 80191cc:	d803      	bhi.n	80191d6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80191ce:	6878      	ldr	r0, [r7, #4]
 80191d0:	f7ff fe60 	bl	8018e94 <dhcp_select>
}
 80191d4:	e025      	b.n	8019222 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80191d6:	6878      	ldr	r0, [r7, #4]
 80191d8:	f000 fdc8 	bl	8019d6c <dhcp_release_and_stop>
      dhcp_start(netif);
 80191dc:	6878      	ldr	r0, [r7, #4]
 80191de:	f000 f905 	bl	80193ec <dhcp_start>
}
 80191e2:	e01e      	b.n	8019222 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	795b      	ldrb	r3, [r3, #5]
 80191e8:	2b08      	cmp	r3, #8
 80191ea:	d10b      	bne.n	8019204 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	799b      	ldrb	r3, [r3, #6]
 80191f0:	2b01      	cmp	r3, #1
 80191f2:	d803      	bhi.n	80191fc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80191f4:	6878      	ldr	r0, [r7, #4]
 80191f6:	f7ff fdf3 	bl	8018de0 <dhcp_check>
}
 80191fa:	e012      	b.n	8019222 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f000 faf3 	bl	80197e8 <dhcp_bind>
}
 8019202:	e00e      	b.n	8019222 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	795b      	ldrb	r3, [r3, #5]
 8019208:	2b03      	cmp	r3, #3
 801920a:	d10a      	bne.n	8019222 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	799b      	ldrb	r3, [r3, #6]
 8019210:	2b01      	cmp	r3, #1
 8019212:	d803      	bhi.n	801921c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f000 fcf5 	bl	8019c04 <dhcp_reboot>
}
 801921a:	e002      	b.n	8019222 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801921c:	6878      	ldr	r0, [r7, #4]
 801921e:	f000 fa41 	bl	80196a4 <dhcp_discover>
}
 8019222:	bf00      	nop
 8019224:	3710      	adds	r7, #16
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}

0801922a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801922a:	b580      	push	{r7, lr}
 801922c:	b084      	sub	sp, #16
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019236:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	795b      	ldrb	r3, [r3, #5]
 801923c:	2b01      	cmp	r3, #1
 801923e:	d007      	beq.n	8019250 <dhcp_t1_timeout+0x26>
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	795b      	ldrb	r3, [r3, #5]
 8019244:	2b0a      	cmp	r3, #10
 8019246:	d003      	beq.n	8019250 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801924c:	2b05      	cmp	r3, #5
 801924e:	d116      	bne.n	801927e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8019250:	6878      	ldr	r0, [r7, #4]
 8019252:	f000 fba3 	bl	801999c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	899b      	ldrh	r3, [r3, #12]
 801925a:	461a      	mov	r2, r3
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	8a5b      	ldrh	r3, [r3, #18]
 8019260:	1ad3      	subs	r3, r2, r3
 8019262:	2b01      	cmp	r3, #1
 8019264:	dd0b      	ble.n	801927e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	899b      	ldrh	r3, [r3, #12]
 801926a:	461a      	mov	r2, r3
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	8a5b      	ldrh	r3, [r3, #18]
 8019270:	1ad3      	subs	r3, r2, r3
 8019272:	0fda      	lsrs	r2, r3, #31
 8019274:	4413      	add	r3, r2
 8019276:	105b      	asrs	r3, r3, #1
 8019278:	b29a      	uxth	r2, r3
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801927e:	bf00      	nop
 8019280:	3710      	adds	r7, #16
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}

08019286 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8019286:	b580      	push	{r7, lr}
 8019288:	b084      	sub	sp, #16
 801928a:	af00      	add	r7, sp, #0
 801928c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019292:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	795b      	ldrb	r3, [r3, #5]
 8019298:	2b01      	cmp	r3, #1
 801929a:	d00b      	beq.n	80192b4 <dhcp_t2_timeout+0x2e>
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	795b      	ldrb	r3, [r3, #5]
 80192a0:	2b0a      	cmp	r3, #10
 80192a2:	d007      	beq.n	80192b4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80192a8:	2b05      	cmp	r3, #5
 80192aa:	d003      	beq.n	80192b4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	795b      	ldrb	r3, [r3, #5]
 80192b0:	2b04      	cmp	r3, #4
 80192b2:	d116      	bne.n	80192e2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80192b4:	6878      	ldr	r0, [r7, #4]
 80192b6:	f000 fc0b 	bl	8019ad0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	8a9b      	ldrh	r3, [r3, #20]
 80192be:	461a      	mov	r2, r3
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	8a5b      	ldrh	r3, [r3, #18]
 80192c4:	1ad3      	subs	r3, r2, r3
 80192c6:	2b01      	cmp	r3, #1
 80192c8:	dd0b      	ble.n	80192e2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	8a9b      	ldrh	r3, [r3, #20]
 80192ce:	461a      	mov	r2, r3
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	8a5b      	ldrh	r3, [r3, #18]
 80192d4:	1ad3      	subs	r3, r2, r3
 80192d6:	0fda      	lsrs	r2, r3, #31
 80192d8:	4413      	add	r3, r2
 80192da:	105b      	asrs	r3, r3, #1
 80192dc:	b29a      	uxth	r2, r3
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80192e2:	bf00      	nop
 80192e4:	3710      	adds	r7, #16
 80192e6:	46bd      	mov	sp, r7
 80192e8:	bd80      	pop	{r7, pc}
	...

080192ec <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b086      	sub	sp, #24
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
 80192f4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192fa:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80192fc:	693b      	ldr	r3, [r7, #16]
 80192fe:	2200      	movs	r2, #0
 8019300:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019302:	693b      	ldr	r3, [r7, #16]
 8019304:	2200      	movs	r2, #0
 8019306:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019308:	4b36      	ldr	r3, [pc, #216]	@ (80193e4 <dhcp_handle_ack+0xf8>)
 801930a:	78db      	ldrb	r3, [r3, #3]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d003      	beq.n	8019318 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8019310:	4b35      	ldr	r3, [pc, #212]	@ (80193e8 <dhcp_handle_ack+0xfc>)
 8019312:	68da      	ldr	r2, [r3, #12]
 8019314:	693b      	ldr	r3, [r7, #16]
 8019316:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8019318:	4b32      	ldr	r3, [pc, #200]	@ (80193e4 <dhcp_handle_ack+0xf8>)
 801931a:	791b      	ldrb	r3, [r3, #4]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d004      	beq.n	801932a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8019320:	4b31      	ldr	r3, [pc, #196]	@ (80193e8 <dhcp_handle_ack+0xfc>)
 8019322:	691a      	ldr	r2, [r3, #16]
 8019324:	693b      	ldr	r3, [r7, #16]
 8019326:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019328:	e004      	b.n	8019334 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801932a:	693b      	ldr	r3, [r7, #16]
 801932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801932e:	085a      	lsrs	r2, r3, #1
 8019330:	693b      	ldr	r3, [r7, #16]
 8019332:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8019334:	4b2b      	ldr	r3, [pc, #172]	@ (80193e4 <dhcp_handle_ack+0xf8>)
 8019336:	795b      	ldrb	r3, [r3, #5]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d004      	beq.n	8019346 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801933c:	4b2a      	ldr	r3, [pc, #168]	@ (80193e8 <dhcp_handle_ack+0xfc>)
 801933e:	695a      	ldr	r2, [r3, #20]
 8019340:	693b      	ldr	r3, [r7, #16]
 8019342:	631a      	str	r2, [r3, #48]	@ 0x30
 8019344:	e007      	b.n	8019356 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801934a:	4613      	mov	r3, r2
 801934c:	00db      	lsls	r3, r3, #3
 801934e:	1a9b      	subs	r3, r3, r2
 8019350:	08da      	lsrs	r2, r3, #3
 8019352:	693b      	ldr	r3, [r7, #16]
 8019354:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019356:	683b      	ldr	r3, [r7, #0]
 8019358:	691a      	ldr	r2, [r3, #16]
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801935e:	4b21      	ldr	r3, [pc, #132]	@ (80193e4 <dhcp_handle_ack+0xf8>)
 8019360:	799b      	ldrb	r3, [r3, #6]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d00b      	beq.n	801937e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019366:	4b20      	ldr	r3, [pc, #128]	@ (80193e8 <dhcp_handle_ack+0xfc>)
 8019368:	699b      	ldr	r3, [r3, #24]
 801936a:	4618      	mov	r0, r3
 801936c:	f7f6 fa63 	bl	800f836 <lwip_htonl>
 8019370:	4602      	mov	r2, r0
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	2201      	movs	r2, #1
 801937a:	71da      	strb	r2, [r3, #7]
 801937c:	e002      	b.n	8019384 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801937e:	693b      	ldr	r3, [r7, #16]
 8019380:	2200      	movs	r2, #0
 8019382:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8019384:	4b17      	ldr	r3, [pc, #92]	@ (80193e4 <dhcp_handle_ack+0xf8>)
 8019386:	79db      	ldrb	r3, [r3, #7]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d007      	beq.n	801939c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801938c:	4b16      	ldr	r3, [pc, #88]	@ (80193e8 <dhcp_handle_ack+0xfc>)
 801938e:	69db      	ldr	r3, [r3, #28]
 8019390:	4618      	mov	r0, r3
 8019392:	f7f6 fa50 	bl	800f836 <lwip_htonl>
 8019396:	4602      	mov	r2, r0
 8019398:	693b      	ldr	r3, [r7, #16]
 801939a:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801939c:	2300      	movs	r3, #0
 801939e:	75fb      	strb	r3, [r7, #23]
 80193a0:	e013      	b.n	80193ca <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 80193a2:	7dfb      	ldrb	r3, [r7, #23]
 80193a4:	3308      	adds	r3, #8
 80193a6:	4a10      	ldr	r2, [pc, #64]	@ (80193e8 <dhcp_handle_ack+0xfc>)
 80193a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80193ac:	4618      	mov	r0, r3
 80193ae:	f7f6 fa42 	bl	800f836 <lwip_htonl>
 80193b2:	4603      	mov	r3, r0
 80193b4:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 80193b6:	f107 020c 	add.w	r2, r7, #12
 80193ba:	7dfb      	ldrb	r3, [r7, #23]
 80193bc:	4611      	mov	r1, r2
 80193be:	4618      	mov	r0, r3
 80193c0:	f7f6 fa5a 	bl	800f878 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80193c4:	7dfb      	ldrb	r3, [r7, #23]
 80193c6:	3301      	adds	r3, #1
 80193c8:	75fb      	strb	r3, [r7, #23]
 80193ca:	7dfb      	ldrb	r3, [r7, #23]
 80193cc:	2b01      	cmp	r3, #1
 80193ce:	d805      	bhi.n	80193dc <dhcp_handle_ack+0xf0>
 80193d0:	7dfb      	ldrb	r3, [r7, #23]
 80193d2:	3308      	adds	r3, #8
 80193d4:	4a03      	ldr	r2, [pc, #12]	@ (80193e4 <dhcp_handle_ack+0xf8>)
 80193d6:	5cd3      	ldrb	r3, [r2, r3]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d1e2      	bne.n	80193a2 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80193dc:	bf00      	nop
 80193de:	3718      	adds	r7, #24
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}
 80193e4:	2000f50c 	.word	0x2000f50c
 80193e8:	2000f4e4 	.word	0x2000f4e4

080193ec <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b084      	sub	sp, #16
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d109      	bne.n	801940e <dhcp_start+0x22>
 80193fa:	4b37      	ldr	r3, [pc, #220]	@ (80194d8 <dhcp_start+0xec>)
 80193fc:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8019400:	4936      	ldr	r1, [pc, #216]	@ (80194dc <dhcp_start+0xf0>)
 8019402:	4837      	ldr	r0, [pc, #220]	@ (80194e0 <dhcp_start+0xf4>)
 8019404:	f005 fa08 	bl	801e818 <iprintf>
 8019408:	f06f 030f 	mvn.w	r3, #15
 801940c:	e060      	b.n	80194d0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019414:	f003 0301 	and.w	r3, r3, #1
 8019418:	2b00      	cmp	r3, #0
 801941a:	d109      	bne.n	8019430 <dhcp_start+0x44>
 801941c:	4b2e      	ldr	r3, [pc, #184]	@ (80194d8 <dhcp_start+0xec>)
 801941e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8019422:	4930      	ldr	r1, [pc, #192]	@ (80194e4 <dhcp_start+0xf8>)
 8019424:	482e      	ldr	r0, [pc, #184]	@ (80194e0 <dhcp_start+0xf4>)
 8019426:	f005 f9f7 	bl	801e818 <iprintf>
 801942a:	f06f 030f 	mvn.w	r3, #15
 801942e:	e04f      	b.n	80194d0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019434:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801943a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801943e:	d202      	bcs.n	8019446 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8019440:	f04f 33ff 	mov.w	r3, #4294967295
 8019444:	e044      	b.n	80194d0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d10d      	bne.n	8019468 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801944c:	2034      	movs	r0, #52	@ 0x34
 801944e:	f7f6 ffff 	bl	8010450 <mem_malloc>
 8019452:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d102      	bne.n	8019460 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801945a:	f04f 33ff 	mov.w	r3, #4294967295
 801945e:	e037      	b.n	80194d0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	68fa      	ldr	r2, [r7, #12]
 8019464:	625a      	str	r2, [r3, #36]	@ 0x24
 8019466:	e005      	b.n	8019474 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	791b      	ldrb	r3, [r3, #4]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d001      	beq.n	8019474 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019470:	f7ff fc72 	bl	8018d58 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8019474:	2234      	movs	r2, #52	@ 0x34
 8019476:	2100      	movs	r1, #0
 8019478:	68f8      	ldr	r0, [r7, #12]
 801947a:	f005 fa6c 	bl	801e956 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801947e:	f7ff fc19 	bl	8018cb4 <dhcp_inc_pcb_refcount>
 8019482:	4603      	mov	r3, r0
 8019484:	2b00      	cmp	r3, #0
 8019486:	d002      	beq.n	801948e <dhcp_start+0xa2>
    return ERR_MEM;
 8019488:	f04f 33ff 	mov.w	r3, #4294967295
 801948c:	e020      	b.n	80194d0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	2201      	movs	r2, #1
 8019492:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801949a:	f003 0304 	and.w	r3, r3, #4
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d105      	bne.n	80194ae <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80194a2:	2102      	movs	r1, #2
 80194a4:	68f8      	ldr	r0, [r7, #12]
 80194a6:	f000 fcfb 	bl	8019ea0 <dhcp_set_state>
    return ERR_OK;
 80194aa:	2300      	movs	r3, #0
 80194ac:	e010      	b.n	80194d0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80194ae:	6878      	ldr	r0, [r7, #4]
 80194b0:	f000 f8f8 	bl	80196a4 <dhcp_discover>
 80194b4:	4603      	mov	r3, r0
 80194b6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80194b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d005      	beq.n	80194cc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80194c0:	6878      	ldr	r0, [r7, #4]
 80194c2:	f000 fc53 	bl	8019d6c <dhcp_release_and_stop>
    return ERR_MEM;
 80194c6:	f04f 33ff 	mov.w	r3, #4294967295
 80194ca:	e001      	b.n	80194d0 <dhcp_start+0xe4>
  }
  return result;
 80194cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80194d0:	4618      	mov	r0, r3
 80194d2:	3710      	adds	r7, #16
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bd80      	pop	{r7, pc}
 80194d8:	080254f8 	.word	0x080254f8
 80194dc:	080255dc 	.word	0x080255dc
 80194e0:	08025558 	.word	0x08025558
 80194e4:	08025620 	.word	0x08025620

080194e8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b084      	sub	sp, #16
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194f4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d025      	beq.n	8019548 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	795b      	ldrb	r3, [r3, #5]
 8019500:	2b0a      	cmp	r3, #10
 8019502:	d008      	beq.n	8019516 <dhcp_network_changed+0x2e>
 8019504:	2b0a      	cmp	r3, #10
 8019506:	dc0d      	bgt.n	8019524 <dhcp_network_changed+0x3c>
 8019508:	2b00      	cmp	r3, #0
 801950a:	d01f      	beq.n	801954c <dhcp_network_changed+0x64>
 801950c:	2b00      	cmp	r3, #0
 801950e:	db09      	blt.n	8019524 <dhcp_network_changed+0x3c>
 8019510:	3b03      	subs	r3, #3
 8019512:	2b02      	cmp	r3, #2
 8019514:	d806      	bhi.n	8019524 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	2200      	movs	r2, #0
 801951a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801951c:	6878      	ldr	r0, [r7, #4]
 801951e:	f000 fb71 	bl	8019c04 <dhcp_reboot>
      break;
 8019522:	e014      	b.n	801954e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	795b      	ldrb	r3, [r3, #5]
 8019528:	2b0c      	cmp	r3, #12
 801952a:	d906      	bls.n	801953a <dhcp_network_changed+0x52>
 801952c:	4b09      	ldr	r3, [pc, #36]	@ (8019554 <dhcp_network_changed+0x6c>)
 801952e:	f240 326d 	movw	r2, #877	@ 0x36d
 8019532:	4909      	ldr	r1, [pc, #36]	@ (8019558 <dhcp_network_changed+0x70>)
 8019534:	4809      	ldr	r0, [pc, #36]	@ (801955c <dhcp_network_changed+0x74>)
 8019536:	f005 f96f 	bl	801e818 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	2200      	movs	r2, #0
 801953e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f000 f8af 	bl	80196a4 <dhcp_discover>
      break;
 8019546:	e002      	b.n	801954e <dhcp_network_changed+0x66>
    return;
 8019548:	bf00      	nop
 801954a:	e000      	b.n	801954e <dhcp_network_changed+0x66>
      break;
 801954c:	bf00      	nop
  }
}
 801954e:	3710      	adds	r7, #16
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}
 8019554:	080254f8 	.word	0x080254f8
 8019558:	08025644 	.word	0x08025644
 801955c:	08025558 	.word	0x08025558

08019560 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b084      	sub	sp, #16
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d107      	bne.n	8019580 <dhcp_arp_reply+0x20>
 8019570:	4b0e      	ldr	r3, [pc, #56]	@ (80195ac <dhcp_arp_reply+0x4c>)
 8019572:	f240 328b 	movw	r2, #907	@ 0x38b
 8019576:	490e      	ldr	r1, [pc, #56]	@ (80195b0 <dhcp_arp_reply+0x50>)
 8019578:	480e      	ldr	r0, [pc, #56]	@ (80195b4 <dhcp_arp_reply+0x54>)
 801957a:	f005 f94d 	bl	801e818 <iprintf>
 801957e:	e012      	b.n	80195a6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019584:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d00c      	beq.n	80195a6 <dhcp_arp_reply+0x46>
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	795b      	ldrb	r3, [r3, #5]
 8019590:	2b08      	cmp	r3, #8
 8019592:	d108      	bne.n	80195a6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	681a      	ldr	r2, [r3, #0]
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	69db      	ldr	r3, [r3, #28]
 801959c:	429a      	cmp	r2, r3
 801959e:	d102      	bne.n	80195a6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80195a0:	6878      	ldr	r0, [r7, #4]
 80195a2:	f000 f809 	bl	80195b8 <dhcp_decline>
    }
  }
}
 80195a6:	3710      	adds	r7, #16
 80195a8:	46bd      	mov	sp, r7
 80195aa:	bd80      	pop	{r7, pc}
 80195ac:	080254f8 	.word	0x080254f8
 80195b0:	080255dc 	.word	0x080255dc
 80195b4:	08025558 	.word	0x08025558

080195b8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80195b8:	b5b0      	push	{r4, r5, r7, lr}
 80195ba:	b08a      	sub	sp, #40	@ 0x28
 80195bc:	af02      	add	r7, sp, #8
 80195be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195c4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80195c6:	210c      	movs	r1, #12
 80195c8:	69b8      	ldr	r0, [r7, #24]
 80195ca:	f000 fc69 	bl	8019ea0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80195ce:	f107 030c 	add.w	r3, r7, #12
 80195d2:	2204      	movs	r2, #4
 80195d4:	69b9      	ldr	r1, [r7, #24]
 80195d6:	6878      	ldr	r0, [r7, #4]
 80195d8:	f001 f91e 	bl	801a818 <dhcp_create_msg>
 80195dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80195de:	697b      	ldr	r3, [r7, #20]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d035      	beq.n	8019650 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80195e4:	697b      	ldr	r3, [r7, #20]
 80195e6:	685b      	ldr	r3, [r3, #4]
 80195e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80195ea:	89b8      	ldrh	r0, [r7, #12]
 80195ec:	693b      	ldr	r3, [r7, #16]
 80195ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80195f2:	2304      	movs	r3, #4
 80195f4:	2232      	movs	r2, #50	@ 0x32
 80195f6:	f000 fc6d 	bl	8019ed4 <dhcp_option>
 80195fa:	4603      	mov	r3, r0
 80195fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80195fe:	89bc      	ldrh	r4, [r7, #12]
 8019600:	693b      	ldr	r3, [r7, #16]
 8019602:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019606:	69bb      	ldr	r3, [r7, #24]
 8019608:	69db      	ldr	r3, [r3, #28]
 801960a:	4618      	mov	r0, r3
 801960c:	f7f6 f913 	bl	800f836 <lwip_htonl>
 8019610:	4603      	mov	r3, r0
 8019612:	461a      	mov	r2, r3
 8019614:	4629      	mov	r1, r5
 8019616:	4620      	mov	r0, r4
 8019618:	f000 fce8 	bl	8019fec <dhcp_option_long>
 801961c:	4603      	mov	r3, r0
 801961e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019620:	89b8      	ldrh	r0, [r7, #12]
 8019622:	693b      	ldr	r3, [r7, #16]
 8019624:	33f0      	adds	r3, #240	@ 0xf0
 8019626:	697a      	ldr	r2, [r7, #20]
 8019628:	4619      	mov	r1, r3
 801962a:	f001 f9cb 	bl	801a9c4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801962e:	4b19      	ldr	r3, [pc, #100]	@ (8019694 <dhcp_decline+0xdc>)
 8019630:	6818      	ldr	r0, [r3, #0]
 8019632:	4b19      	ldr	r3, [pc, #100]	@ (8019698 <dhcp_decline+0xe0>)
 8019634:	9301      	str	r3, [sp, #4]
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	9300      	str	r3, [sp, #0]
 801963a:	2343      	movs	r3, #67	@ 0x43
 801963c:	4a17      	ldr	r2, [pc, #92]	@ (801969c <dhcp_decline+0xe4>)
 801963e:	6979      	ldr	r1, [r7, #20]
 8019640:	f7ff f87e 	bl	8018740 <udp_sendto_if_src>
 8019644:	4603      	mov	r3, r0
 8019646:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019648:	6978      	ldr	r0, [r7, #20]
 801964a:	f7f7 fffd 	bl	8011648 <pbuf_free>
 801964e:	e001      	b.n	8019654 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019650:	23ff      	movs	r3, #255	@ 0xff
 8019652:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019654:	69bb      	ldr	r3, [r7, #24]
 8019656:	799b      	ldrb	r3, [r3, #6]
 8019658:	2bff      	cmp	r3, #255	@ 0xff
 801965a:	d005      	beq.n	8019668 <dhcp_decline+0xb0>
    dhcp->tries++;
 801965c:	69bb      	ldr	r3, [r7, #24]
 801965e:	799b      	ldrb	r3, [r3, #6]
 8019660:	3301      	adds	r3, #1
 8019662:	b2da      	uxtb	r2, r3
 8019664:	69bb      	ldr	r3, [r7, #24]
 8019666:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8019668:	f242 7310 	movw	r3, #10000	@ 0x2710
 801966c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801966e:	89fb      	ldrh	r3, [r7, #14]
 8019670:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019674:	4a0a      	ldr	r2, [pc, #40]	@ (80196a0 <dhcp_decline+0xe8>)
 8019676:	fb82 1203 	smull	r1, r2, r2, r3
 801967a:	1152      	asrs	r2, r2, #5
 801967c:	17db      	asrs	r3, r3, #31
 801967e:	1ad3      	subs	r3, r2, r3
 8019680:	b29a      	uxth	r2, r3
 8019682:	69bb      	ldr	r3, [r7, #24]
 8019684:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019686:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801968a:	4618      	mov	r0, r3
 801968c:	3720      	adds	r7, #32
 801968e:	46bd      	mov	sp, r7
 8019690:	bdb0      	pop	{r4, r5, r7, pc}
 8019692:	bf00      	nop
 8019694:	2000f518 	.word	0x2000f518
 8019698:	08026270 	.word	0x08026270
 801969c:	08026274 	.word	0x08026274
 80196a0:	10624dd3 	.word	0x10624dd3

080196a4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b08a      	sub	sp, #40	@ 0x28
 80196a8:	af02      	add	r7, sp, #8
 80196aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196b0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80196b2:	2300      	movs	r3, #0
 80196b4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80196b6:	69bb      	ldr	r3, [r7, #24]
 80196b8:	2200      	movs	r2, #0
 80196ba:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80196bc:	2106      	movs	r1, #6
 80196be:	69b8      	ldr	r0, [r7, #24]
 80196c0:	f000 fbee 	bl	8019ea0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80196c4:	f107 0308 	add.w	r3, r7, #8
 80196c8:	2201      	movs	r2, #1
 80196ca:	69b9      	ldr	r1, [r7, #24]
 80196cc:	6878      	ldr	r0, [r7, #4]
 80196ce:	f001 f8a3 	bl	801a818 <dhcp_create_msg>
 80196d2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80196d4:	693b      	ldr	r3, [r7, #16]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d04b      	beq.n	8019772 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80196da:	693b      	ldr	r3, [r7, #16]
 80196dc:	685b      	ldr	r3, [r3, #4]
 80196de:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80196e0:	8938      	ldrh	r0, [r7, #8]
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196e8:	2302      	movs	r3, #2
 80196ea:	2239      	movs	r2, #57	@ 0x39
 80196ec:	f000 fbf2 	bl	8019ed4 <dhcp_option>
 80196f0:	4603      	mov	r3, r0
 80196f2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80196f4:	8938      	ldrh	r0, [r7, #8]
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019700:	461a      	mov	r2, r3
 8019702:	f000 fc41 	bl	8019f88 <dhcp_option_short>
 8019706:	4603      	mov	r3, r0
 8019708:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801970a:	8938      	ldrh	r0, [r7, #8]
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019712:	2304      	movs	r3, #4
 8019714:	2237      	movs	r2, #55	@ 0x37
 8019716:	f000 fbdd 	bl	8019ed4 <dhcp_option>
 801971a:	4603      	mov	r3, r0
 801971c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801971e:	2300      	movs	r3, #0
 8019720:	77fb      	strb	r3, [r7, #31]
 8019722:	e00e      	b.n	8019742 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019724:	8938      	ldrh	r0, [r7, #8]
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801972c:	7ffb      	ldrb	r3, [r7, #31]
 801972e:	4a29      	ldr	r2, [pc, #164]	@ (80197d4 <dhcp_discover+0x130>)
 8019730:	5cd3      	ldrb	r3, [r2, r3]
 8019732:	461a      	mov	r2, r3
 8019734:	f000 fc02 	bl	8019f3c <dhcp_option_byte>
 8019738:	4603      	mov	r3, r0
 801973a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801973c:	7ffb      	ldrb	r3, [r7, #31]
 801973e:	3301      	adds	r3, #1
 8019740:	77fb      	strb	r3, [r7, #31]
 8019742:	7ffb      	ldrb	r3, [r7, #31]
 8019744:	2b03      	cmp	r3, #3
 8019746:	d9ed      	bls.n	8019724 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019748:	8938      	ldrh	r0, [r7, #8]
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	33f0      	adds	r3, #240	@ 0xf0
 801974e:	693a      	ldr	r2, [r7, #16]
 8019750:	4619      	mov	r1, r3
 8019752:	f001 f937 	bl	801a9c4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019756:	4b20      	ldr	r3, [pc, #128]	@ (80197d8 <dhcp_discover+0x134>)
 8019758:	6818      	ldr	r0, [r3, #0]
 801975a:	4b20      	ldr	r3, [pc, #128]	@ (80197dc <dhcp_discover+0x138>)
 801975c:	9301      	str	r3, [sp, #4]
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	9300      	str	r3, [sp, #0]
 8019762:	2343      	movs	r3, #67	@ 0x43
 8019764:	4a1e      	ldr	r2, [pc, #120]	@ (80197e0 <dhcp_discover+0x13c>)
 8019766:	6939      	ldr	r1, [r7, #16]
 8019768:	f7fe ffea 	bl	8018740 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801976c:	6938      	ldr	r0, [r7, #16]
 801976e:	f7f7 ff6b 	bl	8011648 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8019772:	69bb      	ldr	r3, [r7, #24]
 8019774:	799b      	ldrb	r3, [r3, #6]
 8019776:	2bff      	cmp	r3, #255	@ 0xff
 8019778:	d005      	beq.n	8019786 <dhcp_discover+0xe2>
    dhcp->tries++;
 801977a:	69bb      	ldr	r3, [r7, #24]
 801977c:	799b      	ldrb	r3, [r3, #6]
 801977e:	3301      	adds	r3, #1
 8019780:	b2da      	uxtb	r2, r3
 8019782:	69bb      	ldr	r3, [r7, #24]
 8019784:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019786:	69bb      	ldr	r3, [r7, #24]
 8019788:	799b      	ldrb	r3, [r3, #6]
 801978a:	2b05      	cmp	r3, #5
 801978c:	d80d      	bhi.n	80197aa <dhcp_discover+0x106>
 801978e:	69bb      	ldr	r3, [r7, #24]
 8019790:	799b      	ldrb	r3, [r3, #6]
 8019792:	461a      	mov	r2, r3
 8019794:	2301      	movs	r3, #1
 8019796:	4093      	lsls	r3, r2
 8019798:	b29b      	uxth	r3, r3
 801979a:	461a      	mov	r2, r3
 801979c:	0152      	lsls	r2, r2, #5
 801979e:	1ad2      	subs	r2, r2, r3
 80197a0:	0092      	lsls	r2, r2, #2
 80197a2:	4413      	add	r3, r2
 80197a4:	00db      	lsls	r3, r3, #3
 80197a6:	b29b      	uxth	r3, r3
 80197a8:	e001      	b.n	80197ae <dhcp_discover+0x10a>
 80197aa:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80197ae:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80197b0:	897b      	ldrh	r3, [r7, #10]
 80197b2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80197b6:	4a0b      	ldr	r2, [pc, #44]	@ (80197e4 <dhcp_discover+0x140>)
 80197b8:	fb82 1203 	smull	r1, r2, r2, r3
 80197bc:	1152      	asrs	r2, r2, #5
 80197be:	17db      	asrs	r3, r3, #31
 80197c0:	1ad3      	subs	r3, r2, r3
 80197c2:	b29a      	uxth	r2, r3
 80197c4:	69bb      	ldr	r3, [r7, #24]
 80197c6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80197c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3720      	adds	r7, #32
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	20000044 	.word	0x20000044
 80197d8:	2000f518 	.word	0x2000f518
 80197dc:	08026270 	.word	0x08026270
 80197e0:	08026274 	.word	0x08026274
 80197e4:	10624dd3 	.word	0x10624dd3

080197e8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b088      	sub	sp, #32
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d107      	bne.n	8019806 <dhcp_bind+0x1e>
 80197f6:	4b64      	ldr	r3, [pc, #400]	@ (8019988 <dhcp_bind+0x1a0>)
 80197f8:	f240 4215 	movw	r2, #1045	@ 0x415
 80197fc:	4963      	ldr	r1, [pc, #396]	@ (801998c <dhcp_bind+0x1a4>)
 80197fe:	4864      	ldr	r0, [pc, #400]	@ (8019990 <dhcp_bind+0x1a8>)
 8019800:	f005 f80a 	bl	801e818 <iprintf>
 8019804:	e0bc      	b.n	8019980 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801980a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801980c:	69bb      	ldr	r3, [r7, #24]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d107      	bne.n	8019822 <dhcp_bind+0x3a>
 8019812:	4b5d      	ldr	r3, [pc, #372]	@ (8019988 <dhcp_bind+0x1a0>)
 8019814:	f240 4217 	movw	r2, #1047	@ 0x417
 8019818:	495e      	ldr	r1, [pc, #376]	@ (8019994 <dhcp_bind+0x1ac>)
 801981a:	485d      	ldr	r0, [pc, #372]	@ (8019990 <dhcp_bind+0x1a8>)
 801981c:	f004 fffc 	bl	801e818 <iprintf>
 8019820:	e0ae      	b.n	8019980 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8019822:	69bb      	ldr	r3, [r7, #24]
 8019824:	2200      	movs	r2, #0
 8019826:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8019828:	69bb      	ldr	r3, [r7, #24]
 801982a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801982c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019830:	d019      	beq.n	8019866 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019832:	69bb      	ldr	r3, [r7, #24]
 8019834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019836:	331e      	adds	r3, #30
 8019838:	4a57      	ldr	r2, [pc, #348]	@ (8019998 <dhcp_bind+0x1b0>)
 801983a:	fba2 2303 	umull	r2, r3, r2, r3
 801983e:	095b      	lsrs	r3, r3, #5
 8019840:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019842:	69fb      	ldr	r3, [r7, #28]
 8019844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019848:	d302      	bcc.n	8019850 <dhcp_bind+0x68>
      timeout = 0xffff;
 801984a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801984e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8019850:	69fb      	ldr	r3, [r7, #28]
 8019852:	b29a      	uxth	r2, r3
 8019854:	69bb      	ldr	r3, [r7, #24]
 8019856:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8019858:	69bb      	ldr	r3, [r7, #24]
 801985a:	8a9b      	ldrh	r3, [r3, #20]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d102      	bne.n	8019866 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8019860:	69bb      	ldr	r3, [r7, #24]
 8019862:	2201      	movs	r2, #1
 8019864:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019866:	69bb      	ldr	r3, [r7, #24]
 8019868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801986a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801986e:	d01d      	beq.n	80198ac <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019870:	69bb      	ldr	r3, [r7, #24]
 8019872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019874:	331e      	adds	r3, #30
 8019876:	4a48      	ldr	r2, [pc, #288]	@ (8019998 <dhcp_bind+0x1b0>)
 8019878:	fba2 2303 	umull	r2, r3, r2, r3
 801987c:	095b      	lsrs	r3, r3, #5
 801987e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019880:	69fb      	ldr	r3, [r7, #28]
 8019882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019886:	d302      	bcc.n	801988e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801988c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801988e:	69fb      	ldr	r3, [r7, #28]
 8019890:	b29a      	uxth	r2, r3
 8019892:	69bb      	ldr	r3, [r7, #24]
 8019894:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8019896:	69bb      	ldr	r3, [r7, #24]
 8019898:	895b      	ldrh	r3, [r3, #10]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d102      	bne.n	80198a4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801989e:	69bb      	ldr	r3, [r7, #24]
 80198a0:	2201      	movs	r2, #1
 80198a2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80198a4:	69bb      	ldr	r3, [r7, #24]
 80198a6:	895a      	ldrh	r2, [r3, #10]
 80198a8:	69bb      	ldr	r3, [r7, #24]
 80198aa:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80198ac:	69bb      	ldr	r3, [r7, #24]
 80198ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80198b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198b4:	d01d      	beq.n	80198f2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80198b6:	69bb      	ldr	r3, [r7, #24]
 80198b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80198ba:	331e      	adds	r3, #30
 80198bc:	4a36      	ldr	r2, [pc, #216]	@ (8019998 <dhcp_bind+0x1b0>)
 80198be:	fba2 2303 	umull	r2, r3, r2, r3
 80198c2:	095b      	lsrs	r3, r3, #5
 80198c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80198c6:	69fb      	ldr	r3, [r7, #28]
 80198c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80198cc:	d302      	bcc.n	80198d4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80198ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80198d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80198d4:	69fb      	ldr	r3, [r7, #28]
 80198d6:	b29a      	uxth	r2, r3
 80198d8:	69bb      	ldr	r3, [r7, #24]
 80198da:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80198dc:	69bb      	ldr	r3, [r7, #24]
 80198de:	899b      	ldrh	r3, [r3, #12]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d102      	bne.n	80198ea <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80198e4:	69bb      	ldr	r3, [r7, #24]
 80198e6:	2201      	movs	r2, #1
 80198e8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80198ea:	69bb      	ldr	r3, [r7, #24]
 80198ec:	899a      	ldrh	r2, [r3, #12]
 80198ee:	69bb      	ldr	r3, [r7, #24]
 80198f0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80198f2:	69bb      	ldr	r3, [r7, #24]
 80198f4:	895a      	ldrh	r2, [r3, #10]
 80198f6:	69bb      	ldr	r3, [r7, #24]
 80198f8:	899b      	ldrh	r3, [r3, #12]
 80198fa:	429a      	cmp	r2, r3
 80198fc:	d306      	bcc.n	801990c <dhcp_bind+0x124>
 80198fe:	69bb      	ldr	r3, [r7, #24]
 8019900:	899b      	ldrh	r3, [r3, #12]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d002      	beq.n	801990c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8019906:	69bb      	ldr	r3, [r7, #24]
 8019908:	2200      	movs	r2, #0
 801990a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801990c:	69bb      	ldr	r3, [r7, #24]
 801990e:	79db      	ldrb	r3, [r3, #7]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d003      	beq.n	801991c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8019914:	69bb      	ldr	r3, [r7, #24]
 8019916:	6a1b      	ldr	r3, [r3, #32]
 8019918:	613b      	str	r3, [r7, #16]
 801991a:	e014      	b.n	8019946 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801991c:	69bb      	ldr	r3, [r7, #24]
 801991e:	331c      	adds	r3, #28
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8019924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019928:	2b00      	cmp	r3, #0
 801992a:	db02      	blt.n	8019932 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801992c:	23ff      	movs	r3, #255	@ 0xff
 801992e:	613b      	str	r3, [r7, #16]
 8019930:	e009      	b.n	8019946 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8019932:	7dfb      	ldrb	r3, [r7, #23]
 8019934:	2bbf      	cmp	r3, #191	@ 0xbf
 8019936:	d903      	bls.n	8019940 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8019938:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801993c:	613b      	str	r3, [r7, #16]
 801993e:	e002      	b.n	8019946 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8019940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019944:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8019946:	69bb      	ldr	r3, [r7, #24]
 8019948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801994a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d108      	bne.n	8019964 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8019952:	69bb      	ldr	r3, [r7, #24]
 8019954:	69da      	ldr	r2, [r3, #28]
 8019956:	693b      	ldr	r3, [r7, #16]
 8019958:	4013      	ands	r3, r2
 801995a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019962:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8019964:	210a      	movs	r1, #10
 8019966:	69b8      	ldr	r0, [r7, #24]
 8019968:	f000 fa9a 	bl	8019ea0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801996c:	69bb      	ldr	r3, [r7, #24]
 801996e:	f103 011c 	add.w	r1, r3, #28
 8019972:	f107 030c 	add.w	r3, r7, #12
 8019976:	f107 0210 	add.w	r2, r7, #16
 801997a:	6878      	ldr	r0, [r7, #4]
 801997c:	f7f7 f924 	bl	8010bc8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8019980:	3720      	adds	r7, #32
 8019982:	46bd      	mov	sp, r7
 8019984:	bd80      	pop	{r7, pc}
 8019986:	bf00      	nop
 8019988:	080254f8 	.word	0x080254f8
 801998c:	08025658 	.word	0x08025658
 8019990:	08025558 	.word	0x08025558
 8019994:	08025674 	.word	0x08025674
 8019998:	88888889 	.word	0x88888889

0801999c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b08a      	sub	sp, #40	@ 0x28
 80199a0:	af02      	add	r7, sp, #8
 80199a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199a8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80199aa:	2105      	movs	r1, #5
 80199ac:	69b8      	ldr	r0, [r7, #24]
 80199ae:	f000 fa77 	bl	8019ea0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80199b2:	f107 030c 	add.w	r3, r7, #12
 80199b6:	2203      	movs	r2, #3
 80199b8:	69b9      	ldr	r1, [r7, #24]
 80199ba:	6878      	ldr	r0, [r7, #4]
 80199bc:	f000 ff2c 	bl	801a818 <dhcp_create_msg>
 80199c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80199c2:	697b      	ldr	r3, [r7, #20]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d04e      	beq.n	8019a66 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	685b      	ldr	r3, [r3, #4]
 80199cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80199ce:	89b8      	ldrh	r0, [r7, #12]
 80199d0:	693b      	ldr	r3, [r7, #16]
 80199d2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80199d6:	2302      	movs	r3, #2
 80199d8:	2239      	movs	r2, #57	@ 0x39
 80199da:	f000 fa7b 	bl	8019ed4 <dhcp_option>
 80199de:	4603      	mov	r3, r0
 80199e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80199e2:	89b8      	ldrh	r0, [r7, #12]
 80199e4:	693b      	ldr	r3, [r7, #16]
 80199e6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80199ee:	461a      	mov	r2, r3
 80199f0:	f000 faca 	bl	8019f88 <dhcp_option_short>
 80199f4:	4603      	mov	r3, r0
 80199f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80199f8:	89b8      	ldrh	r0, [r7, #12]
 80199fa:	693b      	ldr	r3, [r7, #16]
 80199fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019a00:	2304      	movs	r3, #4
 8019a02:	2237      	movs	r2, #55	@ 0x37
 8019a04:	f000 fa66 	bl	8019ed4 <dhcp_option>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	77bb      	strb	r3, [r7, #30]
 8019a10:	e00e      	b.n	8019a30 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019a12:	89b8      	ldrh	r0, [r7, #12]
 8019a14:	693b      	ldr	r3, [r7, #16]
 8019a16:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019a1a:	7fbb      	ldrb	r3, [r7, #30]
 8019a1c:	4a29      	ldr	r2, [pc, #164]	@ (8019ac4 <dhcp_renew+0x128>)
 8019a1e:	5cd3      	ldrb	r3, [r2, r3]
 8019a20:	461a      	mov	r2, r3
 8019a22:	f000 fa8b 	bl	8019f3c <dhcp_option_byte>
 8019a26:	4603      	mov	r3, r0
 8019a28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019a2a:	7fbb      	ldrb	r3, [r7, #30]
 8019a2c:	3301      	adds	r3, #1
 8019a2e:	77bb      	strb	r3, [r7, #30]
 8019a30:	7fbb      	ldrb	r3, [r7, #30]
 8019a32:	2b03      	cmp	r3, #3
 8019a34:	d9ed      	bls.n	8019a12 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019a36:	89b8      	ldrh	r0, [r7, #12]
 8019a38:	693b      	ldr	r3, [r7, #16]
 8019a3a:	33f0      	adds	r3, #240	@ 0xf0
 8019a3c:	697a      	ldr	r2, [r7, #20]
 8019a3e:	4619      	mov	r1, r3
 8019a40:	f000 ffc0 	bl	801a9c4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019a44:	4b20      	ldr	r3, [pc, #128]	@ (8019ac8 <dhcp_renew+0x12c>)
 8019a46:	6818      	ldr	r0, [r3, #0]
 8019a48:	69bb      	ldr	r3, [r7, #24]
 8019a4a:	f103 0218 	add.w	r2, r3, #24
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	9300      	str	r3, [sp, #0]
 8019a52:	2343      	movs	r3, #67	@ 0x43
 8019a54:	6979      	ldr	r1, [r7, #20]
 8019a56:	f7fe fdff 	bl	8018658 <udp_sendto_if>
 8019a5a:	4603      	mov	r3, r0
 8019a5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019a5e:	6978      	ldr	r0, [r7, #20]
 8019a60:	f7f7 fdf2 	bl	8011648 <pbuf_free>
 8019a64:	e001      	b.n	8019a6a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019a66:	23ff      	movs	r3, #255	@ 0xff
 8019a68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019a6a:	69bb      	ldr	r3, [r7, #24]
 8019a6c:	799b      	ldrb	r3, [r3, #6]
 8019a6e:	2bff      	cmp	r3, #255	@ 0xff
 8019a70:	d005      	beq.n	8019a7e <dhcp_renew+0xe2>
    dhcp->tries++;
 8019a72:	69bb      	ldr	r3, [r7, #24]
 8019a74:	799b      	ldrb	r3, [r3, #6]
 8019a76:	3301      	adds	r3, #1
 8019a78:	b2da      	uxtb	r2, r3
 8019a7a:	69bb      	ldr	r3, [r7, #24]
 8019a7c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8019a7e:	69bb      	ldr	r3, [r7, #24]
 8019a80:	799b      	ldrb	r3, [r3, #6]
 8019a82:	2b09      	cmp	r3, #9
 8019a84:	d809      	bhi.n	8019a9a <dhcp_renew+0xfe>
 8019a86:	69bb      	ldr	r3, [r7, #24]
 8019a88:	799b      	ldrb	r3, [r3, #6]
 8019a8a:	461a      	mov	r2, r3
 8019a8c:	0152      	lsls	r2, r2, #5
 8019a8e:	1ad2      	subs	r2, r2, r3
 8019a90:	0092      	lsls	r2, r2, #2
 8019a92:	4413      	add	r3, r2
 8019a94:	011b      	lsls	r3, r3, #4
 8019a96:	b29b      	uxth	r3, r3
 8019a98:	e001      	b.n	8019a9e <dhcp_renew+0x102>
 8019a9a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8019a9e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019aa0:	89fb      	ldrh	r3, [r7, #14]
 8019aa2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019aa6:	4a09      	ldr	r2, [pc, #36]	@ (8019acc <dhcp_renew+0x130>)
 8019aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8019aac:	1152      	asrs	r2, r2, #5
 8019aae:	17db      	asrs	r3, r3, #31
 8019ab0:	1ad3      	subs	r3, r2, r3
 8019ab2:	b29a      	uxth	r2, r3
 8019ab4:	69bb      	ldr	r3, [r7, #24]
 8019ab6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019ab8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019abc:	4618      	mov	r0, r3
 8019abe:	3720      	adds	r7, #32
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd80      	pop	{r7, pc}
 8019ac4:	20000044 	.word	0x20000044
 8019ac8:	2000f518 	.word	0x2000f518
 8019acc:	10624dd3 	.word	0x10624dd3

08019ad0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b08a      	sub	sp, #40	@ 0x28
 8019ad4:	af02      	add	r7, sp, #8
 8019ad6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019adc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8019ade:	2104      	movs	r1, #4
 8019ae0:	69b8      	ldr	r0, [r7, #24]
 8019ae2:	f000 f9dd 	bl	8019ea0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019ae6:	f107 030c 	add.w	r3, r7, #12
 8019aea:	2203      	movs	r2, #3
 8019aec:	69b9      	ldr	r1, [r7, #24]
 8019aee:	6878      	ldr	r0, [r7, #4]
 8019af0:	f000 fe92 	bl	801a818 <dhcp_create_msg>
 8019af4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019af6:	697b      	ldr	r3, [r7, #20]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d04c      	beq.n	8019b96 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019afc:	697b      	ldr	r3, [r7, #20]
 8019afe:	685b      	ldr	r3, [r3, #4]
 8019b00:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019b02:	89b8      	ldrh	r0, [r7, #12]
 8019b04:	693b      	ldr	r3, [r7, #16]
 8019b06:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b0a:	2302      	movs	r3, #2
 8019b0c:	2239      	movs	r2, #57	@ 0x39
 8019b0e:	f000 f9e1 	bl	8019ed4 <dhcp_option>
 8019b12:	4603      	mov	r3, r0
 8019b14:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019b16:	89b8      	ldrh	r0, [r7, #12]
 8019b18:	693b      	ldr	r3, [r7, #16]
 8019b1a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019b22:	461a      	mov	r2, r3
 8019b24:	f000 fa30 	bl	8019f88 <dhcp_option_short>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019b2c:	89b8      	ldrh	r0, [r7, #12]
 8019b2e:	693b      	ldr	r3, [r7, #16]
 8019b30:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b34:	2304      	movs	r3, #4
 8019b36:	2237      	movs	r2, #55	@ 0x37
 8019b38:	f000 f9cc 	bl	8019ed4 <dhcp_option>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019b40:	2300      	movs	r3, #0
 8019b42:	77bb      	strb	r3, [r7, #30]
 8019b44:	e00e      	b.n	8019b64 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019b46:	89b8      	ldrh	r0, [r7, #12]
 8019b48:	693b      	ldr	r3, [r7, #16]
 8019b4a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b4e:	7fbb      	ldrb	r3, [r7, #30]
 8019b50:	4a28      	ldr	r2, [pc, #160]	@ (8019bf4 <dhcp_rebind+0x124>)
 8019b52:	5cd3      	ldrb	r3, [r2, r3]
 8019b54:	461a      	mov	r2, r3
 8019b56:	f000 f9f1 	bl	8019f3c <dhcp_option_byte>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019b5e:	7fbb      	ldrb	r3, [r7, #30]
 8019b60:	3301      	adds	r3, #1
 8019b62:	77bb      	strb	r3, [r7, #30]
 8019b64:	7fbb      	ldrb	r3, [r7, #30]
 8019b66:	2b03      	cmp	r3, #3
 8019b68:	d9ed      	bls.n	8019b46 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019b6a:	89b8      	ldrh	r0, [r7, #12]
 8019b6c:	693b      	ldr	r3, [r7, #16]
 8019b6e:	33f0      	adds	r3, #240	@ 0xf0
 8019b70:	697a      	ldr	r2, [r7, #20]
 8019b72:	4619      	mov	r1, r3
 8019b74:	f000 ff26 	bl	801a9c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019b78:	4b1f      	ldr	r3, [pc, #124]	@ (8019bf8 <dhcp_rebind+0x128>)
 8019b7a:	6818      	ldr	r0, [r3, #0]
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	9300      	str	r3, [sp, #0]
 8019b80:	2343      	movs	r3, #67	@ 0x43
 8019b82:	4a1e      	ldr	r2, [pc, #120]	@ (8019bfc <dhcp_rebind+0x12c>)
 8019b84:	6979      	ldr	r1, [r7, #20]
 8019b86:	f7fe fd67 	bl	8018658 <udp_sendto_if>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019b8e:	6978      	ldr	r0, [r7, #20]
 8019b90:	f7f7 fd5a 	bl	8011648 <pbuf_free>
 8019b94:	e001      	b.n	8019b9a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019b96:	23ff      	movs	r3, #255	@ 0xff
 8019b98:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019b9a:	69bb      	ldr	r3, [r7, #24]
 8019b9c:	799b      	ldrb	r3, [r3, #6]
 8019b9e:	2bff      	cmp	r3, #255	@ 0xff
 8019ba0:	d005      	beq.n	8019bae <dhcp_rebind+0xde>
    dhcp->tries++;
 8019ba2:	69bb      	ldr	r3, [r7, #24]
 8019ba4:	799b      	ldrb	r3, [r3, #6]
 8019ba6:	3301      	adds	r3, #1
 8019ba8:	b2da      	uxtb	r2, r3
 8019baa:	69bb      	ldr	r3, [r7, #24]
 8019bac:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019bae:	69bb      	ldr	r3, [r7, #24]
 8019bb0:	799b      	ldrb	r3, [r3, #6]
 8019bb2:	2b09      	cmp	r3, #9
 8019bb4:	d809      	bhi.n	8019bca <dhcp_rebind+0xfa>
 8019bb6:	69bb      	ldr	r3, [r7, #24]
 8019bb8:	799b      	ldrb	r3, [r3, #6]
 8019bba:	461a      	mov	r2, r3
 8019bbc:	0152      	lsls	r2, r2, #5
 8019bbe:	1ad2      	subs	r2, r2, r3
 8019bc0:	0092      	lsls	r2, r2, #2
 8019bc2:	4413      	add	r3, r2
 8019bc4:	00db      	lsls	r3, r3, #3
 8019bc6:	b29b      	uxth	r3, r3
 8019bc8:	e001      	b.n	8019bce <dhcp_rebind+0xfe>
 8019bca:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019bce:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019bd0:	89fb      	ldrh	r3, [r7, #14]
 8019bd2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8019c00 <dhcp_rebind+0x130>)
 8019bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8019bdc:	1152      	asrs	r2, r2, #5
 8019bde:	17db      	asrs	r3, r3, #31
 8019be0:	1ad3      	subs	r3, r2, r3
 8019be2:	b29a      	uxth	r2, r3
 8019be4:	69bb      	ldr	r3, [r7, #24]
 8019be6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019be8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019bec:	4618      	mov	r0, r3
 8019bee:	3720      	adds	r7, #32
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	bd80      	pop	{r7, pc}
 8019bf4:	20000044 	.word	0x20000044
 8019bf8:	2000f518 	.word	0x2000f518
 8019bfc:	08026274 	.word	0x08026274
 8019c00:	10624dd3 	.word	0x10624dd3

08019c04 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8019c04:	b5b0      	push	{r4, r5, r7, lr}
 8019c06:	b08a      	sub	sp, #40	@ 0x28
 8019c08:	af02      	add	r7, sp, #8
 8019c0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c10:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8019c12:	2103      	movs	r1, #3
 8019c14:	69b8      	ldr	r0, [r7, #24]
 8019c16:	f000 f943 	bl	8019ea0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019c1a:	f107 030c 	add.w	r3, r7, #12
 8019c1e:	2203      	movs	r2, #3
 8019c20:	69b9      	ldr	r1, [r7, #24]
 8019c22:	6878      	ldr	r0, [r7, #4]
 8019c24:	f000 fdf8 	bl	801a818 <dhcp_create_msg>
 8019c28:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019c2a:	697b      	ldr	r3, [r7, #20]
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d066      	beq.n	8019cfe <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019c30:	697b      	ldr	r3, [r7, #20]
 8019c32:	685b      	ldr	r3, [r3, #4]
 8019c34:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019c36:	89b8      	ldrh	r0, [r7, #12]
 8019c38:	693b      	ldr	r3, [r7, #16]
 8019c3a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019c3e:	2302      	movs	r3, #2
 8019c40:	2239      	movs	r2, #57	@ 0x39
 8019c42:	f000 f947 	bl	8019ed4 <dhcp_option>
 8019c46:	4603      	mov	r3, r0
 8019c48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019c4a:	89b8      	ldrh	r0, [r7, #12]
 8019c4c:	693b      	ldr	r3, [r7, #16]
 8019c4e:	33f0      	adds	r3, #240	@ 0xf0
 8019c50:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8019c54:	4619      	mov	r1, r3
 8019c56:	f000 f997 	bl	8019f88 <dhcp_option_short>
 8019c5a:	4603      	mov	r3, r0
 8019c5c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019c5e:	89b8      	ldrh	r0, [r7, #12]
 8019c60:	693b      	ldr	r3, [r7, #16]
 8019c62:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019c66:	2304      	movs	r3, #4
 8019c68:	2232      	movs	r2, #50	@ 0x32
 8019c6a:	f000 f933 	bl	8019ed4 <dhcp_option>
 8019c6e:	4603      	mov	r3, r0
 8019c70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019c72:	89bc      	ldrh	r4, [r7, #12]
 8019c74:	693b      	ldr	r3, [r7, #16]
 8019c76:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019c7a:	69bb      	ldr	r3, [r7, #24]
 8019c7c:	69db      	ldr	r3, [r3, #28]
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7f5 fdd9 	bl	800f836 <lwip_htonl>
 8019c84:	4603      	mov	r3, r0
 8019c86:	461a      	mov	r2, r3
 8019c88:	4629      	mov	r1, r5
 8019c8a:	4620      	mov	r0, r4
 8019c8c:	f000 f9ae 	bl	8019fec <dhcp_option_long>
 8019c90:	4603      	mov	r3, r0
 8019c92:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019c94:	89b8      	ldrh	r0, [r7, #12]
 8019c96:	693b      	ldr	r3, [r7, #16]
 8019c98:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019c9c:	2304      	movs	r3, #4
 8019c9e:	2237      	movs	r2, #55	@ 0x37
 8019ca0:	f000 f918 	bl	8019ed4 <dhcp_option>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019ca8:	2300      	movs	r3, #0
 8019caa:	77bb      	strb	r3, [r7, #30]
 8019cac:	e00e      	b.n	8019ccc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019cae:	89b8      	ldrh	r0, [r7, #12]
 8019cb0:	693b      	ldr	r3, [r7, #16]
 8019cb2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019cb6:	7fbb      	ldrb	r3, [r7, #30]
 8019cb8:	4a28      	ldr	r2, [pc, #160]	@ (8019d5c <dhcp_reboot+0x158>)
 8019cba:	5cd3      	ldrb	r3, [r2, r3]
 8019cbc:	461a      	mov	r2, r3
 8019cbe:	f000 f93d 	bl	8019f3c <dhcp_option_byte>
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019cc6:	7fbb      	ldrb	r3, [r7, #30]
 8019cc8:	3301      	adds	r3, #1
 8019cca:	77bb      	strb	r3, [r7, #30]
 8019ccc:	7fbb      	ldrb	r3, [r7, #30]
 8019cce:	2b03      	cmp	r3, #3
 8019cd0:	d9ed      	bls.n	8019cae <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019cd2:	89b8      	ldrh	r0, [r7, #12]
 8019cd4:	693b      	ldr	r3, [r7, #16]
 8019cd6:	33f0      	adds	r3, #240	@ 0xf0
 8019cd8:	697a      	ldr	r2, [r7, #20]
 8019cda:	4619      	mov	r1, r3
 8019cdc:	f000 fe72 	bl	801a9c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8019d60 <dhcp_reboot+0x15c>)
 8019ce2:	6818      	ldr	r0, [r3, #0]
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	9300      	str	r3, [sp, #0]
 8019ce8:	2343      	movs	r3, #67	@ 0x43
 8019cea:	4a1e      	ldr	r2, [pc, #120]	@ (8019d64 <dhcp_reboot+0x160>)
 8019cec:	6979      	ldr	r1, [r7, #20]
 8019cee:	f7fe fcb3 	bl	8018658 <udp_sendto_if>
 8019cf2:	4603      	mov	r3, r0
 8019cf4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019cf6:	6978      	ldr	r0, [r7, #20]
 8019cf8:	f7f7 fca6 	bl	8011648 <pbuf_free>
 8019cfc:	e001      	b.n	8019d02 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019cfe:	23ff      	movs	r3, #255	@ 0xff
 8019d00:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019d02:	69bb      	ldr	r3, [r7, #24]
 8019d04:	799b      	ldrb	r3, [r3, #6]
 8019d06:	2bff      	cmp	r3, #255	@ 0xff
 8019d08:	d005      	beq.n	8019d16 <dhcp_reboot+0x112>
    dhcp->tries++;
 8019d0a:	69bb      	ldr	r3, [r7, #24]
 8019d0c:	799b      	ldrb	r3, [r3, #6]
 8019d0e:	3301      	adds	r3, #1
 8019d10:	b2da      	uxtb	r2, r3
 8019d12:	69bb      	ldr	r3, [r7, #24]
 8019d14:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019d16:	69bb      	ldr	r3, [r7, #24]
 8019d18:	799b      	ldrb	r3, [r3, #6]
 8019d1a:	2b09      	cmp	r3, #9
 8019d1c:	d809      	bhi.n	8019d32 <dhcp_reboot+0x12e>
 8019d1e:	69bb      	ldr	r3, [r7, #24]
 8019d20:	799b      	ldrb	r3, [r3, #6]
 8019d22:	461a      	mov	r2, r3
 8019d24:	0152      	lsls	r2, r2, #5
 8019d26:	1ad2      	subs	r2, r2, r3
 8019d28:	0092      	lsls	r2, r2, #2
 8019d2a:	4413      	add	r3, r2
 8019d2c:	00db      	lsls	r3, r3, #3
 8019d2e:	b29b      	uxth	r3, r3
 8019d30:	e001      	b.n	8019d36 <dhcp_reboot+0x132>
 8019d32:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019d36:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019d38:	89fb      	ldrh	r3, [r7, #14]
 8019d3a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8019d68 <dhcp_reboot+0x164>)
 8019d40:	fb82 1203 	smull	r1, r2, r2, r3
 8019d44:	1152      	asrs	r2, r2, #5
 8019d46:	17db      	asrs	r3, r3, #31
 8019d48:	1ad3      	subs	r3, r2, r3
 8019d4a:	b29a      	uxth	r2, r3
 8019d4c:	69bb      	ldr	r3, [r7, #24]
 8019d4e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019d50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	3720      	adds	r7, #32
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8019d5c:	20000044 	.word	0x20000044
 8019d60:	2000f518 	.word	0x2000f518
 8019d64:	08026274 	.word	0x08026274
 8019d68:	10624dd3 	.word	0x10624dd3

08019d6c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8019d6c:	b5b0      	push	{r4, r5, r7, lr}
 8019d6e:	b08a      	sub	sp, #40	@ 0x28
 8019d70:	af02      	add	r7, sp, #8
 8019d72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d78:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8019d7a:	69fb      	ldr	r3, [r7, #28]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	f000 8084 	beq.w	8019e8a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019d82:	69fb      	ldr	r3, [r7, #28]
 8019d84:	795b      	ldrb	r3, [r3, #5]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	f000 8081 	beq.w	8019e8e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8019d8c:	69fb      	ldr	r3, [r7, #28]
 8019d8e:	699b      	ldr	r3, [r3, #24]
 8019d90:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019d92:	69fb      	ldr	r3, [r7, #28]
 8019d94:	2200      	movs	r2, #0
 8019d96:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019d98:	69fb      	ldr	r3, [r7, #28]
 8019d9a:	2200      	movs	r2, #0
 8019d9c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019d9e:	69fb      	ldr	r3, [r7, #28]
 8019da0:	2200      	movs	r2, #0
 8019da2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019da4:	69fb      	ldr	r3, [r7, #28]
 8019da6:	2200      	movs	r2, #0
 8019da8:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8019daa:	69fb      	ldr	r3, [r7, #28]
 8019dac:	2200      	movs	r2, #0
 8019dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8019db0:	69fb      	ldr	r3, [r7, #28]
 8019db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019db4:	69fb      	ldr	r3, [r7, #28]
 8019db6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019db8:	69fb      	ldr	r3, [r7, #28]
 8019dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019dbc:	69fb      	ldr	r3, [r7, #28]
 8019dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019dc0:	69fb      	ldr	r3, [r7, #28]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	829a      	strh	r2, [r3, #20]
 8019dc6:	69fb      	ldr	r3, [r7, #28]
 8019dc8:	8a9a      	ldrh	r2, [r3, #20]
 8019dca:	69fb      	ldr	r3, [r7, #28]
 8019dcc:	825a      	strh	r2, [r3, #18]
 8019dce:	69fb      	ldr	r3, [r7, #28]
 8019dd0:	8a5a      	ldrh	r2, [r3, #18]
 8019dd2:	69fb      	ldr	r3, [r7, #28]
 8019dd4:	821a      	strh	r2, [r3, #16]
 8019dd6:	69fb      	ldr	r3, [r7, #28]
 8019dd8:	8a1a      	ldrh	r2, [r3, #16]
 8019dda:	69fb      	ldr	r3, [r7, #28]
 8019ddc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8019dde:	6878      	ldr	r0, [r7, #4]
 8019de0:	f000 fe1e 	bl	801aa20 <dhcp_supplied_address>
 8019de4:	4603      	mov	r3, r0
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d03b      	beq.n	8019e62 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8019dea:	f107 030e 	add.w	r3, r7, #14
 8019dee:	2207      	movs	r2, #7
 8019df0:	69f9      	ldr	r1, [r7, #28]
 8019df2:	6878      	ldr	r0, [r7, #4]
 8019df4:	f000 fd10 	bl	801a818 <dhcp_create_msg>
 8019df8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8019dfa:	69bb      	ldr	r3, [r7, #24]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d030      	beq.n	8019e62 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019e00:	69bb      	ldr	r3, [r7, #24]
 8019e02:	685b      	ldr	r3, [r3, #4]
 8019e04:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019e06:	89f8      	ldrh	r0, [r7, #14]
 8019e08:	697b      	ldr	r3, [r7, #20]
 8019e0a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019e0e:	2304      	movs	r3, #4
 8019e10:	2236      	movs	r2, #54	@ 0x36
 8019e12:	f000 f85f 	bl	8019ed4 <dhcp_option>
 8019e16:	4603      	mov	r3, r0
 8019e18:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8019e1a:	89fc      	ldrh	r4, [r7, #14]
 8019e1c:	697b      	ldr	r3, [r7, #20]
 8019e1e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019e22:	693b      	ldr	r3, [r7, #16]
 8019e24:	4618      	mov	r0, r3
 8019e26:	f7f5 fd06 	bl	800f836 <lwip_htonl>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	4629      	mov	r1, r5
 8019e30:	4620      	mov	r0, r4
 8019e32:	f000 f8db 	bl	8019fec <dhcp_option_long>
 8019e36:	4603      	mov	r3, r0
 8019e38:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019e3a:	89f8      	ldrh	r0, [r7, #14]
 8019e3c:	697b      	ldr	r3, [r7, #20]
 8019e3e:	33f0      	adds	r3, #240	@ 0xf0
 8019e40:	69ba      	ldr	r2, [r7, #24]
 8019e42:	4619      	mov	r1, r3
 8019e44:	f000 fdbe 	bl	801a9c4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019e48:	4b13      	ldr	r3, [pc, #76]	@ (8019e98 <dhcp_release_and_stop+0x12c>)
 8019e4a:	6818      	ldr	r0, [r3, #0]
 8019e4c:	f107 0210 	add.w	r2, r7, #16
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	9300      	str	r3, [sp, #0]
 8019e54:	2343      	movs	r3, #67	@ 0x43
 8019e56:	69b9      	ldr	r1, [r7, #24]
 8019e58:	f7fe fbfe 	bl	8018658 <udp_sendto_if>
      pbuf_free(p_out);
 8019e5c:	69b8      	ldr	r0, [r7, #24]
 8019e5e:	f7f7 fbf3 	bl	8011648 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019e62:	4b0e      	ldr	r3, [pc, #56]	@ (8019e9c <dhcp_release_and_stop+0x130>)
 8019e64:	4a0d      	ldr	r2, [pc, #52]	@ (8019e9c <dhcp_release_and_stop+0x130>)
 8019e66:	490d      	ldr	r1, [pc, #52]	@ (8019e9c <dhcp_release_and_stop+0x130>)
 8019e68:	6878      	ldr	r0, [r7, #4]
 8019e6a:	f7f6 fead 	bl	8010bc8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8019e6e:	2100      	movs	r1, #0
 8019e70:	69f8      	ldr	r0, [r7, #28]
 8019e72:	f000 f815 	bl	8019ea0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019e76:	69fb      	ldr	r3, [r7, #28]
 8019e78:	791b      	ldrb	r3, [r3, #4]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d008      	beq.n	8019e90 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019e7e:	f7fe ff6b 	bl	8018d58 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019e82:	69fb      	ldr	r3, [r7, #28]
 8019e84:	2200      	movs	r2, #0
 8019e86:	711a      	strb	r2, [r3, #4]
 8019e88:	e002      	b.n	8019e90 <dhcp_release_and_stop+0x124>
    return;
 8019e8a:	bf00      	nop
 8019e8c:	e000      	b.n	8019e90 <dhcp_release_and_stop+0x124>
    return;
 8019e8e:	bf00      	nop
  }
}
 8019e90:	3720      	adds	r7, #32
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bdb0      	pop	{r4, r5, r7, pc}
 8019e96:	bf00      	nop
 8019e98:	2000f518 	.word	0x2000f518
 8019e9c:	08026270 	.word	0x08026270

08019ea0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8019ea0:	b480      	push	{r7}
 8019ea2:	b083      	sub	sp, #12
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	460b      	mov	r3, r1
 8019eaa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	795b      	ldrb	r3, [r3, #5]
 8019eb0:	78fa      	ldrb	r2, [r7, #3]
 8019eb2:	429a      	cmp	r2, r3
 8019eb4:	d008      	beq.n	8019ec8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	78fa      	ldrb	r2, [r7, #3]
 8019eba:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2200      	movs	r2, #0
 8019ec0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	811a      	strh	r2, [r3, #8]
  }
}
 8019ec8:	bf00      	nop
 8019eca:	370c      	adds	r7, #12
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed2:	4770      	bx	lr

08019ed4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b082      	sub	sp, #8
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6039      	str	r1, [r7, #0]
 8019edc:	4611      	mov	r1, r2
 8019ede:	461a      	mov	r2, r3
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	80fb      	strh	r3, [r7, #6]
 8019ee4:	460b      	mov	r3, r1
 8019ee6:	717b      	strb	r3, [r7, #5]
 8019ee8:	4613      	mov	r3, r2
 8019eea:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019eec:	88fa      	ldrh	r2, [r7, #6]
 8019eee:	793b      	ldrb	r3, [r7, #4]
 8019ef0:	4413      	add	r3, r2
 8019ef2:	3302      	adds	r3, #2
 8019ef4:	2b44      	cmp	r3, #68	@ 0x44
 8019ef6:	d906      	bls.n	8019f06 <dhcp_option+0x32>
 8019ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8019f30 <dhcp_option+0x5c>)
 8019efa:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019efe:	490d      	ldr	r1, [pc, #52]	@ (8019f34 <dhcp_option+0x60>)
 8019f00:	480d      	ldr	r0, [pc, #52]	@ (8019f38 <dhcp_option+0x64>)
 8019f02:	f004 fc89 	bl	801e818 <iprintf>
  options[options_out_len++] = option_type;
 8019f06:	88fb      	ldrh	r3, [r7, #6]
 8019f08:	1c5a      	adds	r2, r3, #1
 8019f0a:	80fa      	strh	r2, [r7, #6]
 8019f0c:	461a      	mov	r2, r3
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	4413      	add	r3, r2
 8019f12:	797a      	ldrb	r2, [r7, #5]
 8019f14:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8019f16:	88fb      	ldrh	r3, [r7, #6]
 8019f18:	1c5a      	adds	r2, r3, #1
 8019f1a:	80fa      	strh	r2, [r7, #6]
 8019f1c:	461a      	mov	r2, r3
 8019f1e:	683b      	ldr	r3, [r7, #0]
 8019f20:	4413      	add	r3, r2
 8019f22:	793a      	ldrb	r2, [r7, #4]
 8019f24:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019f26:	88fb      	ldrh	r3, [r7, #6]
}
 8019f28:	4618      	mov	r0, r3
 8019f2a:	3708      	adds	r7, #8
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bd80      	pop	{r7, pc}
 8019f30:	080254f8 	.word	0x080254f8
 8019f34:	0802568c 	.word	0x0802568c
 8019f38:	08025558 	.word	0x08025558

08019f3c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b082      	sub	sp, #8
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	4603      	mov	r3, r0
 8019f44:	6039      	str	r1, [r7, #0]
 8019f46:	80fb      	strh	r3, [r7, #6]
 8019f48:	4613      	mov	r3, r2
 8019f4a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8019f4c:	88fb      	ldrh	r3, [r7, #6]
 8019f4e:	2b43      	cmp	r3, #67	@ 0x43
 8019f50:	d906      	bls.n	8019f60 <dhcp_option_byte+0x24>
 8019f52:	4b0a      	ldr	r3, [pc, #40]	@ (8019f7c <dhcp_option_byte+0x40>)
 8019f54:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8019f58:	4909      	ldr	r1, [pc, #36]	@ (8019f80 <dhcp_option_byte+0x44>)
 8019f5a:	480a      	ldr	r0, [pc, #40]	@ (8019f84 <dhcp_option_byte+0x48>)
 8019f5c:	f004 fc5c 	bl	801e818 <iprintf>
  options[options_out_len++] = value;
 8019f60:	88fb      	ldrh	r3, [r7, #6]
 8019f62:	1c5a      	adds	r2, r3, #1
 8019f64:	80fa      	strh	r2, [r7, #6]
 8019f66:	461a      	mov	r2, r3
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	4413      	add	r3, r2
 8019f6c:	797a      	ldrb	r2, [r7, #5]
 8019f6e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019f70:	88fb      	ldrh	r3, [r7, #6]
}
 8019f72:	4618      	mov	r0, r3
 8019f74:	3708      	adds	r7, #8
 8019f76:	46bd      	mov	sp, r7
 8019f78:	bd80      	pop	{r7, pc}
 8019f7a:	bf00      	nop
 8019f7c:	080254f8 	.word	0x080254f8
 8019f80:	080256d0 	.word	0x080256d0
 8019f84:	08025558 	.word	0x08025558

08019f88 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b082      	sub	sp, #8
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	4603      	mov	r3, r0
 8019f90:	6039      	str	r1, [r7, #0]
 8019f92:	80fb      	strh	r3, [r7, #6]
 8019f94:	4613      	mov	r3, r2
 8019f96:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019f98:	88fb      	ldrh	r3, [r7, #6]
 8019f9a:	3302      	adds	r3, #2
 8019f9c:	2b44      	cmp	r3, #68	@ 0x44
 8019f9e:	d906      	bls.n	8019fae <dhcp_option_short+0x26>
 8019fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8019fe0 <dhcp_option_short+0x58>)
 8019fa2:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8019fa6:	490f      	ldr	r1, [pc, #60]	@ (8019fe4 <dhcp_option_short+0x5c>)
 8019fa8:	480f      	ldr	r0, [pc, #60]	@ (8019fe8 <dhcp_option_short+0x60>)
 8019faa:	f004 fc35 	bl	801e818 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8019fae:	88bb      	ldrh	r3, [r7, #4]
 8019fb0:	0a1b      	lsrs	r3, r3, #8
 8019fb2:	b29a      	uxth	r2, r3
 8019fb4:	88fb      	ldrh	r3, [r7, #6]
 8019fb6:	1c59      	adds	r1, r3, #1
 8019fb8:	80f9      	strh	r1, [r7, #6]
 8019fba:	4619      	mov	r1, r3
 8019fbc:	683b      	ldr	r3, [r7, #0]
 8019fbe:	440b      	add	r3, r1
 8019fc0:	b2d2      	uxtb	r2, r2
 8019fc2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8019fc4:	88fb      	ldrh	r3, [r7, #6]
 8019fc6:	1c5a      	adds	r2, r3, #1
 8019fc8:	80fa      	strh	r2, [r7, #6]
 8019fca:	461a      	mov	r2, r3
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	4413      	add	r3, r2
 8019fd0:	88ba      	ldrh	r2, [r7, #4]
 8019fd2:	b2d2      	uxtb	r2, r2
 8019fd4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019fd6:	88fb      	ldrh	r3, [r7, #6]
}
 8019fd8:	4618      	mov	r0, r3
 8019fda:	3708      	adds	r7, #8
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	bd80      	pop	{r7, pc}
 8019fe0:	080254f8 	.word	0x080254f8
 8019fe4:	08025708 	.word	0x08025708
 8019fe8:	08025558 	.word	0x08025558

08019fec <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b084      	sub	sp, #16
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	60b9      	str	r1, [r7, #8]
 8019ff6:	607a      	str	r2, [r7, #4]
 8019ff8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019ffa:	89fb      	ldrh	r3, [r7, #14]
 8019ffc:	3304      	adds	r3, #4
 8019ffe:	2b44      	cmp	r3, #68	@ 0x44
 801a000:	d906      	bls.n	801a010 <dhcp_option_long+0x24>
 801a002:	4b19      	ldr	r3, [pc, #100]	@ (801a068 <dhcp_option_long+0x7c>)
 801a004:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801a008:	4918      	ldr	r1, [pc, #96]	@ (801a06c <dhcp_option_long+0x80>)
 801a00a:	4819      	ldr	r0, [pc, #100]	@ (801a070 <dhcp_option_long+0x84>)
 801a00c:	f004 fc04 	bl	801e818 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	0e1a      	lsrs	r2, r3, #24
 801a014:	89fb      	ldrh	r3, [r7, #14]
 801a016:	1c59      	adds	r1, r3, #1
 801a018:	81f9      	strh	r1, [r7, #14]
 801a01a:	4619      	mov	r1, r3
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	440b      	add	r3, r1
 801a020:	b2d2      	uxtb	r2, r2
 801a022:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	0c1a      	lsrs	r2, r3, #16
 801a028:	89fb      	ldrh	r3, [r7, #14]
 801a02a:	1c59      	adds	r1, r3, #1
 801a02c:	81f9      	strh	r1, [r7, #14]
 801a02e:	4619      	mov	r1, r3
 801a030:	68bb      	ldr	r3, [r7, #8]
 801a032:	440b      	add	r3, r1
 801a034:	b2d2      	uxtb	r2, r2
 801a036:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	0a1a      	lsrs	r2, r3, #8
 801a03c:	89fb      	ldrh	r3, [r7, #14]
 801a03e:	1c59      	adds	r1, r3, #1
 801a040:	81f9      	strh	r1, [r7, #14]
 801a042:	4619      	mov	r1, r3
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	440b      	add	r3, r1
 801a048:	b2d2      	uxtb	r2, r2
 801a04a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801a04c:	89fb      	ldrh	r3, [r7, #14]
 801a04e:	1c5a      	adds	r2, r3, #1
 801a050:	81fa      	strh	r2, [r7, #14]
 801a052:	461a      	mov	r2, r3
 801a054:	68bb      	ldr	r3, [r7, #8]
 801a056:	4413      	add	r3, r2
 801a058:	687a      	ldr	r2, [r7, #4]
 801a05a:	b2d2      	uxtb	r2, r2
 801a05c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a05e:	89fb      	ldrh	r3, [r7, #14]
}
 801a060:	4618      	mov	r0, r3
 801a062:	3710      	adds	r7, #16
 801a064:	46bd      	mov	sp, r7
 801a066:	bd80      	pop	{r7, pc}
 801a068:	080254f8 	.word	0x080254f8
 801a06c:	08025744 	.word	0x08025744
 801a070:	08025558 	.word	0x08025558

0801a074 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b090      	sub	sp, #64	@ 0x40
 801a078:	af00      	add	r7, sp, #0
 801a07a:	6078      	str	r0, [r7, #4]
 801a07c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801a07e:	2300      	movs	r3, #0
 801a080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801a082:	2300      	movs	r3, #0
 801a084:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801a086:	220a      	movs	r2, #10
 801a088:	2100      	movs	r1, #0
 801a08a:	48ba      	ldr	r0, [pc, #744]	@ (801a374 <dhcp_parse_reply+0x300>)
 801a08c:	f004 fc63 	bl	801e956 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	895b      	ldrh	r3, [r3, #10]
 801a094:	2b2b      	cmp	r3, #43	@ 0x2b
 801a096:	d802      	bhi.n	801a09e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801a098:	f06f 0301 	mvn.w	r3, #1
 801a09c:	e2ea      	b.n	801a674 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	685b      	ldr	r3, [r3, #4]
 801a0a2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801a0a4:	23f0      	movs	r3, #240	@ 0xf0
 801a0a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	891b      	ldrh	r3, [r3, #8]
 801a0ac:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801a0b2:	e00c      	b.n	801a0ce <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0b6:	895b      	ldrh	r3, [r3, #10]
 801a0b8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a0ba:	1ad3      	subs	r3, r2, r3
 801a0bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801a0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0c0:	895b      	ldrh	r3, [r3, #10]
 801a0c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801a0c4:	1ad3      	subs	r3, r2, r3
 801a0c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801a0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d004      	beq.n	801a0de <dhcp_parse_reply+0x6a>
 801a0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0d6:	895b      	ldrh	r3, [r3, #10]
 801a0d8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a0da:	429a      	cmp	r2, r3
 801a0dc:	d2ea      	bcs.n	801a0b4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d102      	bne.n	801a0ea <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801a0e4:	f06f 0301 	mvn.w	r3, #1
 801a0e8:	e2c4      	b.n	801a674 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 801a0ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a0ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801a0ee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a0f0:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0f4:	685b      	ldr	r3, [r3, #4]
 801a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a0f8:	e267      	b.n	801a5ca <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 801a0fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a0fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a0fe:	4413      	add	r3, r2
 801a100:	781b      	ldrb	r3, [r3, #0]
 801a102:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801a104:	2300      	movs	r3, #0
 801a106:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801a10a:	f04f 33ff 	mov.w	r3, #4294967295
 801a10e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801a110:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a112:	3302      	adds	r3, #2
 801a114:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801a116:	8bfa      	ldrh	r2, [r7, #30]
 801a118:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d202      	bcs.n	801a124 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801a11e:	f06f 0301 	mvn.w	r3, #1
 801a122:	e2a7      	b.n	801a674 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801a124:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a126:	3301      	adds	r3, #1
 801a128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a12a:	8952      	ldrh	r2, [r2, #10]
 801a12c:	4293      	cmp	r3, r2
 801a12e:	da07      	bge.n	801a140 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801a130:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a132:	3301      	adds	r3, #1
 801a134:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a136:	4413      	add	r3, r2
 801a138:	781b      	ldrb	r3, [r3, #0]
 801a13a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a13e:	e00b      	b.n	801a158 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801a140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d004      	beq.n	801a152 <dhcp_parse_reply+0xde>
 801a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	685b      	ldr	r3, [r3, #4]
 801a14e:	781b      	ldrb	r3, [r3, #0]
 801a150:	e000      	b.n	801a154 <dhcp_parse_reply+0xe0>
 801a152:	2300      	movs	r3, #0
 801a154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801a158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a15c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 801a160:	7dfb      	ldrb	r3, [r7, #23]
 801a162:	2b3b      	cmp	r3, #59	@ 0x3b
 801a164:	f200 815a 	bhi.w	801a41c <dhcp_parse_reply+0x3a8>
 801a168:	a201      	add	r2, pc, #4	@ (adr r2, 801a170 <dhcp_parse_reply+0xfc>)
 801a16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a16e:	bf00      	nop
 801a170:	0801a261 	.word	0x0801a261
 801a174:	0801a271 	.word	0x0801a271
 801a178:	0801a41d 	.word	0x0801a41d
 801a17c:	0801a293 	.word	0x0801a293
 801a180:	0801a41d 	.word	0x0801a41d
 801a184:	0801a41d 	.word	0x0801a41d
 801a188:	0801a2bf 	.word	0x0801a2bf
 801a18c:	0801a41d 	.word	0x0801a41d
 801a190:	0801a41d 	.word	0x0801a41d
 801a194:	0801a41d 	.word	0x0801a41d
 801a198:	0801a41d 	.word	0x0801a41d
 801a19c:	0801a41d 	.word	0x0801a41d
 801a1a0:	0801a41d 	.word	0x0801a41d
 801a1a4:	0801a41d 	.word	0x0801a41d
 801a1a8:	0801a41d 	.word	0x0801a41d
 801a1ac:	0801a41d 	.word	0x0801a41d
 801a1b0:	0801a41d 	.word	0x0801a41d
 801a1b4:	0801a41d 	.word	0x0801a41d
 801a1b8:	0801a41d 	.word	0x0801a41d
 801a1bc:	0801a41d 	.word	0x0801a41d
 801a1c0:	0801a41d 	.word	0x0801a41d
 801a1c4:	0801a41d 	.word	0x0801a41d
 801a1c8:	0801a41d 	.word	0x0801a41d
 801a1cc:	0801a41d 	.word	0x0801a41d
 801a1d0:	0801a41d 	.word	0x0801a41d
 801a1d4:	0801a41d 	.word	0x0801a41d
 801a1d8:	0801a41d 	.word	0x0801a41d
 801a1dc:	0801a41d 	.word	0x0801a41d
 801a1e0:	0801a41d 	.word	0x0801a41d
 801a1e4:	0801a41d 	.word	0x0801a41d
 801a1e8:	0801a41d 	.word	0x0801a41d
 801a1ec:	0801a41d 	.word	0x0801a41d
 801a1f0:	0801a41d 	.word	0x0801a41d
 801a1f4:	0801a41d 	.word	0x0801a41d
 801a1f8:	0801a41d 	.word	0x0801a41d
 801a1fc:	0801a41d 	.word	0x0801a41d
 801a200:	0801a41d 	.word	0x0801a41d
 801a204:	0801a41d 	.word	0x0801a41d
 801a208:	0801a41d 	.word	0x0801a41d
 801a20c:	0801a41d 	.word	0x0801a41d
 801a210:	0801a41d 	.word	0x0801a41d
 801a214:	0801a41d 	.word	0x0801a41d
 801a218:	0801a41d 	.word	0x0801a41d
 801a21c:	0801a41d 	.word	0x0801a41d
 801a220:	0801a41d 	.word	0x0801a41d
 801a224:	0801a41d 	.word	0x0801a41d
 801a228:	0801a41d 	.word	0x0801a41d
 801a22c:	0801a41d 	.word	0x0801a41d
 801a230:	0801a41d 	.word	0x0801a41d
 801a234:	0801a41d 	.word	0x0801a41d
 801a238:	0801a41d 	.word	0x0801a41d
 801a23c:	0801a315 	.word	0x0801a315
 801a240:	0801a337 	.word	0x0801a337
 801a244:	0801a395 	.word	0x0801a395
 801a248:	0801a3b7 	.word	0x0801a3b7
 801a24c:	0801a41d 	.word	0x0801a41d
 801a250:	0801a41d 	.word	0x0801a41d
 801a254:	0801a41d 	.word	0x0801a41d
 801a258:	0801a3d9 	.word	0x0801a3d9
 801a25c:	0801a3fb 	.word	0x0801a3fb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801a260:	2300      	movs	r3, #0
 801a262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a26a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801a26e:	e0d9      	b.n	801a424 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a274:	2b04      	cmp	r3, #4
 801a276:	d009      	beq.n	801a28c <dhcp_parse_reply+0x218>
 801a278:	4b3f      	ldr	r3, [pc, #252]	@ (801a378 <dhcp_parse_reply+0x304>)
 801a27a:	f240 622e 	movw	r2, #1582	@ 0x62e
 801a27e:	493f      	ldr	r1, [pc, #252]	@ (801a37c <dhcp_parse_reply+0x308>)
 801a280:	483f      	ldr	r0, [pc, #252]	@ (801a380 <dhcp_parse_reply+0x30c>)
 801a282:	f004 fac9 	bl	801e818 <iprintf>
 801a286:	f06f 0305 	mvn.w	r3, #5
 801a28a:	e1f3      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801a28c:	2306      	movs	r3, #6
 801a28e:	623b      	str	r3, [r7, #32]
        break;
 801a290:	e0c8      	b.n	801a424 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801a292:	2304      	movs	r3, #4
 801a294:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a298:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a29c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a2a0:	429a      	cmp	r2, r3
 801a2a2:	d209      	bcs.n	801a2b8 <dhcp_parse_reply+0x244>
 801a2a4:	4b34      	ldr	r3, [pc, #208]	@ (801a378 <dhcp_parse_reply+0x304>)
 801a2a6:	f240 6233 	movw	r2, #1587	@ 0x633
 801a2aa:	4936      	ldr	r1, [pc, #216]	@ (801a384 <dhcp_parse_reply+0x310>)
 801a2ac:	4834      	ldr	r0, [pc, #208]	@ (801a380 <dhcp_parse_reply+0x30c>)
 801a2ae:	f004 fab3 	bl	801e818 <iprintf>
 801a2b2:	f06f 0305 	mvn.w	r3, #5
 801a2b6:	e1dd      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801a2b8:	2307      	movs	r3, #7
 801a2ba:	623b      	str	r3, [r7, #32]
        break;
 801a2bc:	e0b2      	b.n	801a424 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801a2be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a2c2:	f003 0303 	and.w	r3, r3, #3
 801a2c6:	b2db      	uxtb	r3, r3
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d009      	beq.n	801a2e0 <dhcp_parse_reply+0x26c>
 801a2cc:	4b2a      	ldr	r3, [pc, #168]	@ (801a378 <dhcp_parse_reply+0x304>)
 801a2ce:	f240 6239 	movw	r2, #1593	@ 0x639
 801a2d2:	492d      	ldr	r1, [pc, #180]	@ (801a388 <dhcp_parse_reply+0x314>)
 801a2d4:	482a      	ldr	r0, [pc, #168]	@ (801a380 <dhcp_parse_reply+0x30c>)
 801a2d6:	f004 fa9f 	bl	801e818 <iprintf>
 801a2da:	f06f 0305 	mvn.w	r3, #5
 801a2de:	e1c9      	b.n	801a674 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801a2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a2e4:	2b08      	cmp	r3, #8
 801a2e6:	bf28      	it	cs
 801a2e8:	2308      	movcs	r3, #8
 801a2ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a2ee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a2f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a2f6:	429a      	cmp	r2, r3
 801a2f8:	d209      	bcs.n	801a30e <dhcp_parse_reply+0x29a>
 801a2fa:	4b1f      	ldr	r3, [pc, #124]	@ (801a378 <dhcp_parse_reply+0x304>)
 801a2fc:	f240 623c 	movw	r2, #1596	@ 0x63c
 801a300:	4920      	ldr	r1, [pc, #128]	@ (801a384 <dhcp_parse_reply+0x310>)
 801a302:	481f      	ldr	r0, [pc, #124]	@ (801a380 <dhcp_parse_reply+0x30c>)
 801a304:	f004 fa88 	bl	801e818 <iprintf>
 801a308:	f06f 0305 	mvn.w	r3, #5
 801a30c:	e1b2      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801a30e:	2308      	movs	r3, #8
 801a310:	623b      	str	r3, [r7, #32]
        break;
 801a312:	e087      	b.n	801a424 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a318:	2b04      	cmp	r3, #4
 801a31a:	d009      	beq.n	801a330 <dhcp_parse_reply+0x2bc>
 801a31c:	4b16      	ldr	r3, [pc, #88]	@ (801a378 <dhcp_parse_reply+0x304>)
 801a31e:	f240 6241 	movw	r2, #1601	@ 0x641
 801a322:	4916      	ldr	r1, [pc, #88]	@ (801a37c <dhcp_parse_reply+0x308>)
 801a324:	4816      	ldr	r0, [pc, #88]	@ (801a380 <dhcp_parse_reply+0x30c>)
 801a326:	f004 fa77 	bl	801e818 <iprintf>
 801a32a:	f06f 0305 	mvn.w	r3, #5
 801a32e:	e1a1      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801a330:	2303      	movs	r3, #3
 801a332:	623b      	str	r3, [r7, #32]
        break;
 801a334:	e076      	b.n	801a424 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a336:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a33a:	2b01      	cmp	r3, #1
 801a33c:	d009      	beq.n	801a352 <dhcp_parse_reply+0x2de>
 801a33e:	4b0e      	ldr	r3, [pc, #56]	@ (801a378 <dhcp_parse_reply+0x304>)
 801a340:	f240 624f 	movw	r2, #1615	@ 0x64f
 801a344:	4911      	ldr	r1, [pc, #68]	@ (801a38c <dhcp_parse_reply+0x318>)
 801a346:	480e      	ldr	r0, [pc, #56]	@ (801a380 <dhcp_parse_reply+0x30c>)
 801a348:	f004 fa66 	bl	801e818 <iprintf>
 801a34c:	f06f 0305 	mvn.w	r3, #5
 801a350:	e190      	b.n	801a674 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801a352:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a354:	2bf0      	cmp	r3, #240	@ 0xf0
 801a356:	d009      	beq.n	801a36c <dhcp_parse_reply+0x2f8>
 801a358:	4b07      	ldr	r3, [pc, #28]	@ (801a378 <dhcp_parse_reply+0x304>)
 801a35a:	f240 6251 	movw	r2, #1617	@ 0x651
 801a35e:	490c      	ldr	r1, [pc, #48]	@ (801a390 <dhcp_parse_reply+0x31c>)
 801a360:	4807      	ldr	r0, [pc, #28]	@ (801a380 <dhcp_parse_reply+0x30c>)
 801a362:	f004 fa59 	bl	801e818 <iprintf>
 801a366:	f06f 0305 	mvn.w	r3, #5
 801a36a:	e183      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801a36c:	2300      	movs	r3, #0
 801a36e:	623b      	str	r3, [r7, #32]
        break;
 801a370:	e058      	b.n	801a424 <dhcp_parse_reply+0x3b0>
 801a372:	bf00      	nop
 801a374:	2000f50c 	.word	0x2000f50c
 801a378:	080254f8 	.word	0x080254f8
 801a37c:	08025780 	.word	0x08025780
 801a380:	08025558 	.word	0x08025558
 801a384:	0802578c 	.word	0x0802578c
 801a388:	080257a0 	.word	0x080257a0
 801a38c:	080257b0 	.word	0x080257b0
 801a390:	080257bc 	.word	0x080257bc
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a398:	2b01      	cmp	r3, #1
 801a39a:	d009      	beq.n	801a3b0 <dhcp_parse_reply+0x33c>
 801a39c:	4b9d      	ldr	r3, [pc, #628]	@ (801a614 <dhcp_parse_reply+0x5a0>)
 801a39e:	f240 6255 	movw	r2, #1621	@ 0x655
 801a3a2:	499d      	ldr	r1, [pc, #628]	@ (801a618 <dhcp_parse_reply+0x5a4>)
 801a3a4:	489d      	ldr	r0, [pc, #628]	@ (801a61c <dhcp_parse_reply+0x5a8>)
 801a3a6:	f004 fa37 	bl	801e818 <iprintf>
 801a3aa:	f06f 0305 	mvn.w	r3, #5
 801a3ae:	e161      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801a3b0:	2301      	movs	r3, #1
 801a3b2:	623b      	str	r3, [r7, #32]
        break;
 801a3b4:	e036      	b.n	801a424 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3ba:	2b04      	cmp	r3, #4
 801a3bc:	d009      	beq.n	801a3d2 <dhcp_parse_reply+0x35e>
 801a3be:	4b95      	ldr	r3, [pc, #596]	@ (801a614 <dhcp_parse_reply+0x5a0>)
 801a3c0:	f240 6259 	movw	r2, #1625	@ 0x659
 801a3c4:	4996      	ldr	r1, [pc, #600]	@ (801a620 <dhcp_parse_reply+0x5ac>)
 801a3c6:	4895      	ldr	r0, [pc, #596]	@ (801a61c <dhcp_parse_reply+0x5a8>)
 801a3c8:	f004 fa26 	bl	801e818 <iprintf>
 801a3cc:	f06f 0305 	mvn.w	r3, #5
 801a3d0:	e150      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801a3d2:	2302      	movs	r3, #2
 801a3d4:	623b      	str	r3, [r7, #32]
        break;
 801a3d6:	e025      	b.n	801a424 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3dc:	2b04      	cmp	r3, #4
 801a3de:	d009      	beq.n	801a3f4 <dhcp_parse_reply+0x380>
 801a3e0:	4b8c      	ldr	r3, [pc, #560]	@ (801a614 <dhcp_parse_reply+0x5a0>)
 801a3e2:	f240 625d 	movw	r2, #1629	@ 0x65d
 801a3e6:	498e      	ldr	r1, [pc, #568]	@ (801a620 <dhcp_parse_reply+0x5ac>)
 801a3e8:	488c      	ldr	r0, [pc, #560]	@ (801a61c <dhcp_parse_reply+0x5a8>)
 801a3ea:	f004 fa15 	bl	801e818 <iprintf>
 801a3ee:	f06f 0305 	mvn.w	r3, #5
 801a3f2:	e13f      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 801a3f4:	2304      	movs	r3, #4
 801a3f6:	623b      	str	r3, [r7, #32]
        break;
 801a3f8:	e014      	b.n	801a424 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3fe:	2b04      	cmp	r3, #4
 801a400:	d009      	beq.n	801a416 <dhcp_parse_reply+0x3a2>
 801a402:	4b84      	ldr	r3, [pc, #528]	@ (801a614 <dhcp_parse_reply+0x5a0>)
 801a404:	f240 6261 	movw	r2, #1633	@ 0x661
 801a408:	4985      	ldr	r1, [pc, #532]	@ (801a620 <dhcp_parse_reply+0x5ac>)
 801a40a:	4884      	ldr	r0, [pc, #528]	@ (801a61c <dhcp_parse_reply+0x5a8>)
 801a40c:	f004 fa04 	bl	801e818 <iprintf>
 801a410:	f06f 0305 	mvn.w	r3, #5
 801a414:	e12e      	b.n	801a674 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 801a416:	2305      	movs	r3, #5
 801a418:	623b      	str	r3, [r7, #32]
        break;
 801a41a:	e003      	b.n	801a424 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801a41c:	2300      	movs	r3, #0
 801a41e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801a422:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801a424:	7dfb      	ldrb	r3, [r7, #23]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d103      	bne.n	801a432 <dhcp_parse_reply+0x3be>
      offset++;
 801a42a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a42c:	3301      	adds	r3, #1
 801a42e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801a430:	e0a1      	b.n	801a576 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801a432:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a438:	4413      	add	r3, r2
 801a43a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801a43e:	4293      	cmp	r3, r2
 801a440:	dd02      	ble.n	801a448 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801a442:	f06f 0301 	mvn.w	r3, #1
 801a446:	e115      	b.n	801a674 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 801a448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a44c:	b29a      	uxth	r2, r3
 801a44e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a450:	4413      	add	r3, r2
 801a452:	b29b      	uxth	r3, r3
 801a454:	3302      	adds	r3, #2
 801a456:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801a458:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	f000 808a 	beq.w	801a576 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801a462:	2300      	movs	r3, #0
 801a464:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801a466:	6a3b      	ldr	r3, [r7, #32]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	db02      	blt.n	801a472 <dhcp_parse_reply+0x3fe>
 801a46c:	6a3b      	ldr	r3, [r7, #32]
 801a46e:	2b09      	cmp	r3, #9
 801a470:	dd06      	ble.n	801a480 <dhcp_parse_reply+0x40c>
 801a472:	4b68      	ldr	r3, [pc, #416]	@ (801a614 <dhcp_parse_reply+0x5a0>)
 801a474:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801a478:	496a      	ldr	r1, [pc, #424]	@ (801a624 <dhcp_parse_reply+0x5b0>)
 801a47a:	4868      	ldr	r0, [pc, #416]	@ (801a61c <dhcp_parse_reply+0x5a8>)
 801a47c:	f004 f9cc 	bl	801e818 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801a480:	4a69      	ldr	r2, [pc, #420]	@ (801a628 <dhcp_parse_reply+0x5b4>)
 801a482:	6a3b      	ldr	r3, [r7, #32]
 801a484:	4413      	add	r3, r2
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d174      	bne.n	801a576 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801a48c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a490:	2b04      	cmp	r3, #4
 801a492:	bf28      	it	cs
 801a494:	2304      	movcs	r3, #4
 801a496:	b2db      	uxtb	r3, r3
 801a498:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a49a:	8bfb      	ldrh	r3, [r7, #30]
 801a49c:	8aba      	ldrh	r2, [r7, #20]
 801a49e:	f107 0108 	add.w	r1, r7, #8
 801a4a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4a4:	f7f7 fad6 	bl	8011a54 <pbuf_copy_partial>
 801a4a8:	4603      	mov	r3, r0
 801a4aa:	461a      	mov	r2, r3
 801a4ac:	8abb      	ldrh	r3, [r7, #20]
 801a4ae:	4293      	cmp	r3, r2
 801a4b0:	d002      	beq.n	801a4b8 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801a4b2:	f06f 0301 	mvn.w	r3, #1
 801a4b6:	e0dd      	b.n	801a674 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 801a4b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a4bc:	2b04      	cmp	r3, #4
 801a4be:	d933      	bls.n	801a528 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a4c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a4c4:	f003 0303 	and.w	r3, r3, #3
 801a4c8:	b2db      	uxtb	r3, r3
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d009      	beq.n	801a4e2 <dhcp_parse_reply+0x46e>
 801a4ce:	4b51      	ldr	r3, [pc, #324]	@ (801a614 <dhcp_parse_reply+0x5a0>)
 801a4d0:	f240 6281 	movw	r2, #1665	@ 0x681
 801a4d4:	4955      	ldr	r1, [pc, #340]	@ (801a62c <dhcp_parse_reply+0x5b8>)
 801a4d6:	4851      	ldr	r0, [pc, #324]	@ (801a61c <dhcp_parse_reply+0x5a8>)
 801a4d8:	f004 f99e 	bl	801e818 <iprintf>
 801a4dc:	f06f 0305 	mvn.w	r3, #5
 801a4e0:	e0c8      	b.n	801a674 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 801a4e2:	4a51      	ldr	r2, [pc, #324]	@ (801a628 <dhcp_parse_reply+0x5b4>)
 801a4e4:	6a3b      	ldr	r3, [r7, #32]
 801a4e6:	4413      	add	r3, r2
 801a4e8:	2201      	movs	r2, #1
 801a4ea:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a4ec:	68bb      	ldr	r3, [r7, #8]
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	f7f5 f9a1 	bl	800f836 <lwip_htonl>
 801a4f4:	4602      	mov	r2, r0
 801a4f6:	494e      	ldr	r1, [pc, #312]	@ (801a630 <dhcp_parse_reply+0x5bc>)
 801a4f8:	6a3b      	ldr	r3, [r7, #32]
 801a4fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801a4fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a502:	3b04      	subs	r3, #4
 801a504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801a508:	8bfb      	ldrh	r3, [r7, #30]
 801a50a:	3304      	adds	r3, #4
 801a50c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801a50e:	8a7a      	ldrh	r2, [r7, #18]
 801a510:	8bfb      	ldrh	r3, [r7, #30]
 801a512:	429a      	cmp	r2, r3
 801a514:	d202      	bcs.n	801a51c <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801a516:	f06f 0301 	mvn.w	r3, #1
 801a51a:	e0ab      	b.n	801a674 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 801a51c:	8a7b      	ldrh	r3, [r7, #18]
 801a51e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801a520:	6a3b      	ldr	r3, [r7, #32]
 801a522:	3301      	adds	r3, #1
 801a524:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801a526:	e79e      	b.n	801a466 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801a528:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a52c:	2b04      	cmp	r3, #4
 801a52e:	d106      	bne.n	801a53e <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801a530:	68bb      	ldr	r3, [r7, #8]
 801a532:	4618      	mov	r0, r3
 801a534:	f7f5 f97f 	bl	800f836 <lwip_htonl>
 801a538:	4603      	mov	r3, r0
 801a53a:	60bb      	str	r3, [r7, #8]
 801a53c:	e011      	b.n	801a562 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a53e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a542:	2b01      	cmp	r3, #1
 801a544:	d009      	beq.n	801a55a <dhcp_parse_reply+0x4e6>
 801a546:	4b33      	ldr	r3, [pc, #204]	@ (801a614 <dhcp_parse_reply+0x5a0>)
 801a548:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801a54c:	4939      	ldr	r1, [pc, #228]	@ (801a634 <dhcp_parse_reply+0x5c0>)
 801a54e:	4833      	ldr	r0, [pc, #204]	@ (801a61c <dhcp_parse_reply+0x5a8>)
 801a550:	f004 f962 	bl	801e818 <iprintf>
 801a554:	f06f 0305 	mvn.w	r3, #5
 801a558:	e08c      	b.n	801a674 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 801a55a:	f107 0308 	add.w	r3, r7, #8
 801a55e:	781b      	ldrb	r3, [r3, #0]
 801a560:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801a562:	4a31      	ldr	r2, [pc, #196]	@ (801a628 <dhcp_parse_reply+0x5b4>)
 801a564:	6a3b      	ldr	r3, [r7, #32]
 801a566:	4413      	add	r3, r2
 801a568:	2201      	movs	r2, #1
 801a56a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801a56c:	68ba      	ldr	r2, [r7, #8]
 801a56e:	4930      	ldr	r1, [pc, #192]	@ (801a630 <dhcp_parse_reply+0x5bc>)
 801a570:	6a3b      	ldr	r3, [r7, #32]
 801a572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a578:	895b      	ldrh	r3, [r3, #10]
 801a57a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a57c:	429a      	cmp	r2, r3
 801a57e:	d324      	bcc.n	801a5ca <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a582:	895b      	ldrh	r3, [r3, #10]
 801a584:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a586:	1ad3      	subs	r3, r2, r3
 801a588:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801a58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a58c:	895b      	ldrh	r3, [r3, #10]
 801a58e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a590:	1ad3      	subs	r3, r2, r3
 801a592:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801a594:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a596:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a598:	429a      	cmp	r2, r3
 801a59a:	d213      	bcs.n	801a5c4 <dhcp_parse_reply+0x550>
        q = q->next;
 801a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d109      	bne.n	801a5bc <dhcp_parse_reply+0x548>
 801a5a8:	4b1a      	ldr	r3, [pc, #104]	@ (801a614 <dhcp_parse_reply+0x5a0>)
 801a5aa:	f240 629d 	movw	r2, #1693	@ 0x69d
 801a5ae:	4922      	ldr	r1, [pc, #136]	@ (801a638 <dhcp_parse_reply+0x5c4>)
 801a5b0:	481a      	ldr	r0, [pc, #104]	@ (801a61c <dhcp_parse_reply+0x5a8>)
 801a5b2:	f004 f931 	bl	801e818 <iprintf>
 801a5b6:	f06f 0305 	mvn.w	r3, #5
 801a5ba:	e05b      	b.n	801a674 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 801a5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5be:	685b      	ldr	r3, [r3, #4]
 801a5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a5c2:	e002      	b.n	801a5ca <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801a5c4:	f06f 0301 	mvn.w	r3, #1
 801a5c8:	e054      	b.n	801a674 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d00a      	beq.n	801a5e6 <dhcp_parse_reply+0x572>
 801a5d0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a5d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d206      	bcs.n	801a5e6 <dhcp_parse_reply+0x572>
 801a5d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a5da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a5dc:	4413      	add	r3, r2
 801a5de:	781b      	ldrb	r3, [r3, #0]
 801a5e0:	2bff      	cmp	r3, #255	@ 0xff
 801a5e2:	f47f ad8a 	bne.w	801a0fa <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a5e6:	4b10      	ldr	r3, [pc, #64]	@ (801a628 <dhcp_parse_reply+0x5b4>)
 801a5e8:	781b      	ldrb	r3, [r3, #0]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d02d      	beq.n	801a64a <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a5ee:	4b10      	ldr	r3, [pc, #64]	@ (801a630 <dhcp_parse_reply+0x5bc>)
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a5f4:	4b0c      	ldr	r3, [pc, #48]	@ (801a628 <dhcp_parse_reply+0x5b4>)
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	2b01      	cmp	r3, #1
 801a5fe:	d102      	bne.n	801a606 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801a600:	2301      	movs	r3, #1
 801a602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a604:	e021      	b.n	801a64a <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	2b02      	cmp	r3, #2
 801a60a:	d117      	bne.n	801a63c <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 801a60c:	2301      	movs	r3, #1
 801a60e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a610:	e01b      	b.n	801a64a <dhcp_parse_reply+0x5d6>
 801a612:	bf00      	nop
 801a614:	080254f8 	.word	0x080254f8
 801a618:	080257b0 	.word	0x080257b0
 801a61c:	08025558 	.word	0x08025558
 801a620:	08025780 	.word	0x08025780
 801a624:	080257d4 	.word	0x080257d4
 801a628:	2000f50c 	.word	0x2000f50c
 801a62c:	080257e8 	.word	0x080257e8
 801a630:	2000f4e4 	.word	0x2000f4e4
 801a634:	08025800 	.word	0x08025800
 801a638:	08025814 	.word	0x08025814
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	2b03      	cmp	r3, #3
 801a640:	d103      	bne.n	801a64a <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 801a642:	2301      	movs	r3, #1
 801a644:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801a646:	2301      	movs	r3, #1
 801a648:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801a64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d006      	beq.n	801a65e <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801a650:	2300      	movs	r3, #0
 801a652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801a654:	236c      	movs	r3, #108	@ 0x6c
 801a656:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a658:	23ec      	movs	r3, #236	@ 0xec
 801a65a:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801a65c:	e527      	b.n	801a0ae <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801a65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a660:	2b00      	cmp	r3, #0
 801a662:	d006      	beq.n	801a672 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 801a664:	2300      	movs	r3, #0
 801a666:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801a668:	232c      	movs	r3, #44	@ 0x2c
 801a66a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a66c:	236c      	movs	r3, #108	@ 0x6c
 801a66e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801a670:	e51d      	b.n	801a0ae <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801a672:	2300      	movs	r3, #0
}
 801a674:	4618      	mov	r0, r3
 801a676:	3740      	adds	r7, #64	@ 0x40
 801a678:	46bd      	mov	sp, r7
 801a67a:	bd80      	pop	{r7, pc}

0801a67c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a67c:	b580      	push	{r7, lr}
 801a67e:	b08a      	sub	sp, #40	@ 0x28
 801a680:	af00      	add	r7, sp, #0
 801a682:	60f8      	str	r0, [r7, #12]
 801a684:	60b9      	str	r1, [r7, #8]
 801a686:	607a      	str	r2, [r7, #4]
 801a688:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801a68a:	4b60      	ldr	r3, [pc, #384]	@ (801a80c <dhcp_recv+0x190>)
 801a68c:	685b      	ldr	r3, [r3, #4]
 801a68e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a690:	6a3b      	ldr	r3, [r7, #32]
 801a692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a694:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	685b      	ldr	r3, [r3, #4]
 801a69a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801a69c:	69fb      	ldr	r3, [r7, #28]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	f000 809d 	beq.w	801a7de <dhcp_recv+0x162>
 801a6a4:	69fb      	ldr	r3, [r7, #28]
 801a6a6:	791b      	ldrb	r3, [r3, #4]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	f000 8098 	beq.w	801a7de <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	895b      	ldrh	r3, [r3, #10]
 801a6b2:	2b2b      	cmp	r3, #43	@ 0x2b
 801a6b4:	f240 8095 	bls.w	801a7e2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801a6b8:	69bb      	ldr	r3, [r7, #24]
 801a6ba:	781b      	ldrb	r3, [r3, #0]
 801a6bc:	2b02      	cmp	r3, #2
 801a6be:	f040 8092 	bne.w	801a7e6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a6c8:	e012      	b.n	801a6f0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a6ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6ce:	6a3a      	ldr	r2, [r7, #32]
 801a6d0:	4413      	add	r3, r2
 801a6d2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a6d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6da:	69b9      	ldr	r1, [r7, #24]
 801a6dc:	440b      	add	r3, r1
 801a6de:	7f1b      	ldrb	r3, [r3, #28]
 801a6e0:	429a      	cmp	r2, r3
 801a6e2:	f040 8082 	bne.w	801a7ea <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a6e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6ea:	3301      	adds	r3, #1
 801a6ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a6f0:	6a3b      	ldr	r3, [r7, #32]
 801a6f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a6f6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a6fa:	429a      	cmp	r2, r3
 801a6fc:	d203      	bcs.n	801a706 <dhcp_recv+0x8a>
 801a6fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a702:	2b05      	cmp	r3, #5
 801a704:	d9e1      	bls.n	801a6ca <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a706:	69bb      	ldr	r3, [r7, #24]
 801a708:	685b      	ldr	r3, [r3, #4]
 801a70a:	4618      	mov	r0, r3
 801a70c:	f7f5 f893 	bl	800f836 <lwip_htonl>
 801a710:	4602      	mov	r2, r0
 801a712:	69fb      	ldr	r3, [r7, #28]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	429a      	cmp	r2, r3
 801a718:	d169      	bne.n	801a7ee <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801a71a:	69f9      	ldr	r1, [r7, #28]
 801a71c:	6878      	ldr	r0, [r7, #4]
 801a71e:	f7ff fca9 	bl	801a074 <dhcp_parse_reply>
 801a722:	4603      	mov	r3, r0
 801a724:	2b00      	cmp	r3, #0
 801a726:	d164      	bne.n	801a7f2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a728:	4b39      	ldr	r3, [pc, #228]	@ (801a810 <dhcp_recv+0x194>)
 801a72a:	785b      	ldrb	r3, [r3, #1]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d062      	beq.n	801a7f6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	685b      	ldr	r3, [r3, #4]
 801a734:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a736:	4b37      	ldr	r3, [pc, #220]	@ (801a814 <dhcp_recv+0x198>)
 801a738:	685b      	ldr	r3, [r3, #4]
 801a73a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801a73c:	7cfb      	ldrb	r3, [r7, #19]
 801a73e:	2b05      	cmp	r3, #5
 801a740:	d12a      	bne.n	801a798 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a742:	69fb      	ldr	r3, [r7, #28]
 801a744:	795b      	ldrb	r3, [r3, #5]
 801a746:	2b01      	cmp	r3, #1
 801a748:	d112      	bne.n	801a770 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801a74a:	6979      	ldr	r1, [r7, #20]
 801a74c:	6a38      	ldr	r0, [r7, #32]
 801a74e:	f7fe fdcd 	bl	80192ec <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a752:	6a3b      	ldr	r3, [r7, #32]
 801a754:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a758:	f003 0308 	and.w	r3, r3, #8
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d003      	beq.n	801a768 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801a760:	6a38      	ldr	r0, [r7, #32]
 801a762:	f7fe fb3d 	bl	8018de0 <dhcp_check>
 801a766:	e049      	b.n	801a7fc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801a768:	6a38      	ldr	r0, [r7, #32]
 801a76a:	f7ff f83d 	bl	80197e8 <dhcp_bind>
 801a76e:	e045      	b.n	801a7fc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a770:	69fb      	ldr	r3, [r7, #28]
 801a772:	795b      	ldrb	r3, [r3, #5]
 801a774:	2b03      	cmp	r3, #3
 801a776:	d007      	beq.n	801a788 <dhcp_recv+0x10c>
 801a778:	69fb      	ldr	r3, [r7, #28]
 801a77a:	795b      	ldrb	r3, [r3, #5]
 801a77c:	2b04      	cmp	r3, #4
 801a77e:	d003      	beq.n	801a788 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801a780:	69fb      	ldr	r3, [r7, #28]
 801a782:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a784:	2b05      	cmp	r3, #5
 801a786:	d139      	bne.n	801a7fc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801a788:	6979      	ldr	r1, [r7, #20]
 801a78a:	6a38      	ldr	r0, [r7, #32]
 801a78c:	f7fe fdae 	bl	80192ec <dhcp_handle_ack>
      dhcp_bind(netif);
 801a790:	6a38      	ldr	r0, [r7, #32]
 801a792:	f7ff f829 	bl	80197e8 <dhcp_bind>
 801a796:	e031      	b.n	801a7fc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801a798:	7cfb      	ldrb	r3, [r7, #19]
 801a79a:	2b06      	cmp	r3, #6
 801a79c:	d113      	bne.n	801a7c6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a79e:	69fb      	ldr	r3, [r7, #28]
 801a7a0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801a7a2:	2b03      	cmp	r3, #3
 801a7a4:	d00b      	beq.n	801a7be <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a7a6:	69fb      	ldr	r3, [r7, #28]
 801a7a8:	795b      	ldrb	r3, [r3, #5]
 801a7aa:	2b01      	cmp	r3, #1
 801a7ac:	d007      	beq.n	801a7be <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a7ae:	69fb      	ldr	r3, [r7, #28]
 801a7b0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a7b2:	2b04      	cmp	r3, #4
 801a7b4:	d003      	beq.n	801a7be <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a7b6:	69fb      	ldr	r3, [r7, #28]
 801a7b8:	795b      	ldrb	r3, [r3, #5]
 801a7ba:	2b05      	cmp	r3, #5
 801a7bc:	d103      	bne.n	801a7c6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801a7be:	6a38      	ldr	r0, [r7, #32]
 801a7c0:	f7fe faf4 	bl	8018dac <dhcp_handle_nak>
 801a7c4:	e01a      	b.n	801a7fc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a7c6:	7cfb      	ldrb	r3, [r7, #19]
 801a7c8:	2b02      	cmp	r3, #2
 801a7ca:	d116      	bne.n	801a7fa <dhcp_recv+0x17e>
 801a7cc:	69fb      	ldr	r3, [r7, #28]
 801a7ce:	795b      	ldrb	r3, [r3, #5]
 801a7d0:	2b06      	cmp	r3, #6
 801a7d2:	d112      	bne.n	801a7fa <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801a7d4:	6979      	ldr	r1, [r7, #20]
 801a7d6:	6a38      	ldr	r0, [r7, #32]
 801a7d8:	f7fe fb36 	bl	8018e48 <dhcp_handle_offer>
 801a7dc:	e00e      	b.n	801a7fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7de:	bf00      	nop
 801a7e0:	e00c      	b.n	801a7fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7e2:	bf00      	nop
 801a7e4:	e00a      	b.n	801a7fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7e6:	bf00      	nop
 801a7e8:	e008      	b.n	801a7fc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801a7ea:	bf00      	nop
 801a7ec:	e006      	b.n	801a7fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7ee:	bf00      	nop
 801a7f0:	e004      	b.n	801a7fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7f2:	bf00      	nop
 801a7f4:	e002      	b.n	801a7fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a7f6:	bf00      	nop
 801a7f8:	e000      	b.n	801a7fc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801a7fa:	bf00      	nop
  pbuf_free(p);
 801a7fc:	6878      	ldr	r0, [r7, #4]
 801a7fe:	f7f6 ff23 	bl	8011648 <pbuf_free>
}
 801a802:	bf00      	nop
 801a804:	3728      	adds	r7, #40	@ 0x28
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	bf00      	nop
 801a80c:	2000bbc4 	.word	0x2000bbc4
 801a810:	2000f50c 	.word	0x2000f50c
 801a814:	2000f4e4 	.word	0x2000f4e4

0801a818 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b088      	sub	sp, #32
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	60f8      	str	r0, [r7, #12]
 801a820:	60b9      	str	r1, [r7, #8]
 801a822:	603b      	str	r3, [r7, #0]
 801a824:	4613      	mov	r3, r2
 801a826:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d108      	bne.n	801a840 <dhcp_create_msg+0x28>
 801a82e:	4b5f      	ldr	r3, [pc, #380]	@ (801a9ac <dhcp_create_msg+0x194>)
 801a830:	f240 7269 	movw	r2, #1897	@ 0x769
 801a834:	495e      	ldr	r1, [pc, #376]	@ (801a9b0 <dhcp_create_msg+0x198>)
 801a836:	485f      	ldr	r0, [pc, #380]	@ (801a9b4 <dhcp_create_msg+0x19c>)
 801a838:	f003 ffee 	bl	801e818 <iprintf>
 801a83c:	2300      	movs	r3, #0
 801a83e:	e0b1      	b.n	801a9a4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d108      	bne.n	801a858 <dhcp_create_msg+0x40>
 801a846:	4b59      	ldr	r3, [pc, #356]	@ (801a9ac <dhcp_create_msg+0x194>)
 801a848:	f240 726a 	movw	r2, #1898	@ 0x76a
 801a84c:	495a      	ldr	r1, [pc, #360]	@ (801a9b8 <dhcp_create_msg+0x1a0>)
 801a84e:	4859      	ldr	r0, [pc, #356]	@ (801a9b4 <dhcp_create_msg+0x19c>)
 801a850:	f003 ffe2 	bl	801e818 <iprintf>
 801a854:	2300      	movs	r3, #0
 801a856:	e0a5      	b.n	801a9a4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801a858:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a85c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801a860:	2036      	movs	r0, #54	@ 0x36
 801a862:	f7f6 fbdb 	bl	801101c <pbuf_alloc>
 801a866:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801a868:	69bb      	ldr	r3, [r7, #24]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d101      	bne.n	801a872 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801a86e:	2300      	movs	r3, #0
 801a870:	e098      	b.n	801a9a4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801a872:	69bb      	ldr	r3, [r7, #24]
 801a874:	895b      	ldrh	r3, [r3, #10]
 801a876:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a87a:	d206      	bcs.n	801a88a <dhcp_create_msg+0x72>
 801a87c:	4b4b      	ldr	r3, [pc, #300]	@ (801a9ac <dhcp_create_msg+0x194>)
 801a87e:	f240 7271 	movw	r2, #1905	@ 0x771
 801a882:	494e      	ldr	r1, [pc, #312]	@ (801a9bc <dhcp_create_msg+0x1a4>)
 801a884:	484b      	ldr	r0, [pc, #300]	@ (801a9b4 <dhcp_create_msg+0x19c>)
 801a886:	f003 ffc7 	bl	801e818 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801a88a:	79fb      	ldrb	r3, [r7, #7]
 801a88c:	2b03      	cmp	r3, #3
 801a88e:	d103      	bne.n	801a898 <dhcp_create_msg+0x80>
 801a890:	68bb      	ldr	r3, [r7, #8]
 801a892:	795b      	ldrb	r3, [r3, #5]
 801a894:	2b03      	cmp	r3, #3
 801a896:	d10d      	bne.n	801a8b4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801a898:	68bb      	ldr	r3, [r7, #8]
 801a89a:	799b      	ldrb	r3, [r3, #6]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d105      	bne.n	801a8ac <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801a8a0:	f002 fec6 	bl	801d630 <rand>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	461a      	mov	r2, r3
 801a8a8:	4b45      	ldr	r3, [pc, #276]	@ (801a9c0 <dhcp_create_msg+0x1a8>)
 801a8aa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801a8ac:	4b44      	ldr	r3, [pc, #272]	@ (801a9c0 <dhcp_create_msg+0x1a8>)
 801a8ae:	681a      	ldr	r2, [r3, #0]
 801a8b0:	68bb      	ldr	r3, [r7, #8]
 801a8b2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801a8b4:	69bb      	ldr	r3, [r7, #24]
 801a8b6:	685b      	ldr	r3, [r3, #4]
 801a8b8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801a8ba:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801a8be:	2100      	movs	r1, #0
 801a8c0:	6978      	ldr	r0, [r7, #20]
 801a8c2:	f004 f848 	bl	801e956 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801a8c6:	697b      	ldr	r3, [r7, #20]
 801a8c8:	2201      	movs	r2, #1
 801a8ca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801a8cc:	697b      	ldr	r3, [r7, #20]
 801a8ce:	2201      	movs	r2, #1
 801a8d0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a8d8:	697b      	ldr	r3, [r7, #20]
 801a8da:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801a8dc:	68bb      	ldr	r3, [r7, #8]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	f7f4 ffa8 	bl	800f836 <lwip_htonl>
 801a8e6:	4602      	mov	r2, r0
 801a8e8:	697b      	ldr	r3, [r7, #20]
 801a8ea:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801a8ec:	79fb      	ldrb	r3, [r7, #7]
 801a8ee:	2b08      	cmp	r3, #8
 801a8f0:	d010      	beq.n	801a914 <dhcp_create_msg+0xfc>
 801a8f2:	79fb      	ldrb	r3, [r7, #7]
 801a8f4:	2b04      	cmp	r3, #4
 801a8f6:	d00d      	beq.n	801a914 <dhcp_create_msg+0xfc>
 801a8f8:	79fb      	ldrb	r3, [r7, #7]
 801a8fa:	2b07      	cmp	r3, #7
 801a8fc:	d00a      	beq.n	801a914 <dhcp_create_msg+0xfc>
 801a8fe:	79fb      	ldrb	r3, [r7, #7]
 801a900:	2b03      	cmp	r3, #3
 801a902:	d10c      	bne.n	801a91e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a904:	68bb      	ldr	r3, [r7, #8]
 801a906:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801a908:	2b05      	cmp	r3, #5
 801a90a:	d003      	beq.n	801a914 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a90c:	68bb      	ldr	r3, [r7, #8]
 801a90e:	795b      	ldrb	r3, [r3, #5]
 801a910:	2b04      	cmp	r3, #4
 801a912:	d104      	bne.n	801a91e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	3304      	adds	r3, #4
 801a918:	681a      	ldr	r2, [r3, #0]
 801a91a:	697b      	ldr	r3, [r7, #20]
 801a91c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a91e:	2300      	movs	r3, #0
 801a920:	83fb      	strh	r3, [r7, #30]
 801a922:	e00c      	b.n	801a93e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801a924:	8bfa      	ldrh	r2, [r7, #30]
 801a926:	8bfb      	ldrh	r3, [r7, #30]
 801a928:	68f9      	ldr	r1, [r7, #12]
 801a92a:	440a      	add	r2, r1
 801a92c:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801a930:	697a      	ldr	r2, [r7, #20]
 801a932:	4413      	add	r3, r2
 801a934:	460a      	mov	r2, r1
 801a936:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a938:	8bfb      	ldrh	r3, [r7, #30]
 801a93a:	3301      	adds	r3, #1
 801a93c:	83fb      	strh	r3, [r7, #30]
 801a93e:	8bfb      	ldrh	r3, [r7, #30]
 801a940:	2b05      	cmp	r3, #5
 801a942:	d9ef      	bls.n	801a924 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801a944:	697b      	ldr	r3, [r7, #20]
 801a946:	2200      	movs	r2, #0
 801a948:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a94c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801a950:	2200      	movs	r2, #0
 801a952:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801a956:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801a95a:	2200      	movs	r2, #0
 801a95c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801a960:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801a964:	2200      	movs	r2, #0
 801a966:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a96a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801a96e:	697b      	ldr	r3, [r7, #20]
 801a970:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a974:	2301      	movs	r3, #1
 801a976:	2235      	movs	r2, #53	@ 0x35
 801a978:	2000      	movs	r0, #0
 801a97a:	f7ff faab 	bl	8019ed4 <dhcp_option>
 801a97e:	4603      	mov	r3, r0
 801a980:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801a982:	697b      	ldr	r3, [r7, #20]
 801a984:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a988:	79fa      	ldrb	r2, [r7, #7]
 801a98a:	8a7b      	ldrh	r3, [r7, #18]
 801a98c:	4618      	mov	r0, r3
 801a98e:	f7ff fad5 	bl	8019f3c <dhcp_option_byte>
 801a992:	4603      	mov	r3, r0
 801a994:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801a996:	683b      	ldr	r3, [r7, #0]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d002      	beq.n	801a9a2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801a99c:	683b      	ldr	r3, [r7, #0]
 801a99e:	8a7a      	ldrh	r2, [r7, #18]
 801a9a0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801a9a2:	69bb      	ldr	r3, [r7, #24]
}
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	3720      	adds	r7, #32
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	bd80      	pop	{r7, pc}
 801a9ac:	080254f8 	.word	0x080254f8
 801a9b0:	08025828 	.word	0x08025828
 801a9b4:	08025558 	.word	0x08025558
 801a9b8:	08025848 	.word	0x08025848
 801a9bc:	08025868 	.word	0x08025868
 801a9c0:	2000f520 	.word	0x2000f520

0801a9c4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b084      	sub	sp, #16
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	60b9      	str	r1, [r7, #8]
 801a9ce:	607a      	str	r2, [r7, #4]
 801a9d0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801a9d2:	89fb      	ldrh	r3, [r7, #14]
 801a9d4:	1c5a      	adds	r2, r3, #1
 801a9d6:	81fa      	strh	r2, [r7, #14]
 801a9d8:	461a      	mov	r2, r3
 801a9da:	68bb      	ldr	r3, [r7, #8]
 801a9dc:	4413      	add	r3, r2
 801a9de:	22ff      	movs	r2, #255	@ 0xff
 801a9e0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a9e2:	e007      	b.n	801a9f4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801a9e4:	89fb      	ldrh	r3, [r7, #14]
 801a9e6:	1c5a      	adds	r2, r3, #1
 801a9e8:	81fa      	strh	r2, [r7, #14]
 801a9ea:	461a      	mov	r2, r3
 801a9ec:	68bb      	ldr	r3, [r7, #8]
 801a9ee:	4413      	add	r3, r2
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a9f4:	89fb      	ldrh	r3, [r7, #14]
 801a9f6:	2b43      	cmp	r3, #67	@ 0x43
 801a9f8:	d904      	bls.n	801aa04 <dhcp_option_trailer+0x40>
 801a9fa:	89fb      	ldrh	r3, [r7, #14]
 801a9fc:	f003 0303 	and.w	r3, r3, #3
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d002      	beq.n	801aa0a <dhcp_option_trailer+0x46>
 801aa04:	89fb      	ldrh	r3, [r7, #14]
 801aa06:	2b43      	cmp	r3, #67	@ 0x43
 801aa08:	d9ec      	bls.n	801a9e4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801aa0a:	89fb      	ldrh	r3, [r7, #14]
 801aa0c:	33f0      	adds	r3, #240	@ 0xf0
 801aa0e:	b29b      	uxth	r3, r3
 801aa10:	4619      	mov	r1, r3
 801aa12:	6878      	ldr	r0, [r7, #4]
 801aa14:	f7f6 fc60 	bl	80112d8 <pbuf_realloc>
}
 801aa18:	bf00      	nop
 801aa1a:	3710      	adds	r7, #16
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bd80      	pop	{r7, pc}

0801aa20 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801aa20:	b480      	push	{r7}
 801aa22:	b085      	sub	sp, #20
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d017      	beq.n	801aa5e <dhcp_supplied_address+0x3e>
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d013      	beq.n	801aa5e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa3a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	795b      	ldrb	r3, [r3, #5]
 801aa40:	2b0a      	cmp	r3, #10
 801aa42:	d007      	beq.n	801aa54 <dhcp_supplied_address+0x34>
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	795b      	ldrb	r3, [r3, #5]
 801aa48:	2b05      	cmp	r3, #5
 801aa4a:	d003      	beq.n	801aa54 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801aa50:	2b04      	cmp	r3, #4
 801aa52:	d101      	bne.n	801aa58 <dhcp_supplied_address+0x38>
 801aa54:	2301      	movs	r3, #1
 801aa56:	e000      	b.n	801aa5a <dhcp_supplied_address+0x3a>
 801aa58:	2300      	movs	r3, #0
 801aa5a:	b2db      	uxtb	r3, r3
 801aa5c:	e000      	b.n	801aa60 <dhcp_supplied_address+0x40>
  }
  return 0;
 801aa5e:	2300      	movs	r3, #0
}
 801aa60:	4618      	mov	r0, r3
 801aa62:	3714      	adds	r7, #20
 801aa64:	46bd      	mov	sp, r7
 801aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa6a:	4770      	bx	lr

0801aa6c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b082      	sub	sp, #8
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801aa74:	4915      	ldr	r1, [pc, #84]	@ (801aacc <etharp_free_entry+0x60>)
 801aa76:	687a      	ldr	r2, [r7, #4]
 801aa78:	4613      	mov	r3, r2
 801aa7a:	005b      	lsls	r3, r3, #1
 801aa7c:	4413      	add	r3, r2
 801aa7e:	00db      	lsls	r3, r3, #3
 801aa80:	440b      	add	r3, r1
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d013      	beq.n	801aab0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801aa88:	4910      	ldr	r1, [pc, #64]	@ (801aacc <etharp_free_entry+0x60>)
 801aa8a:	687a      	ldr	r2, [r7, #4]
 801aa8c:	4613      	mov	r3, r2
 801aa8e:	005b      	lsls	r3, r3, #1
 801aa90:	4413      	add	r3, r2
 801aa92:	00db      	lsls	r3, r3, #3
 801aa94:	440b      	add	r3, r1
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	4618      	mov	r0, r3
 801aa9a:	f7f6 fdd5 	bl	8011648 <pbuf_free>
    arp_table[i].q = NULL;
 801aa9e:	490b      	ldr	r1, [pc, #44]	@ (801aacc <etharp_free_entry+0x60>)
 801aaa0:	687a      	ldr	r2, [r7, #4]
 801aaa2:	4613      	mov	r3, r2
 801aaa4:	005b      	lsls	r3, r3, #1
 801aaa6:	4413      	add	r3, r2
 801aaa8:	00db      	lsls	r3, r3, #3
 801aaaa:	440b      	add	r3, r1
 801aaac:	2200      	movs	r2, #0
 801aaae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801aab0:	4906      	ldr	r1, [pc, #24]	@ (801aacc <etharp_free_entry+0x60>)
 801aab2:	687a      	ldr	r2, [r7, #4]
 801aab4:	4613      	mov	r3, r2
 801aab6:	005b      	lsls	r3, r3, #1
 801aab8:	4413      	add	r3, r2
 801aaba:	00db      	lsls	r3, r3, #3
 801aabc:	440b      	add	r3, r1
 801aabe:	3314      	adds	r3, #20
 801aac0:	2200      	movs	r2, #0
 801aac2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801aac4:	bf00      	nop
 801aac6:	3708      	adds	r7, #8
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}
 801aacc:	2000f524 	.word	0x2000f524

0801aad0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b082      	sub	sp, #8
 801aad4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aad6:	2300      	movs	r3, #0
 801aad8:	607b      	str	r3, [r7, #4]
 801aada:	e096      	b.n	801ac0a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801aadc:	494f      	ldr	r1, [pc, #316]	@ (801ac1c <etharp_tmr+0x14c>)
 801aade:	687a      	ldr	r2, [r7, #4]
 801aae0:	4613      	mov	r3, r2
 801aae2:	005b      	lsls	r3, r3, #1
 801aae4:	4413      	add	r3, r2
 801aae6:	00db      	lsls	r3, r3, #3
 801aae8:	440b      	add	r3, r1
 801aaea:	3314      	adds	r3, #20
 801aaec:	781b      	ldrb	r3, [r3, #0]
 801aaee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801aaf0:	78fb      	ldrb	r3, [r7, #3]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	f000 8086 	beq.w	801ac04 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801aaf8:	4948      	ldr	r1, [pc, #288]	@ (801ac1c <etharp_tmr+0x14c>)
 801aafa:	687a      	ldr	r2, [r7, #4]
 801aafc:	4613      	mov	r3, r2
 801aafe:	005b      	lsls	r3, r3, #1
 801ab00:	4413      	add	r3, r2
 801ab02:	00db      	lsls	r3, r3, #3
 801ab04:	440b      	add	r3, r1
 801ab06:	3312      	adds	r3, #18
 801ab08:	881b      	ldrh	r3, [r3, #0]
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	b298      	uxth	r0, r3
 801ab0e:	4943      	ldr	r1, [pc, #268]	@ (801ac1c <etharp_tmr+0x14c>)
 801ab10:	687a      	ldr	r2, [r7, #4]
 801ab12:	4613      	mov	r3, r2
 801ab14:	005b      	lsls	r3, r3, #1
 801ab16:	4413      	add	r3, r2
 801ab18:	00db      	lsls	r3, r3, #3
 801ab1a:	440b      	add	r3, r1
 801ab1c:	3312      	adds	r3, #18
 801ab1e:	4602      	mov	r2, r0
 801ab20:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ab22:	493e      	ldr	r1, [pc, #248]	@ (801ac1c <etharp_tmr+0x14c>)
 801ab24:	687a      	ldr	r2, [r7, #4]
 801ab26:	4613      	mov	r3, r2
 801ab28:	005b      	lsls	r3, r3, #1
 801ab2a:	4413      	add	r3, r2
 801ab2c:	00db      	lsls	r3, r3, #3
 801ab2e:	440b      	add	r3, r1
 801ab30:	3312      	adds	r3, #18
 801ab32:	881b      	ldrh	r3, [r3, #0]
 801ab34:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801ab38:	d215      	bcs.n	801ab66 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ab3a:	4938      	ldr	r1, [pc, #224]	@ (801ac1c <etharp_tmr+0x14c>)
 801ab3c:	687a      	ldr	r2, [r7, #4]
 801ab3e:	4613      	mov	r3, r2
 801ab40:	005b      	lsls	r3, r3, #1
 801ab42:	4413      	add	r3, r2
 801ab44:	00db      	lsls	r3, r3, #3
 801ab46:	440b      	add	r3, r1
 801ab48:	3314      	adds	r3, #20
 801ab4a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ab4c:	2b01      	cmp	r3, #1
 801ab4e:	d10e      	bne.n	801ab6e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ab50:	4932      	ldr	r1, [pc, #200]	@ (801ac1c <etharp_tmr+0x14c>)
 801ab52:	687a      	ldr	r2, [r7, #4]
 801ab54:	4613      	mov	r3, r2
 801ab56:	005b      	lsls	r3, r3, #1
 801ab58:	4413      	add	r3, r2
 801ab5a:	00db      	lsls	r3, r3, #3
 801ab5c:	440b      	add	r3, r1
 801ab5e:	3312      	adds	r3, #18
 801ab60:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ab62:	2b04      	cmp	r3, #4
 801ab64:	d903      	bls.n	801ab6e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ab66:	6878      	ldr	r0, [r7, #4]
 801ab68:	f7ff ff80 	bl	801aa6c <etharp_free_entry>
 801ab6c:	e04a      	b.n	801ac04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ab6e:	492b      	ldr	r1, [pc, #172]	@ (801ac1c <etharp_tmr+0x14c>)
 801ab70:	687a      	ldr	r2, [r7, #4]
 801ab72:	4613      	mov	r3, r2
 801ab74:	005b      	lsls	r3, r3, #1
 801ab76:	4413      	add	r3, r2
 801ab78:	00db      	lsls	r3, r3, #3
 801ab7a:	440b      	add	r3, r1
 801ab7c:	3314      	adds	r3, #20
 801ab7e:	781b      	ldrb	r3, [r3, #0]
 801ab80:	2b03      	cmp	r3, #3
 801ab82:	d10a      	bne.n	801ab9a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ab84:	4925      	ldr	r1, [pc, #148]	@ (801ac1c <etharp_tmr+0x14c>)
 801ab86:	687a      	ldr	r2, [r7, #4]
 801ab88:	4613      	mov	r3, r2
 801ab8a:	005b      	lsls	r3, r3, #1
 801ab8c:	4413      	add	r3, r2
 801ab8e:	00db      	lsls	r3, r3, #3
 801ab90:	440b      	add	r3, r1
 801ab92:	3314      	adds	r3, #20
 801ab94:	2204      	movs	r2, #4
 801ab96:	701a      	strb	r2, [r3, #0]
 801ab98:	e034      	b.n	801ac04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ab9a:	4920      	ldr	r1, [pc, #128]	@ (801ac1c <etharp_tmr+0x14c>)
 801ab9c:	687a      	ldr	r2, [r7, #4]
 801ab9e:	4613      	mov	r3, r2
 801aba0:	005b      	lsls	r3, r3, #1
 801aba2:	4413      	add	r3, r2
 801aba4:	00db      	lsls	r3, r3, #3
 801aba6:	440b      	add	r3, r1
 801aba8:	3314      	adds	r3, #20
 801abaa:	781b      	ldrb	r3, [r3, #0]
 801abac:	2b04      	cmp	r3, #4
 801abae:	d10a      	bne.n	801abc6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801abb0:	491a      	ldr	r1, [pc, #104]	@ (801ac1c <etharp_tmr+0x14c>)
 801abb2:	687a      	ldr	r2, [r7, #4]
 801abb4:	4613      	mov	r3, r2
 801abb6:	005b      	lsls	r3, r3, #1
 801abb8:	4413      	add	r3, r2
 801abba:	00db      	lsls	r3, r3, #3
 801abbc:	440b      	add	r3, r1
 801abbe:	3314      	adds	r3, #20
 801abc0:	2202      	movs	r2, #2
 801abc2:	701a      	strb	r2, [r3, #0]
 801abc4:	e01e      	b.n	801ac04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801abc6:	4915      	ldr	r1, [pc, #84]	@ (801ac1c <etharp_tmr+0x14c>)
 801abc8:	687a      	ldr	r2, [r7, #4]
 801abca:	4613      	mov	r3, r2
 801abcc:	005b      	lsls	r3, r3, #1
 801abce:	4413      	add	r3, r2
 801abd0:	00db      	lsls	r3, r3, #3
 801abd2:	440b      	add	r3, r1
 801abd4:	3314      	adds	r3, #20
 801abd6:	781b      	ldrb	r3, [r3, #0]
 801abd8:	2b01      	cmp	r3, #1
 801abda:	d113      	bne.n	801ac04 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801abdc:	490f      	ldr	r1, [pc, #60]	@ (801ac1c <etharp_tmr+0x14c>)
 801abde:	687a      	ldr	r2, [r7, #4]
 801abe0:	4613      	mov	r3, r2
 801abe2:	005b      	lsls	r3, r3, #1
 801abe4:	4413      	add	r3, r2
 801abe6:	00db      	lsls	r3, r3, #3
 801abe8:	440b      	add	r3, r1
 801abea:	3308      	adds	r3, #8
 801abec:	6818      	ldr	r0, [r3, #0]
 801abee:	687a      	ldr	r2, [r7, #4]
 801abf0:	4613      	mov	r3, r2
 801abf2:	005b      	lsls	r3, r3, #1
 801abf4:	4413      	add	r3, r2
 801abf6:	00db      	lsls	r3, r3, #3
 801abf8:	4a08      	ldr	r2, [pc, #32]	@ (801ac1c <etharp_tmr+0x14c>)
 801abfa:	4413      	add	r3, r2
 801abfc:	3304      	adds	r3, #4
 801abfe:	4619      	mov	r1, r3
 801ac00:	f000 fe72 	bl	801b8e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	3301      	adds	r3, #1
 801ac08:	607b      	str	r3, [r7, #4]
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2b09      	cmp	r3, #9
 801ac0e:	f77f af65 	ble.w	801aadc <etharp_tmr+0xc>
      }
    }
  }
}
 801ac12:	bf00      	nop
 801ac14:	bf00      	nop
 801ac16:	3708      	adds	r7, #8
 801ac18:	46bd      	mov	sp, r7
 801ac1a:	bd80      	pop	{r7, pc}
 801ac1c:	2000f524 	.word	0x2000f524

0801ac20 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b08a      	sub	sp, #40	@ 0x28
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	60f8      	str	r0, [r7, #12]
 801ac28:	460b      	mov	r3, r1
 801ac2a:	607a      	str	r2, [r7, #4]
 801ac2c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ac2e:	230a      	movs	r3, #10
 801ac30:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801ac32:	230a      	movs	r3, #10
 801ac34:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ac36:	230a      	movs	r3, #10
 801ac38:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ac3e:	230a      	movs	r3, #10
 801ac40:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ac42:	2300      	movs	r3, #0
 801ac44:	83bb      	strh	r3, [r7, #28]
 801ac46:	2300      	movs	r3, #0
 801ac48:	837b      	strh	r3, [r7, #26]
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac4e:	2300      	movs	r3, #0
 801ac50:	843b      	strh	r3, [r7, #32]
 801ac52:	e0ae      	b.n	801adb2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ac54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac58:	49a6      	ldr	r1, [pc, #664]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801ac5a:	4613      	mov	r3, r2
 801ac5c:	005b      	lsls	r3, r3, #1
 801ac5e:	4413      	add	r3, r2
 801ac60:	00db      	lsls	r3, r3, #3
 801ac62:	440b      	add	r3, r1
 801ac64:	3314      	adds	r3, #20
 801ac66:	781b      	ldrb	r3, [r3, #0]
 801ac68:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ac6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ac6e:	2b0a      	cmp	r3, #10
 801ac70:	d105      	bne.n	801ac7e <etharp_find_entry+0x5e>
 801ac72:	7dfb      	ldrb	r3, [r7, #23]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d102      	bne.n	801ac7e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ac78:	8c3b      	ldrh	r3, [r7, #32]
 801ac7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801ac7c:	e095      	b.n	801adaa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ac7e:	7dfb      	ldrb	r3, [r7, #23]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	f000 8092 	beq.w	801adaa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ac86:	7dfb      	ldrb	r3, [r7, #23]
 801ac88:	2b01      	cmp	r3, #1
 801ac8a:	d009      	beq.n	801aca0 <etharp_find_entry+0x80>
 801ac8c:	7dfb      	ldrb	r3, [r7, #23]
 801ac8e:	2b01      	cmp	r3, #1
 801ac90:	d806      	bhi.n	801aca0 <etharp_find_entry+0x80>
 801ac92:	4b99      	ldr	r3, [pc, #612]	@ (801aef8 <etharp_find_entry+0x2d8>)
 801ac94:	f240 1223 	movw	r2, #291	@ 0x123
 801ac98:	4998      	ldr	r1, [pc, #608]	@ (801aefc <etharp_find_entry+0x2dc>)
 801ac9a:	4899      	ldr	r0, [pc, #612]	@ (801af00 <etharp_find_entry+0x2e0>)
 801ac9c:	f003 fdbc 	bl	801e818 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d020      	beq.n	801ace8 <etharp_find_entry+0xc8>
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	6819      	ldr	r1, [r3, #0]
 801acaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acae:	4891      	ldr	r0, [pc, #580]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801acb0:	4613      	mov	r3, r2
 801acb2:	005b      	lsls	r3, r3, #1
 801acb4:	4413      	add	r3, r2
 801acb6:	00db      	lsls	r3, r3, #3
 801acb8:	4403      	add	r3, r0
 801acba:	3304      	adds	r3, #4
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	4299      	cmp	r1, r3
 801acc0:	d112      	bne.n	801ace8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d00c      	beq.n	801ace2 <etharp_find_entry+0xc2>
 801acc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801accc:	4989      	ldr	r1, [pc, #548]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801acce:	4613      	mov	r3, r2
 801acd0:	005b      	lsls	r3, r3, #1
 801acd2:	4413      	add	r3, r2
 801acd4:	00db      	lsls	r3, r3, #3
 801acd6:	440b      	add	r3, r1
 801acd8:	3308      	adds	r3, #8
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	687a      	ldr	r2, [r7, #4]
 801acde:	429a      	cmp	r2, r3
 801ace0:	d102      	bne.n	801ace8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ace2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ace6:	e100      	b.n	801aeea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ace8:	7dfb      	ldrb	r3, [r7, #23]
 801acea:	2b01      	cmp	r3, #1
 801acec:	d140      	bne.n	801ad70 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801acee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acf2:	4980      	ldr	r1, [pc, #512]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801acf4:	4613      	mov	r3, r2
 801acf6:	005b      	lsls	r3, r3, #1
 801acf8:	4413      	add	r3, r2
 801acfa:	00db      	lsls	r3, r3, #3
 801acfc:	440b      	add	r3, r1
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d01a      	beq.n	801ad3a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ad04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad08:	497a      	ldr	r1, [pc, #488]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801ad0a:	4613      	mov	r3, r2
 801ad0c:	005b      	lsls	r3, r3, #1
 801ad0e:	4413      	add	r3, r2
 801ad10:	00db      	lsls	r3, r3, #3
 801ad12:	440b      	add	r3, r1
 801ad14:	3312      	adds	r3, #18
 801ad16:	881b      	ldrh	r3, [r3, #0]
 801ad18:	8bba      	ldrh	r2, [r7, #28]
 801ad1a:	429a      	cmp	r2, r3
 801ad1c:	d845      	bhi.n	801adaa <etharp_find_entry+0x18a>
            old_queue = i;
 801ad1e:	8c3b      	ldrh	r3, [r7, #32]
 801ad20:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ad22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad26:	4973      	ldr	r1, [pc, #460]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801ad28:	4613      	mov	r3, r2
 801ad2a:	005b      	lsls	r3, r3, #1
 801ad2c:	4413      	add	r3, r2
 801ad2e:	00db      	lsls	r3, r3, #3
 801ad30:	440b      	add	r3, r1
 801ad32:	3312      	adds	r3, #18
 801ad34:	881b      	ldrh	r3, [r3, #0]
 801ad36:	83bb      	strh	r3, [r7, #28]
 801ad38:	e037      	b.n	801adaa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ad3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad3e:	496d      	ldr	r1, [pc, #436]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801ad40:	4613      	mov	r3, r2
 801ad42:	005b      	lsls	r3, r3, #1
 801ad44:	4413      	add	r3, r2
 801ad46:	00db      	lsls	r3, r3, #3
 801ad48:	440b      	add	r3, r1
 801ad4a:	3312      	adds	r3, #18
 801ad4c:	881b      	ldrh	r3, [r3, #0]
 801ad4e:	8b7a      	ldrh	r2, [r7, #26]
 801ad50:	429a      	cmp	r2, r3
 801ad52:	d82a      	bhi.n	801adaa <etharp_find_entry+0x18a>
            old_pending = i;
 801ad54:	8c3b      	ldrh	r3, [r7, #32]
 801ad56:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801ad58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad5c:	4965      	ldr	r1, [pc, #404]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801ad5e:	4613      	mov	r3, r2
 801ad60:	005b      	lsls	r3, r3, #1
 801ad62:	4413      	add	r3, r2
 801ad64:	00db      	lsls	r3, r3, #3
 801ad66:	440b      	add	r3, r1
 801ad68:	3312      	adds	r3, #18
 801ad6a:	881b      	ldrh	r3, [r3, #0]
 801ad6c:	837b      	strh	r3, [r7, #26]
 801ad6e:	e01c      	b.n	801adaa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ad70:	7dfb      	ldrb	r3, [r7, #23]
 801ad72:	2b01      	cmp	r3, #1
 801ad74:	d919      	bls.n	801adaa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ad76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad7a:	495e      	ldr	r1, [pc, #376]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801ad7c:	4613      	mov	r3, r2
 801ad7e:	005b      	lsls	r3, r3, #1
 801ad80:	4413      	add	r3, r2
 801ad82:	00db      	lsls	r3, r3, #3
 801ad84:	440b      	add	r3, r1
 801ad86:	3312      	adds	r3, #18
 801ad88:	881b      	ldrh	r3, [r3, #0]
 801ad8a:	8b3a      	ldrh	r2, [r7, #24]
 801ad8c:	429a      	cmp	r2, r3
 801ad8e:	d80c      	bhi.n	801adaa <etharp_find_entry+0x18a>
            old_stable = i;
 801ad90:	8c3b      	ldrh	r3, [r7, #32]
 801ad92:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801ad94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad98:	4956      	ldr	r1, [pc, #344]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801ad9a:	4613      	mov	r3, r2
 801ad9c:	005b      	lsls	r3, r3, #1
 801ad9e:	4413      	add	r3, r2
 801ada0:	00db      	lsls	r3, r3, #3
 801ada2:	440b      	add	r3, r1
 801ada4:	3312      	adds	r3, #18
 801ada6:	881b      	ldrh	r3, [r3, #0]
 801ada8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801adaa:	8c3b      	ldrh	r3, [r7, #32]
 801adac:	3301      	adds	r3, #1
 801adae:	b29b      	uxth	r3, r3
 801adb0:	843b      	strh	r3, [r7, #32]
 801adb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801adb6:	2b09      	cmp	r3, #9
 801adb8:	f77f af4c 	ble.w	801ac54 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801adbc:	7afb      	ldrb	r3, [r7, #11]
 801adbe:	f003 0302 	and.w	r3, r3, #2
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d108      	bne.n	801add8 <etharp_find_entry+0x1b8>
 801adc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801adca:	2b0a      	cmp	r3, #10
 801adcc:	d107      	bne.n	801adde <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801adce:	7afb      	ldrb	r3, [r7, #11]
 801add0:	f003 0301 	and.w	r3, r3, #1
 801add4:	2b00      	cmp	r3, #0
 801add6:	d102      	bne.n	801adde <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801add8:	f04f 33ff 	mov.w	r3, #4294967295
 801addc:	e085      	b.n	801aeea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801adde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ade2:	2b09      	cmp	r3, #9
 801ade4:	dc02      	bgt.n	801adec <etharp_find_entry+0x1cc>
    i = empty;
 801ade6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ade8:	843b      	strh	r3, [r7, #32]
 801adea:	e039      	b.n	801ae60 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801adec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801adf0:	2b09      	cmp	r3, #9
 801adf2:	dc14      	bgt.n	801ae1e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801adf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801adf6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801adf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801adfc:	493d      	ldr	r1, [pc, #244]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801adfe:	4613      	mov	r3, r2
 801ae00:	005b      	lsls	r3, r3, #1
 801ae02:	4413      	add	r3, r2
 801ae04:	00db      	lsls	r3, r3, #3
 801ae06:	440b      	add	r3, r1
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d018      	beq.n	801ae40 <etharp_find_entry+0x220>
 801ae0e:	4b3a      	ldr	r3, [pc, #232]	@ (801aef8 <etharp_find_entry+0x2d8>)
 801ae10:	f240 126d 	movw	r2, #365	@ 0x16d
 801ae14:	493b      	ldr	r1, [pc, #236]	@ (801af04 <etharp_find_entry+0x2e4>)
 801ae16:	483a      	ldr	r0, [pc, #232]	@ (801af00 <etharp_find_entry+0x2e0>)
 801ae18:	f003 fcfe 	bl	801e818 <iprintf>
 801ae1c:	e010      	b.n	801ae40 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ae1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801ae22:	2b09      	cmp	r3, #9
 801ae24:	dc02      	bgt.n	801ae2c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ae26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ae28:	843b      	strh	r3, [r7, #32]
 801ae2a:	e009      	b.n	801ae40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ae2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ae30:	2b09      	cmp	r3, #9
 801ae32:	dc02      	bgt.n	801ae3a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ae34:	8bfb      	ldrh	r3, [r7, #30]
 801ae36:	843b      	strh	r3, [r7, #32]
 801ae38:	e002      	b.n	801ae40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ae3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ae3e:	e054      	b.n	801aeea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ae40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae44:	2b09      	cmp	r3, #9
 801ae46:	dd06      	ble.n	801ae56 <etharp_find_entry+0x236>
 801ae48:	4b2b      	ldr	r3, [pc, #172]	@ (801aef8 <etharp_find_entry+0x2d8>)
 801ae4a:	f240 127f 	movw	r2, #383	@ 0x17f
 801ae4e:	492e      	ldr	r1, [pc, #184]	@ (801af08 <etharp_find_entry+0x2e8>)
 801ae50:	482b      	ldr	r0, [pc, #172]	@ (801af00 <etharp_find_entry+0x2e0>)
 801ae52:	f003 fce1 	bl	801e818 <iprintf>
    etharp_free_entry(i);
 801ae56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f7ff fe06 	bl	801aa6c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ae60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae64:	2b09      	cmp	r3, #9
 801ae66:	dd06      	ble.n	801ae76 <etharp_find_entry+0x256>
 801ae68:	4b23      	ldr	r3, [pc, #140]	@ (801aef8 <etharp_find_entry+0x2d8>)
 801ae6a:	f240 1283 	movw	r2, #387	@ 0x183
 801ae6e:	4926      	ldr	r1, [pc, #152]	@ (801af08 <etharp_find_entry+0x2e8>)
 801ae70:	4823      	ldr	r0, [pc, #140]	@ (801af00 <etharp_find_entry+0x2e0>)
 801ae72:	f003 fcd1 	bl	801e818 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ae76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae7a:	491e      	ldr	r1, [pc, #120]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801ae7c:	4613      	mov	r3, r2
 801ae7e:	005b      	lsls	r3, r3, #1
 801ae80:	4413      	add	r3, r2
 801ae82:	00db      	lsls	r3, r3, #3
 801ae84:	440b      	add	r3, r1
 801ae86:	3314      	adds	r3, #20
 801ae88:	781b      	ldrb	r3, [r3, #0]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d006      	beq.n	801ae9c <etharp_find_entry+0x27c>
 801ae8e:	4b1a      	ldr	r3, [pc, #104]	@ (801aef8 <etharp_find_entry+0x2d8>)
 801ae90:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801ae94:	491d      	ldr	r1, [pc, #116]	@ (801af0c <etharp_find_entry+0x2ec>)
 801ae96:	481a      	ldr	r0, [pc, #104]	@ (801af00 <etharp_find_entry+0x2e0>)
 801ae98:	f003 fcbe 	bl	801e818 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d00b      	beq.n	801aeba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801aea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	6819      	ldr	r1, [r3, #0]
 801aeaa:	4812      	ldr	r0, [pc, #72]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801aeac:	4613      	mov	r3, r2
 801aeae:	005b      	lsls	r3, r3, #1
 801aeb0:	4413      	add	r3, r2
 801aeb2:	00db      	lsls	r3, r3, #3
 801aeb4:	4403      	add	r3, r0
 801aeb6:	3304      	adds	r3, #4
 801aeb8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801aeba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aebe:	490d      	ldr	r1, [pc, #52]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801aec0:	4613      	mov	r3, r2
 801aec2:	005b      	lsls	r3, r3, #1
 801aec4:	4413      	add	r3, r2
 801aec6:	00db      	lsls	r3, r3, #3
 801aec8:	440b      	add	r3, r1
 801aeca:	3312      	adds	r3, #18
 801aecc:	2200      	movs	r2, #0
 801aece:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801aed0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aed4:	4907      	ldr	r1, [pc, #28]	@ (801aef4 <etharp_find_entry+0x2d4>)
 801aed6:	4613      	mov	r3, r2
 801aed8:	005b      	lsls	r3, r3, #1
 801aeda:	4413      	add	r3, r2
 801aedc:	00db      	lsls	r3, r3, #3
 801aede:	440b      	add	r3, r1
 801aee0:	3308      	adds	r3, #8
 801aee2:	687a      	ldr	r2, [r7, #4]
 801aee4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801aee6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801aeea:	4618      	mov	r0, r3
 801aeec:	3728      	adds	r7, #40	@ 0x28
 801aeee:	46bd      	mov	sp, r7
 801aef0:	bd80      	pop	{r7, pc}
 801aef2:	bf00      	nop
 801aef4:	2000f524 	.word	0x2000f524
 801aef8:	080258a8 	.word	0x080258a8
 801aefc:	080258e0 	.word	0x080258e0
 801af00:	08025920 	.word	0x08025920
 801af04:	08025948 	.word	0x08025948
 801af08:	08025960 	.word	0x08025960
 801af0c:	08025974 	.word	0x08025974

0801af10 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801af10:	b580      	push	{r7, lr}
 801af12:	b088      	sub	sp, #32
 801af14:	af02      	add	r7, sp, #8
 801af16:	60f8      	str	r0, [r7, #12]
 801af18:	60b9      	str	r1, [r7, #8]
 801af1a:	607a      	str	r2, [r7, #4]
 801af1c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801af24:	2b06      	cmp	r3, #6
 801af26:	d006      	beq.n	801af36 <etharp_update_arp_entry+0x26>
 801af28:	4b48      	ldr	r3, [pc, #288]	@ (801b04c <etharp_update_arp_entry+0x13c>)
 801af2a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801af2e:	4948      	ldr	r1, [pc, #288]	@ (801b050 <etharp_update_arp_entry+0x140>)
 801af30:	4848      	ldr	r0, [pc, #288]	@ (801b054 <etharp_update_arp_entry+0x144>)
 801af32:	f003 fc71 	bl	801e818 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d012      	beq.n	801af62 <etharp_update_arp_entry+0x52>
 801af3c:	68bb      	ldr	r3, [r7, #8]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d00e      	beq.n	801af62 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801af44:	68bb      	ldr	r3, [r7, #8]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	68f9      	ldr	r1, [r7, #12]
 801af4a:	4618      	mov	r0, r3
 801af4c:	f001 f920 	bl	801c190 <ip4_addr_isbroadcast_u32>
 801af50:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801af52:	2b00      	cmp	r3, #0
 801af54:	d105      	bne.n	801af62 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801af56:	68bb      	ldr	r3, [r7, #8]
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801af5e:	2be0      	cmp	r3, #224	@ 0xe0
 801af60:	d102      	bne.n	801af68 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801af62:	f06f 030f 	mvn.w	r3, #15
 801af66:	e06c      	b.n	801b042 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801af68:	78fb      	ldrb	r3, [r7, #3]
 801af6a:	68fa      	ldr	r2, [r7, #12]
 801af6c:	4619      	mov	r1, r3
 801af6e:	68b8      	ldr	r0, [r7, #8]
 801af70:	f7ff fe56 	bl	801ac20 <etharp_find_entry>
 801af74:	4603      	mov	r3, r0
 801af76:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801af78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	da02      	bge.n	801af86 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801af80:	8afb      	ldrh	r3, [r7, #22]
 801af82:	b25b      	sxtb	r3, r3
 801af84:	e05d      	b.n	801b042 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801af86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801af8a:	4933      	ldr	r1, [pc, #204]	@ (801b058 <etharp_update_arp_entry+0x148>)
 801af8c:	4613      	mov	r3, r2
 801af8e:	005b      	lsls	r3, r3, #1
 801af90:	4413      	add	r3, r2
 801af92:	00db      	lsls	r3, r3, #3
 801af94:	440b      	add	r3, r1
 801af96:	3314      	adds	r3, #20
 801af98:	2202      	movs	r2, #2
 801af9a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801af9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afa0:	492d      	ldr	r1, [pc, #180]	@ (801b058 <etharp_update_arp_entry+0x148>)
 801afa2:	4613      	mov	r3, r2
 801afa4:	005b      	lsls	r3, r3, #1
 801afa6:	4413      	add	r3, r2
 801afa8:	00db      	lsls	r3, r3, #3
 801afaa:	440b      	add	r3, r1
 801afac:	3308      	adds	r3, #8
 801afae:	68fa      	ldr	r2, [r7, #12]
 801afb0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801afb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afb6:	4613      	mov	r3, r2
 801afb8:	005b      	lsls	r3, r3, #1
 801afba:	4413      	add	r3, r2
 801afbc:	00db      	lsls	r3, r3, #3
 801afbe:	3308      	adds	r3, #8
 801afc0:	4a25      	ldr	r2, [pc, #148]	@ (801b058 <etharp_update_arp_entry+0x148>)
 801afc2:	4413      	add	r3, r2
 801afc4:	3304      	adds	r3, #4
 801afc6:	2206      	movs	r2, #6
 801afc8:	6879      	ldr	r1, [r7, #4]
 801afca:	4618      	mov	r0, r3
 801afcc:	f003 fdc5 	bl	801eb5a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801afd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afd4:	4920      	ldr	r1, [pc, #128]	@ (801b058 <etharp_update_arp_entry+0x148>)
 801afd6:	4613      	mov	r3, r2
 801afd8:	005b      	lsls	r3, r3, #1
 801afda:	4413      	add	r3, r2
 801afdc:	00db      	lsls	r3, r3, #3
 801afde:	440b      	add	r3, r1
 801afe0:	3312      	adds	r3, #18
 801afe2:	2200      	movs	r2, #0
 801afe4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801afe6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afea:	491b      	ldr	r1, [pc, #108]	@ (801b058 <etharp_update_arp_entry+0x148>)
 801afec:	4613      	mov	r3, r2
 801afee:	005b      	lsls	r3, r3, #1
 801aff0:	4413      	add	r3, r2
 801aff2:	00db      	lsls	r3, r3, #3
 801aff4:	440b      	add	r3, r1
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d021      	beq.n	801b040 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801affc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b000:	4915      	ldr	r1, [pc, #84]	@ (801b058 <etharp_update_arp_entry+0x148>)
 801b002:	4613      	mov	r3, r2
 801b004:	005b      	lsls	r3, r3, #1
 801b006:	4413      	add	r3, r2
 801b008:	00db      	lsls	r3, r3, #3
 801b00a:	440b      	add	r3, r1
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b014:	4910      	ldr	r1, [pc, #64]	@ (801b058 <etharp_update_arp_entry+0x148>)
 801b016:	4613      	mov	r3, r2
 801b018:	005b      	lsls	r3, r3, #1
 801b01a:	4413      	add	r3, r2
 801b01c:	00db      	lsls	r3, r3, #3
 801b01e:	440b      	add	r3, r1
 801b020:	2200      	movs	r2, #0
 801b022:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b02a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b02e:	9300      	str	r3, [sp, #0]
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	6939      	ldr	r1, [r7, #16]
 801b034:	68f8      	ldr	r0, [r7, #12]
 801b036:	f002 f8e3 	bl	801d200 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b03a:	6938      	ldr	r0, [r7, #16]
 801b03c:	f7f6 fb04 	bl	8011648 <pbuf_free>
  }
  return ERR_OK;
 801b040:	2300      	movs	r3, #0
}
 801b042:	4618      	mov	r0, r3
 801b044:	3718      	adds	r7, #24
 801b046:	46bd      	mov	sp, r7
 801b048:	bd80      	pop	{r7, pc}
 801b04a:	bf00      	nop
 801b04c:	080258a8 	.word	0x080258a8
 801b050:	080259a0 	.word	0x080259a0
 801b054:	08025920 	.word	0x08025920
 801b058:	2000f524 	.word	0x2000f524

0801b05c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b084      	sub	sp, #16
 801b060:	af00      	add	r7, sp, #0
 801b062:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b064:	2300      	movs	r3, #0
 801b066:	60fb      	str	r3, [r7, #12]
 801b068:	e01e      	b.n	801b0a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b06a:	4913      	ldr	r1, [pc, #76]	@ (801b0b8 <etharp_cleanup_netif+0x5c>)
 801b06c:	68fa      	ldr	r2, [r7, #12]
 801b06e:	4613      	mov	r3, r2
 801b070:	005b      	lsls	r3, r3, #1
 801b072:	4413      	add	r3, r2
 801b074:	00db      	lsls	r3, r3, #3
 801b076:	440b      	add	r3, r1
 801b078:	3314      	adds	r3, #20
 801b07a:	781b      	ldrb	r3, [r3, #0]
 801b07c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b07e:	7afb      	ldrb	r3, [r7, #11]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d00e      	beq.n	801b0a2 <etharp_cleanup_netif+0x46>
 801b084:	490c      	ldr	r1, [pc, #48]	@ (801b0b8 <etharp_cleanup_netif+0x5c>)
 801b086:	68fa      	ldr	r2, [r7, #12]
 801b088:	4613      	mov	r3, r2
 801b08a:	005b      	lsls	r3, r3, #1
 801b08c:	4413      	add	r3, r2
 801b08e:	00db      	lsls	r3, r3, #3
 801b090:	440b      	add	r3, r1
 801b092:	3308      	adds	r3, #8
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	687a      	ldr	r2, [r7, #4]
 801b098:	429a      	cmp	r2, r3
 801b09a:	d102      	bne.n	801b0a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b09c:	68f8      	ldr	r0, [r7, #12]
 801b09e:	f7ff fce5 	bl	801aa6c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	3301      	adds	r3, #1
 801b0a6:	60fb      	str	r3, [r7, #12]
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	2b09      	cmp	r3, #9
 801b0ac:	dddd      	ble.n	801b06a <etharp_cleanup_netif+0xe>
    }
  }
}
 801b0ae:	bf00      	nop
 801b0b0:	bf00      	nop
 801b0b2:	3710      	adds	r7, #16
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd80      	pop	{r7, pc}
 801b0b8:	2000f524 	.word	0x2000f524

0801b0bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b0bc:	b5b0      	push	{r4, r5, r7, lr}
 801b0be:	b08a      	sub	sp, #40	@ 0x28
 801b0c0:	af04      	add	r7, sp, #16
 801b0c2:	6078      	str	r0, [r7, #4]
 801b0c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b0c6:	683b      	ldr	r3, [r7, #0]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d107      	bne.n	801b0dc <etharp_input+0x20>
 801b0cc:	4b3f      	ldr	r3, [pc, #252]	@ (801b1cc <etharp_input+0x110>)
 801b0ce:	f240 228a 	movw	r2, #650	@ 0x28a
 801b0d2:	493f      	ldr	r1, [pc, #252]	@ (801b1d0 <etharp_input+0x114>)
 801b0d4:	483f      	ldr	r0, [pc, #252]	@ (801b1d4 <etharp_input+0x118>)
 801b0d6:	f003 fb9f 	bl	801e818 <iprintf>
 801b0da:	e074      	b.n	801b1c6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	685b      	ldr	r3, [r3, #4]
 801b0e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b0e2:	693b      	ldr	r3, [r7, #16]
 801b0e4:	881b      	ldrh	r3, [r3, #0]
 801b0e6:	b29b      	uxth	r3, r3
 801b0e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b0ec:	d10c      	bne.n	801b108 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b0ee:	693b      	ldr	r3, [r7, #16]
 801b0f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b0f2:	2b06      	cmp	r3, #6
 801b0f4:	d108      	bne.n	801b108 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b0f6:	693b      	ldr	r3, [r7, #16]
 801b0f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b0fa:	2b04      	cmp	r3, #4
 801b0fc:	d104      	bne.n	801b108 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b0fe:	693b      	ldr	r3, [r7, #16]
 801b100:	885b      	ldrh	r3, [r3, #2]
 801b102:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b104:	2b08      	cmp	r3, #8
 801b106:	d003      	beq.n	801b110 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b108:	6878      	ldr	r0, [r7, #4]
 801b10a:	f7f6 fa9d 	bl	8011648 <pbuf_free>
    return;
 801b10e:	e05a      	b.n	801b1c6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b110:	693b      	ldr	r3, [r7, #16]
 801b112:	330e      	adds	r3, #14
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b118:	693b      	ldr	r3, [r7, #16]
 801b11a:	3318      	adds	r3, #24
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	3304      	adds	r3, #4
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	2b00      	cmp	r3, #0
 801b128:	d102      	bne.n	801b130 <etharp_input+0x74>
    for_us = 0;
 801b12a:	2300      	movs	r3, #0
 801b12c:	75fb      	strb	r3, [r7, #23]
 801b12e:	e009      	b.n	801b144 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b130:	68ba      	ldr	r2, [r7, #8]
 801b132:	683b      	ldr	r3, [r7, #0]
 801b134:	3304      	adds	r3, #4
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	429a      	cmp	r2, r3
 801b13a:	bf0c      	ite	eq
 801b13c:	2301      	moveq	r3, #1
 801b13e:	2300      	movne	r3, #0
 801b140:	b2db      	uxtb	r3, r3
 801b142:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b144:	693b      	ldr	r3, [r7, #16]
 801b146:	f103 0208 	add.w	r2, r3, #8
 801b14a:	7dfb      	ldrb	r3, [r7, #23]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d001      	beq.n	801b154 <etharp_input+0x98>
 801b150:	2301      	movs	r3, #1
 801b152:	e000      	b.n	801b156 <etharp_input+0x9a>
 801b154:	2302      	movs	r3, #2
 801b156:	f107 010c 	add.w	r1, r7, #12
 801b15a:	6838      	ldr	r0, [r7, #0]
 801b15c:	f7ff fed8 	bl	801af10 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b160:	693b      	ldr	r3, [r7, #16]
 801b162:	88db      	ldrh	r3, [r3, #6]
 801b164:	b29b      	uxth	r3, r3
 801b166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b16a:	d003      	beq.n	801b174 <etharp_input+0xb8>
 801b16c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b170:	d01e      	beq.n	801b1b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b172:	e025      	b.n	801b1c0 <etharp_input+0x104>
      if (for_us) {
 801b174:	7dfb      	ldrb	r3, [r7, #23]
 801b176:	2b00      	cmp	r3, #0
 801b178:	d021      	beq.n	801b1be <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b17a:	683b      	ldr	r3, [r7, #0]
 801b17c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b180:	693b      	ldr	r3, [r7, #16]
 801b182:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b186:	683b      	ldr	r3, [r7, #0]
 801b188:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801b18c:	683b      	ldr	r3, [r7, #0]
 801b18e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b190:	693a      	ldr	r2, [r7, #16]
 801b192:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b194:	2102      	movs	r1, #2
 801b196:	9103      	str	r1, [sp, #12]
 801b198:	f107 010c 	add.w	r1, r7, #12
 801b19c:	9102      	str	r1, [sp, #8]
 801b19e:	9201      	str	r2, [sp, #4]
 801b1a0:	9300      	str	r3, [sp, #0]
 801b1a2:	462b      	mov	r3, r5
 801b1a4:	4622      	mov	r2, r4
 801b1a6:	4601      	mov	r1, r0
 801b1a8:	6838      	ldr	r0, [r7, #0]
 801b1aa:	f000 faef 	bl	801b78c <etharp_raw>
      break;
 801b1ae:	e006      	b.n	801b1be <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801b1b0:	f107 030c 	add.w	r3, r7, #12
 801b1b4:	4619      	mov	r1, r3
 801b1b6:	6838      	ldr	r0, [r7, #0]
 801b1b8:	f7fe f9d2 	bl	8019560 <dhcp_arp_reply>
      break;
 801b1bc:	e000      	b.n	801b1c0 <etharp_input+0x104>
      break;
 801b1be:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b1c0:	6878      	ldr	r0, [r7, #4]
 801b1c2:	f7f6 fa41 	bl	8011648 <pbuf_free>
}
 801b1c6:	3718      	adds	r7, #24
 801b1c8:	46bd      	mov	sp, r7
 801b1ca:	bdb0      	pop	{r4, r5, r7, pc}
 801b1cc:	080258a8 	.word	0x080258a8
 801b1d0:	080259f8 	.word	0x080259f8
 801b1d4:	08025920 	.word	0x08025920

0801b1d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b086      	sub	sp, #24
 801b1dc:	af02      	add	r7, sp, #8
 801b1de:	60f8      	str	r0, [r7, #12]
 801b1e0:	60b9      	str	r1, [r7, #8]
 801b1e2:	4613      	mov	r3, r2
 801b1e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b1e6:	79fa      	ldrb	r2, [r7, #7]
 801b1e8:	4944      	ldr	r1, [pc, #272]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b1ea:	4613      	mov	r3, r2
 801b1ec:	005b      	lsls	r3, r3, #1
 801b1ee:	4413      	add	r3, r2
 801b1f0:	00db      	lsls	r3, r3, #3
 801b1f2:	440b      	add	r3, r1
 801b1f4:	3314      	adds	r3, #20
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	2b01      	cmp	r3, #1
 801b1fa:	d806      	bhi.n	801b20a <etharp_output_to_arp_index+0x32>
 801b1fc:	4b40      	ldr	r3, [pc, #256]	@ (801b300 <etharp_output_to_arp_index+0x128>)
 801b1fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b202:	4940      	ldr	r1, [pc, #256]	@ (801b304 <etharp_output_to_arp_index+0x12c>)
 801b204:	4840      	ldr	r0, [pc, #256]	@ (801b308 <etharp_output_to_arp_index+0x130>)
 801b206:	f003 fb07 	bl	801e818 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b20a:	79fa      	ldrb	r2, [r7, #7]
 801b20c:	493b      	ldr	r1, [pc, #236]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b20e:	4613      	mov	r3, r2
 801b210:	005b      	lsls	r3, r3, #1
 801b212:	4413      	add	r3, r2
 801b214:	00db      	lsls	r3, r3, #3
 801b216:	440b      	add	r3, r1
 801b218:	3314      	adds	r3, #20
 801b21a:	781b      	ldrb	r3, [r3, #0]
 801b21c:	2b02      	cmp	r3, #2
 801b21e:	d153      	bne.n	801b2c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b220:	79fa      	ldrb	r2, [r7, #7]
 801b222:	4936      	ldr	r1, [pc, #216]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b224:	4613      	mov	r3, r2
 801b226:	005b      	lsls	r3, r3, #1
 801b228:	4413      	add	r3, r2
 801b22a:	00db      	lsls	r3, r3, #3
 801b22c:	440b      	add	r3, r1
 801b22e:	3312      	adds	r3, #18
 801b230:	881b      	ldrh	r3, [r3, #0]
 801b232:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b236:	d919      	bls.n	801b26c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b238:	79fa      	ldrb	r2, [r7, #7]
 801b23a:	4613      	mov	r3, r2
 801b23c:	005b      	lsls	r3, r3, #1
 801b23e:	4413      	add	r3, r2
 801b240:	00db      	lsls	r3, r3, #3
 801b242:	4a2e      	ldr	r2, [pc, #184]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b244:	4413      	add	r3, r2
 801b246:	3304      	adds	r3, #4
 801b248:	4619      	mov	r1, r3
 801b24a:	68f8      	ldr	r0, [r7, #12]
 801b24c:	f000 fb4c 	bl	801b8e8 <etharp_request>
 801b250:	4603      	mov	r3, r0
 801b252:	2b00      	cmp	r3, #0
 801b254:	d138      	bne.n	801b2c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b256:	79fa      	ldrb	r2, [r7, #7]
 801b258:	4928      	ldr	r1, [pc, #160]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b25a:	4613      	mov	r3, r2
 801b25c:	005b      	lsls	r3, r3, #1
 801b25e:	4413      	add	r3, r2
 801b260:	00db      	lsls	r3, r3, #3
 801b262:	440b      	add	r3, r1
 801b264:	3314      	adds	r3, #20
 801b266:	2203      	movs	r2, #3
 801b268:	701a      	strb	r2, [r3, #0]
 801b26a:	e02d      	b.n	801b2c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b26c:	79fa      	ldrb	r2, [r7, #7]
 801b26e:	4923      	ldr	r1, [pc, #140]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b270:	4613      	mov	r3, r2
 801b272:	005b      	lsls	r3, r3, #1
 801b274:	4413      	add	r3, r2
 801b276:	00db      	lsls	r3, r3, #3
 801b278:	440b      	add	r3, r1
 801b27a:	3312      	adds	r3, #18
 801b27c:	881b      	ldrh	r3, [r3, #0]
 801b27e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b282:	d321      	bcc.n	801b2c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b284:	79fa      	ldrb	r2, [r7, #7]
 801b286:	4613      	mov	r3, r2
 801b288:	005b      	lsls	r3, r3, #1
 801b28a:	4413      	add	r3, r2
 801b28c:	00db      	lsls	r3, r3, #3
 801b28e:	4a1b      	ldr	r2, [pc, #108]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b290:	4413      	add	r3, r2
 801b292:	1d19      	adds	r1, r3, #4
 801b294:	79fa      	ldrb	r2, [r7, #7]
 801b296:	4613      	mov	r3, r2
 801b298:	005b      	lsls	r3, r3, #1
 801b29a:	4413      	add	r3, r2
 801b29c:	00db      	lsls	r3, r3, #3
 801b29e:	3308      	adds	r3, #8
 801b2a0:	4a16      	ldr	r2, [pc, #88]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b2a2:	4413      	add	r3, r2
 801b2a4:	3304      	adds	r3, #4
 801b2a6:	461a      	mov	r2, r3
 801b2a8:	68f8      	ldr	r0, [r7, #12]
 801b2aa:	f000 fafb 	bl	801b8a4 <etharp_request_dst>
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d109      	bne.n	801b2c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b2b4:	79fa      	ldrb	r2, [r7, #7]
 801b2b6:	4911      	ldr	r1, [pc, #68]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b2b8:	4613      	mov	r3, r2
 801b2ba:	005b      	lsls	r3, r3, #1
 801b2bc:	4413      	add	r3, r2
 801b2be:	00db      	lsls	r3, r3, #3
 801b2c0:	440b      	add	r3, r1
 801b2c2:	3314      	adds	r3, #20
 801b2c4:	2203      	movs	r2, #3
 801b2c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801b2ce:	79fa      	ldrb	r2, [r7, #7]
 801b2d0:	4613      	mov	r3, r2
 801b2d2:	005b      	lsls	r3, r3, #1
 801b2d4:	4413      	add	r3, r2
 801b2d6:	00db      	lsls	r3, r3, #3
 801b2d8:	3308      	adds	r3, #8
 801b2da:	4a08      	ldr	r2, [pc, #32]	@ (801b2fc <etharp_output_to_arp_index+0x124>)
 801b2dc:	4413      	add	r3, r2
 801b2de:	3304      	adds	r3, #4
 801b2e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b2e4:	9200      	str	r2, [sp, #0]
 801b2e6:	460a      	mov	r2, r1
 801b2e8:	68b9      	ldr	r1, [r7, #8]
 801b2ea:	68f8      	ldr	r0, [r7, #12]
 801b2ec:	f001 ff88 	bl	801d200 <ethernet_output>
 801b2f0:	4603      	mov	r3, r0
}
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	3710      	adds	r7, #16
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}
 801b2fa:	bf00      	nop
 801b2fc:	2000f524 	.word	0x2000f524
 801b300:	080258a8 	.word	0x080258a8
 801b304:	08025a18 	.word	0x08025a18
 801b308:	08025920 	.word	0x08025920

0801b30c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b08a      	sub	sp, #40	@ 0x28
 801b310:	af02      	add	r7, sp, #8
 801b312:	60f8      	str	r0, [r7, #12]
 801b314:	60b9      	str	r1, [r7, #8]
 801b316:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d106      	bne.n	801b330 <etharp_output+0x24>
 801b322:	4b73      	ldr	r3, [pc, #460]	@ (801b4f0 <etharp_output+0x1e4>)
 801b324:	f240 321e 	movw	r2, #798	@ 0x31e
 801b328:	4972      	ldr	r1, [pc, #456]	@ (801b4f4 <etharp_output+0x1e8>)
 801b32a:	4873      	ldr	r0, [pc, #460]	@ (801b4f8 <etharp_output+0x1ec>)
 801b32c:	f003 fa74 	bl	801e818 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b330:	68bb      	ldr	r3, [r7, #8]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d106      	bne.n	801b344 <etharp_output+0x38>
 801b336:	4b6e      	ldr	r3, [pc, #440]	@ (801b4f0 <etharp_output+0x1e4>)
 801b338:	f240 321f 	movw	r2, #799	@ 0x31f
 801b33c:	496f      	ldr	r1, [pc, #444]	@ (801b4fc <etharp_output+0x1f0>)
 801b33e:	486e      	ldr	r0, [pc, #440]	@ (801b4f8 <etharp_output+0x1ec>)
 801b340:	f003 fa6a 	bl	801e818 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d106      	bne.n	801b358 <etharp_output+0x4c>
 801b34a:	4b69      	ldr	r3, [pc, #420]	@ (801b4f0 <etharp_output+0x1e4>)
 801b34c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b350:	496b      	ldr	r1, [pc, #428]	@ (801b500 <etharp_output+0x1f4>)
 801b352:	4869      	ldr	r0, [pc, #420]	@ (801b4f8 <etharp_output+0x1ec>)
 801b354:	f003 fa60 	bl	801e818 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	68f9      	ldr	r1, [r7, #12]
 801b35e:	4618      	mov	r0, r3
 801b360:	f000 ff16 	bl	801c190 <ip4_addr_isbroadcast_u32>
 801b364:	4603      	mov	r3, r0
 801b366:	2b00      	cmp	r3, #0
 801b368:	d002      	beq.n	801b370 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b36a:	4b66      	ldr	r3, [pc, #408]	@ (801b504 <etharp_output+0x1f8>)
 801b36c:	61fb      	str	r3, [r7, #28]
 801b36e:	e0af      	b.n	801b4d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b378:	2be0      	cmp	r3, #224	@ 0xe0
 801b37a:	d118      	bne.n	801b3ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b37c:	2301      	movs	r3, #1
 801b37e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b380:	2300      	movs	r3, #0
 801b382:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b384:	235e      	movs	r3, #94	@ 0x5e
 801b386:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	3301      	adds	r3, #1
 801b38c:	781b      	ldrb	r3, [r3, #0]
 801b38e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b392:	b2db      	uxtb	r3, r3
 801b394:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	3302      	adds	r3, #2
 801b39a:	781b      	ldrb	r3, [r3, #0]
 801b39c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	3303      	adds	r3, #3
 801b3a2:	781b      	ldrb	r3, [r3, #0]
 801b3a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b3a6:	f107 0310 	add.w	r3, r7, #16
 801b3aa:	61fb      	str	r3, [r7, #28]
 801b3ac:	e090      	b.n	801b4d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681a      	ldr	r2, [r3, #0]
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	3304      	adds	r3, #4
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	405a      	eors	r2, r3
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	3308      	adds	r3, #8
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	4013      	ands	r3, r2
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d012      	beq.n	801b3ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b3cc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b3d0:	4293      	cmp	r3, r2
 801b3d2:	d00b      	beq.n	801b3ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	330c      	adds	r3, #12
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d003      	beq.n	801b3e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	330c      	adds	r3, #12
 801b3e2:	61bb      	str	r3, [r7, #24]
 801b3e4:	e002      	b.n	801b3ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b3e6:	f06f 0303 	mvn.w	r3, #3
 801b3ea:	e07d      	b.n	801b4e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b3ec:	4b46      	ldr	r3, [pc, #280]	@ (801b508 <etharp_output+0x1fc>)
 801b3ee:	781b      	ldrb	r3, [r3, #0]
 801b3f0:	4619      	mov	r1, r3
 801b3f2:	4a46      	ldr	r2, [pc, #280]	@ (801b50c <etharp_output+0x200>)
 801b3f4:	460b      	mov	r3, r1
 801b3f6:	005b      	lsls	r3, r3, #1
 801b3f8:	440b      	add	r3, r1
 801b3fa:	00db      	lsls	r3, r3, #3
 801b3fc:	4413      	add	r3, r2
 801b3fe:	3314      	adds	r3, #20
 801b400:	781b      	ldrb	r3, [r3, #0]
 801b402:	2b01      	cmp	r3, #1
 801b404:	d925      	bls.n	801b452 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b406:	4b40      	ldr	r3, [pc, #256]	@ (801b508 <etharp_output+0x1fc>)
 801b408:	781b      	ldrb	r3, [r3, #0]
 801b40a:	4619      	mov	r1, r3
 801b40c:	4a3f      	ldr	r2, [pc, #252]	@ (801b50c <etharp_output+0x200>)
 801b40e:	460b      	mov	r3, r1
 801b410:	005b      	lsls	r3, r3, #1
 801b412:	440b      	add	r3, r1
 801b414:	00db      	lsls	r3, r3, #3
 801b416:	4413      	add	r3, r2
 801b418:	3308      	adds	r3, #8
 801b41a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b41c:	68fa      	ldr	r2, [r7, #12]
 801b41e:	429a      	cmp	r2, r3
 801b420:	d117      	bne.n	801b452 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b422:	69bb      	ldr	r3, [r7, #24]
 801b424:	681a      	ldr	r2, [r3, #0]
 801b426:	4b38      	ldr	r3, [pc, #224]	@ (801b508 <etharp_output+0x1fc>)
 801b428:	781b      	ldrb	r3, [r3, #0]
 801b42a:	4618      	mov	r0, r3
 801b42c:	4937      	ldr	r1, [pc, #220]	@ (801b50c <etharp_output+0x200>)
 801b42e:	4603      	mov	r3, r0
 801b430:	005b      	lsls	r3, r3, #1
 801b432:	4403      	add	r3, r0
 801b434:	00db      	lsls	r3, r3, #3
 801b436:	440b      	add	r3, r1
 801b438:	3304      	adds	r3, #4
 801b43a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b43c:	429a      	cmp	r2, r3
 801b43e:	d108      	bne.n	801b452 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b440:	4b31      	ldr	r3, [pc, #196]	@ (801b508 <etharp_output+0x1fc>)
 801b442:	781b      	ldrb	r3, [r3, #0]
 801b444:	461a      	mov	r2, r3
 801b446:	68b9      	ldr	r1, [r7, #8]
 801b448:	68f8      	ldr	r0, [r7, #12]
 801b44a:	f7ff fec5 	bl	801b1d8 <etharp_output_to_arp_index>
 801b44e:	4603      	mov	r3, r0
 801b450:	e04a      	b.n	801b4e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b452:	2300      	movs	r3, #0
 801b454:	75fb      	strb	r3, [r7, #23]
 801b456:	e031      	b.n	801b4bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b458:	7dfa      	ldrb	r2, [r7, #23]
 801b45a:	492c      	ldr	r1, [pc, #176]	@ (801b50c <etharp_output+0x200>)
 801b45c:	4613      	mov	r3, r2
 801b45e:	005b      	lsls	r3, r3, #1
 801b460:	4413      	add	r3, r2
 801b462:	00db      	lsls	r3, r3, #3
 801b464:	440b      	add	r3, r1
 801b466:	3314      	adds	r3, #20
 801b468:	781b      	ldrb	r3, [r3, #0]
 801b46a:	2b01      	cmp	r3, #1
 801b46c:	d923      	bls.n	801b4b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b46e:	7dfa      	ldrb	r2, [r7, #23]
 801b470:	4926      	ldr	r1, [pc, #152]	@ (801b50c <etharp_output+0x200>)
 801b472:	4613      	mov	r3, r2
 801b474:	005b      	lsls	r3, r3, #1
 801b476:	4413      	add	r3, r2
 801b478:	00db      	lsls	r3, r3, #3
 801b47a:	440b      	add	r3, r1
 801b47c:	3308      	adds	r3, #8
 801b47e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b480:	68fa      	ldr	r2, [r7, #12]
 801b482:	429a      	cmp	r2, r3
 801b484:	d117      	bne.n	801b4b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b486:	69bb      	ldr	r3, [r7, #24]
 801b488:	6819      	ldr	r1, [r3, #0]
 801b48a:	7dfa      	ldrb	r2, [r7, #23]
 801b48c:	481f      	ldr	r0, [pc, #124]	@ (801b50c <etharp_output+0x200>)
 801b48e:	4613      	mov	r3, r2
 801b490:	005b      	lsls	r3, r3, #1
 801b492:	4413      	add	r3, r2
 801b494:	00db      	lsls	r3, r3, #3
 801b496:	4403      	add	r3, r0
 801b498:	3304      	adds	r3, #4
 801b49a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b49c:	4299      	cmp	r1, r3
 801b49e:	d10a      	bne.n	801b4b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b4a0:	4a19      	ldr	r2, [pc, #100]	@ (801b508 <etharp_output+0x1fc>)
 801b4a2:	7dfb      	ldrb	r3, [r7, #23]
 801b4a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b4a6:	7dfb      	ldrb	r3, [r7, #23]
 801b4a8:	461a      	mov	r2, r3
 801b4aa:	68b9      	ldr	r1, [r7, #8]
 801b4ac:	68f8      	ldr	r0, [r7, #12]
 801b4ae:	f7ff fe93 	bl	801b1d8 <etharp_output_to_arp_index>
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	e018      	b.n	801b4e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b4b6:	7dfb      	ldrb	r3, [r7, #23]
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	75fb      	strb	r3, [r7, #23]
 801b4bc:	7dfb      	ldrb	r3, [r7, #23]
 801b4be:	2b09      	cmp	r3, #9
 801b4c0:	d9ca      	bls.n	801b458 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b4c2:	68ba      	ldr	r2, [r7, #8]
 801b4c4:	69b9      	ldr	r1, [r7, #24]
 801b4c6:	68f8      	ldr	r0, [r7, #12]
 801b4c8:	f000 f822 	bl	801b510 <etharp_query>
 801b4cc:	4603      	mov	r3, r0
 801b4ce:	e00b      	b.n	801b4e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b4d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b4da:	9300      	str	r3, [sp, #0]
 801b4dc:	69fb      	ldr	r3, [r7, #28]
 801b4de:	68b9      	ldr	r1, [r7, #8]
 801b4e0:	68f8      	ldr	r0, [r7, #12]
 801b4e2:	f001 fe8d 	bl	801d200 <ethernet_output>
 801b4e6:	4603      	mov	r3, r0
}
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	3720      	adds	r7, #32
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	bd80      	pop	{r7, pc}
 801b4f0:	080258a8 	.word	0x080258a8
 801b4f4:	080259f8 	.word	0x080259f8
 801b4f8:	08025920 	.word	0x08025920
 801b4fc:	08025a48 	.word	0x08025a48
 801b500:	080259e8 	.word	0x080259e8
 801b504:	08026278 	.word	0x08026278
 801b508:	2000f614 	.word	0x2000f614
 801b50c:	2000f524 	.word	0x2000f524

0801b510 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b510:	b580      	push	{r7, lr}
 801b512:	b08c      	sub	sp, #48	@ 0x30
 801b514:	af02      	add	r7, sp, #8
 801b516:	60f8      	str	r0, [r7, #12]
 801b518:	60b9      	str	r1, [r7, #8]
 801b51a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	332a      	adds	r3, #42	@ 0x2a
 801b520:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b522:	23ff      	movs	r3, #255	@ 0xff
 801b524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b528:	2300      	movs	r3, #0
 801b52a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	68f9      	ldr	r1, [r7, #12]
 801b532:	4618      	mov	r0, r3
 801b534:	f000 fe2c 	bl	801c190 <ip4_addr_isbroadcast_u32>
 801b538:	4603      	mov	r3, r0
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d10c      	bne.n	801b558 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b53e:	68bb      	ldr	r3, [r7, #8]
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b546:	2be0      	cmp	r3, #224	@ 0xe0
 801b548:	d006      	beq.n	801b558 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b54a:	68bb      	ldr	r3, [r7, #8]
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d003      	beq.n	801b558 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b550:	68bb      	ldr	r3, [r7, #8]
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d102      	bne.n	801b55e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b558:	f06f 030f 	mvn.w	r3, #15
 801b55c:	e101      	b.n	801b762 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b55e:	68fa      	ldr	r2, [r7, #12]
 801b560:	2101      	movs	r1, #1
 801b562:	68b8      	ldr	r0, [r7, #8]
 801b564:	f7ff fb5c 	bl	801ac20 <etharp_find_entry>
 801b568:	4603      	mov	r3, r0
 801b56a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b56c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b570:	2b00      	cmp	r3, #0
 801b572:	da02      	bge.n	801b57a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b574:	8a7b      	ldrh	r3, [r7, #18]
 801b576:	b25b      	sxtb	r3, r3
 801b578:	e0f3      	b.n	801b762 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b57a:	8a7b      	ldrh	r3, [r7, #18]
 801b57c:	2b7e      	cmp	r3, #126	@ 0x7e
 801b57e:	d906      	bls.n	801b58e <etharp_query+0x7e>
 801b580:	4b7a      	ldr	r3, [pc, #488]	@ (801b76c <etharp_query+0x25c>)
 801b582:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b586:	497a      	ldr	r1, [pc, #488]	@ (801b770 <etharp_query+0x260>)
 801b588:	487a      	ldr	r0, [pc, #488]	@ (801b774 <etharp_query+0x264>)
 801b58a:	f003 f945 	bl	801e818 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b58e:	8a7b      	ldrh	r3, [r7, #18]
 801b590:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b592:	7c7a      	ldrb	r2, [r7, #17]
 801b594:	4978      	ldr	r1, [pc, #480]	@ (801b778 <etharp_query+0x268>)
 801b596:	4613      	mov	r3, r2
 801b598:	005b      	lsls	r3, r3, #1
 801b59a:	4413      	add	r3, r2
 801b59c:	00db      	lsls	r3, r3, #3
 801b59e:	440b      	add	r3, r1
 801b5a0:	3314      	adds	r3, #20
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d115      	bne.n	801b5d4 <etharp_query+0xc4>
    is_new_entry = 1;
 801b5a8:	2301      	movs	r3, #1
 801b5aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b5ac:	7c7a      	ldrb	r2, [r7, #17]
 801b5ae:	4972      	ldr	r1, [pc, #456]	@ (801b778 <etharp_query+0x268>)
 801b5b0:	4613      	mov	r3, r2
 801b5b2:	005b      	lsls	r3, r3, #1
 801b5b4:	4413      	add	r3, r2
 801b5b6:	00db      	lsls	r3, r3, #3
 801b5b8:	440b      	add	r3, r1
 801b5ba:	3314      	adds	r3, #20
 801b5bc:	2201      	movs	r2, #1
 801b5be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b5c0:	7c7a      	ldrb	r2, [r7, #17]
 801b5c2:	496d      	ldr	r1, [pc, #436]	@ (801b778 <etharp_query+0x268>)
 801b5c4:	4613      	mov	r3, r2
 801b5c6:	005b      	lsls	r3, r3, #1
 801b5c8:	4413      	add	r3, r2
 801b5ca:	00db      	lsls	r3, r3, #3
 801b5cc:	440b      	add	r3, r1
 801b5ce:	3308      	adds	r3, #8
 801b5d0:	68fa      	ldr	r2, [r7, #12]
 801b5d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b5d4:	7c7a      	ldrb	r2, [r7, #17]
 801b5d6:	4968      	ldr	r1, [pc, #416]	@ (801b778 <etharp_query+0x268>)
 801b5d8:	4613      	mov	r3, r2
 801b5da:	005b      	lsls	r3, r3, #1
 801b5dc:	4413      	add	r3, r2
 801b5de:	00db      	lsls	r3, r3, #3
 801b5e0:	440b      	add	r3, r1
 801b5e2:	3314      	adds	r3, #20
 801b5e4:	781b      	ldrb	r3, [r3, #0]
 801b5e6:	2b01      	cmp	r3, #1
 801b5e8:	d011      	beq.n	801b60e <etharp_query+0xfe>
 801b5ea:	7c7a      	ldrb	r2, [r7, #17]
 801b5ec:	4962      	ldr	r1, [pc, #392]	@ (801b778 <etharp_query+0x268>)
 801b5ee:	4613      	mov	r3, r2
 801b5f0:	005b      	lsls	r3, r3, #1
 801b5f2:	4413      	add	r3, r2
 801b5f4:	00db      	lsls	r3, r3, #3
 801b5f6:	440b      	add	r3, r1
 801b5f8:	3314      	adds	r3, #20
 801b5fa:	781b      	ldrb	r3, [r3, #0]
 801b5fc:	2b01      	cmp	r3, #1
 801b5fe:	d806      	bhi.n	801b60e <etharp_query+0xfe>
 801b600:	4b5a      	ldr	r3, [pc, #360]	@ (801b76c <etharp_query+0x25c>)
 801b602:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b606:	495d      	ldr	r1, [pc, #372]	@ (801b77c <etharp_query+0x26c>)
 801b608:	485a      	ldr	r0, [pc, #360]	@ (801b774 <etharp_query+0x264>)
 801b60a:	f003 f905 	bl	801e818 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b60e:	6a3b      	ldr	r3, [r7, #32]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d102      	bne.n	801b61a <etharp_query+0x10a>
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d10c      	bne.n	801b634 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b61a:	68b9      	ldr	r1, [r7, #8]
 801b61c:	68f8      	ldr	r0, [r7, #12]
 801b61e:	f000 f963 	bl	801b8e8 <etharp_request>
 801b622:	4603      	mov	r3, r0
 801b624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d102      	bne.n	801b634 <etharp_query+0x124>
      return result;
 801b62e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b632:	e096      	b.n	801b762 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d106      	bne.n	801b648 <etharp_query+0x138>
 801b63a:	4b4c      	ldr	r3, [pc, #304]	@ (801b76c <etharp_query+0x25c>)
 801b63c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b640:	494f      	ldr	r1, [pc, #316]	@ (801b780 <etharp_query+0x270>)
 801b642:	484c      	ldr	r0, [pc, #304]	@ (801b774 <etharp_query+0x264>)
 801b644:	f003 f8e8 	bl	801e818 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b648:	7c7a      	ldrb	r2, [r7, #17]
 801b64a:	494b      	ldr	r1, [pc, #300]	@ (801b778 <etharp_query+0x268>)
 801b64c:	4613      	mov	r3, r2
 801b64e:	005b      	lsls	r3, r3, #1
 801b650:	4413      	add	r3, r2
 801b652:	00db      	lsls	r3, r3, #3
 801b654:	440b      	add	r3, r1
 801b656:	3314      	adds	r3, #20
 801b658:	781b      	ldrb	r3, [r3, #0]
 801b65a:	2b01      	cmp	r3, #1
 801b65c:	d917      	bls.n	801b68e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b65e:	4a49      	ldr	r2, [pc, #292]	@ (801b784 <etharp_query+0x274>)
 801b660:	7c7b      	ldrb	r3, [r7, #17]
 801b662:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b664:	7c7a      	ldrb	r2, [r7, #17]
 801b666:	4613      	mov	r3, r2
 801b668:	005b      	lsls	r3, r3, #1
 801b66a:	4413      	add	r3, r2
 801b66c:	00db      	lsls	r3, r3, #3
 801b66e:	3308      	adds	r3, #8
 801b670:	4a41      	ldr	r2, [pc, #260]	@ (801b778 <etharp_query+0x268>)
 801b672:	4413      	add	r3, r2
 801b674:	3304      	adds	r3, #4
 801b676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b67a:	9200      	str	r2, [sp, #0]
 801b67c:	697a      	ldr	r2, [r7, #20]
 801b67e:	6879      	ldr	r1, [r7, #4]
 801b680:	68f8      	ldr	r0, [r7, #12]
 801b682:	f001 fdbd 	bl	801d200 <ethernet_output>
 801b686:	4603      	mov	r3, r0
 801b688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b68c:	e067      	b.n	801b75e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b68e:	7c7a      	ldrb	r2, [r7, #17]
 801b690:	4939      	ldr	r1, [pc, #228]	@ (801b778 <etharp_query+0x268>)
 801b692:	4613      	mov	r3, r2
 801b694:	005b      	lsls	r3, r3, #1
 801b696:	4413      	add	r3, r2
 801b698:	00db      	lsls	r3, r3, #3
 801b69a:	440b      	add	r3, r1
 801b69c:	3314      	adds	r3, #20
 801b69e:	781b      	ldrb	r3, [r3, #0]
 801b6a0:	2b01      	cmp	r3, #1
 801b6a2:	d15c      	bne.n	801b75e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b6a4:	2300      	movs	r3, #0
 801b6a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b6ac:	e01c      	b.n	801b6e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b6ae:	69fb      	ldr	r3, [r7, #28]
 801b6b0:	895a      	ldrh	r2, [r3, #10]
 801b6b2:	69fb      	ldr	r3, [r7, #28]
 801b6b4:	891b      	ldrh	r3, [r3, #8]
 801b6b6:	429a      	cmp	r2, r3
 801b6b8:	d10a      	bne.n	801b6d0 <etharp_query+0x1c0>
 801b6ba:	69fb      	ldr	r3, [r7, #28]
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d006      	beq.n	801b6d0 <etharp_query+0x1c0>
 801b6c2:	4b2a      	ldr	r3, [pc, #168]	@ (801b76c <etharp_query+0x25c>)
 801b6c4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b6c8:	492f      	ldr	r1, [pc, #188]	@ (801b788 <etharp_query+0x278>)
 801b6ca:	482a      	ldr	r0, [pc, #168]	@ (801b774 <etharp_query+0x264>)
 801b6cc:	f003 f8a4 	bl	801e818 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b6d0:	69fb      	ldr	r3, [r7, #28]
 801b6d2:	7b1b      	ldrb	r3, [r3, #12]
 801b6d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d002      	beq.n	801b6e2 <etharp_query+0x1d2>
        copy_needed = 1;
 801b6dc:	2301      	movs	r3, #1
 801b6de:	61bb      	str	r3, [r7, #24]
        break;
 801b6e0:	e005      	b.n	801b6ee <etharp_query+0x1de>
      }
      p = p->next;
 801b6e2:	69fb      	ldr	r3, [r7, #28]
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b6e8:	69fb      	ldr	r3, [r7, #28]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d1df      	bne.n	801b6ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b6ee:	69bb      	ldr	r3, [r7, #24]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d007      	beq.n	801b704 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b6f4:	687a      	ldr	r2, [r7, #4]
 801b6f6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b6fa:	200e      	movs	r0, #14
 801b6fc:	f7f6 fb54 	bl	8011da8 <pbuf_clone>
 801b700:	61f8      	str	r0, [r7, #28]
 801b702:	e004      	b.n	801b70e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b708:	69f8      	ldr	r0, [r7, #28]
 801b70a:	f7f6 f843 	bl	8011794 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b70e:	69fb      	ldr	r3, [r7, #28]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d021      	beq.n	801b758 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b714:	7c7a      	ldrb	r2, [r7, #17]
 801b716:	4918      	ldr	r1, [pc, #96]	@ (801b778 <etharp_query+0x268>)
 801b718:	4613      	mov	r3, r2
 801b71a:	005b      	lsls	r3, r3, #1
 801b71c:	4413      	add	r3, r2
 801b71e:	00db      	lsls	r3, r3, #3
 801b720:	440b      	add	r3, r1
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d00a      	beq.n	801b73e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b728:	7c7a      	ldrb	r2, [r7, #17]
 801b72a:	4913      	ldr	r1, [pc, #76]	@ (801b778 <etharp_query+0x268>)
 801b72c:	4613      	mov	r3, r2
 801b72e:	005b      	lsls	r3, r3, #1
 801b730:	4413      	add	r3, r2
 801b732:	00db      	lsls	r3, r3, #3
 801b734:	440b      	add	r3, r1
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	4618      	mov	r0, r3
 801b73a:	f7f5 ff85 	bl	8011648 <pbuf_free>
      }
      arp_table[i].q = p;
 801b73e:	7c7a      	ldrb	r2, [r7, #17]
 801b740:	490d      	ldr	r1, [pc, #52]	@ (801b778 <etharp_query+0x268>)
 801b742:	4613      	mov	r3, r2
 801b744:	005b      	lsls	r3, r3, #1
 801b746:	4413      	add	r3, r2
 801b748:	00db      	lsls	r3, r3, #3
 801b74a:	440b      	add	r3, r1
 801b74c:	69fa      	ldr	r2, [r7, #28]
 801b74e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b750:	2300      	movs	r3, #0
 801b752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b756:	e002      	b.n	801b75e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b758:	23ff      	movs	r3, #255	@ 0xff
 801b75a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b75e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b762:	4618      	mov	r0, r3
 801b764:	3728      	adds	r7, #40	@ 0x28
 801b766:	46bd      	mov	sp, r7
 801b768:	bd80      	pop	{r7, pc}
 801b76a:	bf00      	nop
 801b76c:	080258a8 	.word	0x080258a8
 801b770:	08025a54 	.word	0x08025a54
 801b774:	08025920 	.word	0x08025920
 801b778:	2000f524 	.word	0x2000f524
 801b77c:	08025a64 	.word	0x08025a64
 801b780:	08025a48 	.word	0x08025a48
 801b784:	2000f614 	.word	0x2000f614
 801b788:	08025a8c 	.word	0x08025a8c

0801b78c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b78c:	b580      	push	{r7, lr}
 801b78e:	b08a      	sub	sp, #40	@ 0x28
 801b790:	af02      	add	r7, sp, #8
 801b792:	60f8      	str	r0, [r7, #12]
 801b794:	60b9      	str	r1, [r7, #8]
 801b796:	607a      	str	r2, [r7, #4]
 801b798:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b79a:	2300      	movs	r3, #0
 801b79c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d106      	bne.n	801b7b2 <etharp_raw+0x26>
 801b7a4:	4b3a      	ldr	r3, [pc, #232]	@ (801b890 <etharp_raw+0x104>)
 801b7a6:	f240 4257 	movw	r2, #1111	@ 0x457
 801b7aa:	493a      	ldr	r1, [pc, #232]	@ (801b894 <etharp_raw+0x108>)
 801b7ac:	483a      	ldr	r0, [pc, #232]	@ (801b898 <etharp_raw+0x10c>)
 801b7ae:	f003 f833 	bl	801e818 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b7b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b7b6:	211c      	movs	r1, #28
 801b7b8:	200e      	movs	r0, #14
 801b7ba:	f7f5 fc2f 	bl	801101c <pbuf_alloc>
 801b7be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b7c0:	69bb      	ldr	r3, [r7, #24]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d102      	bne.n	801b7cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b7c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b7ca:	e05d      	b.n	801b888 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b7cc:	69bb      	ldr	r3, [r7, #24]
 801b7ce:	895b      	ldrh	r3, [r3, #10]
 801b7d0:	2b1b      	cmp	r3, #27
 801b7d2:	d806      	bhi.n	801b7e2 <etharp_raw+0x56>
 801b7d4:	4b2e      	ldr	r3, [pc, #184]	@ (801b890 <etharp_raw+0x104>)
 801b7d6:	f240 4262 	movw	r2, #1122	@ 0x462
 801b7da:	4930      	ldr	r1, [pc, #192]	@ (801b89c <etharp_raw+0x110>)
 801b7dc:	482e      	ldr	r0, [pc, #184]	@ (801b898 <etharp_raw+0x10c>)
 801b7de:	f003 f81b 	bl	801e818 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b7e2:	69bb      	ldr	r3, [r7, #24]
 801b7e4:	685b      	ldr	r3, [r3, #4]
 801b7e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b7e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	f7f4 f80e 	bl	800f80c <lwip_htons>
 801b7f0:	4603      	mov	r3, r0
 801b7f2:	461a      	mov	r2, r3
 801b7f4:	697b      	ldr	r3, [r7, #20]
 801b7f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b7fe:	2b06      	cmp	r3, #6
 801b800:	d006      	beq.n	801b810 <etharp_raw+0x84>
 801b802:	4b23      	ldr	r3, [pc, #140]	@ (801b890 <etharp_raw+0x104>)
 801b804:	f240 4269 	movw	r2, #1129	@ 0x469
 801b808:	4925      	ldr	r1, [pc, #148]	@ (801b8a0 <etharp_raw+0x114>)
 801b80a:	4823      	ldr	r0, [pc, #140]	@ (801b898 <etharp_raw+0x10c>)
 801b80c:	f003 f804 	bl	801e818 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b810:	697b      	ldr	r3, [r7, #20]
 801b812:	3308      	adds	r3, #8
 801b814:	2206      	movs	r2, #6
 801b816:	6839      	ldr	r1, [r7, #0]
 801b818:	4618      	mov	r0, r3
 801b81a:	f003 f99e 	bl	801eb5a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b81e:	697b      	ldr	r3, [r7, #20]
 801b820:	3312      	adds	r3, #18
 801b822:	2206      	movs	r2, #6
 801b824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b826:	4618      	mov	r0, r3
 801b828:	f003 f997 	bl	801eb5a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b82c:	697b      	ldr	r3, [r7, #20]
 801b82e:	330e      	adds	r3, #14
 801b830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b832:	6812      	ldr	r2, [r2, #0]
 801b834:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b836:	697b      	ldr	r3, [r7, #20]
 801b838:	3318      	adds	r3, #24
 801b83a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b83c:	6812      	ldr	r2, [r2, #0]
 801b83e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b840:	697b      	ldr	r3, [r7, #20]
 801b842:	2200      	movs	r2, #0
 801b844:	701a      	strb	r2, [r3, #0]
 801b846:	2200      	movs	r2, #0
 801b848:	f042 0201 	orr.w	r2, r2, #1
 801b84c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b84e:	697b      	ldr	r3, [r7, #20]
 801b850:	2200      	movs	r2, #0
 801b852:	f042 0208 	orr.w	r2, r2, #8
 801b856:	709a      	strb	r2, [r3, #2]
 801b858:	2200      	movs	r2, #0
 801b85a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b85c:	697b      	ldr	r3, [r7, #20]
 801b85e:	2206      	movs	r2, #6
 801b860:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b862:	697b      	ldr	r3, [r7, #20]
 801b864:	2204      	movs	r2, #4
 801b866:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b868:	f640 0306 	movw	r3, #2054	@ 0x806
 801b86c:	9300      	str	r3, [sp, #0]
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	68ba      	ldr	r2, [r7, #8]
 801b872:	69b9      	ldr	r1, [r7, #24]
 801b874:	68f8      	ldr	r0, [r7, #12]
 801b876:	f001 fcc3 	bl	801d200 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b87a:	69b8      	ldr	r0, [r7, #24]
 801b87c:	f7f5 fee4 	bl	8011648 <pbuf_free>
  p = NULL;
 801b880:	2300      	movs	r3, #0
 801b882:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b884:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b888:	4618      	mov	r0, r3
 801b88a:	3720      	adds	r7, #32
 801b88c:	46bd      	mov	sp, r7
 801b88e:	bd80      	pop	{r7, pc}
 801b890:	080258a8 	.word	0x080258a8
 801b894:	080259f8 	.word	0x080259f8
 801b898:	08025920 	.word	0x08025920
 801b89c:	08025aa8 	.word	0x08025aa8
 801b8a0:	08025adc 	.word	0x08025adc

0801b8a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b088      	sub	sp, #32
 801b8a8:	af04      	add	r7, sp, #16
 801b8aa:	60f8      	str	r0, [r7, #12]
 801b8ac:	60b9      	str	r1, [r7, #8]
 801b8ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b8b0:	68fb      	ldr	r3, [r7, #12]
 801b8b2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b8c0:	2201      	movs	r2, #1
 801b8c2:	9203      	str	r2, [sp, #12]
 801b8c4:	68ba      	ldr	r2, [r7, #8]
 801b8c6:	9202      	str	r2, [sp, #8]
 801b8c8:	4a06      	ldr	r2, [pc, #24]	@ (801b8e4 <etharp_request_dst+0x40>)
 801b8ca:	9201      	str	r2, [sp, #4]
 801b8cc:	9300      	str	r3, [sp, #0]
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	687a      	ldr	r2, [r7, #4]
 801b8d2:	68f8      	ldr	r0, [r7, #12]
 801b8d4:	f7ff ff5a 	bl	801b78c <etharp_raw>
 801b8d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b8da:	4618      	mov	r0, r3
 801b8dc:	3710      	adds	r7, #16
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd80      	pop	{r7, pc}
 801b8e2:	bf00      	nop
 801b8e4:	08026280 	.word	0x08026280

0801b8e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b8e8:	b580      	push	{r7, lr}
 801b8ea:	b082      	sub	sp, #8
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
 801b8f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b8f2:	4a05      	ldr	r2, [pc, #20]	@ (801b908 <etharp_request+0x20>)
 801b8f4:	6839      	ldr	r1, [r7, #0]
 801b8f6:	6878      	ldr	r0, [r7, #4]
 801b8f8:	f7ff ffd4 	bl	801b8a4 <etharp_request_dst>
 801b8fc:	4603      	mov	r3, r0
}
 801b8fe:	4618      	mov	r0, r3
 801b900:	3708      	adds	r7, #8
 801b902:	46bd      	mov	sp, r7
 801b904:	bd80      	pop	{r7, pc}
 801b906:	bf00      	nop
 801b908:	08026278 	.word	0x08026278

0801b90c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b08e      	sub	sp, #56	@ 0x38
 801b910:	af04      	add	r7, sp, #16
 801b912:	6078      	str	r0, [r7, #4]
 801b914:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b916:	4b79      	ldr	r3, [pc, #484]	@ (801bafc <icmp_input+0x1f0>)
 801b918:	689b      	ldr	r3, [r3, #8]
 801b91a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b91e:	781b      	ldrb	r3, [r3, #0]
 801b920:	f003 030f 	and.w	r3, r3, #15
 801b924:	b2db      	uxtb	r3, r3
 801b926:	009b      	lsls	r3, r3, #2
 801b928:	b2db      	uxtb	r3, r3
 801b92a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b92c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b92e:	2b13      	cmp	r3, #19
 801b930:	f240 80cd 	bls.w	801bace <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	895b      	ldrh	r3, [r3, #10]
 801b938:	2b03      	cmp	r3, #3
 801b93a:	f240 80ca 	bls.w	801bad2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	685b      	ldr	r3, [r3, #4]
 801b942:	781b      	ldrb	r3, [r3, #0]
 801b944:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b948:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	f000 80b7 	beq.w	801bac0 <icmp_input+0x1b4>
 801b952:	2b08      	cmp	r3, #8
 801b954:	f040 80b7 	bne.w	801bac6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b958:	4b69      	ldr	r3, [pc, #420]	@ (801bb00 <icmp_input+0x1f4>)
 801b95a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b95c:	4b67      	ldr	r3, [pc, #412]	@ (801bafc <icmp_input+0x1f0>)
 801b95e:	695b      	ldr	r3, [r3, #20]
 801b960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b964:	2be0      	cmp	r3, #224	@ 0xe0
 801b966:	f000 80bb 	beq.w	801bae0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b96a:	4b64      	ldr	r3, [pc, #400]	@ (801bafc <icmp_input+0x1f0>)
 801b96c:	695b      	ldr	r3, [r3, #20]
 801b96e:	4a63      	ldr	r2, [pc, #396]	@ (801bafc <icmp_input+0x1f0>)
 801b970:	6812      	ldr	r2, [r2, #0]
 801b972:	4611      	mov	r1, r2
 801b974:	4618      	mov	r0, r3
 801b976:	f000 fc0b 	bl	801c190 <ip4_addr_isbroadcast_u32>
 801b97a:	4603      	mov	r3, r0
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	f040 80b1 	bne.w	801bae4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	891b      	ldrh	r3, [r3, #8]
 801b986:	2b07      	cmp	r3, #7
 801b988:	f240 80a5 	bls.w	801bad6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b98c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b98e:	330e      	adds	r3, #14
 801b990:	4619      	mov	r1, r3
 801b992:	6878      	ldr	r0, [r7, #4]
 801b994:	f7f5 fd90 	bl	80114b8 <pbuf_add_header>
 801b998:	4603      	mov	r3, r0
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d04b      	beq.n	801ba36 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	891a      	ldrh	r2, [r3, #8]
 801b9a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b9a4:	4413      	add	r3, r2
 801b9a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	891b      	ldrh	r3, [r3, #8]
 801b9ac:	8b7a      	ldrh	r2, [r7, #26]
 801b9ae:	429a      	cmp	r2, r3
 801b9b0:	f0c0 809a 	bcc.w	801bae8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b9b4:	8b7b      	ldrh	r3, [r7, #26]
 801b9b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b9ba:	4619      	mov	r1, r3
 801b9bc:	200e      	movs	r0, #14
 801b9be:	f7f5 fb2d 	bl	801101c <pbuf_alloc>
 801b9c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b9c4:	697b      	ldr	r3, [r7, #20]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	f000 8090 	beq.w	801baec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b9cc:	697b      	ldr	r3, [r7, #20]
 801b9ce:	895b      	ldrh	r3, [r3, #10]
 801b9d0:	461a      	mov	r2, r3
 801b9d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b9d4:	3308      	adds	r3, #8
 801b9d6:	429a      	cmp	r2, r3
 801b9d8:	d203      	bcs.n	801b9e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b9da:	6978      	ldr	r0, [r7, #20]
 801b9dc:	f7f5 fe34 	bl	8011648 <pbuf_free>
          goto icmperr;
 801b9e0:	e085      	b.n	801baee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b9e2:	697b      	ldr	r3, [r7, #20]
 801b9e4:	685b      	ldr	r3, [r3, #4]
 801b9e6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b9e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	f003 f8b5 	bl	801eb5a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b9f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b9f2:	4619      	mov	r1, r3
 801b9f4:	6978      	ldr	r0, [r7, #20]
 801b9f6:	f7f5 fd6f 	bl	80114d8 <pbuf_remove_header>
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d009      	beq.n	801ba14 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ba00:	4b40      	ldr	r3, [pc, #256]	@ (801bb04 <icmp_input+0x1f8>)
 801ba02:	22b6      	movs	r2, #182	@ 0xb6
 801ba04:	4940      	ldr	r1, [pc, #256]	@ (801bb08 <icmp_input+0x1fc>)
 801ba06:	4841      	ldr	r0, [pc, #260]	@ (801bb0c <icmp_input+0x200>)
 801ba08:	f002 ff06 	bl	801e818 <iprintf>
          pbuf_free(r);
 801ba0c:	6978      	ldr	r0, [r7, #20]
 801ba0e:	f7f5 fe1b 	bl	8011648 <pbuf_free>
          goto icmperr;
 801ba12:	e06c      	b.n	801baee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ba14:	6879      	ldr	r1, [r7, #4]
 801ba16:	6978      	ldr	r0, [r7, #20]
 801ba18:	f7f5 ff4a 	bl	80118b0 <pbuf_copy>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d003      	beq.n	801ba2a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ba22:	6978      	ldr	r0, [r7, #20]
 801ba24:	f7f5 fe10 	bl	8011648 <pbuf_free>
          goto icmperr;
 801ba28:	e061      	b.n	801baee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ba2a:	6878      	ldr	r0, [r7, #4]
 801ba2c:	f7f5 fe0c 	bl	8011648 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ba30:	697b      	ldr	r3, [r7, #20]
 801ba32:	607b      	str	r3, [r7, #4]
 801ba34:	e00f      	b.n	801ba56 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ba36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba38:	330e      	adds	r3, #14
 801ba3a:	4619      	mov	r1, r3
 801ba3c:	6878      	ldr	r0, [r7, #4]
 801ba3e:	f7f5 fd4b 	bl	80114d8 <pbuf_remove_header>
 801ba42:	4603      	mov	r3, r0
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d006      	beq.n	801ba56 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ba48:	4b2e      	ldr	r3, [pc, #184]	@ (801bb04 <icmp_input+0x1f8>)
 801ba4a:	22c7      	movs	r2, #199	@ 0xc7
 801ba4c:	4930      	ldr	r1, [pc, #192]	@ (801bb10 <icmp_input+0x204>)
 801ba4e:	482f      	ldr	r0, [pc, #188]	@ (801bb0c <icmp_input+0x200>)
 801ba50:	f002 fee2 	bl	801e818 <iprintf>
          goto icmperr;
 801ba54:	e04b      	b.n	801baee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	685b      	ldr	r3, [r3, #4]
 801ba5a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801ba5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba5e:	4619      	mov	r1, r3
 801ba60:	6878      	ldr	r0, [r7, #4]
 801ba62:	f7f5 fd29 	bl	80114b8 <pbuf_add_header>
 801ba66:	4603      	mov	r3, r0
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d12b      	bne.n	801bac4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	685b      	ldr	r3, [r3, #4]
 801ba70:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801ba72:	69fb      	ldr	r3, [r7, #28]
 801ba74:	681a      	ldr	r2, [r3, #0]
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ba7a:	4b20      	ldr	r3, [pc, #128]	@ (801bafc <icmp_input+0x1f0>)
 801ba7c:	691a      	ldr	r2, [r3, #16]
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ba82:	693b      	ldr	r3, [r7, #16]
 801ba84:	2200      	movs	r2, #0
 801ba86:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801ba88:	693b      	ldr	r3, [r7, #16]
 801ba8a:	2200      	movs	r2, #0
 801ba8c:	709a      	strb	r2, [r3, #2]
 801ba8e:	2200      	movs	r2, #0
 801ba90:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	22ff      	movs	r2, #255	@ 0xff
 801ba96:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	729a      	strb	r2, [r3, #10]
 801ba9e:	2200      	movs	r2, #0
 801baa0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801baa2:	683b      	ldr	r3, [r7, #0]
 801baa4:	9302      	str	r3, [sp, #8]
 801baa6:	2301      	movs	r3, #1
 801baa8:	9301      	str	r3, [sp, #4]
 801baaa:	2300      	movs	r3, #0
 801baac:	9300      	str	r3, [sp, #0]
 801baae:	23ff      	movs	r3, #255	@ 0xff
 801bab0:	2200      	movs	r2, #0
 801bab2:	69f9      	ldr	r1, [r7, #28]
 801bab4:	6878      	ldr	r0, [r7, #4]
 801bab6:	f000 fa93 	bl	801bfe0 <ip4_output_if>
 801baba:	4603      	mov	r3, r0
 801babc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801babe:	e001      	b.n	801bac4 <icmp_input+0x1b8>
      break;
 801bac0:	bf00      	nop
 801bac2:	e000      	b.n	801bac6 <icmp_input+0x1ba>
      break;
 801bac4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801bac6:	6878      	ldr	r0, [r7, #4]
 801bac8:	f7f5 fdbe 	bl	8011648 <pbuf_free>
  return;
 801bacc:	e013      	b.n	801baf6 <icmp_input+0x1ea>
    goto lenerr;
 801bace:	bf00      	nop
 801bad0:	e002      	b.n	801bad8 <icmp_input+0x1cc>
    goto lenerr;
 801bad2:	bf00      	nop
 801bad4:	e000      	b.n	801bad8 <icmp_input+0x1cc>
        goto lenerr;
 801bad6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801bad8:	6878      	ldr	r0, [r7, #4]
 801bada:	f7f5 fdb5 	bl	8011648 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bade:	e00a      	b.n	801baf6 <icmp_input+0x1ea>
        goto icmperr;
 801bae0:	bf00      	nop
 801bae2:	e004      	b.n	801baee <icmp_input+0x1e2>
        goto icmperr;
 801bae4:	bf00      	nop
 801bae6:	e002      	b.n	801baee <icmp_input+0x1e2>
          goto icmperr;
 801bae8:	bf00      	nop
 801baea:	e000      	b.n	801baee <icmp_input+0x1e2>
          goto icmperr;
 801baec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801baee:	6878      	ldr	r0, [r7, #4]
 801baf0:	f7f5 fdaa 	bl	8011648 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801baf4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801baf6:	3728      	adds	r7, #40	@ 0x28
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd80      	pop	{r7, pc}
 801bafc:	2000bbc4 	.word	0x2000bbc4
 801bb00:	2000bbd8 	.word	0x2000bbd8
 801bb04:	08025b20 	.word	0x08025b20
 801bb08:	08025b58 	.word	0x08025b58
 801bb0c:	08025b90 	.word	0x08025b90
 801bb10:	08025bb8 	.word	0x08025bb8

0801bb14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801bb14:	b580      	push	{r7, lr}
 801bb16:	b082      	sub	sp, #8
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
 801bb1c:	460b      	mov	r3, r1
 801bb1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801bb20:	78fb      	ldrb	r3, [r7, #3]
 801bb22:	461a      	mov	r2, r3
 801bb24:	2103      	movs	r1, #3
 801bb26:	6878      	ldr	r0, [r7, #4]
 801bb28:	f000 f814 	bl	801bb54 <icmp_send_response>
}
 801bb2c:	bf00      	nop
 801bb2e:	3708      	adds	r7, #8
 801bb30:	46bd      	mov	sp, r7
 801bb32:	bd80      	pop	{r7, pc}

0801bb34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b082      	sub	sp, #8
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	6078      	str	r0, [r7, #4]
 801bb3c:	460b      	mov	r3, r1
 801bb3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801bb40:	78fb      	ldrb	r3, [r7, #3]
 801bb42:	461a      	mov	r2, r3
 801bb44:	210b      	movs	r1, #11
 801bb46:	6878      	ldr	r0, [r7, #4]
 801bb48:	f000 f804 	bl	801bb54 <icmp_send_response>
}
 801bb4c:	bf00      	nop
 801bb4e:	3708      	adds	r7, #8
 801bb50:	46bd      	mov	sp, r7
 801bb52:	bd80      	pop	{r7, pc}

0801bb54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b08c      	sub	sp, #48	@ 0x30
 801bb58:	af04      	add	r7, sp, #16
 801bb5a:	6078      	str	r0, [r7, #4]
 801bb5c:	460b      	mov	r3, r1
 801bb5e:	70fb      	strb	r3, [r7, #3]
 801bb60:	4613      	mov	r3, r2
 801bb62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801bb64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bb68:	2124      	movs	r1, #36	@ 0x24
 801bb6a:	2022      	movs	r0, #34	@ 0x22
 801bb6c:	f7f5 fa56 	bl	801101c <pbuf_alloc>
 801bb70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801bb72:	69fb      	ldr	r3, [r7, #28]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d04c      	beq.n	801bc12 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801bb78:	69fb      	ldr	r3, [r7, #28]
 801bb7a:	895b      	ldrh	r3, [r3, #10]
 801bb7c:	2b23      	cmp	r3, #35	@ 0x23
 801bb7e:	d806      	bhi.n	801bb8e <icmp_send_response+0x3a>
 801bb80:	4b26      	ldr	r3, [pc, #152]	@ (801bc1c <icmp_send_response+0xc8>)
 801bb82:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801bb86:	4926      	ldr	r1, [pc, #152]	@ (801bc20 <icmp_send_response+0xcc>)
 801bb88:	4826      	ldr	r0, [pc, #152]	@ (801bc24 <icmp_send_response+0xd0>)
 801bb8a:	f002 fe45 	bl	801e818 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	685b      	ldr	r3, [r3, #4]
 801bb92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801bb94:	69fb      	ldr	r3, [r7, #28]
 801bb96:	685b      	ldr	r3, [r3, #4]
 801bb98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801bb9a:	697b      	ldr	r3, [r7, #20]
 801bb9c:	78fa      	ldrb	r2, [r7, #3]
 801bb9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801bba0:	697b      	ldr	r3, [r7, #20]
 801bba2:	78ba      	ldrb	r2, [r7, #2]
 801bba4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	2200      	movs	r2, #0
 801bbaa:	711a      	strb	r2, [r3, #4]
 801bbac:	2200      	movs	r2, #0
 801bbae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801bbb0:	697b      	ldr	r3, [r7, #20]
 801bbb2:	2200      	movs	r2, #0
 801bbb4:	719a      	strb	r2, [r3, #6]
 801bbb6:	2200      	movs	r2, #0
 801bbb8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801bbba:	69fb      	ldr	r3, [r7, #28]
 801bbbc:	685b      	ldr	r3, [r3, #4]
 801bbbe:	f103 0008 	add.w	r0, r3, #8
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	685b      	ldr	r3, [r3, #4]
 801bbc6:	221c      	movs	r2, #28
 801bbc8:	4619      	mov	r1, r3
 801bbca:	f002 ffc6 	bl	801eb5a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801bbce:	69bb      	ldr	r3, [r7, #24]
 801bbd0:	68db      	ldr	r3, [r3, #12]
 801bbd2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bbd4:	f107 030c 	add.w	r3, r7, #12
 801bbd8:	4618      	mov	r0, r3
 801bbda:	f000 f825 	bl	801bc28 <ip4_route>
 801bbde:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801bbe0:	693b      	ldr	r3, [r7, #16]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d011      	beq.n	801bc0a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801bbe6:	697b      	ldr	r3, [r7, #20]
 801bbe8:	2200      	movs	r2, #0
 801bbea:	709a      	strb	r2, [r3, #2]
 801bbec:	2200      	movs	r2, #0
 801bbee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bbf0:	f107 020c 	add.w	r2, r7, #12
 801bbf4:	693b      	ldr	r3, [r7, #16]
 801bbf6:	9302      	str	r3, [sp, #8]
 801bbf8:	2301      	movs	r3, #1
 801bbfa:	9301      	str	r3, [sp, #4]
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	9300      	str	r3, [sp, #0]
 801bc00:	23ff      	movs	r3, #255	@ 0xff
 801bc02:	2100      	movs	r1, #0
 801bc04:	69f8      	ldr	r0, [r7, #28]
 801bc06:	f000 f9eb 	bl	801bfe0 <ip4_output_if>
  }
  pbuf_free(q);
 801bc0a:	69f8      	ldr	r0, [r7, #28]
 801bc0c:	f7f5 fd1c 	bl	8011648 <pbuf_free>
 801bc10:	e000      	b.n	801bc14 <icmp_send_response+0xc0>
    return;
 801bc12:	bf00      	nop
}
 801bc14:	3720      	adds	r7, #32
 801bc16:	46bd      	mov	sp, r7
 801bc18:	bd80      	pop	{r7, pc}
 801bc1a:	bf00      	nop
 801bc1c:	08025b20 	.word	0x08025b20
 801bc20:	08025bec 	.word	0x08025bec
 801bc24:	08025b90 	.word	0x08025b90

0801bc28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801bc28:	b480      	push	{r7}
 801bc2a:	b085      	sub	sp, #20
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801bc30:	4b33      	ldr	r3, [pc, #204]	@ (801bd00 <ip4_route+0xd8>)
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	60fb      	str	r3, [r7, #12]
 801bc36:	e036      	b.n	801bca6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bc3e:	f003 0301 	and.w	r3, r3, #1
 801bc42:	b2db      	uxtb	r3, r3
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d02b      	beq.n	801bca0 <ip4_route+0x78>
 801bc48:	68fb      	ldr	r3, [r7, #12]
 801bc4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bc4e:	089b      	lsrs	r3, r3, #2
 801bc50:	f003 0301 	and.w	r3, r3, #1
 801bc54:	b2db      	uxtb	r3, r3
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d022      	beq.n	801bca0 <ip4_route+0x78>
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	3304      	adds	r3, #4
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d01d      	beq.n	801bca0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	681a      	ldr	r2, [r3, #0]
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	3304      	adds	r3, #4
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	405a      	eors	r2, r3
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	3308      	adds	r3, #8
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	4013      	ands	r3, r2
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d101      	bne.n	801bc80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	e038      	b.n	801bcf2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bc86:	f003 0302 	and.w	r3, r3, #2
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d108      	bne.n	801bca0 <ip4_route+0x78>
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	681a      	ldr	r2, [r3, #0]
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	330c      	adds	r3, #12
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	429a      	cmp	r2, r3
 801bc9a:	d101      	bne.n	801bca0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	e028      	b.n	801bcf2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	60fb      	str	r3, [r7, #12]
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d1c5      	bne.n	801bc38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bcac:	4b15      	ldr	r3, [pc, #84]	@ (801bd04 <ip4_route+0xdc>)
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d01a      	beq.n	801bcea <ip4_route+0xc2>
 801bcb4:	4b13      	ldr	r3, [pc, #76]	@ (801bd04 <ip4_route+0xdc>)
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bcbc:	f003 0301 	and.w	r3, r3, #1
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d012      	beq.n	801bcea <ip4_route+0xc2>
 801bcc4:	4b0f      	ldr	r3, [pc, #60]	@ (801bd04 <ip4_route+0xdc>)
 801bcc6:	681b      	ldr	r3, [r3, #0]
 801bcc8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bccc:	f003 0304 	and.w	r3, r3, #4
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d00a      	beq.n	801bcea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bcd4:	4b0b      	ldr	r3, [pc, #44]	@ (801bd04 <ip4_route+0xdc>)
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	3304      	adds	r3, #4
 801bcda:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d004      	beq.n	801bcea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	b2db      	uxtb	r3, r3
 801bce6:	2b7f      	cmp	r3, #127	@ 0x7f
 801bce8:	d101      	bne.n	801bcee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bcea:	2300      	movs	r3, #0
 801bcec:	e001      	b.n	801bcf2 <ip4_route+0xca>
  }

  return netif_default;
 801bcee:	4b05      	ldr	r3, [pc, #20]	@ (801bd04 <ip4_route+0xdc>)
 801bcf0:	681b      	ldr	r3, [r3, #0]
}
 801bcf2:	4618      	mov	r0, r3
 801bcf4:	3714      	adds	r7, #20
 801bcf6:	46bd      	mov	sp, r7
 801bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcfc:	4770      	bx	lr
 801bcfe:	bf00      	nop
 801bd00:	2000f478 	.word	0x2000f478
 801bd04:	2000f47c 	.word	0x2000f47c

0801bd08 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b082      	sub	sp, #8
 801bd0c:	af00      	add	r7, sp, #0
 801bd0e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bd16:	f003 0301 	and.w	r3, r3, #1
 801bd1a:	b2db      	uxtb	r3, r3
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d016      	beq.n	801bd4e <ip4_input_accept+0x46>
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	3304      	adds	r3, #4
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d011      	beq.n	801bd4e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bd2a:	4b0b      	ldr	r3, [pc, #44]	@ (801bd58 <ip4_input_accept+0x50>)
 801bd2c:	695a      	ldr	r2, [r3, #20]
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	3304      	adds	r3, #4
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	429a      	cmp	r2, r3
 801bd36:	d008      	beq.n	801bd4a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bd38:	4b07      	ldr	r3, [pc, #28]	@ (801bd58 <ip4_input_accept+0x50>)
 801bd3a:	695b      	ldr	r3, [r3, #20]
 801bd3c:	6879      	ldr	r1, [r7, #4]
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f000 fa26 	bl	801c190 <ip4_addr_isbroadcast_u32>
 801bd44:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d001      	beq.n	801bd4e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bd4a:	2301      	movs	r3, #1
 801bd4c:	e000      	b.n	801bd50 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801bd4e:	2300      	movs	r3, #0
}
 801bd50:	4618      	mov	r0, r3
 801bd52:	3708      	adds	r7, #8
 801bd54:	46bd      	mov	sp, r7
 801bd56:	bd80      	pop	{r7, pc}
 801bd58:	2000bbc4 	.word	0x2000bbc4

0801bd5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b088      	sub	sp, #32
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
 801bd64:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801bd66:	2301      	movs	r3, #1
 801bd68:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	685b      	ldr	r3, [r3, #4]
 801bd6e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801bd70:	69fb      	ldr	r3, [r7, #28]
 801bd72:	781b      	ldrb	r3, [r3, #0]
 801bd74:	091b      	lsrs	r3, r3, #4
 801bd76:	b2db      	uxtb	r3, r3
 801bd78:	2b04      	cmp	r3, #4
 801bd7a:	d004      	beq.n	801bd86 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bd7c:	6878      	ldr	r0, [r7, #4]
 801bd7e:	f7f5 fc63 	bl	8011648 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bd82:	2300      	movs	r3, #0
 801bd84:	e123      	b.n	801bfce <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bd86:	69fb      	ldr	r3, [r7, #28]
 801bd88:	781b      	ldrb	r3, [r3, #0]
 801bd8a:	f003 030f 	and.w	r3, r3, #15
 801bd8e:	b2db      	uxtb	r3, r3
 801bd90:	009b      	lsls	r3, r3, #2
 801bd92:	b2db      	uxtb	r3, r3
 801bd94:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bd96:	69fb      	ldr	r3, [r7, #28]
 801bd98:	885b      	ldrh	r3, [r3, #2]
 801bd9a:	b29b      	uxth	r3, r3
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	f7f3 fd35 	bl	800f80c <lwip_htons>
 801bda2:	4603      	mov	r3, r0
 801bda4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	891b      	ldrh	r3, [r3, #8]
 801bdaa:	8a3a      	ldrh	r2, [r7, #16]
 801bdac:	429a      	cmp	r2, r3
 801bdae:	d204      	bcs.n	801bdba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801bdb0:	8a3b      	ldrh	r3, [r7, #16]
 801bdb2:	4619      	mov	r1, r3
 801bdb4:	6878      	ldr	r0, [r7, #4]
 801bdb6:	f7f5 fa8f 	bl	80112d8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	895b      	ldrh	r3, [r3, #10]
 801bdbe:	8a7a      	ldrh	r2, [r7, #18]
 801bdc0:	429a      	cmp	r2, r3
 801bdc2:	d807      	bhi.n	801bdd4 <ip4_input+0x78>
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	891b      	ldrh	r3, [r3, #8]
 801bdc8:	8a3a      	ldrh	r2, [r7, #16]
 801bdca:	429a      	cmp	r2, r3
 801bdcc:	d802      	bhi.n	801bdd4 <ip4_input+0x78>
 801bdce:	8a7b      	ldrh	r3, [r7, #18]
 801bdd0:	2b13      	cmp	r3, #19
 801bdd2:	d804      	bhi.n	801bdde <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bdd4:	6878      	ldr	r0, [r7, #4]
 801bdd6:	f7f5 fc37 	bl	8011648 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bdda:	2300      	movs	r3, #0
 801bddc:	e0f7      	b.n	801bfce <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bdde:	69fb      	ldr	r3, [r7, #28]
 801bde0:	691b      	ldr	r3, [r3, #16]
 801bde2:	4a7d      	ldr	r2, [pc, #500]	@ (801bfd8 <ip4_input+0x27c>)
 801bde4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bde6:	69fb      	ldr	r3, [r7, #28]
 801bde8:	68db      	ldr	r3, [r3, #12]
 801bdea:	4a7b      	ldr	r2, [pc, #492]	@ (801bfd8 <ip4_input+0x27c>)
 801bdec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bdee:	4b7a      	ldr	r3, [pc, #488]	@ (801bfd8 <ip4_input+0x27c>)
 801bdf0:	695b      	ldr	r3, [r3, #20]
 801bdf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bdf6:	2be0      	cmp	r3, #224	@ 0xe0
 801bdf8:	d112      	bne.n	801be20 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bdfa:	683b      	ldr	r3, [r7, #0]
 801bdfc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801be00:	f003 0301 	and.w	r3, r3, #1
 801be04:	b2db      	uxtb	r3, r3
 801be06:	2b00      	cmp	r3, #0
 801be08:	d007      	beq.n	801be1a <ip4_input+0xbe>
 801be0a:	683b      	ldr	r3, [r7, #0]
 801be0c:	3304      	adds	r3, #4
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	2b00      	cmp	r3, #0
 801be12:	d002      	beq.n	801be1a <ip4_input+0xbe>
      netif = inp;
 801be14:	683b      	ldr	r3, [r7, #0]
 801be16:	61bb      	str	r3, [r7, #24]
 801be18:	e02a      	b.n	801be70 <ip4_input+0x114>
    } else {
      netif = NULL;
 801be1a:	2300      	movs	r3, #0
 801be1c:	61bb      	str	r3, [r7, #24]
 801be1e:	e027      	b.n	801be70 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801be20:	6838      	ldr	r0, [r7, #0]
 801be22:	f7ff ff71 	bl	801bd08 <ip4_input_accept>
 801be26:	4603      	mov	r3, r0
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d002      	beq.n	801be32 <ip4_input+0xd6>
      netif = inp;
 801be2c:	683b      	ldr	r3, [r7, #0]
 801be2e:	61bb      	str	r3, [r7, #24]
 801be30:	e01e      	b.n	801be70 <ip4_input+0x114>
    } else {
      netif = NULL;
 801be32:	2300      	movs	r3, #0
 801be34:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801be36:	4b68      	ldr	r3, [pc, #416]	@ (801bfd8 <ip4_input+0x27c>)
 801be38:	695b      	ldr	r3, [r3, #20]
 801be3a:	b2db      	uxtb	r3, r3
 801be3c:	2b7f      	cmp	r3, #127	@ 0x7f
 801be3e:	d017      	beq.n	801be70 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801be40:	4b66      	ldr	r3, [pc, #408]	@ (801bfdc <ip4_input+0x280>)
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	61bb      	str	r3, [r7, #24]
 801be46:	e00e      	b.n	801be66 <ip4_input+0x10a>
          if (netif == inp) {
 801be48:	69ba      	ldr	r2, [r7, #24]
 801be4a:	683b      	ldr	r3, [r7, #0]
 801be4c:	429a      	cmp	r2, r3
 801be4e:	d006      	beq.n	801be5e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801be50:	69b8      	ldr	r0, [r7, #24]
 801be52:	f7ff ff59 	bl	801bd08 <ip4_input_accept>
 801be56:	4603      	mov	r3, r0
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d108      	bne.n	801be6e <ip4_input+0x112>
 801be5c:	e000      	b.n	801be60 <ip4_input+0x104>
            continue;
 801be5e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801be60:	69bb      	ldr	r3, [r7, #24]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	61bb      	str	r3, [r7, #24]
 801be66:	69bb      	ldr	r3, [r7, #24]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d1ed      	bne.n	801be48 <ip4_input+0xec>
 801be6c:	e000      	b.n	801be70 <ip4_input+0x114>
            break;
 801be6e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801be70:	69bb      	ldr	r3, [r7, #24]
 801be72:	2b00      	cmp	r3, #0
 801be74:	d111      	bne.n	801be9a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801be76:	69fb      	ldr	r3, [r7, #28]
 801be78:	7a5b      	ldrb	r3, [r3, #9]
 801be7a:	2b11      	cmp	r3, #17
 801be7c:	d10d      	bne.n	801be9a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801be7e:	8a7b      	ldrh	r3, [r7, #18]
 801be80:	69fa      	ldr	r2, [r7, #28]
 801be82:	4413      	add	r3, r2
 801be84:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	885b      	ldrh	r3, [r3, #2]
 801be8a:	b29b      	uxth	r3, r3
 801be8c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801be90:	d103      	bne.n	801be9a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801be92:	683b      	ldr	r3, [r7, #0]
 801be94:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801be96:	2300      	movs	r3, #0
 801be98:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801be9a:	697b      	ldr	r3, [r7, #20]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d017      	beq.n	801bed0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801bea0:	4b4d      	ldr	r3, [pc, #308]	@ (801bfd8 <ip4_input+0x27c>)
 801bea2:	691b      	ldr	r3, [r3, #16]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d013      	beq.n	801bed0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bea8:	4b4b      	ldr	r3, [pc, #300]	@ (801bfd8 <ip4_input+0x27c>)
 801beaa:	691b      	ldr	r3, [r3, #16]
 801beac:	6839      	ldr	r1, [r7, #0]
 801beae:	4618      	mov	r0, r3
 801beb0:	f000 f96e 	bl	801c190 <ip4_addr_isbroadcast_u32>
 801beb4:	4603      	mov	r3, r0
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d105      	bne.n	801bec6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801beba:	4b47      	ldr	r3, [pc, #284]	@ (801bfd8 <ip4_input+0x27c>)
 801bebc:	691b      	ldr	r3, [r3, #16]
 801bebe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bec2:	2be0      	cmp	r3, #224	@ 0xe0
 801bec4:	d104      	bne.n	801bed0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801bec6:	6878      	ldr	r0, [r7, #4]
 801bec8:	f7f5 fbbe 	bl	8011648 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801becc:	2300      	movs	r3, #0
 801bece:	e07e      	b.n	801bfce <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801bed0:	69bb      	ldr	r3, [r7, #24]
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d104      	bne.n	801bee0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801bed6:	6878      	ldr	r0, [r7, #4]
 801bed8:	f7f5 fbb6 	bl	8011648 <pbuf_free>
    return ERR_OK;
 801bedc:	2300      	movs	r3, #0
 801bede:	e076      	b.n	801bfce <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bee0:	69fb      	ldr	r3, [r7, #28]
 801bee2:	88db      	ldrh	r3, [r3, #6]
 801bee4:	b29b      	uxth	r3, r3
 801bee6:	461a      	mov	r2, r3
 801bee8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801beec:	4013      	ands	r3, r2
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d00b      	beq.n	801bf0a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801bef2:	6878      	ldr	r0, [r7, #4]
 801bef4:	f000 fdbc 	bl	801ca70 <ip4_reass>
 801bef8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	2b00      	cmp	r3, #0
 801befe:	d101      	bne.n	801bf04 <ip4_input+0x1a8>
      return ERR_OK;
 801bf00:	2300      	movs	r3, #0
 801bf02:	e064      	b.n	801bfce <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	685b      	ldr	r3, [r3, #4]
 801bf08:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801bf0a:	4a33      	ldr	r2, [pc, #204]	@ (801bfd8 <ip4_input+0x27c>)
 801bf0c:	69bb      	ldr	r3, [r7, #24]
 801bf0e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bf10:	4a31      	ldr	r2, [pc, #196]	@ (801bfd8 <ip4_input+0x27c>)
 801bf12:	683b      	ldr	r3, [r7, #0]
 801bf14:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bf16:	4a30      	ldr	r2, [pc, #192]	@ (801bfd8 <ip4_input+0x27c>)
 801bf18:	69fb      	ldr	r3, [r7, #28]
 801bf1a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bf1c:	69fb      	ldr	r3, [r7, #28]
 801bf1e:	781b      	ldrb	r3, [r3, #0]
 801bf20:	f003 030f 	and.w	r3, r3, #15
 801bf24:	b2db      	uxtb	r3, r3
 801bf26:	009b      	lsls	r3, r3, #2
 801bf28:	b2db      	uxtb	r3, r3
 801bf2a:	461a      	mov	r2, r3
 801bf2c:	4b2a      	ldr	r3, [pc, #168]	@ (801bfd8 <ip4_input+0x27c>)
 801bf2e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bf30:	8a7b      	ldrh	r3, [r7, #18]
 801bf32:	4619      	mov	r1, r3
 801bf34:	6878      	ldr	r0, [r7, #4]
 801bf36:	f7f5 facf 	bl	80114d8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bf3a:	69fb      	ldr	r3, [r7, #28]
 801bf3c:	7a5b      	ldrb	r3, [r3, #9]
 801bf3e:	2b11      	cmp	r3, #17
 801bf40:	d006      	beq.n	801bf50 <ip4_input+0x1f4>
 801bf42:	2b11      	cmp	r3, #17
 801bf44:	dc13      	bgt.n	801bf6e <ip4_input+0x212>
 801bf46:	2b01      	cmp	r3, #1
 801bf48:	d00c      	beq.n	801bf64 <ip4_input+0x208>
 801bf4a:	2b06      	cmp	r3, #6
 801bf4c:	d005      	beq.n	801bf5a <ip4_input+0x1fe>
 801bf4e:	e00e      	b.n	801bf6e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bf50:	6839      	ldr	r1, [r7, #0]
 801bf52:	6878      	ldr	r0, [r7, #4]
 801bf54:	f7fc f9dc 	bl	8018310 <udp_input>
        break;
 801bf58:	e026      	b.n	801bfa8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bf5a:	6839      	ldr	r1, [r7, #0]
 801bf5c:	6878      	ldr	r0, [r7, #4]
 801bf5e:	f7f7 fd9b 	bl	8013a98 <tcp_input>
        break;
 801bf62:	e021      	b.n	801bfa8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bf64:	6839      	ldr	r1, [r7, #0]
 801bf66:	6878      	ldr	r0, [r7, #4]
 801bf68:	f7ff fcd0 	bl	801b90c <icmp_input>
        break;
 801bf6c:	e01c      	b.n	801bfa8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bf6e:	4b1a      	ldr	r3, [pc, #104]	@ (801bfd8 <ip4_input+0x27c>)
 801bf70:	695b      	ldr	r3, [r3, #20]
 801bf72:	69b9      	ldr	r1, [r7, #24]
 801bf74:	4618      	mov	r0, r3
 801bf76:	f000 f90b 	bl	801c190 <ip4_addr_isbroadcast_u32>
 801bf7a:	4603      	mov	r3, r0
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d10f      	bne.n	801bfa0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bf80:	4b15      	ldr	r3, [pc, #84]	@ (801bfd8 <ip4_input+0x27c>)
 801bf82:	695b      	ldr	r3, [r3, #20]
 801bf84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bf88:	2be0      	cmp	r3, #224	@ 0xe0
 801bf8a:	d009      	beq.n	801bfa0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bf8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bf90:	4619      	mov	r1, r3
 801bf92:	6878      	ldr	r0, [r7, #4]
 801bf94:	f7f5 fb13 	bl	80115be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bf98:	2102      	movs	r1, #2
 801bf9a:	6878      	ldr	r0, [r7, #4]
 801bf9c:	f7ff fdba 	bl	801bb14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bfa0:	6878      	ldr	r0, [r7, #4]
 801bfa2:	f7f5 fb51 	bl	8011648 <pbuf_free>
        break;
 801bfa6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bfa8:	4b0b      	ldr	r3, [pc, #44]	@ (801bfd8 <ip4_input+0x27c>)
 801bfaa:	2200      	movs	r2, #0
 801bfac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bfae:	4b0a      	ldr	r3, [pc, #40]	@ (801bfd8 <ip4_input+0x27c>)
 801bfb0:	2200      	movs	r2, #0
 801bfb2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bfb4:	4b08      	ldr	r3, [pc, #32]	@ (801bfd8 <ip4_input+0x27c>)
 801bfb6:	2200      	movs	r2, #0
 801bfb8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bfba:	4b07      	ldr	r3, [pc, #28]	@ (801bfd8 <ip4_input+0x27c>)
 801bfbc:	2200      	movs	r2, #0
 801bfbe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bfc0:	4b05      	ldr	r3, [pc, #20]	@ (801bfd8 <ip4_input+0x27c>)
 801bfc2:	2200      	movs	r2, #0
 801bfc4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bfc6:	4b04      	ldr	r3, [pc, #16]	@ (801bfd8 <ip4_input+0x27c>)
 801bfc8:	2200      	movs	r2, #0
 801bfca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bfcc:	2300      	movs	r3, #0
}
 801bfce:	4618      	mov	r0, r3
 801bfd0:	3720      	adds	r7, #32
 801bfd2:	46bd      	mov	sp, r7
 801bfd4:	bd80      	pop	{r7, pc}
 801bfd6:	bf00      	nop
 801bfd8:	2000bbc4 	.word	0x2000bbc4
 801bfdc:	2000f478 	.word	0x2000f478

0801bfe0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b08a      	sub	sp, #40	@ 0x28
 801bfe4:	af04      	add	r7, sp, #16
 801bfe6:	60f8      	str	r0, [r7, #12]
 801bfe8:	60b9      	str	r1, [r7, #8]
 801bfea:	607a      	str	r2, [r7, #4]
 801bfec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bfee:	68bb      	ldr	r3, [r7, #8]
 801bff0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d009      	beq.n	801c00c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d003      	beq.n	801c006 <ip4_output_if+0x26>
 801bffe:	68bb      	ldr	r3, [r7, #8]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	2b00      	cmp	r3, #0
 801c004:	d102      	bne.n	801c00c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c008:	3304      	adds	r3, #4
 801c00a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c00c:	78fa      	ldrb	r2, [r7, #3]
 801c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c010:	9302      	str	r3, [sp, #8]
 801c012:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c016:	9301      	str	r3, [sp, #4]
 801c018:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c01c:	9300      	str	r3, [sp, #0]
 801c01e:	4613      	mov	r3, r2
 801c020:	687a      	ldr	r2, [r7, #4]
 801c022:	6979      	ldr	r1, [r7, #20]
 801c024:	68f8      	ldr	r0, [r7, #12]
 801c026:	f000 f805 	bl	801c034 <ip4_output_if_src>
 801c02a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	3718      	adds	r7, #24
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}

0801c034 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b088      	sub	sp, #32
 801c038:	af00      	add	r7, sp, #0
 801c03a:	60f8      	str	r0, [r7, #12]
 801c03c:	60b9      	str	r1, [r7, #8]
 801c03e:	607a      	str	r2, [r7, #4]
 801c040:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	7b9b      	ldrb	r3, [r3, #14]
 801c046:	2b01      	cmp	r3, #1
 801c048:	d006      	beq.n	801c058 <ip4_output_if_src+0x24>
 801c04a:	4b4b      	ldr	r3, [pc, #300]	@ (801c178 <ip4_output_if_src+0x144>)
 801c04c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c050:	494a      	ldr	r1, [pc, #296]	@ (801c17c <ip4_output_if_src+0x148>)
 801c052:	484b      	ldr	r0, [pc, #300]	@ (801c180 <ip4_output_if_src+0x14c>)
 801c054:	f002 fbe0 	bl	801e818 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d060      	beq.n	801c120 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c05e:	2314      	movs	r3, #20
 801c060:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c062:	2114      	movs	r1, #20
 801c064:	68f8      	ldr	r0, [r7, #12]
 801c066:	f7f5 fa27 	bl	80114b8 <pbuf_add_header>
 801c06a:	4603      	mov	r3, r0
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d002      	beq.n	801c076 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c070:	f06f 0301 	mvn.w	r3, #1
 801c074:	e07c      	b.n	801c170 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	685b      	ldr	r3, [r3, #4]
 801c07a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	895b      	ldrh	r3, [r3, #10]
 801c080:	2b13      	cmp	r3, #19
 801c082:	d806      	bhi.n	801c092 <ip4_output_if_src+0x5e>
 801c084:	4b3c      	ldr	r3, [pc, #240]	@ (801c178 <ip4_output_if_src+0x144>)
 801c086:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801c08a:	493e      	ldr	r1, [pc, #248]	@ (801c184 <ip4_output_if_src+0x150>)
 801c08c:	483c      	ldr	r0, [pc, #240]	@ (801c180 <ip4_output_if_src+0x14c>)
 801c08e:	f002 fbc3 	bl	801e818 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c092:	69fb      	ldr	r3, [r7, #28]
 801c094:	78fa      	ldrb	r2, [r7, #3]
 801c096:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c098:	69fb      	ldr	r3, [r7, #28]
 801c09a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801c09e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	681a      	ldr	r2, [r3, #0]
 801c0a4:	69fb      	ldr	r3, [r7, #28]
 801c0a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c0a8:	8b7b      	ldrh	r3, [r7, #26]
 801c0aa:	089b      	lsrs	r3, r3, #2
 801c0ac:	b29b      	uxth	r3, r3
 801c0ae:	b2db      	uxtb	r3, r3
 801c0b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c0b4:	b2da      	uxtb	r2, r3
 801c0b6:	69fb      	ldr	r3, [r7, #28]
 801c0b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c0ba:	69fb      	ldr	r3, [r7, #28]
 801c0bc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801c0c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	891b      	ldrh	r3, [r3, #8]
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f7f3 fba0 	bl	800f80c <lwip_htons>
 801c0cc:	4603      	mov	r3, r0
 801c0ce:	461a      	mov	r2, r3
 801c0d0:	69fb      	ldr	r3, [r7, #28]
 801c0d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c0d4:	69fb      	ldr	r3, [r7, #28]
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	719a      	strb	r2, [r3, #6]
 801c0da:	2200      	movs	r2, #0
 801c0dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c0de:	4b2a      	ldr	r3, [pc, #168]	@ (801c188 <ip4_output_if_src+0x154>)
 801c0e0:	881b      	ldrh	r3, [r3, #0]
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	f7f3 fb92 	bl	800f80c <lwip_htons>
 801c0e8:	4603      	mov	r3, r0
 801c0ea:	461a      	mov	r2, r3
 801c0ec:	69fb      	ldr	r3, [r7, #28]
 801c0ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c0f0:	4b25      	ldr	r3, [pc, #148]	@ (801c188 <ip4_output_if_src+0x154>)
 801c0f2:	881b      	ldrh	r3, [r3, #0]
 801c0f4:	3301      	adds	r3, #1
 801c0f6:	b29a      	uxth	r2, r3
 801c0f8:	4b23      	ldr	r3, [pc, #140]	@ (801c188 <ip4_output_if_src+0x154>)
 801c0fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c0fc:	68bb      	ldr	r3, [r7, #8]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d104      	bne.n	801c10c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c102:	4b22      	ldr	r3, [pc, #136]	@ (801c18c <ip4_output_if_src+0x158>)
 801c104:	681a      	ldr	r2, [r3, #0]
 801c106:	69fb      	ldr	r3, [r7, #28]
 801c108:	60da      	str	r2, [r3, #12]
 801c10a:	e003      	b.n	801c114 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c10c:	68bb      	ldr	r3, [r7, #8]
 801c10e:	681a      	ldr	r2, [r3, #0]
 801c110:	69fb      	ldr	r3, [r7, #28]
 801c112:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c114:	69fb      	ldr	r3, [r7, #28]
 801c116:	2200      	movs	r2, #0
 801c118:	729a      	strb	r2, [r3, #10]
 801c11a:	2200      	movs	r2, #0
 801c11c:	72da      	strb	r2, [r3, #11]
 801c11e:	e00f      	b.n	801c140 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	895b      	ldrh	r3, [r3, #10]
 801c124:	2b13      	cmp	r3, #19
 801c126:	d802      	bhi.n	801c12e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c128:	f06f 0301 	mvn.w	r3, #1
 801c12c:	e020      	b.n	801c170 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	685b      	ldr	r3, [r3, #4]
 801c132:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c134:	69fb      	ldr	r3, [r7, #28]
 801c136:	691b      	ldr	r3, [r3, #16]
 801c138:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c13a:	f107 0314 	add.w	r3, r7, #20
 801c13e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c144:	2b00      	cmp	r3, #0
 801c146:	d00c      	beq.n	801c162 <ip4_output_if_src+0x12e>
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	891a      	ldrh	r2, [r3, #8]
 801c14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c14e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c150:	429a      	cmp	r2, r3
 801c152:	d906      	bls.n	801c162 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c154:	687a      	ldr	r2, [r7, #4]
 801c156:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c158:	68f8      	ldr	r0, [r7, #12]
 801c15a:	f000 fe7d 	bl	801ce58 <ip4_frag>
 801c15e:	4603      	mov	r3, r0
 801c160:	e006      	b.n	801c170 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c164:	695b      	ldr	r3, [r3, #20]
 801c166:	687a      	ldr	r2, [r7, #4]
 801c168:	68f9      	ldr	r1, [r7, #12]
 801c16a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c16c:	4798      	blx	r3
 801c16e:	4603      	mov	r3, r0
}
 801c170:	4618      	mov	r0, r3
 801c172:	3720      	adds	r7, #32
 801c174:	46bd      	mov	sp, r7
 801c176:	bd80      	pop	{r7, pc}
 801c178:	08025c18 	.word	0x08025c18
 801c17c:	08025c4c 	.word	0x08025c4c
 801c180:	08025c58 	.word	0x08025c58
 801c184:	08025c80 	.word	0x08025c80
 801c188:	2000f616 	.word	0x2000f616
 801c18c:	08026270 	.word	0x08026270

0801c190 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c190:	b480      	push	{r7}
 801c192:	b085      	sub	sp, #20
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
 801c198:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1a4:	d002      	beq.n	801c1ac <ip4_addr_isbroadcast_u32+0x1c>
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d101      	bne.n	801c1b0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c1ac:	2301      	movs	r3, #1
 801c1ae:	e02a      	b.n	801c206 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c1b0:	683b      	ldr	r3, [r7, #0]
 801c1b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c1b6:	f003 0302 	and.w	r3, r3, #2
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d101      	bne.n	801c1c2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c1be:	2300      	movs	r3, #0
 801c1c0:	e021      	b.n	801c206 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c1c2:	683b      	ldr	r3, [r7, #0]
 801c1c4:	3304      	adds	r3, #4
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	687a      	ldr	r2, [r7, #4]
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d101      	bne.n	801c1d2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	e019      	b.n	801c206 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c1d2:	68fa      	ldr	r2, [r7, #12]
 801c1d4:	683b      	ldr	r3, [r7, #0]
 801c1d6:	3304      	adds	r3, #4
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	405a      	eors	r2, r3
 801c1dc:	683b      	ldr	r3, [r7, #0]
 801c1de:	3308      	adds	r3, #8
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	4013      	ands	r3, r2
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d10d      	bne.n	801c204 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c1e8:	683b      	ldr	r3, [r7, #0]
 801c1ea:	3308      	adds	r3, #8
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	43da      	mvns	r2, r3
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c1f4:	683b      	ldr	r3, [r7, #0]
 801c1f6:	3308      	adds	r3, #8
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c1fc:	429a      	cmp	r2, r3
 801c1fe:	d101      	bne.n	801c204 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c200:	2301      	movs	r3, #1
 801c202:	e000      	b.n	801c206 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c204:	2300      	movs	r3, #0
  }
}
 801c206:	4618      	mov	r0, r3
 801c208:	3714      	adds	r7, #20
 801c20a:	46bd      	mov	sp, r7
 801c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c210:	4770      	bx	lr
	...

0801c214 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801c214:	b580      	push	{r7, lr}
 801c216:	b08a      	sub	sp, #40	@ 0x28
 801c218:	af00      	add	r7, sp, #0
 801c21a:	6078      	str	r0, [r7, #4]
 801c21c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801c21e:	f107 030c 	add.w	r3, r7, #12
 801c222:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	781b      	ldrb	r3, [r3, #0]
 801c228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801c22c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c230:	3301      	adds	r3, #1
 801c232:	4a89      	ldr	r2, [pc, #548]	@ (801c458 <ip4addr_aton+0x244>)
 801c234:	4413      	add	r3, r2
 801c236:	781b      	ldrb	r3, [r3, #0]
 801c238:	f003 0304 	and.w	r3, r3, #4
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d101      	bne.n	801c244 <ip4addr_aton+0x30>
      return 0;
 801c240:	2300      	movs	r3, #0
 801c242:	e105      	b.n	801c450 <ip4addr_aton+0x23c>
    }
    val = 0;
 801c244:	2300      	movs	r3, #0
 801c246:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801c248:	230a      	movs	r3, #10
 801c24a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801c24e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c252:	2b30      	cmp	r3, #48	@ 0x30
 801c254:	d11c      	bne.n	801c290 <ip4addr_aton+0x7c>
      c = *++cp;
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	3301      	adds	r3, #1
 801c25a:	607b      	str	r3, [r7, #4]
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	781b      	ldrb	r3, [r3, #0]
 801c260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801c264:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c268:	2b78      	cmp	r3, #120	@ 0x78
 801c26a:	d003      	beq.n	801c274 <ip4addr_aton+0x60>
 801c26c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c270:	2b58      	cmp	r3, #88	@ 0x58
 801c272:	d10a      	bne.n	801c28a <ip4addr_aton+0x76>
        base = 16;
 801c274:	2310      	movs	r3, #16
 801c276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	3301      	adds	r3, #1
 801c27e:	607b      	str	r3, [r7, #4]
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	781b      	ldrb	r3, [r3, #0]
 801c284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801c288:	e002      	b.n	801c290 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801c28a:	2308      	movs	r3, #8
 801c28c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801c290:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c294:	3301      	adds	r3, #1
 801c296:	4a70      	ldr	r2, [pc, #448]	@ (801c458 <ip4addr_aton+0x244>)
 801c298:	4413      	add	r3, r2
 801c29a:	781b      	ldrb	r3, [r3, #0]
 801c29c:	f003 0304 	and.w	r3, r3, #4
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d011      	beq.n	801c2c8 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801c2a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c2aa:	fb03 f202 	mul.w	r2, r3, r2
 801c2ae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c2b2:	4413      	add	r3, r2
 801c2b4:	3b30      	subs	r3, #48	@ 0x30
 801c2b6:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	3301      	adds	r3, #1
 801c2bc:	607b      	str	r3, [r7, #4]
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	781b      	ldrb	r3, [r3, #0]
 801c2c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801c2c6:	e7e3      	b.n	801c290 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801c2c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c2cc:	2b10      	cmp	r3, #16
 801c2ce:	d127      	bne.n	801c320 <ip4addr_aton+0x10c>
 801c2d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c2d4:	3301      	adds	r3, #1
 801c2d6:	4a60      	ldr	r2, [pc, #384]	@ (801c458 <ip4addr_aton+0x244>)
 801c2d8:	4413      	add	r3, r2
 801c2da:	781b      	ldrb	r3, [r3, #0]
 801c2dc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d01d      	beq.n	801c320 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801c2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2e6:	011b      	lsls	r3, r3, #4
 801c2e8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c2ec:	f102 010a 	add.w	r1, r2, #10
 801c2f0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c2f4:	3201      	adds	r2, #1
 801c2f6:	4858      	ldr	r0, [pc, #352]	@ (801c458 <ip4addr_aton+0x244>)
 801c2f8:	4402      	add	r2, r0
 801c2fa:	7812      	ldrb	r2, [r2, #0]
 801c2fc:	f002 0203 	and.w	r2, r2, #3
 801c300:	2a02      	cmp	r2, #2
 801c302:	d101      	bne.n	801c308 <ip4addr_aton+0xf4>
 801c304:	2261      	movs	r2, #97	@ 0x61
 801c306:	e000      	b.n	801c30a <ip4addr_aton+0xf6>
 801c308:	2241      	movs	r2, #65	@ 0x41
 801c30a:	1a8a      	subs	r2, r1, r2
 801c30c:	4313      	orrs	r3, r2
 801c30e:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	3301      	adds	r3, #1
 801c314:	607b      	str	r3, [r7, #4]
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	781b      	ldrb	r3, [r3, #0]
 801c31a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801c31e:	e7b7      	b.n	801c290 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801c320:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c324:	2b2e      	cmp	r3, #46	@ 0x2e
 801c326:	d114      	bne.n	801c352 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801c328:	f107 030c 	add.w	r3, r7, #12
 801c32c:	330c      	adds	r3, #12
 801c32e:	69fa      	ldr	r2, [r7, #28]
 801c330:	429a      	cmp	r2, r3
 801c332:	d301      	bcc.n	801c338 <ip4addr_aton+0x124>
        return 0;
 801c334:	2300      	movs	r3, #0
 801c336:	e08b      	b.n	801c450 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801c338:	69fb      	ldr	r3, [r7, #28]
 801c33a:	1d1a      	adds	r2, r3, #4
 801c33c:	61fa      	str	r2, [r7, #28]
 801c33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c340:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	3301      	adds	r3, #1
 801c346:	607b      	str	r3, [r7, #4]
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	781b      	ldrb	r3, [r3, #0]
 801c34c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801c350:	e76c      	b.n	801c22c <ip4addr_aton+0x18>
    } else {
      break;
 801c352:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801c354:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d00b      	beq.n	801c374 <ip4addr_aton+0x160>
 801c35c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c360:	3301      	adds	r3, #1
 801c362:	4a3d      	ldr	r2, [pc, #244]	@ (801c458 <ip4addr_aton+0x244>)
 801c364:	4413      	add	r3, r2
 801c366:	781b      	ldrb	r3, [r3, #0]
 801c368:	f003 0308 	and.w	r3, r3, #8
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d101      	bne.n	801c374 <ip4addr_aton+0x160>
    return 0;
 801c370:	2300      	movs	r3, #0
 801c372:	e06d      	b.n	801c450 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801c374:	f107 030c 	add.w	r3, r7, #12
 801c378:	69fa      	ldr	r2, [r7, #28]
 801c37a:	1ad3      	subs	r3, r2, r3
 801c37c:	109b      	asrs	r3, r3, #2
 801c37e:	3301      	adds	r3, #1
 801c380:	2b04      	cmp	r3, #4
 801c382:	d853      	bhi.n	801c42c <ip4addr_aton+0x218>
 801c384:	a201      	add	r2, pc, #4	@ (adr r2, 801c38c <ip4addr_aton+0x178>)
 801c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c38a:	bf00      	nop
 801c38c:	0801c3a1 	.word	0x0801c3a1
 801c390:	0801c43b 	.word	0x0801c43b
 801c394:	0801c3a5 	.word	0x0801c3a5
 801c398:	0801c3c7 	.word	0x0801c3c7
 801c39c:	0801c3f5 	.word	0x0801c3f5

    case 0:
      return 0;       /* initial nondigit */
 801c3a0:	2300      	movs	r3, #0
 801c3a2:	e055      	b.n	801c450 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801c3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c3aa:	d301      	bcc.n	801c3b0 <ip4addr_aton+0x19c>
        return 0;
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	e04f      	b.n	801c450 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	2bff      	cmp	r3, #255	@ 0xff
 801c3b4:	d901      	bls.n	801c3ba <ip4addr_aton+0x1a6>
        return 0;
 801c3b6:	2300      	movs	r3, #0
 801c3b8:	e04a      	b.n	801c450 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	061b      	lsls	r3, r3, #24
 801c3be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3c0:	4313      	orrs	r3, r2
 801c3c2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801c3c4:	e03a      	b.n	801c43c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801c3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c3cc:	d301      	bcc.n	801c3d2 <ip4addr_aton+0x1be>
        return 0;
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	e03e      	b.n	801c450 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	2bff      	cmp	r3, #255	@ 0xff
 801c3d6:	d802      	bhi.n	801c3de <ip4addr_aton+0x1ca>
 801c3d8:	693b      	ldr	r3, [r7, #16]
 801c3da:	2bff      	cmp	r3, #255	@ 0xff
 801c3dc:	d901      	bls.n	801c3e2 <ip4addr_aton+0x1ce>
        return 0;
 801c3de:	2300      	movs	r3, #0
 801c3e0:	e036      	b.n	801c450 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	061a      	lsls	r2, r3, #24
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	041b      	lsls	r3, r3, #16
 801c3ea:	4313      	orrs	r3, r2
 801c3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3ee:	4313      	orrs	r3, r2
 801c3f0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801c3f2:	e023      	b.n	801c43c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801c3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3f6:	2bff      	cmp	r3, #255	@ 0xff
 801c3f8:	d901      	bls.n	801c3fe <ip4addr_aton+0x1ea>
        return 0;
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	e028      	b.n	801c450 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	2bff      	cmp	r3, #255	@ 0xff
 801c402:	d805      	bhi.n	801c410 <ip4addr_aton+0x1fc>
 801c404:	693b      	ldr	r3, [r7, #16]
 801c406:	2bff      	cmp	r3, #255	@ 0xff
 801c408:	d802      	bhi.n	801c410 <ip4addr_aton+0x1fc>
 801c40a:	697b      	ldr	r3, [r7, #20]
 801c40c:	2bff      	cmp	r3, #255	@ 0xff
 801c40e:	d901      	bls.n	801c414 <ip4addr_aton+0x200>
        return 0;
 801c410:	2300      	movs	r3, #0
 801c412:	e01d      	b.n	801c450 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	061a      	lsls	r2, r3, #24
 801c418:	693b      	ldr	r3, [r7, #16]
 801c41a:	041b      	lsls	r3, r3, #16
 801c41c:	431a      	orrs	r2, r3
 801c41e:	697b      	ldr	r3, [r7, #20]
 801c420:	021b      	lsls	r3, r3, #8
 801c422:	4313      	orrs	r3, r2
 801c424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c426:	4313      	orrs	r3, r2
 801c428:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801c42a:	e007      	b.n	801c43c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801c42c:	4b0b      	ldr	r3, [pc, #44]	@ (801c45c <ip4addr_aton+0x248>)
 801c42e:	22f9      	movs	r2, #249	@ 0xf9
 801c430:	490b      	ldr	r1, [pc, #44]	@ (801c460 <ip4addr_aton+0x24c>)
 801c432:	480c      	ldr	r0, [pc, #48]	@ (801c464 <ip4addr_aton+0x250>)
 801c434:	f002 f9f0 	bl	801e818 <iprintf>
      break;
 801c438:	e000      	b.n	801c43c <ip4addr_aton+0x228>
      break;
 801c43a:	bf00      	nop
  }
  if (addr) {
 801c43c:	683b      	ldr	r3, [r7, #0]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d005      	beq.n	801c44e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801c442:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c444:	f7f3 f9f7 	bl	800f836 <lwip_htonl>
 801c448:	4602      	mov	r2, r0
 801c44a:	683b      	ldr	r3, [r7, #0]
 801c44c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801c44e:	2301      	movs	r3, #1
}
 801c450:	4618      	mov	r0, r3
 801c452:	3728      	adds	r7, #40	@ 0x28
 801c454:	46bd      	mov	sp, r7
 801c456:	bd80      	pop	{r7, pc}
 801c458:	0802631a 	.word	0x0802631a
 801c45c:	08025cb0 	.word	0x08025cb0
 801c460:	08025cec 	.word	0x08025cec
 801c464:	08025cf8 	.word	0x08025cf8

0801c468 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b084      	sub	sp, #16
 801c46c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c46e:	2300      	movs	r3, #0
 801c470:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c472:	4b12      	ldr	r3, [pc, #72]	@ (801c4bc <ip_reass_tmr+0x54>)
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c478:	e018      	b.n	801c4ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	7fdb      	ldrb	r3, [r3, #31]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d00b      	beq.n	801c49a <ip_reass_tmr+0x32>
      r->timer--;
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	7fdb      	ldrb	r3, [r3, #31]
 801c486:	3b01      	subs	r3, #1
 801c488:	b2da      	uxtb	r2, r3
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	60fb      	str	r3, [r7, #12]
 801c498:	e008      	b.n	801c4ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c4a4:	68b9      	ldr	r1, [r7, #8]
 801c4a6:	6878      	ldr	r0, [r7, #4]
 801c4a8:	f000 f80a 	bl	801c4c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d1e3      	bne.n	801c47a <ip_reass_tmr+0x12>
    }
  }
}
 801c4b2:	bf00      	nop
 801c4b4:	bf00      	nop
 801c4b6:	3710      	adds	r7, #16
 801c4b8:	46bd      	mov	sp, r7
 801c4ba:	bd80      	pop	{r7, pc}
 801c4bc:	2000f618 	.word	0x2000f618

0801c4c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b088      	sub	sp, #32
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	6078      	str	r0, [r7, #4]
 801c4c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c4ce:	683a      	ldr	r2, [r7, #0]
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	429a      	cmp	r2, r3
 801c4d4:	d105      	bne.n	801c4e2 <ip_reass_free_complete_datagram+0x22>
 801c4d6:	4b45      	ldr	r3, [pc, #276]	@ (801c5ec <ip_reass_free_complete_datagram+0x12c>)
 801c4d8:	22ab      	movs	r2, #171	@ 0xab
 801c4da:	4945      	ldr	r1, [pc, #276]	@ (801c5f0 <ip_reass_free_complete_datagram+0x130>)
 801c4dc:	4845      	ldr	r0, [pc, #276]	@ (801c5f4 <ip_reass_free_complete_datagram+0x134>)
 801c4de:	f002 f99b 	bl	801e818 <iprintf>
  if (prev != NULL) {
 801c4e2:	683b      	ldr	r3, [r7, #0]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d00a      	beq.n	801c4fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c4e8:	683b      	ldr	r3, [r7, #0]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	687a      	ldr	r2, [r7, #4]
 801c4ee:	429a      	cmp	r2, r3
 801c4f0:	d005      	beq.n	801c4fe <ip_reass_free_complete_datagram+0x3e>
 801c4f2:	4b3e      	ldr	r3, [pc, #248]	@ (801c5ec <ip_reass_free_complete_datagram+0x12c>)
 801c4f4:	22ad      	movs	r2, #173	@ 0xad
 801c4f6:	4940      	ldr	r1, [pc, #256]	@ (801c5f8 <ip_reass_free_complete_datagram+0x138>)
 801c4f8:	483e      	ldr	r0, [pc, #248]	@ (801c5f4 <ip_reass_free_complete_datagram+0x134>)
 801c4fa:	f002 f98d 	bl	801e818 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	685b      	ldr	r3, [r3, #4]
 801c502:	685b      	ldr	r3, [r3, #4]
 801c504:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c506:	697b      	ldr	r3, [r7, #20]
 801c508:	889b      	ldrh	r3, [r3, #4]
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d12a      	bne.n	801c566 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	685b      	ldr	r3, [r3, #4]
 801c514:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c516:	697b      	ldr	r3, [r7, #20]
 801c518:	681a      	ldr	r2, [r3, #0]
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	6858      	ldr	r0, [r3, #4]
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	3308      	adds	r3, #8
 801c526:	2214      	movs	r2, #20
 801c528:	4619      	mov	r1, r3
 801c52a:	f002 fb16 	bl	801eb5a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c52e:	2101      	movs	r1, #1
 801c530:	69b8      	ldr	r0, [r7, #24]
 801c532:	f7ff faff 	bl	801bb34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c536:	69b8      	ldr	r0, [r7, #24]
 801c538:	f7f5 f914 	bl	8011764 <pbuf_clen>
 801c53c:	4603      	mov	r3, r0
 801c53e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c540:	8bfa      	ldrh	r2, [r7, #30]
 801c542:	8a7b      	ldrh	r3, [r7, #18]
 801c544:	4413      	add	r3, r2
 801c546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c54a:	db05      	blt.n	801c558 <ip_reass_free_complete_datagram+0x98>
 801c54c:	4b27      	ldr	r3, [pc, #156]	@ (801c5ec <ip_reass_free_complete_datagram+0x12c>)
 801c54e:	22bc      	movs	r2, #188	@ 0xbc
 801c550:	492a      	ldr	r1, [pc, #168]	@ (801c5fc <ip_reass_free_complete_datagram+0x13c>)
 801c552:	4828      	ldr	r0, [pc, #160]	@ (801c5f4 <ip_reass_free_complete_datagram+0x134>)
 801c554:	f002 f960 	bl	801e818 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c558:	8bfa      	ldrh	r2, [r7, #30]
 801c55a:	8a7b      	ldrh	r3, [r7, #18]
 801c55c:	4413      	add	r3, r2
 801c55e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c560:	69b8      	ldr	r0, [r7, #24]
 801c562:	f7f5 f871 	bl	8011648 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	685b      	ldr	r3, [r3, #4]
 801c56a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c56c:	e01f      	b.n	801c5ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c56e:	69bb      	ldr	r3, [r7, #24]
 801c570:	685b      	ldr	r3, [r3, #4]
 801c572:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c574:	69bb      	ldr	r3, [r7, #24]
 801c576:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c578:	697b      	ldr	r3, [r7, #20]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c57e:	68f8      	ldr	r0, [r7, #12]
 801c580:	f7f5 f8f0 	bl	8011764 <pbuf_clen>
 801c584:	4603      	mov	r3, r0
 801c586:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c588:	8bfa      	ldrh	r2, [r7, #30]
 801c58a:	8a7b      	ldrh	r3, [r7, #18]
 801c58c:	4413      	add	r3, r2
 801c58e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c592:	db05      	blt.n	801c5a0 <ip_reass_free_complete_datagram+0xe0>
 801c594:	4b15      	ldr	r3, [pc, #84]	@ (801c5ec <ip_reass_free_complete_datagram+0x12c>)
 801c596:	22cc      	movs	r2, #204	@ 0xcc
 801c598:	4918      	ldr	r1, [pc, #96]	@ (801c5fc <ip_reass_free_complete_datagram+0x13c>)
 801c59a:	4816      	ldr	r0, [pc, #88]	@ (801c5f4 <ip_reass_free_complete_datagram+0x134>)
 801c59c:	f002 f93c 	bl	801e818 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c5a0:	8bfa      	ldrh	r2, [r7, #30]
 801c5a2:	8a7b      	ldrh	r3, [r7, #18]
 801c5a4:	4413      	add	r3, r2
 801c5a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c5a8:	68f8      	ldr	r0, [r7, #12]
 801c5aa:	f7f5 f84d 	bl	8011648 <pbuf_free>
  while (p != NULL) {
 801c5ae:	69bb      	ldr	r3, [r7, #24]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d1dc      	bne.n	801c56e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c5b4:	6839      	ldr	r1, [r7, #0]
 801c5b6:	6878      	ldr	r0, [r7, #4]
 801c5b8:	f000 f8c2 	bl	801c740 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c5bc:	4b10      	ldr	r3, [pc, #64]	@ (801c600 <ip_reass_free_complete_datagram+0x140>)
 801c5be:	881b      	ldrh	r3, [r3, #0]
 801c5c0:	8bfa      	ldrh	r2, [r7, #30]
 801c5c2:	429a      	cmp	r2, r3
 801c5c4:	d905      	bls.n	801c5d2 <ip_reass_free_complete_datagram+0x112>
 801c5c6:	4b09      	ldr	r3, [pc, #36]	@ (801c5ec <ip_reass_free_complete_datagram+0x12c>)
 801c5c8:	22d2      	movs	r2, #210	@ 0xd2
 801c5ca:	490e      	ldr	r1, [pc, #56]	@ (801c604 <ip_reass_free_complete_datagram+0x144>)
 801c5cc:	4809      	ldr	r0, [pc, #36]	@ (801c5f4 <ip_reass_free_complete_datagram+0x134>)
 801c5ce:	f002 f923 	bl	801e818 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c5d2:	4b0b      	ldr	r3, [pc, #44]	@ (801c600 <ip_reass_free_complete_datagram+0x140>)
 801c5d4:	881a      	ldrh	r2, [r3, #0]
 801c5d6:	8bfb      	ldrh	r3, [r7, #30]
 801c5d8:	1ad3      	subs	r3, r2, r3
 801c5da:	b29a      	uxth	r2, r3
 801c5dc:	4b08      	ldr	r3, [pc, #32]	@ (801c600 <ip_reass_free_complete_datagram+0x140>)
 801c5de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c5e0:	8bfb      	ldrh	r3, [r7, #30]
}
 801c5e2:	4618      	mov	r0, r3
 801c5e4:	3720      	adds	r7, #32
 801c5e6:	46bd      	mov	sp, r7
 801c5e8:	bd80      	pop	{r7, pc}
 801c5ea:	bf00      	nop
 801c5ec:	08025d20 	.word	0x08025d20
 801c5f0:	08025d5c 	.word	0x08025d5c
 801c5f4:	08025d68 	.word	0x08025d68
 801c5f8:	08025d90 	.word	0x08025d90
 801c5fc:	08025da4 	.word	0x08025da4
 801c600:	2000f61c 	.word	0x2000f61c
 801c604:	08025dc4 	.word	0x08025dc4

0801c608 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c608:	b580      	push	{r7, lr}
 801c60a:	b08a      	sub	sp, #40	@ 0x28
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
 801c610:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c612:	2300      	movs	r3, #0
 801c614:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c616:	2300      	movs	r3, #0
 801c618:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c61a:	2300      	movs	r3, #0
 801c61c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c61e:	2300      	movs	r3, #0
 801c620:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c622:	2300      	movs	r3, #0
 801c624:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c626:	4b28      	ldr	r3, [pc, #160]	@ (801c6c8 <ip_reass_remove_oldest_datagram+0xc0>)
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c62c:	e030      	b.n	801c690 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c630:	695a      	ldr	r2, [r3, #20]
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	68db      	ldr	r3, [r3, #12]
 801c636:	429a      	cmp	r2, r3
 801c638:	d10c      	bne.n	801c654 <ip_reass_remove_oldest_datagram+0x4c>
 801c63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c63c:	699a      	ldr	r2, [r3, #24]
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	691b      	ldr	r3, [r3, #16]
 801c642:	429a      	cmp	r2, r3
 801c644:	d106      	bne.n	801c654 <ip_reass_remove_oldest_datagram+0x4c>
 801c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c648:	899a      	ldrh	r2, [r3, #12]
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	889b      	ldrh	r3, [r3, #4]
 801c64e:	b29b      	uxth	r3, r3
 801c650:	429a      	cmp	r2, r3
 801c652:	d014      	beq.n	801c67e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c654:	693b      	ldr	r3, [r7, #16]
 801c656:	3301      	adds	r3, #1
 801c658:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c65a:	6a3b      	ldr	r3, [r7, #32]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d104      	bne.n	801c66a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c662:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c664:	69fb      	ldr	r3, [r7, #28]
 801c666:	61bb      	str	r3, [r7, #24]
 801c668:	e009      	b.n	801c67e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c66c:	7fda      	ldrb	r2, [r3, #31]
 801c66e:	6a3b      	ldr	r3, [r7, #32]
 801c670:	7fdb      	ldrb	r3, [r3, #31]
 801c672:	429a      	cmp	r2, r3
 801c674:	d803      	bhi.n	801c67e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c678:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c67a:	69fb      	ldr	r3, [r7, #28]
 801c67c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d001      	beq.n	801c68a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c688:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c692:	2b00      	cmp	r3, #0
 801c694:	d1cb      	bne.n	801c62e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c696:	6a3b      	ldr	r3, [r7, #32]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d008      	beq.n	801c6ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c69c:	69b9      	ldr	r1, [r7, #24]
 801c69e:	6a38      	ldr	r0, [r7, #32]
 801c6a0:	f7ff ff0e 	bl	801c4c0 <ip_reass_free_complete_datagram>
 801c6a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c6a6:	697a      	ldr	r2, [r7, #20]
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	4413      	add	r3, r2
 801c6ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c6ae:	697a      	ldr	r2, [r7, #20]
 801c6b0:	683b      	ldr	r3, [r7, #0]
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	da02      	bge.n	801c6bc <ip_reass_remove_oldest_datagram+0xb4>
 801c6b6:	693b      	ldr	r3, [r7, #16]
 801c6b8:	2b01      	cmp	r3, #1
 801c6ba:	dcac      	bgt.n	801c616 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c6bc:	697b      	ldr	r3, [r7, #20]
}
 801c6be:	4618      	mov	r0, r3
 801c6c0:	3728      	adds	r7, #40	@ 0x28
 801c6c2:	46bd      	mov	sp, r7
 801c6c4:	bd80      	pop	{r7, pc}
 801c6c6:	bf00      	nop
 801c6c8:	2000f618 	.word	0x2000f618

0801c6cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b084      	sub	sp, #16
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
 801c6d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c6d6:	2004      	movs	r0, #4
 801c6d8:	f7f4 f85e 	bl	8010798 <memp_malloc>
 801c6dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d110      	bne.n	801c706 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c6e4:	6839      	ldr	r1, [r7, #0]
 801c6e6:	6878      	ldr	r0, [r7, #4]
 801c6e8:	f7ff ff8e 	bl	801c608 <ip_reass_remove_oldest_datagram>
 801c6ec:	4602      	mov	r2, r0
 801c6ee:	683b      	ldr	r3, [r7, #0]
 801c6f0:	4293      	cmp	r3, r2
 801c6f2:	dc03      	bgt.n	801c6fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c6f4:	2004      	movs	r0, #4
 801c6f6:	f7f4 f84f 	bl	8010798 <memp_malloc>
 801c6fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d101      	bne.n	801c706 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c702:	2300      	movs	r3, #0
 801c704:	e016      	b.n	801c734 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c706:	2220      	movs	r2, #32
 801c708:	2100      	movs	r1, #0
 801c70a:	68f8      	ldr	r0, [r7, #12]
 801c70c:	f002 f923 	bl	801e956 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	220f      	movs	r2, #15
 801c714:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c716:	4b09      	ldr	r3, [pc, #36]	@ (801c73c <ip_reass_enqueue_new_datagram+0x70>)
 801c718:	681a      	ldr	r2, [r3, #0]
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c71e:	4a07      	ldr	r2, [pc, #28]	@ (801c73c <ip_reass_enqueue_new_datagram+0x70>)
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	3308      	adds	r3, #8
 801c728:	2214      	movs	r2, #20
 801c72a:	6879      	ldr	r1, [r7, #4]
 801c72c:	4618      	mov	r0, r3
 801c72e:	f002 fa14 	bl	801eb5a <memcpy>
  return ipr;
 801c732:	68fb      	ldr	r3, [r7, #12]
}
 801c734:	4618      	mov	r0, r3
 801c736:	3710      	adds	r7, #16
 801c738:	46bd      	mov	sp, r7
 801c73a:	bd80      	pop	{r7, pc}
 801c73c:	2000f618 	.word	0x2000f618

0801c740 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c740:	b580      	push	{r7, lr}
 801c742:	b082      	sub	sp, #8
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
 801c748:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c74a:	4b10      	ldr	r3, [pc, #64]	@ (801c78c <ip_reass_dequeue_datagram+0x4c>)
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	687a      	ldr	r2, [r7, #4]
 801c750:	429a      	cmp	r2, r3
 801c752:	d104      	bne.n	801c75e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	4a0c      	ldr	r2, [pc, #48]	@ (801c78c <ip_reass_dequeue_datagram+0x4c>)
 801c75a:	6013      	str	r3, [r2, #0]
 801c75c:	e00d      	b.n	801c77a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c75e:	683b      	ldr	r3, [r7, #0]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d106      	bne.n	801c772 <ip_reass_dequeue_datagram+0x32>
 801c764:	4b0a      	ldr	r3, [pc, #40]	@ (801c790 <ip_reass_dequeue_datagram+0x50>)
 801c766:	f240 1245 	movw	r2, #325	@ 0x145
 801c76a:	490a      	ldr	r1, [pc, #40]	@ (801c794 <ip_reass_dequeue_datagram+0x54>)
 801c76c:	480a      	ldr	r0, [pc, #40]	@ (801c798 <ip_reass_dequeue_datagram+0x58>)
 801c76e:	f002 f853 	bl	801e818 <iprintf>
    prev->next = ipr->next;
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	681a      	ldr	r2, [r3, #0]
 801c776:	683b      	ldr	r3, [r7, #0]
 801c778:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c77a:	6879      	ldr	r1, [r7, #4]
 801c77c:	2004      	movs	r0, #4
 801c77e:	f7f4 f881 	bl	8010884 <memp_free>
}
 801c782:	bf00      	nop
 801c784:	3708      	adds	r7, #8
 801c786:	46bd      	mov	sp, r7
 801c788:	bd80      	pop	{r7, pc}
 801c78a:	bf00      	nop
 801c78c:	2000f618 	.word	0x2000f618
 801c790:	08025d20 	.word	0x08025d20
 801c794:	08025de8 	.word	0x08025de8
 801c798:	08025d68 	.word	0x08025d68

0801c79c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c79c:	b580      	push	{r7, lr}
 801c79e:	b08c      	sub	sp, #48	@ 0x30
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	60f8      	str	r0, [r7, #12]
 801c7a4:	60b9      	str	r1, [r7, #8]
 801c7a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c7ac:	2301      	movs	r3, #1
 801c7ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c7b0:	68bb      	ldr	r3, [r7, #8]
 801c7b2:	685b      	ldr	r3, [r3, #4]
 801c7b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c7b6:	69fb      	ldr	r3, [r7, #28]
 801c7b8:	885b      	ldrh	r3, [r3, #2]
 801c7ba:	b29b      	uxth	r3, r3
 801c7bc:	4618      	mov	r0, r3
 801c7be:	f7f3 f825 	bl	800f80c <lwip_htons>
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c7c6:	69fb      	ldr	r3, [r7, #28]
 801c7c8:	781b      	ldrb	r3, [r3, #0]
 801c7ca:	f003 030f 	and.w	r3, r3, #15
 801c7ce:	b2db      	uxtb	r3, r3
 801c7d0:	009b      	lsls	r3, r3, #2
 801c7d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c7d4:	7e7b      	ldrb	r3, [r7, #25]
 801c7d6:	b29b      	uxth	r3, r3
 801c7d8:	8b7a      	ldrh	r2, [r7, #26]
 801c7da:	429a      	cmp	r2, r3
 801c7dc:	d202      	bcs.n	801c7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c7de:	f04f 33ff 	mov.w	r3, #4294967295
 801c7e2:	e135      	b.n	801ca50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c7e4:	7e7b      	ldrb	r3, [r7, #25]
 801c7e6:	b29b      	uxth	r3, r3
 801c7e8:	8b7a      	ldrh	r2, [r7, #26]
 801c7ea:	1ad3      	subs	r3, r2, r3
 801c7ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c7ee:	69fb      	ldr	r3, [r7, #28]
 801c7f0:	88db      	ldrh	r3, [r3, #6]
 801c7f2:	b29b      	uxth	r3, r3
 801c7f4:	4618      	mov	r0, r3
 801c7f6:	f7f3 f809 	bl	800f80c <lwip_htons>
 801c7fa:	4603      	mov	r3, r0
 801c7fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c800:	b29b      	uxth	r3, r3
 801c802:	00db      	lsls	r3, r3, #3
 801c804:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c806:	68bb      	ldr	r3, [r7, #8]
 801c808:	685b      	ldr	r3, [r3, #4]
 801c80a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c80e:	2200      	movs	r2, #0
 801c810:	701a      	strb	r2, [r3, #0]
 801c812:	2200      	movs	r2, #0
 801c814:	705a      	strb	r2, [r3, #1]
 801c816:	2200      	movs	r2, #0
 801c818:	709a      	strb	r2, [r3, #2]
 801c81a:	2200      	movs	r2, #0
 801c81c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c820:	8afa      	ldrh	r2, [r7, #22]
 801c822:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c824:	8afa      	ldrh	r2, [r7, #22]
 801c826:	8b7b      	ldrh	r3, [r7, #26]
 801c828:	4413      	add	r3, r2
 801c82a:	b29a      	uxth	r2, r3
 801c82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c82e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c832:	88db      	ldrh	r3, [r3, #6]
 801c834:	b29b      	uxth	r3, r3
 801c836:	8afa      	ldrh	r2, [r7, #22]
 801c838:	429a      	cmp	r2, r3
 801c83a:	d902      	bls.n	801c842 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c83c:	f04f 33ff 	mov.w	r3, #4294967295
 801c840:	e106      	b.n	801ca50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	685b      	ldr	r3, [r3, #4]
 801c846:	627b      	str	r3, [r7, #36]	@ 0x24
 801c848:	e068      	b.n	801c91c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c84c:	685b      	ldr	r3, [r3, #4]
 801c84e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c852:	889b      	ldrh	r3, [r3, #4]
 801c854:	b29a      	uxth	r2, r3
 801c856:	693b      	ldr	r3, [r7, #16]
 801c858:	889b      	ldrh	r3, [r3, #4]
 801c85a:	b29b      	uxth	r3, r3
 801c85c:	429a      	cmp	r2, r3
 801c85e:	d235      	bcs.n	801c8cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c864:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d020      	beq.n	801c8ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c86e:	889b      	ldrh	r3, [r3, #4]
 801c870:	b29a      	uxth	r2, r3
 801c872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c874:	88db      	ldrh	r3, [r3, #6]
 801c876:	b29b      	uxth	r3, r3
 801c878:	429a      	cmp	r2, r3
 801c87a:	d307      	bcc.n	801c88c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c87e:	88db      	ldrh	r3, [r3, #6]
 801c880:	b29a      	uxth	r2, r3
 801c882:	693b      	ldr	r3, [r7, #16]
 801c884:	889b      	ldrh	r3, [r3, #4]
 801c886:	b29b      	uxth	r3, r3
 801c888:	429a      	cmp	r2, r3
 801c88a:	d902      	bls.n	801c892 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c88c:	f04f 33ff 	mov.w	r3, #4294967295
 801c890:	e0de      	b.n	801ca50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c894:	68ba      	ldr	r2, [r7, #8]
 801c896:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c89a:	88db      	ldrh	r3, [r3, #6]
 801c89c:	b29a      	uxth	r2, r3
 801c89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8a0:	889b      	ldrh	r3, [r3, #4]
 801c8a2:	b29b      	uxth	r3, r3
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	d03d      	beq.n	801c924 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c8ac:	e03a      	b.n	801c924 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8b0:	88db      	ldrh	r3, [r3, #6]
 801c8b2:	b29a      	uxth	r2, r3
 801c8b4:	693b      	ldr	r3, [r7, #16]
 801c8b6:	889b      	ldrh	r3, [r3, #4]
 801c8b8:	b29b      	uxth	r3, r3
 801c8ba:	429a      	cmp	r2, r3
 801c8bc:	d902      	bls.n	801c8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c8be:	f04f 33ff 	mov.w	r3, #4294967295
 801c8c2:	e0c5      	b.n	801ca50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	68ba      	ldr	r2, [r7, #8]
 801c8c8:	605a      	str	r2, [r3, #4]
      break;
 801c8ca:	e02b      	b.n	801c924 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8ce:	889b      	ldrh	r3, [r3, #4]
 801c8d0:	b29a      	uxth	r2, r3
 801c8d2:	693b      	ldr	r3, [r7, #16]
 801c8d4:	889b      	ldrh	r3, [r3, #4]
 801c8d6:	b29b      	uxth	r3, r3
 801c8d8:	429a      	cmp	r2, r3
 801c8da:	d102      	bne.n	801c8e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c8dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c8e0:	e0b6      	b.n	801ca50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8e4:	889b      	ldrh	r3, [r3, #4]
 801c8e6:	b29a      	uxth	r2, r3
 801c8e8:	693b      	ldr	r3, [r7, #16]
 801c8ea:	88db      	ldrh	r3, [r3, #6]
 801c8ec:	b29b      	uxth	r3, r3
 801c8ee:	429a      	cmp	r2, r3
 801c8f0:	d202      	bcs.n	801c8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c8f2:	f04f 33ff 	mov.w	r3, #4294967295
 801c8f6:	e0ab      	b.n	801ca50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d009      	beq.n	801c912 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c900:	88db      	ldrh	r3, [r3, #6]
 801c902:	b29a      	uxth	r2, r3
 801c904:	693b      	ldr	r3, [r7, #16]
 801c906:	889b      	ldrh	r3, [r3, #4]
 801c908:	b29b      	uxth	r3, r3
 801c90a:	429a      	cmp	r2, r3
 801c90c:	d001      	beq.n	801c912 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c90e:	2300      	movs	r3, #0
 801c910:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c912:	693b      	ldr	r3, [r7, #16]
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c918:	693b      	ldr	r3, [r7, #16]
 801c91a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d193      	bne.n	801c84a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c922:	e000      	b.n	801c926 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c924:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d12d      	bne.n	801c988 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d01c      	beq.n	801c96c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c934:	88db      	ldrh	r3, [r3, #6]
 801c936:	b29a      	uxth	r2, r3
 801c938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c93a:	889b      	ldrh	r3, [r3, #4]
 801c93c:	b29b      	uxth	r3, r3
 801c93e:	429a      	cmp	r2, r3
 801c940:	d906      	bls.n	801c950 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c942:	4b45      	ldr	r3, [pc, #276]	@ (801ca58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c944:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c948:	4944      	ldr	r1, [pc, #272]	@ (801ca5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c94a:	4845      	ldr	r0, [pc, #276]	@ (801ca60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c94c:	f001 ff64 	bl	801e818 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c952:	68ba      	ldr	r2, [r7, #8]
 801c954:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c958:	88db      	ldrh	r3, [r3, #6]
 801c95a:	b29a      	uxth	r2, r3
 801c95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c95e:	889b      	ldrh	r3, [r3, #4]
 801c960:	b29b      	uxth	r3, r3
 801c962:	429a      	cmp	r2, r3
 801c964:	d010      	beq.n	801c988 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c966:	2300      	movs	r3, #0
 801c968:	623b      	str	r3, [r7, #32]
 801c96a:	e00d      	b.n	801c988 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	685b      	ldr	r3, [r3, #4]
 801c970:	2b00      	cmp	r3, #0
 801c972:	d006      	beq.n	801c982 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c974:	4b38      	ldr	r3, [pc, #224]	@ (801ca58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c976:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c97a:	493a      	ldr	r1, [pc, #232]	@ (801ca64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c97c:	4838      	ldr	r0, [pc, #224]	@ (801ca60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c97e:	f001 ff4b 	bl	801e818 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	68ba      	ldr	r2, [r7, #8]
 801c986:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d105      	bne.n	801c99a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	7f9b      	ldrb	r3, [r3, #30]
 801c992:	f003 0301 	and.w	r3, r3, #1
 801c996:	2b00      	cmp	r3, #0
 801c998:	d059      	beq.n	801ca4e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c99a:	6a3b      	ldr	r3, [r7, #32]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d04f      	beq.n	801ca40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	685b      	ldr	r3, [r3, #4]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d006      	beq.n	801c9b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	685b      	ldr	r3, [r3, #4]
 801c9ac:	685b      	ldr	r3, [r3, #4]
 801c9ae:	889b      	ldrh	r3, [r3, #4]
 801c9b0:	b29b      	uxth	r3, r3
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d002      	beq.n	801c9bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	623b      	str	r3, [r7, #32]
 801c9ba:	e041      	b.n	801ca40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9be:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c9c6:	e012      	b.n	801c9ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9ca:	685b      	ldr	r3, [r3, #4]
 801c9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9d0:	88db      	ldrh	r3, [r3, #6]
 801c9d2:	b29a      	uxth	r2, r3
 801c9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9d6:	889b      	ldrh	r3, [r3, #4]
 801c9d8:	b29b      	uxth	r3, r3
 801c9da:	429a      	cmp	r2, r3
 801c9dc:	d002      	beq.n	801c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c9de:	2300      	movs	r3, #0
 801c9e0:	623b      	str	r3, [r7, #32]
            break;
 801c9e2:	e007      	b.n	801c9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d1e9      	bne.n	801c9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c9f4:	6a3b      	ldr	r3, [r7, #32]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d022      	beq.n	801ca40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	685b      	ldr	r3, [r3, #4]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d106      	bne.n	801ca10 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ca02:	4b15      	ldr	r3, [pc, #84]	@ (801ca58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ca04:	f240 12df 	movw	r2, #479	@ 0x1df
 801ca08:	4917      	ldr	r1, [pc, #92]	@ (801ca68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ca0a:	4815      	ldr	r0, [pc, #84]	@ (801ca60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ca0c:	f001 ff04 	bl	801e818 <iprintf>
          LWIP_ASSERT("sanity check",
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	685b      	ldr	r3, [r3, #4]
 801ca14:	685b      	ldr	r3, [r3, #4]
 801ca16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ca18:	429a      	cmp	r2, r3
 801ca1a:	d106      	bne.n	801ca2a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ca1c:	4b0e      	ldr	r3, [pc, #56]	@ (801ca58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ca1e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801ca22:	4911      	ldr	r1, [pc, #68]	@ (801ca68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ca24:	480e      	ldr	r0, [pc, #56]	@ (801ca60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ca26:	f001 fef7 	bl	801e818 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ca2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d006      	beq.n	801ca40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ca32:	4b09      	ldr	r3, [pc, #36]	@ (801ca58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ca34:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801ca38:	490c      	ldr	r1, [pc, #48]	@ (801ca6c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ca3a:	4809      	ldr	r0, [pc, #36]	@ (801ca60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ca3c:	f001 feec 	bl	801e818 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ca40:	6a3b      	ldr	r3, [r7, #32]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	bf14      	ite	ne
 801ca46:	2301      	movne	r3, #1
 801ca48:	2300      	moveq	r3, #0
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	e000      	b.n	801ca50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ca4e:	2300      	movs	r3, #0
}
 801ca50:	4618      	mov	r0, r3
 801ca52:	3730      	adds	r7, #48	@ 0x30
 801ca54:	46bd      	mov	sp, r7
 801ca56:	bd80      	pop	{r7, pc}
 801ca58:	08025d20 	.word	0x08025d20
 801ca5c:	08025e04 	.word	0x08025e04
 801ca60:	08025d68 	.word	0x08025d68
 801ca64:	08025e24 	.word	0x08025e24
 801ca68:	08025e5c 	.word	0x08025e5c
 801ca6c:	08025e6c 	.word	0x08025e6c

0801ca70 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b08e      	sub	sp, #56	@ 0x38
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	685b      	ldr	r3, [r3, #4]
 801ca7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ca7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca80:	781b      	ldrb	r3, [r3, #0]
 801ca82:	f003 030f 	and.w	r3, r3, #15
 801ca86:	b2db      	uxtb	r3, r3
 801ca88:	009b      	lsls	r3, r3, #2
 801ca8a:	b2db      	uxtb	r3, r3
 801ca8c:	2b14      	cmp	r3, #20
 801ca8e:	f040 8171 	bne.w	801cd74 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ca92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca94:	88db      	ldrh	r3, [r3, #6]
 801ca96:	b29b      	uxth	r3, r3
 801ca98:	4618      	mov	r0, r3
 801ca9a:	f7f2 feb7 	bl	800f80c <lwip_htons>
 801ca9e:	4603      	mov	r3, r0
 801caa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801caa4:	b29b      	uxth	r3, r3
 801caa6:	00db      	lsls	r3, r3, #3
 801caa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801caaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801caac:	885b      	ldrh	r3, [r3, #2]
 801caae:	b29b      	uxth	r3, r3
 801cab0:	4618      	mov	r0, r3
 801cab2:	f7f2 feab 	bl	800f80c <lwip_htons>
 801cab6:	4603      	mov	r3, r0
 801cab8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801caba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cabc:	781b      	ldrb	r3, [r3, #0]
 801cabe:	f003 030f 	and.w	r3, r3, #15
 801cac2:	b2db      	uxtb	r3, r3
 801cac4:	009b      	lsls	r3, r3, #2
 801cac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801caca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801cace:	b29b      	uxth	r3, r3
 801cad0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cad2:	429a      	cmp	r2, r3
 801cad4:	f0c0 8150 	bcc.w	801cd78 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801cad8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801cadc:	b29b      	uxth	r3, r3
 801cade:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cae0:	1ad3      	subs	r3, r2, r3
 801cae2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801cae4:	6878      	ldr	r0, [r7, #4]
 801cae6:	f7f4 fe3d 	bl	8011764 <pbuf_clen>
 801caea:	4603      	mov	r3, r0
 801caec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801caee:	4b8c      	ldr	r3, [pc, #560]	@ (801cd20 <ip4_reass+0x2b0>)
 801caf0:	881b      	ldrh	r3, [r3, #0]
 801caf2:	461a      	mov	r2, r3
 801caf4:	8c3b      	ldrh	r3, [r7, #32]
 801caf6:	4413      	add	r3, r2
 801caf8:	2b0a      	cmp	r3, #10
 801cafa:	dd10      	ble.n	801cb1e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801cafc:	8c3b      	ldrh	r3, [r7, #32]
 801cafe:	4619      	mov	r1, r3
 801cb00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cb02:	f7ff fd81 	bl	801c608 <ip_reass_remove_oldest_datagram>
 801cb06:	4603      	mov	r3, r0
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	f000 8137 	beq.w	801cd7c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801cb0e:	4b84      	ldr	r3, [pc, #528]	@ (801cd20 <ip4_reass+0x2b0>)
 801cb10:	881b      	ldrh	r3, [r3, #0]
 801cb12:	461a      	mov	r2, r3
 801cb14:	8c3b      	ldrh	r3, [r7, #32]
 801cb16:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801cb18:	2b0a      	cmp	r3, #10
 801cb1a:	f300 812f 	bgt.w	801cd7c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801cb1e:	4b81      	ldr	r3, [pc, #516]	@ (801cd24 <ip4_reass+0x2b4>)
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	633b      	str	r3, [r7, #48]	@ 0x30
 801cb24:	e015      	b.n	801cb52 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb28:	695a      	ldr	r2, [r3, #20]
 801cb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb2c:	68db      	ldr	r3, [r3, #12]
 801cb2e:	429a      	cmp	r2, r3
 801cb30:	d10c      	bne.n	801cb4c <ip4_reass+0xdc>
 801cb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb34:	699a      	ldr	r2, [r3, #24]
 801cb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb38:	691b      	ldr	r3, [r3, #16]
 801cb3a:	429a      	cmp	r2, r3
 801cb3c:	d106      	bne.n	801cb4c <ip4_reass+0xdc>
 801cb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb40:	899a      	ldrh	r2, [r3, #12]
 801cb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb44:	889b      	ldrh	r3, [r3, #4]
 801cb46:	b29b      	uxth	r3, r3
 801cb48:	429a      	cmp	r2, r3
 801cb4a:	d006      	beq.n	801cb5a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801cb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	633b      	str	r3, [r7, #48]	@ 0x30
 801cb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d1e6      	bne.n	801cb26 <ip4_reass+0xb6>
 801cb58:	e000      	b.n	801cb5c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801cb5a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801cb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d109      	bne.n	801cb76 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801cb62:	8c3b      	ldrh	r3, [r7, #32]
 801cb64:	4619      	mov	r1, r3
 801cb66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cb68:	f7ff fdb0 	bl	801c6cc <ip_reass_enqueue_new_datagram>
 801cb6c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d11c      	bne.n	801cbae <ip4_reass+0x13e>
      goto nullreturn;
 801cb74:	e105      	b.n	801cd82 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb78:	88db      	ldrh	r3, [r3, #6]
 801cb7a:	b29b      	uxth	r3, r3
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	f7f2 fe45 	bl	800f80c <lwip_htons>
 801cb82:	4603      	mov	r3, r0
 801cb84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d110      	bne.n	801cbae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801cb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb8e:	89db      	ldrh	r3, [r3, #14]
 801cb90:	4618      	mov	r0, r3
 801cb92:	f7f2 fe3b 	bl	800f80c <lwip_htons>
 801cb96:	4603      	mov	r3, r0
 801cb98:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d006      	beq.n	801cbae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801cba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cba2:	3308      	adds	r3, #8
 801cba4:	2214      	movs	r2, #20
 801cba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801cba8:	4618      	mov	r0, r3
 801cbaa:	f001 ffd6 	bl	801eb5a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801cbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbb0:	88db      	ldrh	r3, [r3, #6]
 801cbb2:	b29b      	uxth	r3, r3
 801cbb4:	f003 0320 	and.w	r3, r3, #32
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	bf0c      	ite	eq
 801cbbc:	2301      	moveq	r3, #1
 801cbbe:	2300      	movne	r3, #0
 801cbc0:	b2db      	uxtb	r3, r3
 801cbc2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801cbc4:	69fb      	ldr	r3, [r7, #28]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d00e      	beq.n	801cbe8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801cbca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cbcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbce:	4413      	add	r3, r2
 801cbd0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801cbd2:	8b7a      	ldrh	r2, [r7, #26]
 801cbd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cbd6:	429a      	cmp	r2, r3
 801cbd8:	f0c0 80a0 	bcc.w	801cd1c <ip4_reass+0x2ac>
 801cbdc:	8b7b      	ldrh	r3, [r7, #26]
 801cbde:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801cbe2:	4293      	cmp	r3, r2
 801cbe4:	f200 809a 	bhi.w	801cd1c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801cbe8:	69fa      	ldr	r2, [r7, #28]
 801cbea:	6879      	ldr	r1, [r7, #4]
 801cbec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cbee:	f7ff fdd5 	bl	801c79c <ip_reass_chain_frag_into_datagram_and_validate>
 801cbf2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801cbf4:	697b      	ldr	r3, [r7, #20]
 801cbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbfa:	f000 809b 	beq.w	801cd34 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801cbfe:	4b48      	ldr	r3, [pc, #288]	@ (801cd20 <ip4_reass+0x2b0>)
 801cc00:	881a      	ldrh	r2, [r3, #0]
 801cc02:	8c3b      	ldrh	r3, [r7, #32]
 801cc04:	4413      	add	r3, r2
 801cc06:	b29a      	uxth	r2, r3
 801cc08:	4b45      	ldr	r3, [pc, #276]	@ (801cd20 <ip4_reass+0x2b0>)
 801cc0a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801cc0c:	69fb      	ldr	r3, [r7, #28]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d00d      	beq.n	801cc2e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801cc12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cc14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc16:	4413      	add	r3, r2
 801cc18:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc1c:	8a7a      	ldrh	r2, [r7, #18]
 801cc1e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801cc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc22:	7f9b      	ldrb	r3, [r3, #30]
 801cc24:	f043 0301 	orr.w	r3, r3, #1
 801cc28:	b2da      	uxtb	r2, r3
 801cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc2c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801cc2e:	697b      	ldr	r3, [r7, #20]
 801cc30:	2b01      	cmp	r3, #1
 801cc32:	d171      	bne.n	801cd18 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801cc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc36:	8b9b      	ldrh	r3, [r3, #28]
 801cc38:	3314      	adds	r3, #20
 801cc3a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801cc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc3e:	685b      	ldr	r3, [r3, #4]
 801cc40:	685b      	ldr	r3, [r3, #4]
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801cc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc48:	685b      	ldr	r3, [r3, #4]
 801cc4a:	685b      	ldr	r3, [r3, #4]
 801cc4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc50:	3308      	adds	r3, #8
 801cc52:	2214      	movs	r2, #20
 801cc54:	4619      	mov	r1, r3
 801cc56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cc58:	f001 ff7f 	bl	801eb5a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801cc5c:	8a3b      	ldrh	r3, [r7, #16]
 801cc5e:	4618      	mov	r0, r3
 801cc60:	f7f2 fdd4 	bl	800f80c <lwip_htons>
 801cc64:	4603      	mov	r3, r0
 801cc66:	461a      	mov	r2, r3
 801cc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc6a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801cc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc6e:	2200      	movs	r2, #0
 801cc70:	719a      	strb	r2, [r3, #6]
 801cc72:	2200      	movs	r2, #0
 801cc74:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801cc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc78:	2200      	movs	r2, #0
 801cc7a:	729a      	strb	r2, [r3, #10]
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801cc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc82:	685b      	ldr	r3, [r3, #4]
 801cc84:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801cc86:	e00d      	b.n	801cca4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801cc88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cc8a:	685b      	ldr	r3, [r3, #4]
 801cc8c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801cc8e:	2114      	movs	r1, #20
 801cc90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801cc92:	f7f4 fc21 	bl	80114d8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801cc96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cc98:	6878      	ldr	r0, [r7, #4]
 801cc9a:	f7f4 fda3 	bl	80117e4 <pbuf_cat>
      r = iprh->next_pbuf;
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801cca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d1ee      	bne.n	801cc88 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801ccaa:	4b1e      	ldr	r3, [pc, #120]	@ (801cd24 <ip4_reass+0x2b4>)
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ccb0:	429a      	cmp	r2, r3
 801ccb2:	d102      	bne.n	801ccba <ip4_reass+0x24a>
      ipr_prev = NULL;
 801ccb4:	2300      	movs	r3, #0
 801ccb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ccb8:	e010      	b.n	801ccdc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ccba:	4b1a      	ldr	r3, [pc, #104]	@ (801cd24 <ip4_reass+0x2b4>)
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ccc0:	e007      	b.n	801ccd2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801ccc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ccc8:	429a      	cmp	r2, r3
 801ccca:	d006      	beq.n	801ccda <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ccd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d1f4      	bne.n	801ccc2 <ip4_reass+0x252>
 801ccd8:	e000      	b.n	801ccdc <ip4_reass+0x26c>
          break;
 801ccda:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ccdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ccde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cce0:	f7ff fd2e 	bl	801c740 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801cce4:	6878      	ldr	r0, [r7, #4]
 801cce6:	f7f4 fd3d 	bl	8011764 <pbuf_clen>
 801ccea:	4603      	mov	r3, r0
 801ccec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ccee:	4b0c      	ldr	r3, [pc, #48]	@ (801cd20 <ip4_reass+0x2b0>)
 801ccf0:	881b      	ldrh	r3, [r3, #0]
 801ccf2:	8c3a      	ldrh	r2, [r7, #32]
 801ccf4:	429a      	cmp	r2, r3
 801ccf6:	d906      	bls.n	801cd06 <ip4_reass+0x296>
 801ccf8:	4b0b      	ldr	r3, [pc, #44]	@ (801cd28 <ip4_reass+0x2b8>)
 801ccfa:	f240 229b 	movw	r2, #667	@ 0x29b
 801ccfe:	490b      	ldr	r1, [pc, #44]	@ (801cd2c <ip4_reass+0x2bc>)
 801cd00:	480b      	ldr	r0, [pc, #44]	@ (801cd30 <ip4_reass+0x2c0>)
 801cd02:	f001 fd89 	bl	801e818 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801cd06:	4b06      	ldr	r3, [pc, #24]	@ (801cd20 <ip4_reass+0x2b0>)
 801cd08:	881a      	ldrh	r2, [r3, #0]
 801cd0a:	8c3b      	ldrh	r3, [r7, #32]
 801cd0c:	1ad3      	subs	r3, r2, r3
 801cd0e:	b29a      	uxth	r2, r3
 801cd10:	4b03      	ldr	r3, [pc, #12]	@ (801cd20 <ip4_reass+0x2b0>)
 801cd12:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	e038      	b.n	801cd8a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801cd18:	2300      	movs	r3, #0
 801cd1a:	e036      	b.n	801cd8a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801cd1c:	bf00      	nop
 801cd1e:	e00a      	b.n	801cd36 <ip4_reass+0x2c6>
 801cd20:	2000f61c 	.word	0x2000f61c
 801cd24:	2000f618 	.word	0x2000f618
 801cd28:	08025d20 	.word	0x08025d20
 801cd2c:	08025e90 	.word	0x08025e90
 801cd30:	08025d68 	.word	0x08025d68
    goto nullreturn_ipr;
 801cd34:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801cd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d106      	bne.n	801cd4a <ip4_reass+0x2da>
 801cd3c:	4b15      	ldr	r3, [pc, #84]	@ (801cd94 <ip4_reass+0x324>)
 801cd3e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801cd42:	4915      	ldr	r1, [pc, #84]	@ (801cd98 <ip4_reass+0x328>)
 801cd44:	4815      	ldr	r0, [pc, #84]	@ (801cd9c <ip4_reass+0x32c>)
 801cd46:	f001 fd67 	bl	801e818 <iprintf>
  if (ipr->p == NULL) {
 801cd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd4c:	685b      	ldr	r3, [r3, #4]
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d116      	bne.n	801cd80 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801cd52:	4b13      	ldr	r3, [pc, #76]	@ (801cda0 <ip4_reass+0x330>)
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cd58:	429a      	cmp	r2, r3
 801cd5a:	d006      	beq.n	801cd6a <ip4_reass+0x2fa>
 801cd5c:	4b0d      	ldr	r3, [pc, #52]	@ (801cd94 <ip4_reass+0x324>)
 801cd5e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801cd62:	4910      	ldr	r1, [pc, #64]	@ (801cda4 <ip4_reass+0x334>)
 801cd64:	480d      	ldr	r0, [pc, #52]	@ (801cd9c <ip4_reass+0x32c>)
 801cd66:	f001 fd57 	bl	801e818 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801cd6a:	2100      	movs	r1, #0
 801cd6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cd6e:	f7ff fce7 	bl	801c740 <ip_reass_dequeue_datagram>
 801cd72:	e006      	b.n	801cd82 <ip4_reass+0x312>
    goto nullreturn;
 801cd74:	bf00      	nop
 801cd76:	e004      	b.n	801cd82 <ip4_reass+0x312>
    goto nullreturn;
 801cd78:	bf00      	nop
 801cd7a:	e002      	b.n	801cd82 <ip4_reass+0x312>
      goto nullreturn;
 801cd7c:	bf00      	nop
 801cd7e:	e000      	b.n	801cd82 <ip4_reass+0x312>
  }

nullreturn:
 801cd80:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801cd82:	6878      	ldr	r0, [r7, #4]
 801cd84:	f7f4 fc60 	bl	8011648 <pbuf_free>
  return NULL;
 801cd88:	2300      	movs	r3, #0
}
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	3738      	adds	r7, #56	@ 0x38
 801cd8e:	46bd      	mov	sp, r7
 801cd90:	bd80      	pop	{r7, pc}
 801cd92:	bf00      	nop
 801cd94:	08025d20 	.word	0x08025d20
 801cd98:	08025eac 	.word	0x08025eac
 801cd9c:	08025d68 	.word	0x08025d68
 801cda0:	2000f618 	.word	0x2000f618
 801cda4:	08025eb8 	.word	0x08025eb8

0801cda8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801cdac:	2005      	movs	r0, #5
 801cdae:	f7f3 fcf3 	bl	8010798 <memp_malloc>
 801cdb2:	4603      	mov	r3, r0
}
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	bd80      	pop	{r7, pc}

0801cdb8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801cdb8:	b580      	push	{r7, lr}
 801cdba:	b082      	sub	sp, #8
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d106      	bne.n	801cdd4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801cdc6:	4b07      	ldr	r3, [pc, #28]	@ (801cde4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801cdc8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801cdcc:	4906      	ldr	r1, [pc, #24]	@ (801cde8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801cdce:	4807      	ldr	r0, [pc, #28]	@ (801cdec <ip_frag_free_pbuf_custom_ref+0x34>)
 801cdd0:	f001 fd22 	bl	801e818 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801cdd4:	6879      	ldr	r1, [r7, #4]
 801cdd6:	2005      	movs	r0, #5
 801cdd8:	f7f3 fd54 	bl	8010884 <memp_free>
}
 801cddc:	bf00      	nop
 801cdde:	3708      	adds	r7, #8
 801cde0:	46bd      	mov	sp, r7
 801cde2:	bd80      	pop	{r7, pc}
 801cde4:	08025d20 	.word	0x08025d20
 801cde8:	08025ed8 	.word	0x08025ed8
 801cdec:	08025d68 	.word	0x08025d68

0801cdf0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801cdf0:	b580      	push	{r7, lr}
 801cdf2:	b084      	sub	sp, #16
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d106      	bne.n	801ce10 <ipfrag_free_pbuf_custom+0x20>
 801ce02:	4b11      	ldr	r3, [pc, #68]	@ (801ce48 <ipfrag_free_pbuf_custom+0x58>)
 801ce04:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801ce08:	4910      	ldr	r1, [pc, #64]	@ (801ce4c <ipfrag_free_pbuf_custom+0x5c>)
 801ce0a:	4811      	ldr	r0, [pc, #68]	@ (801ce50 <ipfrag_free_pbuf_custom+0x60>)
 801ce0c:	f001 fd04 	bl	801e818 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ce10:	68fa      	ldr	r2, [r7, #12]
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	429a      	cmp	r2, r3
 801ce16:	d006      	beq.n	801ce26 <ipfrag_free_pbuf_custom+0x36>
 801ce18:	4b0b      	ldr	r3, [pc, #44]	@ (801ce48 <ipfrag_free_pbuf_custom+0x58>)
 801ce1a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801ce1e:	490d      	ldr	r1, [pc, #52]	@ (801ce54 <ipfrag_free_pbuf_custom+0x64>)
 801ce20:	480b      	ldr	r0, [pc, #44]	@ (801ce50 <ipfrag_free_pbuf_custom+0x60>)
 801ce22:	f001 fcf9 	bl	801e818 <iprintf>
  if (pcr->original != NULL) {
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	695b      	ldr	r3, [r3, #20]
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d004      	beq.n	801ce38 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	695b      	ldr	r3, [r3, #20]
 801ce32:	4618      	mov	r0, r3
 801ce34:	f7f4 fc08 	bl	8011648 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ce38:	68f8      	ldr	r0, [r7, #12]
 801ce3a:	f7ff ffbd 	bl	801cdb8 <ip_frag_free_pbuf_custom_ref>
}
 801ce3e:	bf00      	nop
 801ce40:	3710      	adds	r7, #16
 801ce42:	46bd      	mov	sp, r7
 801ce44:	bd80      	pop	{r7, pc}
 801ce46:	bf00      	nop
 801ce48:	08025d20 	.word	0x08025d20
 801ce4c:	08025ee4 	.word	0x08025ee4
 801ce50:	08025d68 	.word	0x08025d68
 801ce54:	08025ef0 	.word	0x08025ef0

0801ce58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ce58:	b580      	push	{r7, lr}
 801ce5a:	b094      	sub	sp, #80	@ 0x50
 801ce5c:	af02      	add	r7, sp, #8
 801ce5e:	60f8      	str	r0, [r7, #12]
 801ce60:	60b9      	str	r1, [r7, #8]
 801ce62:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ce64:	2300      	movs	r3, #0
 801ce66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ce6a:	68bb      	ldr	r3, [r7, #8]
 801ce6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ce6e:	3b14      	subs	r3, #20
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	da00      	bge.n	801ce76 <ip4_frag+0x1e>
 801ce74:	3307      	adds	r3, #7
 801ce76:	10db      	asrs	r3, r3, #3
 801ce78:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ce7a:	2314      	movs	r3, #20
 801ce7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ce7e:	68fb      	ldr	r3, [r7, #12]
 801ce80:	685b      	ldr	r3, [r3, #4]
 801ce82:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ce84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce86:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ce88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce8a:	781b      	ldrb	r3, [r3, #0]
 801ce8c:	f003 030f 	and.w	r3, r3, #15
 801ce90:	b2db      	uxtb	r3, r3
 801ce92:	009b      	lsls	r3, r3, #2
 801ce94:	b2db      	uxtb	r3, r3
 801ce96:	2b14      	cmp	r3, #20
 801ce98:	d002      	beq.n	801cea0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ce9a:	f06f 0305 	mvn.w	r3, #5
 801ce9e:	e110      	b.n	801d0c2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801cea0:	68fb      	ldr	r3, [r7, #12]
 801cea2:	895b      	ldrh	r3, [r3, #10]
 801cea4:	2b13      	cmp	r3, #19
 801cea6:	d809      	bhi.n	801cebc <ip4_frag+0x64>
 801cea8:	4b88      	ldr	r3, [pc, #544]	@ (801d0cc <ip4_frag+0x274>)
 801ceaa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ceae:	4988      	ldr	r1, [pc, #544]	@ (801d0d0 <ip4_frag+0x278>)
 801ceb0:	4888      	ldr	r0, [pc, #544]	@ (801d0d4 <ip4_frag+0x27c>)
 801ceb2:	f001 fcb1 	bl	801e818 <iprintf>
 801ceb6:	f06f 0305 	mvn.w	r3, #5
 801ceba:	e102      	b.n	801d0c2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801cebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cebe:	88db      	ldrh	r3, [r3, #6]
 801cec0:	b29b      	uxth	r3, r3
 801cec2:	4618      	mov	r0, r3
 801cec4:	f7f2 fca2 	bl	800f80c <lwip_htons>
 801cec8:	4603      	mov	r3, r0
 801ceca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801cecc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cece:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ced2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ced6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ced8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cedc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	891b      	ldrh	r3, [r3, #8]
 801cee2:	3b14      	subs	r3, #20
 801cee4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801cee8:	e0e1      	b.n	801d0ae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ceea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ceec:	00db      	lsls	r3, r3, #3
 801ceee:	b29b      	uxth	r3, r3
 801cef0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cef4:	4293      	cmp	r3, r2
 801cef6:	bf28      	it	cs
 801cef8:	4613      	movcs	r3, r2
 801cefa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801cefc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cf00:	2114      	movs	r1, #20
 801cf02:	200e      	movs	r0, #14
 801cf04:	f7f4 f88a 	bl	801101c <pbuf_alloc>
 801cf08:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	f000 80d5 	beq.w	801d0bc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801cf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf14:	895b      	ldrh	r3, [r3, #10]
 801cf16:	2b13      	cmp	r3, #19
 801cf18:	d806      	bhi.n	801cf28 <ip4_frag+0xd0>
 801cf1a:	4b6c      	ldr	r3, [pc, #432]	@ (801d0cc <ip4_frag+0x274>)
 801cf1c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801cf20:	496d      	ldr	r1, [pc, #436]	@ (801d0d8 <ip4_frag+0x280>)
 801cf22:	486c      	ldr	r0, [pc, #432]	@ (801d0d4 <ip4_frag+0x27c>)
 801cf24:	f001 fc78 	bl	801e818 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801cf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf2a:	685b      	ldr	r3, [r3, #4]
 801cf2c:	2214      	movs	r2, #20
 801cf2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cf30:	4618      	mov	r0, r3
 801cf32:	f001 fe12 	bl	801eb5a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cf36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf38:	685b      	ldr	r3, [r3, #4]
 801cf3a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cf3c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cf3e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cf42:	e064      	b.n	801d00e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801cf44:	68fb      	ldr	r3, [r7, #12]
 801cf46:	895a      	ldrh	r2, [r3, #10]
 801cf48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cf4a:	1ad3      	subs	r3, r2, r3
 801cf4c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	895b      	ldrh	r3, [r3, #10]
 801cf52:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cf54:	429a      	cmp	r2, r3
 801cf56:	d906      	bls.n	801cf66 <ip4_frag+0x10e>
 801cf58:	4b5c      	ldr	r3, [pc, #368]	@ (801d0cc <ip4_frag+0x274>)
 801cf5a:	f240 322d 	movw	r2, #813	@ 0x32d
 801cf5e:	495f      	ldr	r1, [pc, #380]	@ (801d0dc <ip4_frag+0x284>)
 801cf60:	485c      	ldr	r0, [pc, #368]	@ (801d0d4 <ip4_frag+0x27c>)
 801cf62:	f001 fc59 	bl	801e818 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cf66:	8bfa      	ldrh	r2, [r7, #30]
 801cf68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cf6c:	4293      	cmp	r3, r2
 801cf6e:	bf28      	it	cs
 801cf70:	4613      	movcs	r3, r2
 801cf72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cf76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d105      	bne.n	801cf8a <ip4_frag+0x132>
        poff = 0;
 801cf7e:	2300      	movs	r3, #0
 801cf80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	60fb      	str	r3, [r7, #12]
        continue;
 801cf88:	e041      	b.n	801d00e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cf8a:	f7ff ff0d 	bl	801cda8 <ip_frag_alloc_pbuf_custom_ref>
 801cf8e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cf90:	69bb      	ldr	r3, [r7, #24]
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d103      	bne.n	801cf9e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cf96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cf98:	f7f4 fb56 	bl	8011648 <pbuf_free>
        goto memerr;
 801cf9c:	e08f      	b.n	801d0be <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cf9e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cfa4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cfa6:	4413      	add	r3, r2
 801cfa8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cfac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cfb0:	9201      	str	r2, [sp, #4]
 801cfb2:	9300      	str	r3, [sp, #0]
 801cfb4:	4603      	mov	r3, r0
 801cfb6:	2241      	movs	r2, #65	@ 0x41
 801cfb8:	2000      	movs	r0, #0
 801cfba:	f7f4 f959 	bl	8011270 <pbuf_alloced_custom>
 801cfbe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cfc0:	697b      	ldr	r3, [r7, #20]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d106      	bne.n	801cfd4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cfc6:	69b8      	ldr	r0, [r7, #24]
 801cfc8:	f7ff fef6 	bl	801cdb8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cfcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cfce:	f7f4 fb3b 	bl	8011648 <pbuf_free>
        goto memerr;
 801cfd2:	e074      	b.n	801d0be <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cfd4:	68f8      	ldr	r0, [r7, #12]
 801cfd6:	f7f4 fbdd 	bl	8011794 <pbuf_ref>
      pcr->original = p;
 801cfda:	69bb      	ldr	r3, [r7, #24]
 801cfdc:	68fa      	ldr	r2, [r7, #12]
 801cfde:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cfe0:	69bb      	ldr	r3, [r7, #24]
 801cfe2:	4a3f      	ldr	r2, [pc, #252]	@ (801d0e0 <ip4_frag+0x288>)
 801cfe4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cfe6:	6979      	ldr	r1, [r7, #20]
 801cfe8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cfea:	f7f4 fbfb 	bl	80117e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cfee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cff2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cff6:	1ad3      	subs	r3, r2, r3
 801cff8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cffc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d000:	2b00      	cmp	r3, #0
 801d002:	d004      	beq.n	801d00e <ip4_frag+0x1b6>
        poff = 0;
 801d004:	2300      	movs	r3, #0
 801d006:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d00e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d012:	2b00      	cmp	r3, #0
 801d014:	d196      	bne.n	801cf44 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d016:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d018:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d01c:	4413      	add	r3, r2
 801d01e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d020:	68bb      	ldr	r3, [r7, #8]
 801d022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d024:	f1a3 0213 	sub.w	r2, r3, #19
 801d028:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d02c:	429a      	cmp	r2, r3
 801d02e:	bfcc      	ite	gt
 801d030:	2301      	movgt	r3, #1
 801d032:	2300      	movle	r3, #0
 801d034:	b2db      	uxtb	r3, r3
 801d036:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d038:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801d03c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d040:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801d042:	6a3b      	ldr	r3, [r7, #32]
 801d044:	2b00      	cmp	r3, #0
 801d046:	d002      	beq.n	801d04e <ip4_frag+0x1f6>
 801d048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d003      	beq.n	801d056 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d04e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d050:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801d054:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d056:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d058:	4618      	mov	r0, r3
 801d05a:	f7f2 fbd7 	bl	800f80c <lwip_htons>
 801d05e:	4603      	mov	r3, r0
 801d060:	461a      	mov	r2, r3
 801d062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d064:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d066:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d068:	3314      	adds	r3, #20
 801d06a:	b29b      	uxth	r3, r3
 801d06c:	4618      	mov	r0, r3
 801d06e:	f7f2 fbcd 	bl	800f80c <lwip_htons>
 801d072:	4603      	mov	r3, r0
 801d074:	461a      	mov	r2, r3
 801d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d078:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d07c:	2200      	movs	r2, #0
 801d07e:	729a      	strb	r2, [r3, #10]
 801d080:	2200      	movs	r2, #0
 801d082:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d084:	68bb      	ldr	r3, [r7, #8]
 801d086:	695b      	ldr	r3, [r3, #20]
 801d088:	687a      	ldr	r2, [r7, #4]
 801d08a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d08c:	68b8      	ldr	r0, [r7, #8]
 801d08e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d090:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d092:	f7f4 fad9 	bl	8011648 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d096:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d09a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d09c:	1ad3      	subs	r3, r2, r3
 801d09e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801d0a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801d0a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d0a8:	4413      	add	r3, r2
 801d0aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801d0ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	f47f af19 	bne.w	801ceea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d0b8:	2300      	movs	r3, #0
 801d0ba:	e002      	b.n	801d0c2 <ip4_frag+0x26a>
      goto memerr;
 801d0bc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d0be:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	3748      	adds	r7, #72	@ 0x48
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bd80      	pop	{r7, pc}
 801d0ca:	bf00      	nop
 801d0cc:	08025d20 	.word	0x08025d20
 801d0d0:	08025efc 	.word	0x08025efc
 801d0d4:	08025d68 	.word	0x08025d68
 801d0d8:	08025f18 	.word	0x08025f18
 801d0dc:	08025f38 	.word	0x08025f38
 801d0e0:	0801cdf1 	.word	0x0801cdf1

0801d0e4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b086      	sub	sp, #24
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
 801d0ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d0ee:	230e      	movs	r3, #14
 801d0f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	895b      	ldrh	r3, [r3, #10]
 801d0f6:	2b0e      	cmp	r3, #14
 801d0f8:	d96e      	bls.n	801d1d8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	7bdb      	ldrb	r3, [r3, #15]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d106      	bne.n	801d110 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d102:	683b      	ldr	r3, [r7, #0]
 801d104:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d108:	3301      	adds	r3, #1
 801d10a:	b2da      	uxtb	r2, r3
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	685b      	ldr	r3, [r3, #4]
 801d114:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d116:	693b      	ldr	r3, [r7, #16]
 801d118:	7b1a      	ldrb	r2, [r3, #12]
 801d11a:	7b5b      	ldrb	r3, [r3, #13]
 801d11c:	021b      	lsls	r3, r3, #8
 801d11e:	4313      	orrs	r3, r2
 801d120:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d122:	693b      	ldr	r3, [r7, #16]
 801d124:	781b      	ldrb	r3, [r3, #0]
 801d126:	f003 0301 	and.w	r3, r3, #1
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d023      	beq.n	801d176 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d12e:	693b      	ldr	r3, [r7, #16]
 801d130:	781b      	ldrb	r3, [r3, #0]
 801d132:	2b01      	cmp	r3, #1
 801d134:	d10f      	bne.n	801d156 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d136:	693b      	ldr	r3, [r7, #16]
 801d138:	785b      	ldrb	r3, [r3, #1]
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d11b      	bne.n	801d176 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d13e:	693b      	ldr	r3, [r7, #16]
 801d140:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d142:	2b5e      	cmp	r3, #94	@ 0x5e
 801d144:	d117      	bne.n	801d176 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	7b5b      	ldrb	r3, [r3, #13]
 801d14a:	f043 0310 	orr.w	r3, r3, #16
 801d14e:	b2da      	uxtb	r2, r3
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	735a      	strb	r2, [r3, #13]
 801d154:	e00f      	b.n	801d176 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d156:	693b      	ldr	r3, [r7, #16]
 801d158:	2206      	movs	r2, #6
 801d15a:	4928      	ldr	r1, [pc, #160]	@ (801d1fc <ethernet_input+0x118>)
 801d15c:	4618      	mov	r0, r3
 801d15e:	f001 fbd0 	bl	801e902 <memcmp>
 801d162:	4603      	mov	r3, r0
 801d164:	2b00      	cmp	r3, #0
 801d166:	d106      	bne.n	801d176 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	7b5b      	ldrb	r3, [r3, #13]
 801d16c:	f043 0308 	orr.w	r3, r3, #8
 801d170:	b2da      	uxtb	r2, r3
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d176:	89fb      	ldrh	r3, [r7, #14]
 801d178:	2b08      	cmp	r3, #8
 801d17a:	d003      	beq.n	801d184 <ethernet_input+0xa0>
 801d17c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801d180:	d014      	beq.n	801d1ac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d182:	e032      	b.n	801d1ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d184:	683b      	ldr	r3, [r7, #0]
 801d186:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d18a:	f003 0308 	and.w	r3, r3, #8
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d024      	beq.n	801d1dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d192:	8afb      	ldrh	r3, [r7, #22]
 801d194:	4619      	mov	r1, r3
 801d196:	6878      	ldr	r0, [r7, #4]
 801d198:	f7f4 f99e 	bl	80114d8 <pbuf_remove_header>
 801d19c:	4603      	mov	r3, r0
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d11e      	bne.n	801d1e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d1a2:	6839      	ldr	r1, [r7, #0]
 801d1a4:	6878      	ldr	r0, [r7, #4]
 801d1a6:	f7fe fdd9 	bl	801bd5c <ip4_input>
      break;
 801d1aa:	e013      	b.n	801d1d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d1ac:	683b      	ldr	r3, [r7, #0]
 801d1ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d1b2:	f003 0308 	and.w	r3, r3, #8
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d014      	beq.n	801d1e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d1ba:	8afb      	ldrh	r3, [r7, #22]
 801d1bc:	4619      	mov	r1, r3
 801d1be:	6878      	ldr	r0, [r7, #4]
 801d1c0:	f7f4 f98a 	bl	80114d8 <pbuf_remove_header>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d10e      	bne.n	801d1e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d1ca:	6839      	ldr	r1, [r7, #0]
 801d1cc:	6878      	ldr	r0, [r7, #4]
 801d1ce:	f7fd ff75 	bl	801b0bc <etharp_input>
      break;
 801d1d2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	e00c      	b.n	801d1f2 <ethernet_input+0x10e>
    goto free_and_return;
 801d1d8:	bf00      	nop
 801d1da:	e006      	b.n	801d1ea <ethernet_input+0x106>
        goto free_and_return;
 801d1dc:	bf00      	nop
 801d1de:	e004      	b.n	801d1ea <ethernet_input+0x106>
        goto free_and_return;
 801d1e0:	bf00      	nop
 801d1e2:	e002      	b.n	801d1ea <ethernet_input+0x106>
        goto free_and_return;
 801d1e4:	bf00      	nop
 801d1e6:	e000      	b.n	801d1ea <ethernet_input+0x106>
        goto free_and_return;
 801d1e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d1ea:	6878      	ldr	r0, [r7, #4]
 801d1ec:	f7f4 fa2c 	bl	8011648 <pbuf_free>
  return ERR_OK;
 801d1f0:	2300      	movs	r3, #0
}
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	3718      	adds	r7, #24
 801d1f6:	46bd      	mov	sp, r7
 801d1f8:	bd80      	pop	{r7, pc}
 801d1fa:	bf00      	nop
 801d1fc:	08026278 	.word	0x08026278

0801d200 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d200:	b580      	push	{r7, lr}
 801d202:	b086      	sub	sp, #24
 801d204:	af00      	add	r7, sp, #0
 801d206:	60f8      	str	r0, [r7, #12]
 801d208:	60b9      	str	r1, [r7, #8]
 801d20a:	607a      	str	r2, [r7, #4]
 801d20c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d20e:	8c3b      	ldrh	r3, [r7, #32]
 801d210:	4618      	mov	r0, r3
 801d212:	f7f2 fafb 	bl	800f80c <lwip_htons>
 801d216:	4603      	mov	r3, r0
 801d218:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d21a:	210e      	movs	r1, #14
 801d21c:	68b8      	ldr	r0, [r7, #8]
 801d21e:	f7f4 f94b 	bl	80114b8 <pbuf_add_header>
 801d222:	4603      	mov	r3, r0
 801d224:	2b00      	cmp	r3, #0
 801d226:	d125      	bne.n	801d274 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d228:	68bb      	ldr	r3, [r7, #8]
 801d22a:	685b      	ldr	r3, [r3, #4]
 801d22c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d22e:	693b      	ldr	r3, [r7, #16]
 801d230:	8afa      	ldrh	r2, [r7, #22]
 801d232:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d234:	693b      	ldr	r3, [r7, #16]
 801d236:	2206      	movs	r2, #6
 801d238:	6839      	ldr	r1, [r7, #0]
 801d23a:	4618      	mov	r0, r3
 801d23c:	f001 fc8d 	bl	801eb5a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d240:	693b      	ldr	r3, [r7, #16]
 801d242:	3306      	adds	r3, #6
 801d244:	2206      	movs	r2, #6
 801d246:	6879      	ldr	r1, [r7, #4]
 801d248:	4618      	mov	r0, r3
 801d24a:	f001 fc86 	bl	801eb5a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d254:	2b06      	cmp	r3, #6
 801d256:	d006      	beq.n	801d266 <ethernet_output+0x66>
 801d258:	4b0a      	ldr	r3, [pc, #40]	@ (801d284 <ethernet_output+0x84>)
 801d25a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d25e:	490a      	ldr	r1, [pc, #40]	@ (801d288 <ethernet_output+0x88>)
 801d260:	480a      	ldr	r0, [pc, #40]	@ (801d28c <ethernet_output+0x8c>)
 801d262:	f001 fad9 	bl	801e818 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	699b      	ldr	r3, [r3, #24]
 801d26a:	68b9      	ldr	r1, [r7, #8]
 801d26c:	68f8      	ldr	r0, [r7, #12]
 801d26e:	4798      	blx	r3
 801d270:	4603      	mov	r3, r0
 801d272:	e002      	b.n	801d27a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d274:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d276:	f06f 0301 	mvn.w	r3, #1
}
 801d27a:	4618      	mov	r0, r3
 801d27c:	3718      	adds	r7, #24
 801d27e:	46bd      	mov	sp, r7
 801d280:	bd80      	pop	{r7, pc}
 801d282:	bf00      	nop
 801d284:	08025f48 	.word	0x08025f48
 801d288:	08025f80 	.word	0x08025f80
 801d28c:	08025fb4 	.word	0x08025fb4

0801d290 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d290:	b580      	push	{r7, lr}
 801d292:	b082      	sub	sp, #8
 801d294:	af00      	add	r7, sp, #0
 801d296:	6078      	str	r0, [r7, #4]
 801d298:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801d29a:	683b      	ldr	r3, [r7, #0]
 801d29c:	2200      	movs	r2, #0
 801d29e:	2104      	movs	r1, #4
 801d2a0:	4618      	mov	r0, r3
 801d2a2:	f7eb fb0b 	bl	80088bc <osMessageQueueNew>
 801d2a6:	4602      	mov	r2, r0
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d102      	bne.n	801d2ba <sys_mbox_new+0x2a>
    return ERR_MEM;
 801d2b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d2b8:	e000      	b.n	801d2bc <sys_mbox_new+0x2c>

  return ERR_OK;
 801d2ba:	2300      	movs	r3, #0
}
 801d2bc:	4618      	mov	r0, r3
 801d2be:	3708      	adds	r7, #8
 801d2c0:	46bd      	mov	sp, r7
 801d2c2:	bd80      	pop	{r7, pc}

0801d2c4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801d2c4:	b580      	push	{r7, lr}
 801d2c6:	b082      	sub	sp, #8
 801d2c8:	af00      	add	r7, sp, #0
 801d2ca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	f7eb fc25 	bl	8008b20 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7eb fc40 	bl	8008b60 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801d2e0:	bf00      	nop
 801d2e2:	3708      	adds	r7, #8
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	bd80      	pop	{r7, pc}

0801d2e8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d2e8:	b580      	push	{r7, lr}
 801d2ea:	b084      	sub	sp, #16
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	6078      	str	r0, [r7, #4]
 801d2f0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	6818      	ldr	r0, [r3, #0]
 801d2f6:	4639      	mov	r1, r7
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	2200      	movs	r2, #0
 801d2fc:	f7eb fb52 	bl	80089a4 <osMessageQueuePut>
 801d300:	4603      	mov	r3, r0
 801d302:	2b00      	cmp	r3, #0
 801d304:	d102      	bne.n	801d30c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801d306:	2300      	movs	r3, #0
 801d308:	73fb      	strb	r3, [r7, #15]
 801d30a:	e001      	b.n	801d310 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d30c:	23ff      	movs	r3, #255	@ 0xff
 801d30e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d314:	4618      	mov	r0, r3
 801d316:	3710      	adds	r7, #16
 801d318:	46bd      	mov	sp, r7
 801d31a:	bd80      	pop	{r7, pc}

0801d31c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d31c:	b580      	push	{r7, lr}
 801d31e:	b086      	sub	sp, #24
 801d320:	af00      	add	r7, sp, #0
 801d322:	60f8      	str	r0, [r7, #12]
 801d324:	60b9      	str	r1, [r7, #8]
 801d326:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801d328:	f7ea ffb4 	bl	8008294 <osKernelGetTickCount>
 801d32c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	2b00      	cmp	r3, #0
 801d332:	d013      	beq.n	801d35c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	6818      	ldr	r0, [r3, #0]
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	2200      	movs	r2, #0
 801d33c:	68b9      	ldr	r1, [r7, #8]
 801d33e:	f7eb fb91 	bl	8008a64 <osMessageQueueGet>
 801d342:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801d344:	693b      	ldr	r3, [r7, #16]
 801d346:	2b00      	cmp	r3, #0
 801d348:	d105      	bne.n	801d356 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801d34a:	f7ea ffa3 	bl	8008294 <osKernelGetTickCount>
 801d34e:	4602      	mov	r2, r0
 801d350:	697b      	ldr	r3, [r7, #20]
 801d352:	1ad3      	subs	r3, r2, r3
 801d354:	e00f      	b.n	801d376 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d356:	f04f 33ff 	mov.w	r3, #4294967295
 801d35a:	e00c      	b.n	801d376 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	6818      	ldr	r0, [r3, #0]
 801d360:	f04f 33ff 	mov.w	r3, #4294967295
 801d364:	2200      	movs	r2, #0
 801d366:	68b9      	ldr	r1, [r7, #8]
 801d368:	f7eb fb7c 	bl	8008a64 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801d36c:	f7ea ff92 	bl	8008294 <osKernelGetTickCount>
 801d370:	4602      	mov	r2, r0
 801d372:	697b      	ldr	r3, [r7, #20]
 801d374:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d376:	4618      	mov	r0, r3
 801d378:	3718      	adds	r7, #24
 801d37a:	46bd      	mov	sp, r7
 801d37c:	bd80      	pop	{r7, pc}

0801d37e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801d37e:	b580      	push	{r7, lr}
 801d380:	b082      	sub	sp, #8
 801d382:	af00      	add	r7, sp, #0
 801d384:	6078      	str	r0, [r7, #4]
 801d386:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	6818      	ldr	r0, [r3, #0]
 801d38c:	2300      	movs	r3, #0
 801d38e:	2200      	movs	r2, #0
 801d390:	6839      	ldr	r1, [r7, #0]
 801d392:	f7eb fb67 	bl	8008a64 <osMessageQueueGet>
 801d396:	4603      	mov	r3, r0
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d101      	bne.n	801d3a0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801d39c:	2300      	movs	r3, #0
 801d39e:	e001      	b.n	801d3a4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801d3a0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801d3a4:	4618      	mov	r0, r3
 801d3a6:	3708      	adds	r7, #8
 801d3a8:	46bd      	mov	sp, r7
 801d3aa:	bd80      	pop	{r7, pc}

0801d3ac <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d3ac:	b480      	push	{r7}
 801d3ae:	b083      	sub	sp, #12
 801d3b0:	af00      	add	r7, sp, #0
 801d3b2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d101      	bne.n	801d3c0 <sys_mbox_valid+0x14>
    return 0;
 801d3bc:	2300      	movs	r3, #0
 801d3be:	e000      	b.n	801d3c2 <sys_mbox_valid+0x16>
  else
    return 1;
 801d3c0:	2301      	movs	r3, #1
}
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	370c      	adds	r7, #12
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3cc:	4770      	bx	lr

0801d3ce <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801d3ce:	b480      	push	{r7}
 801d3d0:	b083      	sub	sp, #12
 801d3d2:	af00      	add	r7, sp, #0
 801d3d4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	2200      	movs	r2, #0
 801d3da:	601a      	str	r2, [r3, #0]
}
 801d3dc:	bf00      	nop
 801d3de:	370c      	adds	r7, #12
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e6:	4770      	bx	lr

0801d3e8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801d3e8:	b580      	push	{r7, lr}
 801d3ea:	b082      	sub	sp, #8
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
 801d3f0:	460b      	mov	r3, r1
 801d3f2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801d3f4:	78fb      	ldrb	r3, [r7, #3]
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	4619      	mov	r1, r3
 801d3fa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801d3fe:	f7eb f91a 	bl	8008636 <osSemaphoreNew>
 801d402:	4602      	mov	r2, r0
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d102      	bne.n	801d416 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d410:	f04f 33ff 	mov.w	r3, #4294967295
 801d414:	e009      	b.n	801d42a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801d416:	78fb      	ldrb	r3, [r7, #3]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d105      	bne.n	801d428 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	2100      	movs	r1, #0
 801d422:	4618      	mov	r0, r3
 801d424:	f7eb f990 	bl	8008748 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801d428:	2300      	movs	r3, #0
}
 801d42a:	4618      	mov	r0, r3
 801d42c:	3708      	adds	r7, #8
 801d42e:	46bd      	mov	sp, r7
 801d430:	bd80      	pop	{r7, pc}

0801d432 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801d432:	b580      	push	{r7, lr}
 801d434:	b084      	sub	sp, #16
 801d436:	af00      	add	r7, sp, #0
 801d438:	6078      	str	r0, [r7, #4]
 801d43a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801d43c:	f7ea ff2a 	bl	8008294 <osKernelGetTickCount>
 801d440:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801d442:	683b      	ldr	r3, [r7, #0]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d011      	beq.n	801d46c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	6839      	ldr	r1, [r7, #0]
 801d44e:	4618      	mov	r0, r3
 801d450:	f7eb f97a 	bl	8008748 <osSemaphoreAcquire>
 801d454:	4603      	mov	r3, r0
 801d456:	2b00      	cmp	r3, #0
 801d458:	d105      	bne.n	801d466 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801d45a:	f7ea ff1b 	bl	8008294 <osKernelGetTickCount>
 801d45e:	4602      	mov	r2, r0
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	1ad3      	subs	r3, r2, r3
 801d464:	e012      	b.n	801d48c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d466:	f04f 33ff 	mov.w	r3, #4294967295
 801d46a:	e00f      	b.n	801d48c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801d46c:	bf00      	nop
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	f04f 31ff 	mov.w	r1, #4294967295
 801d476:	4618      	mov	r0, r3
 801d478:	f7eb f966 	bl	8008748 <osSemaphoreAcquire>
 801d47c:	4603      	mov	r3, r0
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d1f5      	bne.n	801d46e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801d482:	f7ea ff07 	bl	8008294 <osKernelGetTickCount>
 801d486:	4602      	mov	r2, r0
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d48c:	4618      	mov	r0, r3
 801d48e:	3710      	adds	r7, #16
 801d490:	46bd      	mov	sp, r7
 801d492:	bd80      	pop	{r7, pc}

0801d494 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801d494:	b580      	push	{r7, lr}
 801d496:	b082      	sub	sp, #8
 801d498:	af00      	add	r7, sp, #0
 801d49a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	f7eb f9a3 	bl	80087ec <osSemaphoreRelease>
}
 801d4a6:	bf00      	nop
 801d4a8:	3708      	adds	r7, #8
 801d4aa:	46bd      	mov	sp, r7
 801d4ac:	bd80      	pop	{r7, pc}

0801d4ae <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801d4ae:	b580      	push	{r7, lr}
 801d4b0:	b082      	sub	sp, #8
 801d4b2:	af00      	add	r7, sp, #0
 801d4b4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7eb f9da 	bl	8008874 <osSemaphoreDelete>
}
 801d4c0:	bf00      	nop
 801d4c2:	3708      	adds	r7, #8
 801d4c4:	46bd      	mov	sp, r7
 801d4c6:	bd80      	pop	{r7, pc}

0801d4c8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801d4c8:	b480      	push	{r7}
 801d4ca:	b083      	sub	sp, #12
 801d4cc:	af00      	add	r7, sp, #0
 801d4ce:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d101      	bne.n	801d4dc <sys_sem_valid+0x14>
    return 0;
 801d4d8:	2300      	movs	r3, #0
 801d4da:	e000      	b.n	801d4de <sys_sem_valid+0x16>
  else
    return 1;
 801d4dc:	2301      	movs	r3, #1
}
 801d4de:	4618      	mov	r0, r3
 801d4e0:	370c      	adds	r7, #12
 801d4e2:	46bd      	mov	sp, r7
 801d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4e8:	4770      	bx	lr

0801d4ea <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801d4ea:	b480      	push	{r7}
 801d4ec:	b083      	sub	sp, #12
 801d4ee:	af00      	add	r7, sp, #0
 801d4f0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	2200      	movs	r2, #0
 801d4f6:	601a      	str	r2, [r3, #0]
}
 801d4f8:	bf00      	nop
 801d4fa:	370c      	adds	r7, #12
 801d4fc:	46bd      	mov	sp, r7
 801d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d502:	4770      	bx	lr

0801d504 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d504:	b580      	push	{r7, lr}
 801d506:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d508:	2000      	movs	r0, #0
 801d50a:	f7ea ff86 	bl	800841a <osMutexNew>
 801d50e:	4603      	mov	r3, r0
 801d510:	4a01      	ldr	r2, [pc, #4]	@ (801d518 <sys_init+0x14>)
 801d512:	6013      	str	r3, [r2, #0]
#endif
}
 801d514:	bf00      	nop
 801d516:	bd80      	pop	{r7, pc}
 801d518:	2000f620 	.word	0x2000f620

0801d51c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d51c:	b580      	push	{r7, lr}
 801d51e:	b082      	sub	sp, #8
 801d520:	af00      	add	r7, sp, #0
 801d522:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d524:	2000      	movs	r0, #0
 801d526:	f7ea ff78 	bl	800841a <osMutexNew>
 801d52a:	4602      	mov	r2, r0
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	2b00      	cmp	r3, #0
 801d536:	d102      	bne.n	801d53e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d538:	f04f 33ff 	mov.w	r3, #4294967295
 801d53c:	e000      	b.n	801d540 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d53e:	2300      	movs	r3, #0
}
 801d540:	4618      	mov	r0, r3
 801d542:	3708      	adds	r7, #8
 801d544:	46bd      	mov	sp, r7
 801d546:	bd80      	pop	{r7, pc}

0801d548 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b082      	sub	sp, #8
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	f04f 31ff 	mov.w	r1, #4294967295
 801d558:	4618      	mov	r0, r3
 801d55a:	f7ea ffe4 	bl	8008526 <osMutexAcquire>
#endif
}
 801d55e:	bf00      	nop
 801d560:	3708      	adds	r7, #8
 801d562:	46bd      	mov	sp, r7
 801d564:	bd80      	pop	{r7, pc}

0801d566 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d566:	b580      	push	{r7, lr}
 801d568:	b082      	sub	sp, #8
 801d56a:	af00      	add	r7, sp, #0
 801d56c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	4618      	mov	r0, r3
 801d574:	f7eb f822 	bl	80085bc <osMutexRelease>
}
 801d578:	bf00      	nop
 801d57a:	3708      	adds	r7, #8
 801d57c:	46bd      	mov	sp, r7
 801d57e:	bd80      	pop	{r7, pc}

0801d580 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d580:	b580      	push	{r7, lr}
 801d582:	b08e      	sub	sp, #56	@ 0x38
 801d584:	af00      	add	r7, sp, #0
 801d586:	60f8      	str	r0, [r7, #12]
 801d588:	60b9      	str	r1, [r7, #8]
 801d58a:	607a      	str	r2, [r7, #4]
 801d58c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d58e:	f107 0314 	add.w	r3, r7, #20
 801d592:	2224      	movs	r2, #36	@ 0x24
 801d594:	2100      	movs	r1, #0
 801d596:	4618      	mov	r0, r3
 801d598:	f001 f9dd 	bl	801e956 <memset>
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	617b      	str	r3, [r7, #20]
 801d5a0:	683b      	ldr	r3, [r7, #0]
 801d5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d5a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d5a8:	f107 0314 	add.w	r3, r7, #20
 801d5ac:	461a      	mov	r2, r3
 801d5ae:	6879      	ldr	r1, [r7, #4]
 801d5b0:	68b8      	ldr	r0, [r7, #8]
 801d5b2:	f7ea fe84 	bl	80082be <osThreadNew>
 801d5b6:	4603      	mov	r3, r0
#endif
}
 801d5b8:	4618      	mov	r0, r3
 801d5ba:	3738      	adds	r7, #56	@ 0x38
 801d5bc:	46bd      	mov	sp, r7
 801d5be:	bd80      	pop	{r7, pc}

0801d5c0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d5c4:	4b04      	ldr	r3, [pc, #16]	@ (801d5d8 <sys_arch_protect+0x18>)
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	f04f 31ff 	mov.w	r1, #4294967295
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	f7ea ffaa 	bl	8008526 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d5d2:	2301      	movs	r3, #1
}
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	bd80      	pop	{r7, pc}
 801d5d8:	2000f620 	.word	0x2000f620

0801d5dc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d5dc:	b580      	push	{r7, lr}
 801d5de:	b082      	sub	sp, #8
 801d5e0:	af00      	add	r7, sp, #0
 801d5e2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d5e4:	4b04      	ldr	r3, [pc, #16]	@ (801d5f8 <sys_arch_unprotect+0x1c>)
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	f7ea ffe7 	bl	80085bc <osMutexRelease>
}
 801d5ee:	bf00      	nop
 801d5f0:	3708      	adds	r7, #8
 801d5f2:	46bd      	mov	sp, r7
 801d5f4:	bd80      	pop	{r7, pc}
 801d5f6:	bf00      	nop
 801d5f8:	2000f620 	.word	0x2000f620

0801d5fc <__itoa>:
 801d5fc:	1e93      	subs	r3, r2, #2
 801d5fe:	2b22      	cmp	r3, #34	@ 0x22
 801d600:	b510      	push	{r4, lr}
 801d602:	460c      	mov	r4, r1
 801d604:	d904      	bls.n	801d610 <__itoa+0x14>
 801d606:	2300      	movs	r3, #0
 801d608:	700b      	strb	r3, [r1, #0]
 801d60a:	461c      	mov	r4, r3
 801d60c:	4620      	mov	r0, r4
 801d60e:	bd10      	pop	{r4, pc}
 801d610:	2a0a      	cmp	r2, #10
 801d612:	d109      	bne.n	801d628 <__itoa+0x2c>
 801d614:	2800      	cmp	r0, #0
 801d616:	da07      	bge.n	801d628 <__itoa+0x2c>
 801d618:	232d      	movs	r3, #45	@ 0x2d
 801d61a:	700b      	strb	r3, [r1, #0]
 801d61c:	4240      	negs	r0, r0
 801d61e:	2101      	movs	r1, #1
 801d620:	4421      	add	r1, r4
 801d622:	f000 f8c9 	bl	801d7b8 <__utoa>
 801d626:	e7f1      	b.n	801d60c <__itoa+0x10>
 801d628:	2100      	movs	r1, #0
 801d62a:	e7f9      	b.n	801d620 <__itoa+0x24>

0801d62c <itoa>:
 801d62c:	f7ff bfe6 	b.w	801d5fc <__itoa>

0801d630 <rand>:
 801d630:	4b16      	ldr	r3, [pc, #88]	@ (801d68c <rand+0x5c>)
 801d632:	b510      	push	{r4, lr}
 801d634:	681c      	ldr	r4, [r3, #0]
 801d636:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d638:	b9b3      	cbnz	r3, 801d668 <rand+0x38>
 801d63a:	2018      	movs	r0, #24
 801d63c:	f002 f956 	bl	801f8ec <malloc>
 801d640:	4602      	mov	r2, r0
 801d642:	6320      	str	r0, [r4, #48]	@ 0x30
 801d644:	b920      	cbnz	r0, 801d650 <rand+0x20>
 801d646:	4b12      	ldr	r3, [pc, #72]	@ (801d690 <rand+0x60>)
 801d648:	4812      	ldr	r0, [pc, #72]	@ (801d694 <rand+0x64>)
 801d64a:	2152      	movs	r1, #82	@ 0x52
 801d64c:	f001 fa9a 	bl	801eb84 <__assert_func>
 801d650:	4911      	ldr	r1, [pc, #68]	@ (801d698 <rand+0x68>)
 801d652:	4b12      	ldr	r3, [pc, #72]	@ (801d69c <rand+0x6c>)
 801d654:	e9c0 1300 	strd	r1, r3, [r0]
 801d658:	4b11      	ldr	r3, [pc, #68]	@ (801d6a0 <rand+0x70>)
 801d65a:	6083      	str	r3, [r0, #8]
 801d65c:	230b      	movs	r3, #11
 801d65e:	8183      	strh	r3, [r0, #12]
 801d660:	2100      	movs	r1, #0
 801d662:	2001      	movs	r0, #1
 801d664:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d668:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d66a:	480e      	ldr	r0, [pc, #56]	@ (801d6a4 <rand+0x74>)
 801d66c:	690b      	ldr	r3, [r1, #16]
 801d66e:	694c      	ldr	r4, [r1, #20]
 801d670:	4a0d      	ldr	r2, [pc, #52]	@ (801d6a8 <rand+0x78>)
 801d672:	4358      	muls	r0, r3
 801d674:	fb02 0004 	mla	r0, r2, r4, r0
 801d678:	fba3 3202 	umull	r3, r2, r3, r2
 801d67c:	3301      	adds	r3, #1
 801d67e:	eb40 0002 	adc.w	r0, r0, r2
 801d682:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d686:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d68a:	bd10      	pop	{r4, pc}
 801d68c:	20000054 	.word	0x20000054
 801d690:	08026286 	.word	0x08026286
 801d694:	0802629d 	.word	0x0802629d
 801d698:	abcd330e 	.word	0xabcd330e
 801d69c:	e66d1234 	.word	0xe66d1234
 801d6a0:	0005deec 	.word	0x0005deec
 801d6a4:	5851f42d 	.word	0x5851f42d
 801d6a8:	4c957f2d 	.word	0x4c957f2d

0801d6ac <_strtol_l.constprop.0>:
 801d6ac:	2b24      	cmp	r3, #36	@ 0x24
 801d6ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6b2:	4686      	mov	lr, r0
 801d6b4:	4690      	mov	r8, r2
 801d6b6:	d801      	bhi.n	801d6bc <_strtol_l.constprop.0+0x10>
 801d6b8:	2b01      	cmp	r3, #1
 801d6ba:	d106      	bne.n	801d6ca <_strtol_l.constprop.0+0x1e>
 801d6bc:	f001 fa18 	bl	801eaf0 <__errno>
 801d6c0:	2316      	movs	r3, #22
 801d6c2:	6003      	str	r3, [r0, #0]
 801d6c4:	2000      	movs	r0, #0
 801d6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6ca:	4834      	ldr	r0, [pc, #208]	@ (801d79c <_strtol_l.constprop.0+0xf0>)
 801d6cc:	460d      	mov	r5, r1
 801d6ce:	462a      	mov	r2, r5
 801d6d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d6d4:	5d06      	ldrb	r6, [r0, r4]
 801d6d6:	f016 0608 	ands.w	r6, r6, #8
 801d6da:	d1f8      	bne.n	801d6ce <_strtol_l.constprop.0+0x22>
 801d6dc:	2c2d      	cmp	r4, #45	@ 0x2d
 801d6de:	d12d      	bne.n	801d73c <_strtol_l.constprop.0+0x90>
 801d6e0:	782c      	ldrb	r4, [r5, #0]
 801d6e2:	2601      	movs	r6, #1
 801d6e4:	1c95      	adds	r5, r2, #2
 801d6e6:	f033 0210 	bics.w	r2, r3, #16
 801d6ea:	d109      	bne.n	801d700 <_strtol_l.constprop.0+0x54>
 801d6ec:	2c30      	cmp	r4, #48	@ 0x30
 801d6ee:	d12a      	bne.n	801d746 <_strtol_l.constprop.0+0x9a>
 801d6f0:	782a      	ldrb	r2, [r5, #0]
 801d6f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d6f6:	2a58      	cmp	r2, #88	@ 0x58
 801d6f8:	d125      	bne.n	801d746 <_strtol_l.constprop.0+0x9a>
 801d6fa:	786c      	ldrb	r4, [r5, #1]
 801d6fc:	2310      	movs	r3, #16
 801d6fe:	3502      	adds	r5, #2
 801d700:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d704:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d708:	2200      	movs	r2, #0
 801d70a:	fbbc f9f3 	udiv	r9, ip, r3
 801d70e:	4610      	mov	r0, r2
 801d710:	fb03 ca19 	mls	sl, r3, r9, ip
 801d714:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d718:	2f09      	cmp	r7, #9
 801d71a:	d81b      	bhi.n	801d754 <_strtol_l.constprop.0+0xa8>
 801d71c:	463c      	mov	r4, r7
 801d71e:	42a3      	cmp	r3, r4
 801d720:	dd27      	ble.n	801d772 <_strtol_l.constprop.0+0xc6>
 801d722:	1c57      	adds	r7, r2, #1
 801d724:	d007      	beq.n	801d736 <_strtol_l.constprop.0+0x8a>
 801d726:	4581      	cmp	r9, r0
 801d728:	d320      	bcc.n	801d76c <_strtol_l.constprop.0+0xc0>
 801d72a:	d101      	bne.n	801d730 <_strtol_l.constprop.0+0x84>
 801d72c:	45a2      	cmp	sl, r4
 801d72e:	db1d      	blt.n	801d76c <_strtol_l.constprop.0+0xc0>
 801d730:	fb00 4003 	mla	r0, r0, r3, r4
 801d734:	2201      	movs	r2, #1
 801d736:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d73a:	e7eb      	b.n	801d714 <_strtol_l.constprop.0+0x68>
 801d73c:	2c2b      	cmp	r4, #43	@ 0x2b
 801d73e:	bf04      	itt	eq
 801d740:	782c      	ldrbeq	r4, [r5, #0]
 801d742:	1c95      	addeq	r5, r2, #2
 801d744:	e7cf      	b.n	801d6e6 <_strtol_l.constprop.0+0x3a>
 801d746:	2b00      	cmp	r3, #0
 801d748:	d1da      	bne.n	801d700 <_strtol_l.constprop.0+0x54>
 801d74a:	2c30      	cmp	r4, #48	@ 0x30
 801d74c:	bf0c      	ite	eq
 801d74e:	2308      	moveq	r3, #8
 801d750:	230a      	movne	r3, #10
 801d752:	e7d5      	b.n	801d700 <_strtol_l.constprop.0+0x54>
 801d754:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d758:	2f19      	cmp	r7, #25
 801d75a:	d801      	bhi.n	801d760 <_strtol_l.constprop.0+0xb4>
 801d75c:	3c37      	subs	r4, #55	@ 0x37
 801d75e:	e7de      	b.n	801d71e <_strtol_l.constprop.0+0x72>
 801d760:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d764:	2f19      	cmp	r7, #25
 801d766:	d804      	bhi.n	801d772 <_strtol_l.constprop.0+0xc6>
 801d768:	3c57      	subs	r4, #87	@ 0x57
 801d76a:	e7d8      	b.n	801d71e <_strtol_l.constprop.0+0x72>
 801d76c:	f04f 32ff 	mov.w	r2, #4294967295
 801d770:	e7e1      	b.n	801d736 <_strtol_l.constprop.0+0x8a>
 801d772:	1c53      	adds	r3, r2, #1
 801d774:	d108      	bne.n	801d788 <_strtol_l.constprop.0+0xdc>
 801d776:	2322      	movs	r3, #34	@ 0x22
 801d778:	f8ce 3000 	str.w	r3, [lr]
 801d77c:	4660      	mov	r0, ip
 801d77e:	f1b8 0f00 	cmp.w	r8, #0
 801d782:	d0a0      	beq.n	801d6c6 <_strtol_l.constprop.0+0x1a>
 801d784:	1e69      	subs	r1, r5, #1
 801d786:	e006      	b.n	801d796 <_strtol_l.constprop.0+0xea>
 801d788:	b106      	cbz	r6, 801d78c <_strtol_l.constprop.0+0xe0>
 801d78a:	4240      	negs	r0, r0
 801d78c:	f1b8 0f00 	cmp.w	r8, #0
 801d790:	d099      	beq.n	801d6c6 <_strtol_l.constprop.0+0x1a>
 801d792:	2a00      	cmp	r2, #0
 801d794:	d1f6      	bne.n	801d784 <_strtol_l.constprop.0+0xd8>
 801d796:	f8c8 1000 	str.w	r1, [r8]
 801d79a:	e794      	b.n	801d6c6 <_strtol_l.constprop.0+0x1a>
 801d79c:	0802631b 	.word	0x0802631b

0801d7a0 <_strtol_r>:
 801d7a0:	f7ff bf84 	b.w	801d6ac <_strtol_l.constprop.0>

0801d7a4 <strtol>:
 801d7a4:	4613      	mov	r3, r2
 801d7a6:	460a      	mov	r2, r1
 801d7a8:	4601      	mov	r1, r0
 801d7aa:	4802      	ldr	r0, [pc, #8]	@ (801d7b4 <strtol+0x10>)
 801d7ac:	6800      	ldr	r0, [r0, #0]
 801d7ae:	f7ff bf7d 	b.w	801d6ac <_strtol_l.constprop.0>
 801d7b2:	bf00      	nop
 801d7b4:	20000054 	.word	0x20000054

0801d7b8 <__utoa>:
 801d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7ba:	4c1f      	ldr	r4, [pc, #124]	@ (801d838 <__utoa+0x80>)
 801d7bc:	b08b      	sub	sp, #44	@ 0x2c
 801d7be:	4605      	mov	r5, r0
 801d7c0:	460b      	mov	r3, r1
 801d7c2:	466e      	mov	r6, sp
 801d7c4:	f104 0c20 	add.w	ip, r4, #32
 801d7c8:	6820      	ldr	r0, [r4, #0]
 801d7ca:	6861      	ldr	r1, [r4, #4]
 801d7cc:	4637      	mov	r7, r6
 801d7ce:	c703      	stmia	r7!, {r0, r1}
 801d7d0:	3408      	adds	r4, #8
 801d7d2:	4564      	cmp	r4, ip
 801d7d4:	463e      	mov	r6, r7
 801d7d6:	d1f7      	bne.n	801d7c8 <__utoa+0x10>
 801d7d8:	7921      	ldrb	r1, [r4, #4]
 801d7da:	7139      	strb	r1, [r7, #4]
 801d7dc:	1e91      	subs	r1, r2, #2
 801d7de:	6820      	ldr	r0, [r4, #0]
 801d7e0:	6038      	str	r0, [r7, #0]
 801d7e2:	2922      	cmp	r1, #34	@ 0x22
 801d7e4:	f04f 0100 	mov.w	r1, #0
 801d7e8:	d904      	bls.n	801d7f4 <__utoa+0x3c>
 801d7ea:	7019      	strb	r1, [r3, #0]
 801d7ec:	460b      	mov	r3, r1
 801d7ee:	4618      	mov	r0, r3
 801d7f0:	b00b      	add	sp, #44	@ 0x2c
 801d7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7f4:	1e58      	subs	r0, r3, #1
 801d7f6:	4684      	mov	ip, r0
 801d7f8:	fbb5 f7f2 	udiv	r7, r5, r2
 801d7fc:	fb02 5617 	mls	r6, r2, r7, r5
 801d800:	3628      	adds	r6, #40	@ 0x28
 801d802:	446e      	add	r6, sp
 801d804:	460c      	mov	r4, r1
 801d806:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801d80a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801d80e:	462e      	mov	r6, r5
 801d810:	42b2      	cmp	r2, r6
 801d812:	f101 0101 	add.w	r1, r1, #1
 801d816:	463d      	mov	r5, r7
 801d818:	d9ee      	bls.n	801d7f8 <__utoa+0x40>
 801d81a:	2200      	movs	r2, #0
 801d81c:	545a      	strb	r2, [r3, r1]
 801d81e:	1919      	adds	r1, r3, r4
 801d820:	1aa5      	subs	r5, r4, r2
 801d822:	42aa      	cmp	r2, r5
 801d824:	dae3      	bge.n	801d7ee <__utoa+0x36>
 801d826:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801d82a:	780e      	ldrb	r6, [r1, #0]
 801d82c:	7006      	strb	r6, [r0, #0]
 801d82e:	3201      	adds	r2, #1
 801d830:	f801 5901 	strb.w	r5, [r1], #-1
 801d834:	e7f4      	b.n	801d820 <__utoa+0x68>
 801d836:	bf00      	nop
 801d838:	080262f5 	.word	0x080262f5

0801d83c <__cvt>:
 801d83c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d840:	ec57 6b10 	vmov	r6, r7, d0
 801d844:	2f00      	cmp	r7, #0
 801d846:	460c      	mov	r4, r1
 801d848:	4619      	mov	r1, r3
 801d84a:	463b      	mov	r3, r7
 801d84c:	bfbb      	ittet	lt
 801d84e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d852:	461f      	movlt	r7, r3
 801d854:	2300      	movge	r3, #0
 801d856:	232d      	movlt	r3, #45	@ 0x2d
 801d858:	700b      	strb	r3, [r1, #0]
 801d85a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d85c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d860:	4691      	mov	r9, r2
 801d862:	f023 0820 	bic.w	r8, r3, #32
 801d866:	bfbc      	itt	lt
 801d868:	4632      	movlt	r2, r6
 801d86a:	4616      	movlt	r6, r2
 801d86c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d870:	d005      	beq.n	801d87e <__cvt+0x42>
 801d872:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d876:	d100      	bne.n	801d87a <__cvt+0x3e>
 801d878:	3401      	adds	r4, #1
 801d87a:	2102      	movs	r1, #2
 801d87c:	e000      	b.n	801d880 <__cvt+0x44>
 801d87e:	2103      	movs	r1, #3
 801d880:	ab03      	add	r3, sp, #12
 801d882:	9301      	str	r3, [sp, #4]
 801d884:	ab02      	add	r3, sp, #8
 801d886:	9300      	str	r3, [sp, #0]
 801d888:	ec47 6b10 	vmov	d0, r6, r7
 801d88c:	4653      	mov	r3, sl
 801d88e:	4622      	mov	r2, r4
 801d890:	f001 fa1e 	bl	801ecd0 <_dtoa_r>
 801d894:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d898:	4605      	mov	r5, r0
 801d89a:	d119      	bne.n	801d8d0 <__cvt+0x94>
 801d89c:	f019 0f01 	tst.w	r9, #1
 801d8a0:	d00e      	beq.n	801d8c0 <__cvt+0x84>
 801d8a2:	eb00 0904 	add.w	r9, r0, r4
 801d8a6:	2200      	movs	r2, #0
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	4630      	mov	r0, r6
 801d8ac:	4639      	mov	r1, r7
 801d8ae:	f7e3 f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 801d8b2:	b108      	cbz	r0, 801d8b8 <__cvt+0x7c>
 801d8b4:	f8cd 900c 	str.w	r9, [sp, #12]
 801d8b8:	2230      	movs	r2, #48	@ 0x30
 801d8ba:	9b03      	ldr	r3, [sp, #12]
 801d8bc:	454b      	cmp	r3, r9
 801d8be:	d31e      	bcc.n	801d8fe <__cvt+0xc2>
 801d8c0:	9b03      	ldr	r3, [sp, #12]
 801d8c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d8c4:	1b5b      	subs	r3, r3, r5
 801d8c6:	4628      	mov	r0, r5
 801d8c8:	6013      	str	r3, [r2, #0]
 801d8ca:	b004      	add	sp, #16
 801d8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d8d4:	eb00 0904 	add.w	r9, r0, r4
 801d8d8:	d1e5      	bne.n	801d8a6 <__cvt+0x6a>
 801d8da:	7803      	ldrb	r3, [r0, #0]
 801d8dc:	2b30      	cmp	r3, #48	@ 0x30
 801d8de:	d10a      	bne.n	801d8f6 <__cvt+0xba>
 801d8e0:	2200      	movs	r2, #0
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	4630      	mov	r0, r6
 801d8e6:	4639      	mov	r1, r7
 801d8e8:	f7e3 f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 801d8ec:	b918      	cbnz	r0, 801d8f6 <__cvt+0xba>
 801d8ee:	f1c4 0401 	rsb	r4, r4, #1
 801d8f2:	f8ca 4000 	str.w	r4, [sl]
 801d8f6:	f8da 3000 	ldr.w	r3, [sl]
 801d8fa:	4499      	add	r9, r3
 801d8fc:	e7d3      	b.n	801d8a6 <__cvt+0x6a>
 801d8fe:	1c59      	adds	r1, r3, #1
 801d900:	9103      	str	r1, [sp, #12]
 801d902:	701a      	strb	r2, [r3, #0]
 801d904:	e7d9      	b.n	801d8ba <__cvt+0x7e>

0801d906 <__exponent>:
 801d906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d908:	2900      	cmp	r1, #0
 801d90a:	bfba      	itte	lt
 801d90c:	4249      	neglt	r1, r1
 801d90e:	232d      	movlt	r3, #45	@ 0x2d
 801d910:	232b      	movge	r3, #43	@ 0x2b
 801d912:	2909      	cmp	r1, #9
 801d914:	7002      	strb	r2, [r0, #0]
 801d916:	7043      	strb	r3, [r0, #1]
 801d918:	dd29      	ble.n	801d96e <__exponent+0x68>
 801d91a:	f10d 0307 	add.w	r3, sp, #7
 801d91e:	461d      	mov	r5, r3
 801d920:	270a      	movs	r7, #10
 801d922:	461a      	mov	r2, r3
 801d924:	fbb1 f6f7 	udiv	r6, r1, r7
 801d928:	fb07 1416 	mls	r4, r7, r6, r1
 801d92c:	3430      	adds	r4, #48	@ 0x30
 801d92e:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d932:	460c      	mov	r4, r1
 801d934:	2c63      	cmp	r4, #99	@ 0x63
 801d936:	f103 33ff 	add.w	r3, r3, #4294967295
 801d93a:	4631      	mov	r1, r6
 801d93c:	dcf1      	bgt.n	801d922 <__exponent+0x1c>
 801d93e:	3130      	adds	r1, #48	@ 0x30
 801d940:	1e94      	subs	r4, r2, #2
 801d942:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d946:	1c41      	adds	r1, r0, #1
 801d948:	4623      	mov	r3, r4
 801d94a:	42ab      	cmp	r3, r5
 801d94c:	d30a      	bcc.n	801d964 <__exponent+0x5e>
 801d94e:	f10d 0309 	add.w	r3, sp, #9
 801d952:	1a9b      	subs	r3, r3, r2
 801d954:	42ac      	cmp	r4, r5
 801d956:	bf88      	it	hi
 801d958:	2300      	movhi	r3, #0
 801d95a:	3302      	adds	r3, #2
 801d95c:	4403      	add	r3, r0
 801d95e:	1a18      	subs	r0, r3, r0
 801d960:	b003      	add	sp, #12
 801d962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d964:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d968:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d96c:	e7ed      	b.n	801d94a <__exponent+0x44>
 801d96e:	2330      	movs	r3, #48	@ 0x30
 801d970:	3130      	adds	r1, #48	@ 0x30
 801d972:	7083      	strb	r3, [r0, #2]
 801d974:	70c1      	strb	r1, [r0, #3]
 801d976:	1d03      	adds	r3, r0, #4
 801d978:	e7f1      	b.n	801d95e <__exponent+0x58>
	...

0801d97c <_printf_float>:
 801d97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d980:	b08d      	sub	sp, #52	@ 0x34
 801d982:	460c      	mov	r4, r1
 801d984:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d988:	4616      	mov	r6, r2
 801d98a:	461f      	mov	r7, r3
 801d98c:	4605      	mov	r5, r0
 801d98e:	f001 f80f 	bl	801e9b0 <_localeconv_r>
 801d992:	6803      	ldr	r3, [r0, #0]
 801d994:	9304      	str	r3, [sp, #16]
 801d996:	4618      	mov	r0, r3
 801d998:	f7e2 fc6a 	bl	8000270 <strlen>
 801d99c:	2300      	movs	r3, #0
 801d99e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d9a0:	f8d8 3000 	ldr.w	r3, [r8]
 801d9a4:	9005      	str	r0, [sp, #20]
 801d9a6:	3307      	adds	r3, #7
 801d9a8:	f023 0307 	bic.w	r3, r3, #7
 801d9ac:	f103 0208 	add.w	r2, r3, #8
 801d9b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d9b4:	f8d4 b000 	ldr.w	fp, [r4]
 801d9b8:	f8c8 2000 	str.w	r2, [r8]
 801d9bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d9c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d9c4:	9307      	str	r3, [sp, #28]
 801d9c6:	f8cd 8018 	str.w	r8, [sp, #24]
 801d9ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d9ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d9d2:	4b9c      	ldr	r3, [pc, #624]	@ (801dc44 <_printf_float+0x2c8>)
 801d9d4:	f04f 32ff 	mov.w	r2, #4294967295
 801d9d8:	f7e3 f8a8 	bl	8000b2c <__aeabi_dcmpun>
 801d9dc:	bb70      	cbnz	r0, 801da3c <_printf_float+0xc0>
 801d9de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d9e2:	4b98      	ldr	r3, [pc, #608]	@ (801dc44 <_printf_float+0x2c8>)
 801d9e4:	f04f 32ff 	mov.w	r2, #4294967295
 801d9e8:	f7e3 f882 	bl	8000af0 <__aeabi_dcmple>
 801d9ec:	bb30      	cbnz	r0, 801da3c <_printf_float+0xc0>
 801d9ee:	2200      	movs	r2, #0
 801d9f0:	2300      	movs	r3, #0
 801d9f2:	4640      	mov	r0, r8
 801d9f4:	4649      	mov	r1, r9
 801d9f6:	f7e3 f871 	bl	8000adc <__aeabi_dcmplt>
 801d9fa:	b110      	cbz	r0, 801da02 <_printf_float+0x86>
 801d9fc:	232d      	movs	r3, #45	@ 0x2d
 801d9fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801da02:	4a91      	ldr	r2, [pc, #580]	@ (801dc48 <_printf_float+0x2cc>)
 801da04:	4b91      	ldr	r3, [pc, #580]	@ (801dc4c <_printf_float+0x2d0>)
 801da06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801da0a:	bf94      	ite	ls
 801da0c:	4690      	movls	r8, r2
 801da0e:	4698      	movhi	r8, r3
 801da10:	2303      	movs	r3, #3
 801da12:	6123      	str	r3, [r4, #16]
 801da14:	f02b 0304 	bic.w	r3, fp, #4
 801da18:	6023      	str	r3, [r4, #0]
 801da1a:	f04f 0900 	mov.w	r9, #0
 801da1e:	9700      	str	r7, [sp, #0]
 801da20:	4633      	mov	r3, r6
 801da22:	aa0b      	add	r2, sp, #44	@ 0x2c
 801da24:	4621      	mov	r1, r4
 801da26:	4628      	mov	r0, r5
 801da28:	f000 f9d2 	bl	801ddd0 <_printf_common>
 801da2c:	3001      	adds	r0, #1
 801da2e:	f040 808d 	bne.w	801db4c <_printf_float+0x1d0>
 801da32:	f04f 30ff 	mov.w	r0, #4294967295
 801da36:	b00d      	add	sp, #52	@ 0x34
 801da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da3c:	4642      	mov	r2, r8
 801da3e:	464b      	mov	r3, r9
 801da40:	4640      	mov	r0, r8
 801da42:	4649      	mov	r1, r9
 801da44:	f7e3 f872 	bl	8000b2c <__aeabi_dcmpun>
 801da48:	b140      	cbz	r0, 801da5c <_printf_float+0xe0>
 801da4a:	464b      	mov	r3, r9
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	bfbc      	itt	lt
 801da50:	232d      	movlt	r3, #45	@ 0x2d
 801da52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801da56:	4a7e      	ldr	r2, [pc, #504]	@ (801dc50 <_printf_float+0x2d4>)
 801da58:	4b7e      	ldr	r3, [pc, #504]	@ (801dc54 <_printf_float+0x2d8>)
 801da5a:	e7d4      	b.n	801da06 <_printf_float+0x8a>
 801da5c:	6863      	ldr	r3, [r4, #4]
 801da5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801da62:	9206      	str	r2, [sp, #24]
 801da64:	1c5a      	adds	r2, r3, #1
 801da66:	d13b      	bne.n	801dae0 <_printf_float+0x164>
 801da68:	2306      	movs	r3, #6
 801da6a:	6063      	str	r3, [r4, #4]
 801da6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801da70:	2300      	movs	r3, #0
 801da72:	6022      	str	r2, [r4, #0]
 801da74:	9303      	str	r3, [sp, #12]
 801da76:	ab0a      	add	r3, sp, #40	@ 0x28
 801da78:	e9cd a301 	strd	sl, r3, [sp, #4]
 801da7c:	ab09      	add	r3, sp, #36	@ 0x24
 801da7e:	9300      	str	r3, [sp, #0]
 801da80:	6861      	ldr	r1, [r4, #4]
 801da82:	ec49 8b10 	vmov	d0, r8, r9
 801da86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801da8a:	4628      	mov	r0, r5
 801da8c:	f7ff fed6 	bl	801d83c <__cvt>
 801da90:	9b06      	ldr	r3, [sp, #24]
 801da92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801da94:	2b47      	cmp	r3, #71	@ 0x47
 801da96:	4680      	mov	r8, r0
 801da98:	d129      	bne.n	801daee <_printf_float+0x172>
 801da9a:	1cc8      	adds	r0, r1, #3
 801da9c:	db02      	blt.n	801daa4 <_printf_float+0x128>
 801da9e:	6863      	ldr	r3, [r4, #4]
 801daa0:	4299      	cmp	r1, r3
 801daa2:	dd41      	ble.n	801db28 <_printf_float+0x1ac>
 801daa4:	f1aa 0a02 	sub.w	sl, sl, #2
 801daa8:	fa5f fa8a 	uxtb.w	sl, sl
 801daac:	3901      	subs	r1, #1
 801daae:	4652      	mov	r2, sl
 801dab0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801dab4:	9109      	str	r1, [sp, #36]	@ 0x24
 801dab6:	f7ff ff26 	bl	801d906 <__exponent>
 801daba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dabc:	1813      	adds	r3, r2, r0
 801dabe:	2a01      	cmp	r2, #1
 801dac0:	4681      	mov	r9, r0
 801dac2:	6123      	str	r3, [r4, #16]
 801dac4:	dc02      	bgt.n	801dacc <_printf_float+0x150>
 801dac6:	6822      	ldr	r2, [r4, #0]
 801dac8:	07d2      	lsls	r2, r2, #31
 801daca:	d501      	bpl.n	801dad0 <_printf_float+0x154>
 801dacc:	3301      	adds	r3, #1
 801dace:	6123      	str	r3, [r4, #16]
 801dad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d0a2      	beq.n	801da1e <_printf_float+0xa2>
 801dad8:	232d      	movs	r3, #45	@ 0x2d
 801dada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dade:	e79e      	b.n	801da1e <_printf_float+0xa2>
 801dae0:	9a06      	ldr	r2, [sp, #24]
 801dae2:	2a47      	cmp	r2, #71	@ 0x47
 801dae4:	d1c2      	bne.n	801da6c <_printf_float+0xf0>
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d1c0      	bne.n	801da6c <_printf_float+0xf0>
 801daea:	2301      	movs	r3, #1
 801daec:	e7bd      	b.n	801da6a <_printf_float+0xee>
 801daee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801daf2:	d9db      	bls.n	801daac <_printf_float+0x130>
 801daf4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801daf8:	d118      	bne.n	801db2c <_printf_float+0x1b0>
 801dafa:	2900      	cmp	r1, #0
 801dafc:	6863      	ldr	r3, [r4, #4]
 801dafe:	dd0b      	ble.n	801db18 <_printf_float+0x19c>
 801db00:	6121      	str	r1, [r4, #16]
 801db02:	b913      	cbnz	r3, 801db0a <_printf_float+0x18e>
 801db04:	6822      	ldr	r2, [r4, #0]
 801db06:	07d0      	lsls	r0, r2, #31
 801db08:	d502      	bpl.n	801db10 <_printf_float+0x194>
 801db0a:	3301      	adds	r3, #1
 801db0c:	440b      	add	r3, r1
 801db0e:	6123      	str	r3, [r4, #16]
 801db10:	65a1      	str	r1, [r4, #88]	@ 0x58
 801db12:	f04f 0900 	mov.w	r9, #0
 801db16:	e7db      	b.n	801dad0 <_printf_float+0x154>
 801db18:	b913      	cbnz	r3, 801db20 <_printf_float+0x1a4>
 801db1a:	6822      	ldr	r2, [r4, #0]
 801db1c:	07d2      	lsls	r2, r2, #31
 801db1e:	d501      	bpl.n	801db24 <_printf_float+0x1a8>
 801db20:	3302      	adds	r3, #2
 801db22:	e7f4      	b.n	801db0e <_printf_float+0x192>
 801db24:	2301      	movs	r3, #1
 801db26:	e7f2      	b.n	801db0e <_printf_float+0x192>
 801db28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801db2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801db2e:	4299      	cmp	r1, r3
 801db30:	db05      	blt.n	801db3e <_printf_float+0x1c2>
 801db32:	6823      	ldr	r3, [r4, #0]
 801db34:	6121      	str	r1, [r4, #16]
 801db36:	07d8      	lsls	r0, r3, #31
 801db38:	d5ea      	bpl.n	801db10 <_printf_float+0x194>
 801db3a:	1c4b      	adds	r3, r1, #1
 801db3c:	e7e7      	b.n	801db0e <_printf_float+0x192>
 801db3e:	2900      	cmp	r1, #0
 801db40:	bfd4      	ite	le
 801db42:	f1c1 0202 	rsble	r2, r1, #2
 801db46:	2201      	movgt	r2, #1
 801db48:	4413      	add	r3, r2
 801db4a:	e7e0      	b.n	801db0e <_printf_float+0x192>
 801db4c:	6823      	ldr	r3, [r4, #0]
 801db4e:	055a      	lsls	r2, r3, #21
 801db50:	d407      	bmi.n	801db62 <_printf_float+0x1e6>
 801db52:	6923      	ldr	r3, [r4, #16]
 801db54:	4642      	mov	r2, r8
 801db56:	4631      	mov	r1, r6
 801db58:	4628      	mov	r0, r5
 801db5a:	47b8      	blx	r7
 801db5c:	3001      	adds	r0, #1
 801db5e:	d12b      	bne.n	801dbb8 <_printf_float+0x23c>
 801db60:	e767      	b.n	801da32 <_printf_float+0xb6>
 801db62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801db66:	f240 80dd 	bls.w	801dd24 <_printf_float+0x3a8>
 801db6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801db6e:	2200      	movs	r2, #0
 801db70:	2300      	movs	r3, #0
 801db72:	f7e2 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 801db76:	2800      	cmp	r0, #0
 801db78:	d033      	beq.n	801dbe2 <_printf_float+0x266>
 801db7a:	4a37      	ldr	r2, [pc, #220]	@ (801dc58 <_printf_float+0x2dc>)
 801db7c:	2301      	movs	r3, #1
 801db7e:	4631      	mov	r1, r6
 801db80:	4628      	mov	r0, r5
 801db82:	47b8      	blx	r7
 801db84:	3001      	adds	r0, #1
 801db86:	f43f af54 	beq.w	801da32 <_printf_float+0xb6>
 801db8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801db8e:	4543      	cmp	r3, r8
 801db90:	db02      	blt.n	801db98 <_printf_float+0x21c>
 801db92:	6823      	ldr	r3, [r4, #0]
 801db94:	07d8      	lsls	r0, r3, #31
 801db96:	d50f      	bpl.n	801dbb8 <_printf_float+0x23c>
 801db98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801db9c:	4631      	mov	r1, r6
 801db9e:	4628      	mov	r0, r5
 801dba0:	47b8      	blx	r7
 801dba2:	3001      	adds	r0, #1
 801dba4:	f43f af45 	beq.w	801da32 <_printf_float+0xb6>
 801dba8:	f04f 0900 	mov.w	r9, #0
 801dbac:	f108 38ff 	add.w	r8, r8, #4294967295
 801dbb0:	f104 0a1a 	add.w	sl, r4, #26
 801dbb4:	45c8      	cmp	r8, r9
 801dbb6:	dc09      	bgt.n	801dbcc <_printf_float+0x250>
 801dbb8:	6823      	ldr	r3, [r4, #0]
 801dbba:	079b      	lsls	r3, r3, #30
 801dbbc:	f100 8103 	bmi.w	801ddc6 <_printf_float+0x44a>
 801dbc0:	68e0      	ldr	r0, [r4, #12]
 801dbc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dbc4:	4298      	cmp	r0, r3
 801dbc6:	bfb8      	it	lt
 801dbc8:	4618      	movlt	r0, r3
 801dbca:	e734      	b.n	801da36 <_printf_float+0xba>
 801dbcc:	2301      	movs	r3, #1
 801dbce:	4652      	mov	r2, sl
 801dbd0:	4631      	mov	r1, r6
 801dbd2:	4628      	mov	r0, r5
 801dbd4:	47b8      	blx	r7
 801dbd6:	3001      	adds	r0, #1
 801dbd8:	f43f af2b 	beq.w	801da32 <_printf_float+0xb6>
 801dbdc:	f109 0901 	add.w	r9, r9, #1
 801dbe0:	e7e8      	b.n	801dbb4 <_printf_float+0x238>
 801dbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	dc39      	bgt.n	801dc5c <_printf_float+0x2e0>
 801dbe8:	4a1b      	ldr	r2, [pc, #108]	@ (801dc58 <_printf_float+0x2dc>)
 801dbea:	2301      	movs	r3, #1
 801dbec:	4631      	mov	r1, r6
 801dbee:	4628      	mov	r0, r5
 801dbf0:	47b8      	blx	r7
 801dbf2:	3001      	adds	r0, #1
 801dbf4:	f43f af1d 	beq.w	801da32 <_printf_float+0xb6>
 801dbf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801dbfc:	ea59 0303 	orrs.w	r3, r9, r3
 801dc00:	d102      	bne.n	801dc08 <_printf_float+0x28c>
 801dc02:	6823      	ldr	r3, [r4, #0]
 801dc04:	07d9      	lsls	r1, r3, #31
 801dc06:	d5d7      	bpl.n	801dbb8 <_printf_float+0x23c>
 801dc08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dc0c:	4631      	mov	r1, r6
 801dc0e:	4628      	mov	r0, r5
 801dc10:	47b8      	blx	r7
 801dc12:	3001      	adds	r0, #1
 801dc14:	f43f af0d 	beq.w	801da32 <_printf_float+0xb6>
 801dc18:	f04f 0a00 	mov.w	sl, #0
 801dc1c:	f104 0b1a 	add.w	fp, r4, #26
 801dc20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc22:	425b      	negs	r3, r3
 801dc24:	4553      	cmp	r3, sl
 801dc26:	dc01      	bgt.n	801dc2c <_printf_float+0x2b0>
 801dc28:	464b      	mov	r3, r9
 801dc2a:	e793      	b.n	801db54 <_printf_float+0x1d8>
 801dc2c:	2301      	movs	r3, #1
 801dc2e:	465a      	mov	r2, fp
 801dc30:	4631      	mov	r1, r6
 801dc32:	4628      	mov	r0, r5
 801dc34:	47b8      	blx	r7
 801dc36:	3001      	adds	r0, #1
 801dc38:	f43f aefb 	beq.w	801da32 <_printf_float+0xb6>
 801dc3c:	f10a 0a01 	add.w	sl, sl, #1
 801dc40:	e7ee      	b.n	801dc20 <_printf_float+0x2a4>
 801dc42:	bf00      	nop
 801dc44:	7fefffff 	.word	0x7fefffff
 801dc48:	0802641b 	.word	0x0802641b
 801dc4c:	0802641f 	.word	0x0802641f
 801dc50:	08026423 	.word	0x08026423
 801dc54:	08026427 	.word	0x08026427
 801dc58:	0802642b 	.word	0x0802642b
 801dc5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801dc5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801dc62:	4553      	cmp	r3, sl
 801dc64:	bfa8      	it	ge
 801dc66:	4653      	movge	r3, sl
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	4699      	mov	r9, r3
 801dc6c:	dc36      	bgt.n	801dcdc <_printf_float+0x360>
 801dc6e:	f04f 0b00 	mov.w	fp, #0
 801dc72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dc76:	f104 021a 	add.w	r2, r4, #26
 801dc7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801dc7c:	9306      	str	r3, [sp, #24]
 801dc7e:	eba3 0309 	sub.w	r3, r3, r9
 801dc82:	455b      	cmp	r3, fp
 801dc84:	dc31      	bgt.n	801dcea <_printf_float+0x36e>
 801dc86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc88:	459a      	cmp	sl, r3
 801dc8a:	dc3a      	bgt.n	801dd02 <_printf_float+0x386>
 801dc8c:	6823      	ldr	r3, [r4, #0]
 801dc8e:	07da      	lsls	r2, r3, #31
 801dc90:	d437      	bmi.n	801dd02 <_printf_float+0x386>
 801dc92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc94:	ebaa 0903 	sub.w	r9, sl, r3
 801dc98:	9b06      	ldr	r3, [sp, #24]
 801dc9a:	ebaa 0303 	sub.w	r3, sl, r3
 801dc9e:	4599      	cmp	r9, r3
 801dca0:	bfa8      	it	ge
 801dca2:	4699      	movge	r9, r3
 801dca4:	f1b9 0f00 	cmp.w	r9, #0
 801dca8:	dc33      	bgt.n	801dd12 <_printf_float+0x396>
 801dcaa:	f04f 0800 	mov.w	r8, #0
 801dcae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dcb2:	f104 0b1a 	add.w	fp, r4, #26
 801dcb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dcb8:	ebaa 0303 	sub.w	r3, sl, r3
 801dcbc:	eba3 0309 	sub.w	r3, r3, r9
 801dcc0:	4543      	cmp	r3, r8
 801dcc2:	f77f af79 	ble.w	801dbb8 <_printf_float+0x23c>
 801dcc6:	2301      	movs	r3, #1
 801dcc8:	465a      	mov	r2, fp
 801dcca:	4631      	mov	r1, r6
 801dccc:	4628      	mov	r0, r5
 801dcce:	47b8      	blx	r7
 801dcd0:	3001      	adds	r0, #1
 801dcd2:	f43f aeae 	beq.w	801da32 <_printf_float+0xb6>
 801dcd6:	f108 0801 	add.w	r8, r8, #1
 801dcda:	e7ec      	b.n	801dcb6 <_printf_float+0x33a>
 801dcdc:	4642      	mov	r2, r8
 801dcde:	4631      	mov	r1, r6
 801dce0:	4628      	mov	r0, r5
 801dce2:	47b8      	blx	r7
 801dce4:	3001      	adds	r0, #1
 801dce6:	d1c2      	bne.n	801dc6e <_printf_float+0x2f2>
 801dce8:	e6a3      	b.n	801da32 <_printf_float+0xb6>
 801dcea:	2301      	movs	r3, #1
 801dcec:	4631      	mov	r1, r6
 801dcee:	4628      	mov	r0, r5
 801dcf0:	9206      	str	r2, [sp, #24]
 801dcf2:	47b8      	blx	r7
 801dcf4:	3001      	adds	r0, #1
 801dcf6:	f43f ae9c 	beq.w	801da32 <_printf_float+0xb6>
 801dcfa:	9a06      	ldr	r2, [sp, #24]
 801dcfc:	f10b 0b01 	add.w	fp, fp, #1
 801dd00:	e7bb      	b.n	801dc7a <_printf_float+0x2fe>
 801dd02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd06:	4631      	mov	r1, r6
 801dd08:	4628      	mov	r0, r5
 801dd0a:	47b8      	blx	r7
 801dd0c:	3001      	adds	r0, #1
 801dd0e:	d1c0      	bne.n	801dc92 <_printf_float+0x316>
 801dd10:	e68f      	b.n	801da32 <_printf_float+0xb6>
 801dd12:	9a06      	ldr	r2, [sp, #24]
 801dd14:	464b      	mov	r3, r9
 801dd16:	4442      	add	r2, r8
 801dd18:	4631      	mov	r1, r6
 801dd1a:	4628      	mov	r0, r5
 801dd1c:	47b8      	blx	r7
 801dd1e:	3001      	adds	r0, #1
 801dd20:	d1c3      	bne.n	801dcaa <_printf_float+0x32e>
 801dd22:	e686      	b.n	801da32 <_printf_float+0xb6>
 801dd24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801dd28:	f1ba 0f01 	cmp.w	sl, #1
 801dd2c:	dc01      	bgt.n	801dd32 <_printf_float+0x3b6>
 801dd2e:	07db      	lsls	r3, r3, #31
 801dd30:	d536      	bpl.n	801dda0 <_printf_float+0x424>
 801dd32:	2301      	movs	r3, #1
 801dd34:	4642      	mov	r2, r8
 801dd36:	4631      	mov	r1, r6
 801dd38:	4628      	mov	r0, r5
 801dd3a:	47b8      	blx	r7
 801dd3c:	3001      	adds	r0, #1
 801dd3e:	f43f ae78 	beq.w	801da32 <_printf_float+0xb6>
 801dd42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd46:	4631      	mov	r1, r6
 801dd48:	4628      	mov	r0, r5
 801dd4a:	47b8      	blx	r7
 801dd4c:	3001      	adds	r0, #1
 801dd4e:	f43f ae70 	beq.w	801da32 <_printf_float+0xb6>
 801dd52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801dd56:	2200      	movs	r2, #0
 801dd58:	2300      	movs	r3, #0
 801dd5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dd5e:	f7e2 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 801dd62:	b9c0      	cbnz	r0, 801dd96 <_printf_float+0x41a>
 801dd64:	4653      	mov	r3, sl
 801dd66:	f108 0201 	add.w	r2, r8, #1
 801dd6a:	4631      	mov	r1, r6
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	47b8      	blx	r7
 801dd70:	3001      	adds	r0, #1
 801dd72:	d10c      	bne.n	801dd8e <_printf_float+0x412>
 801dd74:	e65d      	b.n	801da32 <_printf_float+0xb6>
 801dd76:	2301      	movs	r3, #1
 801dd78:	465a      	mov	r2, fp
 801dd7a:	4631      	mov	r1, r6
 801dd7c:	4628      	mov	r0, r5
 801dd7e:	47b8      	blx	r7
 801dd80:	3001      	adds	r0, #1
 801dd82:	f43f ae56 	beq.w	801da32 <_printf_float+0xb6>
 801dd86:	f108 0801 	add.w	r8, r8, #1
 801dd8a:	45d0      	cmp	r8, sl
 801dd8c:	dbf3      	blt.n	801dd76 <_printf_float+0x3fa>
 801dd8e:	464b      	mov	r3, r9
 801dd90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801dd94:	e6df      	b.n	801db56 <_printf_float+0x1da>
 801dd96:	f04f 0800 	mov.w	r8, #0
 801dd9a:	f104 0b1a 	add.w	fp, r4, #26
 801dd9e:	e7f4      	b.n	801dd8a <_printf_float+0x40e>
 801dda0:	2301      	movs	r3, #1
 801dda2:	4642      	mov	r2, r8
 801dda4:	e7e1      	b.n	801dd6a <_printf_float+0x3ee>
 801dda6:	2301      	movs	r3, #1
 801dda8:	464a      	mov	r2, r9
 801ddaa:	4631      	mov	r1, r6
 801ddac:	4628      	mov	r0, r5
 801ddae:	47b8      	blx	r7
 801ddb0:	3001      	adds	r0, #1
 801ddb2:	f43f ae3e 	beq.w	801da32 <_printf_float+0xb6>
 801ddb6:	f108 0801 	add.w	r8, r8, #1
 801ddba:	68e3      	ldr	r3, [r4, #12]
 801ddbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ddbe:	1a5b      	subs	r3, r3, r1
 801ddc0:	4543      	cmp	r3, r8
 801ddc2:	dcf0      	bgt.n	801dda6 <_printf_float+0x42a>
 801ddc4:	e6fc      	b.n	801dbc0 <_printf_float+0x244>
 801ddc6:	f04f 0800 	mov.w	r8, #0
 801ddca:	f104 0919 	add.w	r9, r4, #25
 801ddce:	e7f4      	b.n	801ddba <_printf_float+0x43e>

0801ddd0 <_printf_common>:
 801ddd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddd4:	4616      	mov	r6, r2
 801ddd6:	4698      	mov	r8, r3
 801ddd8:	688a      	ldr	r2, [r1, #8]
 801ddda:	690b      	ldr	r3, [r1, #16]
 801dddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dde0:	4293      	cmp	r3, r2
 801dde2:	bfb8      	it	lt
 801dde4:	4613      	movlt	r3, r2
 801dde6:	6033      	str	r3, [r6, #0]
 801dde8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ddec:	4607      	mov	r7, r0
 801ddee:	460c      	mov	r4, r1
 801ddf0:	b10a      	cbz	r2, 801ddf6 <_printf_common+0x26>
 801ddf2:	3301      	adds	r3, #1
 801ddf4:	6033      	str	r3, [r6, #0]
 801ddf6:	6823      	ldr	r3, [r4, #0]
 801ddf8:	0699      	lsls	r1, r3, #26
 801ddfa:	bf42      	ittt	mi
 801ddfc:	6833      	ldrmi	r3, [r6, #0]
 801ddfe:	3302      	addmi	r3, #2
 801de00:	6033      	strmi	r3, [r6, #0]
 801de02:	6825      	ldr	r5, [r4, #0]
 801de04:	f015 0506 	ands.w	r5, r5, #6
 801de08:	d106      	bne.n	801de18 <_printf_common+0x48>
 801de0a:	f104 0a19 	add.w	sl, r4, #25
 801de0e:	68e3      	ldr	r3, [r4, #12]
 801de10:	6832      	ldr	r2, [r6, #0]
 801de12:	1a9b      	subs	r3, r3, r2
 801de14:	42ab      	cmp	r3, r5
 801de16:	dc26      	bgt.n	801de66 <_printf_common+0x96>
 801de18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801de1c:	6822      	ldr	r2, [r4, #0]
 801de1e:	3b00      	subs	r3, #0
 801de20:	bf18      	it	ne
 801de22:	2301      	movne	r3, #1
 801de24:	0692      	lsls	r2, r2, #26
 801de26:	d42b      	bmi.n	801de80 <_printf_common+0xb0>
 801de28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801de2c:	4641      	mov	r1, r8
 801de2e:	4638      	mov	r0, r7
 801de30:	47c8      	blx	r9
 801de32:	3001      	adds	r0, #1
 801de34:	d01e      	beq.n	801de74 <_printf_common+0xa4>
 801de36:	6823      	ldr	r3, [r4, #0]
 801de38:	6922      	ldr	r2, [r4, #16]
 801de3a:	f003 0306 	and.w	r3, r3, #6
 801de3e:	2b04      	cmp	r3, #4
 801de40:	bf02      	ittt	eq
 801de42:	68e5      	ldreq	r5, [r4, #12]
 801de44:	6833      	ldreq	r3, [r6, #0]
 801de46:	1aed      	subeq	r5, r5, r3
 801de48:	68a3      	ldr	r3, [r4, #8]
 801de4a:	bf0c      	ite	eq
 801de4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801de50:	2500      	movne	r5, #0
 801de52:	4293      	cmp	r3, r2
 801de54:	bfc4      	itt	gt
 801de56:	1a9b      	subgt	r3, r3, r2
 801de58:	18ed      	addgt	r5, r5, r3
 801de5a:	2600      	movs	r6, #0
 801de5c:	341a      	adds	r4, #26
 801de5e:	42b5      	cmp	r5, r6
 801de60:	d11a      	bne.n	801de98 <_printf_common+0xc8>
 801de62:	2000      	movs	r0, #0
 801de64:	e008      	b.n	801de78 <_printf_common+0xa8>
 801de66:	2301      	movs	r3, #1
 801de68:	4652      	mov	r2, sl
 801de6a:	4641      	mov	r1, r8
 801de6c:	4638      	mov	r0, r7
 801de6e:	47c8      	blx	r9
 801de70:	3001      	adds	r0, #1
 801de72:	d103      	bne.n	801de7c <_printf_common+0xac>
 801de74:	f04f 30ff 	mov.w	r0, #4294967295
 801de78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de7c:	3501      	adds	r5, #1
 801de7e:	e7c6      	b.n	801de0e <_printf_common+0x3e>
 801de80:	18e1      	adds	r1, r4, r3
 801de82:	1c5a      	adds	r2, r3, #1
 801de84:	2030      	movs	r0, #48	@ 0x30
 801de86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801de8a:	4422      	add	r2, r4
 801de8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801de90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801de94:	3302      	adds	r3, #2
 801de96:	e7c7      	b.n	801de28 <_printf_common+0x58>
 801de98:	2301      	movs	r3, #1
 801de9a:	4622      	mov	r2, r4
 801de9c:	4641      	mov	r1, r8
 801de9e:	4638      	mov	r0, r7
 801dea0:	47c8      	blx	r9
 801dea2:	3001      	adds	r0, #1
 801dea4:	d0e6      	beq.n	801de74 <_printf_common+0xa4>
 801dea6:	3601      	adds	r6, #1
 801dea8:	e7d9      	b.n	801de5e <_printf_common+0x8e>
	...

0801deac <_printf_i>:
 801deac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801deb0:	7e0f      	ldrb	r7, [r1, #24]
 801deb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801deb4:	2f78      	cmp	r7, #120	@ 0x78
 801deb6:	4691      	mov	r9, r2
 801deb8:	4680      	mov	r8, r0
 801deba:	460c      	mov	r4, r1
 801debc:	469a      	mov	sl, r3
 801debe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dec2:	d807      	bhi.n	801ded4 <_printf_i+0x28>
 801dec4:	2f62      	cmp	r7, #98	@ 0x62
 801dec6:	d80a      	bhi.n	801dede <_printf_i+0x32>
 801dec8:	2f00      	cmp	r7, #0
 801deca:	f000 80d2 	beq.w	801e072 <_printf_i+0x1c6>
 801dece:	2f58      	cmp	r7, #88	@ 0x58
 801ded0:	f000 80b9 	beq.w	801e046 <_printf_i+0x19a>
 801ded4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ded8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801dedc:	e03a      	b.n	801df54 <_printf_i+0xa8>
 801dede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801dee2:	2b15      	cmp	r3, #21
 801dee4:	d8f6      	bhi.n	801ded4 <_printf_i+0x28>
 801dee6:	a101      	add	r1, pc, #4	@ (adr r1, 801deec <_printf_i+0x40>)
 801dee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801deec:	0801df45 	.word	0x0801df45
 801def0:	0801df59 	.word	0x0801df59
 801def4:	0801ded5 	.word	0x0801ded5
 801def8:	0801ded5 	.word	0x0801ded5
 801defc:	0801ded5 	.word	0x0801ded5
 801df00:	0801ded5 	.word	0x0801ded5
 801df04:	0801df59 	.word	0x0801df59
 801df08:	0801ded5 	.word	0x0801ded5
 801df0c:	0801ded5 	.word	0x0801ded5
 801df10:	0801ded5 	.word	0x0801ded5
 801df14:	0801ded5 	.word	0x0801ded5
 801df18:	0801e059 	.word	0x0801e059
 801df1c:	0801df83 	.word	0x0801df83
 801df20:	0801e013 	.word	0x0801e013
 801df24:	0801ded5 	.word	0x0801ded5
 801df28:	0801ded5 	.word	0x0801ded5
 801df2c:	0801e07b 	.word	0x0801e07b
 801df30:	0801ded5 	.word	0x0801ded5
 801df34:	0801df83 	.word	0x0801df83
 801df38:	0801ded5 	.word	0x0801ded5
 801df3c:	0801ded5 	.word	0x0801ded5
 801df40:	0801e01b 	.word	0x0801e01b
 801df44:	6833      	ldr	r3, [r6, #0]
 801df46:	1d1a      	adds	r2, r3, #4
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	6032      	str	r2, [r6, #0]
 801df4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801df50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801df54:	2301      	movs	r3, #1
 801df56:	e09d      	b.n	801e094 <_printf_i+0x1e8>
 801df58:	6833      	ldr	r3, [r6, #0]
 801df5a:	6820      	ldr	r0, [r4, #0]
 801df5c:	1d19      	adds	r1, r3, #4
 801df5e:	6031      	str	r1, [r6, #0]
 801df60:	0606      	lsls	r6, r0, #24
 801df62:	d501      	bpl.n	801df68 <_printf_i+0xbc>
 801df64:	681d      	ldr	r5, [r3, #0]
 801df66:	e003      	b.n	801df70 <_printf_i+0xc4>
 801df68:	0645      	lsls	r5, r0, #25
 801df6a:	d5fb      	bpl.n	801df64 <_printf_i+0xb8>
 801df6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801df70:	2d00      	cmp	r5, #0
 801df72:	da03      	bge.n	801df7c <_printf_i+0xd0>
 801df74:	232d      	movs	r3, #45	@ 0x2d
 801df76:	426d      	negs	r5, r5
 801df78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801df7c:	4859      	ldr	r0, [pc, #356]	@ (801e0e4 <_printf_i+0x238>)
 801df7e:	230a      	movs	r3, #10
 801df80:	e011      	b.n	801dfa6 <_printf_i+0xfa>
 801df82:	6821      	ldr	r1, [r4, #0]
 801df84:	6833      	ldr	r3, [r6, #0]
 801df86:	0608      	lsls	r0, r1, #24
 801df88:	f853 5b04 	ldr.w	r5, [r3], #4
 801df8c:	d402      	bmi.n	801df94 <_printf_i+0xe8>
 801df8e:	0649      	lsls	r1, r1, #25
 801df90:	bf48      	it	mi
 801df92:	b2ad      	uxthmi	r5, r5
 801df94:	2f6f      	cmp	r7, #111	@ 0x6f
 801df96:	4853      	ldr	r0, [pc, #332]	@ (801e0e4 <_printf_i+0x238>)
 801df98:	6033      	str	r3, [r6, #0]
 801df9a:	bf14      	ite	ne
 801df9c:	230a      	movne	r3, #10
 801df9e:	2308      	moveq	r3, #8
 801dfa0:	2100      	movs	r1, #0
 801dfa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801dfa6:	6866      	ldr	r6, [r4, #4]
 801dfa8:	60a6      	str	r6, [r4, #8]
 801dfaa:	2e00      	cmp	r6, #0
 801dfac:	bfa2      	ittt	ge
 801dfae:	6821      	ldrge	r1, [r4, #0]
 801dfb0:	f021 0104 	bicge.w	r1, r1, #4
 801dfb4:	6021      	strge	r1, [r4, #0]
 801dfb6:	b90d      	cbnz	r5, 801dfbc <_printf_i+0x110>
 801dfb8:	2e00      	cmp	r6, #0
 801dfba:	d04b      	beq.n	801e054 <_printf_i+0x1a8>
 801dfbc:	4616      	mov	r6, r2
 801dfbe:	fbb5 f1f3 	udiv	r1, r5, r3
 801dfc2:	fb03 5711 	mls	r7, r3, r1, r5
 801dfc6:	5dc7      	ldrb	r7, [r0, r7]
 801dfc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dfcc:	462f      	mov	r7, r5
 801dfce:	42bb      	cmp	r3, r7
 801dfd0:	460d      	mov	r5, r1
 801dfd2:	d9f4      	bls.n	801dfbe <_printf_i+0x112>
 801dfd4:	2b08      	cmp	r3, #8
 801dfd6:	d10b      	bne.n	801dff0 <_printf_i+0x144>
 801dfd8:	6823      	ldr	r3, [r4, #0]
 801dfda:	07df      	lsls	r7, r3, #31
 801dfdc:	d508      	bpl.n	801dff0 <_printf_i+0x144>
 801dfde:	6923      	ldr	r3, [r4, #16]
 801dfe0:	6861      	ldr	r1, [r4, #4]
 801dfe2:	4299      	cmp	r1, r3
 801dfe4:	bfde      	ittt	le
 801dfe6:	2330      	movle	r3, #48	@ 0x30
 801dfe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dfec:	f106 36ff 	addle.w	r6, r6, #4294967295
 801dff0:	1b92      	subs	r2, r2, r6
 801dff2:	6122      	str	r2, [r4, #16]
 801dff4:	f8cd a000 	str.w	sl, [sp]
 801dff8:	464b      	mov	r3, r9
 801dffa:	aa03      	add	r2, sp, #12
 801dffc:	4621      	mov	r1, r4
 801dffe:	4640      	mov	r0, r8
 801e000:	f7ff fee6 	bl	801ddd0 <_printf_common>
 801e004:	3001      	adds	r0, #1
 801e006:	d14a      	bne.n	801e09e <_printf_i+0x1f2>
 801e008:	f04f 30ff 	mov.w	r0, #4294967295
 801e00c:	b004      	add	sp, #16
 801e00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e012:	6823      	ldr	r3, [r4, #0]
 801e014:	f043 0320 	orr.w	r3, r3, #32
 801e018:	6023      	str	r3, [r4, #0]
 801e01a:	4833      	ldr	r0, [pc, #204]	@ (801e0e8 <_printf_i+0x23c>)
 801e01c:	2778      	movs	r7, #120	@ 0x78
 801e01e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e022:	6823      	ldr	r3, [r4, #0]
 801e024:	6831      	ldr	r1, [r6, #0]
 801e026:	061f      	lsls	r7, r3, #24
 801e028:	f851 5b04 	ldr.w	r5, [r1], #4
 801e02c:	d402      	bmi.n	801e034 <_printf_i+0x188>
 801e02e:	065f      	lsls	r7, r3, #25
 801e030:	bf48      	it	mi
 801e032:	b2ad      	uxthmi	r5, r5
 801e034:	6031      	str	r1, [r6, #0]
 801e036:	07d9      	lsls	r1, r3, #31
 801e038:	bf44      	itt	mi
 801e03a:	f043 0320 	orrmi.w	r3, r3, #32
 801e03e:	6023      	strmi	r3, [r4, #0]
 801e040:	b11d      	cbz	r5, 801e04a <_printf_i+0x19e>
 801e042:	2310      	movs	r3, #16
 801e044:	e7ac      	b.n	801dfa0 <_printf_i+0xf4>
 801e046:	4827      	ldr	r0, [pc, #156]	@ (801e0e4 <_printf_i+0x238>)
 801e048:	e7e9      	b.n	801e01e <_printf_i+0x172>
 801e04a:	6823      	ldr	r3, [r4, #0]
 801e04c:	f023 0320 	bic.w	r3, r3, #32
 801e050:	6023      	str	r3, [r4, #0]
 801e052:	e7f6      	b.n	801e042 <_printf_i+0x196>
 801e054:	4616      	mov	r6, r2
 801e056:	e7bd      	b.n	801dfd4 <_printf_i+0x128>
 801e058:	6833      	ldr	r3, [r6, #0]
 801e05a:	6825      	ldr	r5, [r4, #0]
 801e05c:	6961      	ldr	r1, [r4, #20]
 801e05e:	1d18      	adds	r0, r3, #4
 801e060:	6030      	str	r0, [r6, #0]
 801e062:	062e      	lsls	r6, r5, #24
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	d501      	bpl.n	801e06c <_printf_i+0x1c0>
 801e068:	6019      	str	r1, [r3, #0]
 801e06a:	e002      	b.n	801e072 <_printf_i+0x1c6>
 801e06c:	0668      	lsls	r0, r5, #25
 801e06e:	d5fb      	bpl.n	801e068 <_printf_i+0x1bc>
 801e070:	8019      	strh	r1, [r3, #0]
 801e072:	2300      	movs	r3, #0
 801e074:	6123      	str	r3, [r4, #16]
 801e076:	4616      	mov	r6, r2
 801e078:	e7bc      	b.n	801dff4 <_printf_i+0x148>
 801e07a:	6833      	ldr	r3, [r6, #0]
 801e07c:	1d1a      	adds	r2, r3, #4
 801e07e:	6032      	str	r2, [r6, #0]
 801e080:	681e      	ldr	r6, [r3, #0]
 801e082:	6862      	ldr	r2, [r4, #4]
 801e084:	2100      	movs	r1, #0
 801e086:	4630      	mov	r0, r6
 801e088:	f7e2 f8a2 	bl	80001d0 <memchr>
 801e08c:	b108      	cbz	r0, 801e092 <_printf_i+0x1e6>
 801e08e:	1b80      	subs	r0, r0, r6
 801e090:	6060      	str	r0, [r4, #4]
 801e092:	6863      	ldr	r3, [r4, #4]
 801e094:	6123      	str	r3, [r4, #16]
 801e096:	2300      	movs	r3, #0
 801e098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e09c:	e7aa      	b.n	801dff4 <_printf_i+0x148>
 801e09e:	6923      	ldr	r3, [r4, #16]
 801e0a0:	4632      	mov	r2, r6
 801e0a2:	4649      	mov	r1, r9
 801e0a4:	4640      	mov	r0, r8
 801e0a6:	47d0      	blx	sl
 801e0a8:	3001      	adds	r0, #1
 801e0aa:	d0ad      	beq.n	801e008 <_printf_i+0x15c>
 801e0ac:	6823      	ldr	r3, [r4, #0]
 801e0ae:	079b      	lsls	r3, r3, #30
 801e0b0:	d413      	bmi.n	801e0da <_printf_i+0x22e>
 801e0b2:	68e0      	ldr	r0, [r4, #12]
 801e0b4:	9b03      	ldr	r3, [sp, #12]
 801e0b6:	4298      	cmp	r0, r3
 801e0b8:	bfb8      	it	lt
 801e0ba:	4618      	movlt	r0, r3
 801e0bc:	e7a6      	b.n	801e00c <_printf_i+0x160>
 801e0be:	2301      	movs	r3, #1
 801e0c0:	4632      	mov	r2, r6
 801e0c2:	4649      	mov	r1, r9
 801e0c4:	4640      	mov	r0, r8
 801e0c6:	47d0      	blx	sl
 801e0c8:	3001      	adds	r0, #1
 801e0ca:	d09d      	beq.n	801e008 <_printf_i+0x15c>
 801e0cc:	3501      	adds	r5, #1
 801e0ce:	68e3      	ldr	r3, [r4, #12]
 801e0d0:	9903      	ldr	r1, [sp, #12]
 801e0d2:	1a5b      	subs	r3, r3, r1
 801e0d4:	42ab      	cmp	r3, r5
 801e0d6:	dcf2      	bgt.n	801e0be <_printf_i+0x212>
 801e0d8:	e7eb      	b.n	801e0b2 <_printf_i+0x206>
 801e0da:	2500      	movs	r5, #0
 801e0dc:	f104 0619 	add.w	r6, r4, #25
 801e0e0:	e7f5      	b.n	801e0ce <_printf_i+0x222>
 801e0e2:	bf00      	nop
 801e0e4:	0802642d 	.word	0x0802642d
 801e0e8:	0802643e 	.word	0x0802643e

0801e0ec <_scanf_float>:
 801e0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f0:	b087      	sub	sp, #28
 801e0f2:	4617      	mov	r7, r2
 801e0f4:	9303      	str	r3, [sp, #12]
 801e0f6:	688b      	ldr	r3, [r1, #8]
 801e0f8:	1e5a      	subs	r2, r3, #1
 801e0fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e0fe:	bf81      	itttt	hi
 801e100:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e104:	eb03 0b05 	addhi.w	fp, r3, r5
 801e108:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e10c:	608b      	strhi	r3, [r1, #8]
 801e10e:	680b      	ldr	r3, [r1, #0]
 801e110:	460a      	mov	r2, r1
 801e112:	f04f 0500 	mov.w	r5, #0
 801e116:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e11a:	f842 3b1c 	str.w	r3, [r2], #28
 801e11e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e122:	4680      	mov	r8, r0
 801e124:	460c      	mov	r4, r1
 801e126:	bf98      	it	ls
 801e128:	f04f 0b00 	movls.w	fp, #0
 801e12c:	9201      	str	r2, [sp, #4]
 801e12e:	4616      	mov	r6, r2
 801e130:	46aa      	mov	sl, r5
 801e132:	46a9      	mov	r9, r5
 801e134:	9502      	str	r5, [sp, #8]
 801e136:	68a2      	ldr	r2, [r4, #8]
 801e138:	b152      	cbz	r2, 801e150 <_scanf_float+0x64>
 801e13a:	683b      	ldr	r3, [r7, #0]
 801e13c:	781b      	ldrb	r3, [r3, #0]
 801e13e:	2b4e      	cmp	r3, #78	@ 0x4e
 801e140:	d864      	bhi.n	801e20c <_scanf_float+0x120>
 801e142:	2b40      	cmp	r3, #64	@ 0x40
 801e144:	d83c      	bhi.n	801e1c0 <_scanf_float+0xd4>
 801e146:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e14a:	b2c8      	uxtb	r0, r1
 801e14c:	280e      	cmp	r0, #14
 801e14e:	d93a      	bls.n	801e1c6 <_scanf_float+0xda>
 801e150:	f1b9 0f00 	cmp.w	r9, #0
 801e154:	d003      	beq.n	801e15e <_scanf_float+0x72>
 801e156:	6823      	ldr	r3, [r4, #0]
 801e158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e15c:	6023      	str	r3, [r4, #0]
 801e15e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e162:	f1ba 0f01 	cmp.w	sl, #1
 801e166:	f200 8117 	bhi.w	801e398 <_scanf_float+0x2ac>
 801e16a:	9b01      	ldr	r3, [sp, #4]
 801e16c:	429e      	cmp	r6, r3
 801e16e:	f200 8108 	bhi.w	801e382 <_scanf_float+0x296>
 801e172:	2001      	movs	r0, #1
 801e174:	b007      	add	sp, #28
 801e176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e17a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e17e:	2a0d      	cmp	r2, #13
 801e180:	d8e6      	bhi.n	801e150 <_scanf_float+0x64>
 801e182:	a101      	add	r1, pc, #4	@ (adr r1, 801e188 <_scanf_float+0x9c>)
 801e184:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e188:	0801e2cf 	.word	0x0801e2cf
 801e18c:	0801e151 	.word	0x0801e151
 801e190:	0801e151 	.word	0x0801e151
 801e194:	0801e151 	.word	0x0801e151
 801e198:	0801e32f 	.word	0x0801e32f
 801e19c:	0801e307 	.word	0x0801e307
 801e1a0:	0801e151 	.word	0x0801e151
 801e1a4:	0801e151 	.word	0x0801e151
 801e1a8:	0801e2dd 	.word	0x0801e2dd
 801e1ac:	0801e151 	.word	0x0801e151
 801e1b0:	0801e151 	.word	0x0801e151
 801e1b4:	0801e151 	.word	0x0801e151
 801e1b8:	0801e151 	.word	0x0801e151
 801e1bc:	0801e295 	.word	0x0801e295
 801e1c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e1c4:	e7db      	b.n	801e17e <_scanf_float+0x92>
 801e1c6:	290e      	cmp	r1, #14
 801e1c8:	d8c2      	bhi.n	801e150 <_scanf_float+0x64>
 801e1ca:	a001      	add	r0, pc, #4	@ (adr r0, 801e1d0 <_scanf_float+0xe4>)
 801e1cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e1d0:	0801e285 	.word	0x0801e285
 801e1d4:	0801e151 	.word	0x0801e151
 801e1d8:	0801e285 	.word	0x0801e285
 801e1dc:	0801e31b 	.word	0x0801e31b
 801e1e0:	0801e151 	.word	0x0801e151
 801e1e4:	0801e22d 	.word	0x0801e22d
 801e1e8:	0801e26b 	.word	0x0801e26b
 801e1ec:	0801e26b 	.word	0x0801e26b
 801e1f0:	0801e26b 	.word	0x0801e26b
 801e1f4:	0801e26b 	.word	0x0801e26b
 801e1f8:	0801e26b 	.word	0x0801e26b
 801e1fc:	0801e26b 	.word	0x0801e26b
 801e200:	0801e26b 	.word	0x0801e26b
 801e204:	0801e26b 	.word	0x0801e26b
 801e208:	0801e26b 	.word	0x0801e26b
 801e20c:	2b6e      	cmp	r3, #110	@ 0x6e
 801e20e:	d809      	bhi.n	801e224 <_scanf_float+0x138>
 801e210:	2b60      	cmp	r3, #96	@ 0x60
 801e212:	d8b2      	bhi.n	801e17a <_scanf_float+0x8e>
 801e214:	2b54      	cmp	r3, #84	@ 0x54
 801e216:	d07b      	beq.n	801e310 <_scanf_float+0x224>
 801e218:	2b59      	cmp	r3, #89	@ 0x59
 801e21a:	d199      	bne.n	801e150 <_scanf_float+0x64>
 801e21c:	2d07      	cmp	r5, #7
 801e21e:	d197      	bne.n	801e150 <_scanf_float+0x64>
 801e220:	2508      	movs	r5, #8
 801e222:	e02c      	b.n	801e27e <_scanf_float+0x192>
 801e224:	2b74      	cmp	r3, #116	@ 0x74
 801e226:	d073      	beq.n	801e310 <_scanf_float+0x224>
 801e228:	2b79      	cmp	r3, #121	@ 0x79
 801e22a:	e7f6      	b.n	801e21a <_scanf_float+0x12e>
 801e22c:	6821      	ldr	r1, [r4, #0]
 801e22e:	05c8      	lsls	r0, r1, #23
 801e230:	d51b      	bpl.n	801e26a <_scanf_float+0x17e>
 801e232:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e236:	6021      	str	r1, [r4, #0]
 801e238:	f109 0901 	add.w	r9, r9, #1
 801e23c:	f1bb 0f00 	cmp.w	fp, #0
 801e240:	d003      	beq.n	801e24a <_scanf_float+0x15e>
 801e242:	3201      	adds	r2, #1
 801e244:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e248:	60a2      	str	r2, [r4, #8]
 801e24a:	68a3      	ldr	r3, [r4, #8]
 801e24c:	3b01      	subs	r3, #1
 801e24e:	60a3      	str	r3, [r4, #8]
 801e250:	6923      	ldr	r3, [r4, #16]
 801e252:	3301      	adds	r3, #1
 801e254:	6123      	str	r3, [r4, #16]
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	3b01      	subs	r3, #1
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	607b      	str	r3, [r7, #4]
 801e25e:	f340 8087 	ble.w	801e370 <_scanf_float+0x284>
 801e262:	683b      	ldr	r3, [r7, #0]
 801e264:	3301      	adds	r3, #1
 801e266:	603b      	str	r3, [r7, #0]
 801e268:	e765      	b.n	801e136 <_scanf_float+0x4a>
 801e26a:	eb1a 0105 	adds.w	r1, sl, r5
 801e26e:	f47f af6f 	bne.w	801e150 <_scanf_float+0x64>
 801e272:	6822      	ldr	r2, [r4, #0]
 801e274:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e278:	6022      	str	r2, [r4, #0]
 801e27a:	460d      	mov	r5, r1
 801e27c:	468a      	mov	sl, r1
 801e27e:	f806 3b01 	strb.w	r3, [r6], #1
 801e282:	e7e2      	b.n	801e24a <_scanf_float+0x15e>
 801e284:	6822      	ldr	r2, [r4, #0]
 801e286:	0610      	lsls	r0, r2, #24
 801e288:	f57f af62 	bpl.w	801e150 <_scanf_float+0x64>
 801e28c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e290:	6022      	str	r2, [r4, #0]
 801e292:	e7f4      	b.n	801e27e <_scanf_float+0x192>
 801e294:	f1ba 0f00 	cmp.w	sl, #0
 801e298:	d10e      	bne.n	801e2b8 <_scanf_float+0x1cc>
 801e29a:	f1b9 0f00 	cmp.w	r9, #0
 801e29e:	d10e      	bne.n	801e2be <_scanf_float+0x1d2>
 801e2a0:	6822      	ldr	r2, [r4, #0]
 801e2a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e2a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e2aa:	d108      	bne.n	801e2be <_scanf_float+0x1d2>
 801e2ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e2b0:	6022      	str	r2, [r4, #0]
 801e2b2:	f04f 0a01 	mov.w	sl, #1
 801e2b6:	e7e2      	b.n	801e27e <_scanf_float+0x192>
 801e2b8:	f1ba 0f02 	cmp.w	sl, #2
 801e2bc:	d055      	beq.n	801e36a <_scanf_float+0x27e>
 801e2be:	2d01      	cmp	r5, #1
 801e2c0:	d002      	beq.n	801e2c8 <_scanf_float+0x1dc>
 801e2c2:	2d04      	cmp	r5, #4
 801e2c4:	f47f af44 	bne.w	801e150 <_scanf_float+0x64>
 801e2c8:	3501      	adds	r5, #1
 801e2ca:	b2ed      	uxtb	r5, r5
 801e2cc:	e7d7      	b.n	801e27e <_scanf_float+0x192>
 801e2ce:	f1ba 0f01 	cmp.w	sl, #1
 801e2d2:	f47f af3d 	bne.w	801e150 <_scanf_float+0x64>
 801e2d6:	f04f 0a02 	mov.w	sl, #2
 801e2da:	e7d0      	b.n	801e27e <_scanf_float+0x192>
 801e2dc:	b97d      	cbnz	r5, 801e2fe <_scanf_float+0x212>
 801e2de:	f1b9 0f00 	cmp.w	r9, #0
 801e2e2:	f47f af38 	bne.w	801e156 <_scanf_float+0x6a>
 801e2e6:	6822      	ldr	r2, [r4, #0]
 801e2e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e2ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e2f0:	f040 8108 	bne.w	801e504 <_scanf_float+0x418>
 801e2f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e2f8:	6022      	str	r2, [r4, #0]
 801e2fa:	2501      	movs	r5, #1
 801e2fc:	e7bf      	b.n	801e27e <_scanf_float+0x192>
 801e2fe:	2d03      	cmp	r5, #3
 801e300:	d0e2      	beq.n	801e2c8 <_scanf_float+0x1dc>
 801e302:	2d05      	cmp	r5, #5
 801e304:	e7de      	b.n	801e2c4 <_scanf_float+0x1d8>
 801e306:	2d02      	cmp	r5, #2
 801e308:	f47f af22 	bne.w	801e150 <_scanf_float+0x64>
 801e30c:	2503      	movs	r5, #3
 801e30e:	e7b6      	b.n	801e27e <_scanf_float+0x192>
 801e310:	2d06      	cmp	r5, #6
 801e312:	f47f af1d 	bne.w	801e150 <_scanf_float+0x64>
 801e316:	2507      	movs	r5, #7
 801e318:	e7b1      	b.n	801e27e <_scanf_float+0x192>
 801e31a:	6822      	ldr	r2, [r4, #0]
 801e31c:	0591      	lsls	r1, r2, #22
 801e31e:	f57f af17 	bpl.w	801e150 <_scanf_float+0x64>
 801e322:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e326:	6022      	str	r2, [r4, #0]
 801e328:	f8cd 9008 	str.w	r9, [sp, #8]
 801e32c:	e7a7      	b.n	801e27e <_scanf_float+0x192>
 801e32e:	6822      	ldr	r2, [r4, #0]
 801e330:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e334:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e338:	d006      	beq.n	801e348 <_scanf_float+0x25c>
 801e33a:	0550      	lsls	r0, r2, #21
 801e33c:	f57f af08 	bpl.w	801e150 <_scanf_float+0x64>
 801e340:	f1b9 0f00 	cmp.w	r9, #0
 801e344:	f000 80de 	beq.w	801e504 <_scanf_float+0x418>
 801e348:	0591      	lsls	r1, r2, #22
 801e34a:	bf58      	it	pl
 801e34c:	9902      	ldrpl	r1, [sp, #8]
 801e34e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e352:	bf58      	it	pl
 801e354:	eba9 0101 	subpl.w	r1, r9, r1
 801e358:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e35c:	bf58      	it	pl
 801e35e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e362:	6022      	str	r2, [r4, #0]
 801e364:	f04f 0900 	mov.w	r9, #0
 801e368:	e789      	b.n	801e27e <_scanf_float+0x192>
 801e36a:	f04f 0a03 	mov.w	sl, #3
 801e36e:	e786      	b.n	801e27e <_scanf_float+0x192>
 801e370:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e374:	4639      	mov	r1, r7
 801e376:	4640      	mov	r0, r8
 801e378:	4798      	blx	r3
 801e37a:	2800      	cmp	r0, #0
 801e37c:	f43f aedb 	beq.w	801e136 <_scanf_float+0x4a>
 801e380:	e6e6      	b.n	801e150 <_scanf_float+0x64>
 801e382:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e386:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e38a:	463a      	mov	r2, r7
 801e38c:	4640      	mov	r0, r8
 801e38e:	4798      	blx	r3
 801e390:	6923      	ldr	r3, [r4, #16]
 801e392:	3b01      	subs	r3, #1
 801e394:	6123      	str	r3, [r4, #16]
 801e396:	e6e8      	b.n	801e16a <_scanf_float+0x7e>
 801e398:	1e6b      	subs	r3, r5, #1
 801e39a:	2b06      	cmp	r3, #6
 801e39c:	d824      	bhi.n	801e3e8 <_scanf_float+0x2fc>
 801e39e:	2d02      	cmp	r5, #2
 801e3a0:	d836      	bhi.n	801e410 <_scanf_float+0x324>
 801e3a2:	9b01      	ldr	r3, [sp, #4]
 801e3a4:	429e      	cmp	r6, r3
 801e3a6:	f67f aee4 	bls.w	801e172 <_scanf_float+0x86>
 801e3aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e3ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e3b2:	463a      	mov	r2, r7
 801e3b4:	4640      	mov	r0, r8
 801e3b6:	4798      	blx	r3
 801e3b8:	6923      	ldr	r3, [r4, #16]
 801e3ba:	3b01      	subs	r3, #1
 801e3bc:	6123      	str	r3, [r4, #16]
 801e3be:	e7f0      	b.n	801e3a2 <_scanf_float+0x2b6>
 801e3c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e3c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e3c8:	463a      	mov	r2, r7
 801e3ca:	4640      	mov	r0, r8
 801e3cc:	4798      	blx	r3
 801e3ce:	6923      	ldr	r3, [r4, #16]
 801e3d0:	3b01      	subs	r3, #1
 801e3d2:	6123      	str	r3, [r4, #16]
 801e3d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e3d8:	fa5f fa8a 	uxtb.w	sl, sl
 801e3dc:	f1ba 0f02 	cmp.w	sl, #2
 801e3e0:	d1ee      	bne.n	801e3c0 <_scanf_float+0x2d4>
 801e3e2:	3d03      	subs	r5, #3
 801e3e4:	b2ed      	uxtb	r5, r5
 801e3e6:	1b76      	subs	r6, r6, r5
 801e3e8:	6823      	ldr	r3, [r4, #0]
 801e3ea:	05da      	lsls	r2, r3, #23
 801e3ec:	d530      	bpl.n	801e450 <_scanf_float+0x364>
 801e3ee:	055b      	lsls	r3, r3, #21
 801e3f0:	d511      	bpl.n	801e416 <_scanf_float+0x32a>
 801e3f2:	9b01      	ldr	r3, [sp, #4]
 801e3f4:	429e      	cmp	r6, r3
 801e3f6:	f67f aebc 	bls.w	801e172 <_scanf_float+0x86>
 801e3fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e3fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e402:	463a      	mov	r2, r7
 801e404:	4640      	mov	r0, r8
 801e406:	4798      	blx	r3
 801e408:	6923      	ldr	r3, [r4, #16]
 801e40a:	3b01      	subs	r3, #1
 801e40c:	6123      	str	r3, [r4, #16]
 801e40e:	e7f0      	b.n	801e3f2 <_scanf_float+0x306>
 801e410:	46aa      	mov	sl, r5
 801e412:	46b3      	mov	fp, r6
 801e414:	e7de      	b.n	801e3d4 <_scanf_float+0x2e8>
 801e416:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e41a:	6923      	ldr	r3, [r4, #16]
 801e41c:	2965      	cmp	r1, #101	@ 0x65
 801e41e:	f103 33ff 	add.w	r3, r3, #4294967295
 801e422:	f106 35ff 	add.w	r5, r6, #4294967295
 801e426:	6123      	str	r3, [r4, #16]
 801e428:	d00c      	beq.n	801e444 <_scanf_float+0x358>
 801e42a:	2945      	cmp	r1, #69	@ 0x45
 801e42c:	d00a      	beq.n	801e444 <_scanf_float+0x358>
 801e42e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e432:	463a      	mov	r2, r7
 801e434:	4640      	mov	r0, r8
 801e436:	4798      	blx	r3
 801e438:	6923      	ldr	r3, [r4, #16]
 801e43a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e43e:	3b01      	subs	r3, #1
 801e440:	1eb5      	subs	r5, r6, #2
 801e442:	6123      	str	r3, [r4, #16]
 801e444:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e448:	463a      	mov	r2, r7
 801e44a:	4640      	mov	r0, r8
 801e44c:	4798      	blx	r3
 801e44e:	462e      	mov	r6, r5
 801e450:	6822      	ldr	r2, [r4, #0]
 801e452:	f012 0210 	ands.w	r2, r2, #16
 801e456:	d001      	beq.n	801e45c <_scanf_float+0x370>
 801e458:	2000      	movs	r0, #0
 801e45a:	e68b      	b.n	801e174 <_scanf_float+0x88>
 801e45c:	7032      	strb	r2, [r6, #0]
 801e45e:	6823      	ldr	r3, [r4, #0]
 801e460:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e468:	d11c      	bne.n	801e4a4 <_scanf_float+0x3b8>
 801e46a:	9b02      	ldr	r3, [sp, #8]
 801e46c:	454b      	cmp	r3, r9
 801e46e:	eba3 0209 	sub.w	r2, r3, r9
 801e472:	d123      	bne.n	801e4bc <_scanf_float+0x3d0>
 801e474:	9901      	ldr	r1, [sp, #4]
 801e476:	2200      	movs	r2, #0
 801e478:	4640      	mov	r0, r8
 801e47a:	f002 fda1 	bl	8020fc0 <_strtod_r>
 801e47e:	9b03      	ldr	r3, [sp, #12]
 801e480:	6821      	ldr	r1, [r4, #0]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	f011 0f02 	tst.w	r1, #2
 801e488:	ec57 6b10 	vmov	r6, r7, d0
 801e48c:	f103 0204 	add.w	r2, r3, #4
 801e490:	d01f      	beq.n	801e4d2 <_scanf_float+0x3e6>
 801e492:	9903      	ldr	r1, [sp, #12]
 801e494:	600a      	str	r2, [r1, #0]
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	e9c3 6700 	strd	r6, r7, [r3]
 801e49c:	68e3      	ldr	r3, [r4, #12]
 801e49e:	3301      	adds	r3, #1
 801e4a0:	60e3      	str	r3, [r4, #12]
 801e4a2:	e7d9      	b.n	801e458 <_scanf_float+0x36c>
 801e4a4:	9b04      	ldr	r3, [sp, #16]
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d0e4      	beq.n	801e474 <_scanf_float+0x388>
 801e4aa:	9905      	ldr	r1, [sp, #20]
 801e4ac:	230a      	movs	r3, #10
 801e4ae:	3101      	adds	r1, #1
 801e4b0:	4640      	mov	r0, r8
 801e4b2:	f7ff f975 	bl	801d7a0 <_strtol_r>
 801e4b6:	9b04      	ldr	r3, [sp, #16]
 801e4b8:	9e05      	ldr	r6, [sp, #20]
 801e4ba:	1ac2      	subs	r2, r0, r3
 801e4bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e4c0:	429e      	cmp	r6, r3
 801e4c2:	bf28      	it	cs
 801e4c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e4c8:	4910      	ldr	r1, [pc, #64]	@ (801e50c <_scanf_float+0x420>)
 801e4ca:	4630      	mov	r0, r6
 801e4cc:	f000 f9b6 	bl	801e83c <siprintf>
 801e4d0:	e7d0      	b.n	801e474 <_scanf_float+0x388>
 801e4d2:	f011 0f04 	tst.w	r1, #4
 801e4d6:	9903      	ldr	r1, [sp, #12]
 801e4d8:	600a      	str	r2, [r1, #0]
 801e4da:	d1dc      	bne.n	801e496 <_scanf_float+0x3aa>
 801e4dc:	681d      	ldr	r5, [r3, #0]
 801e4de:	4632      	mov	r2, r6
 801e4e0:	463b      	mov	r3, r7
 801e4e2:	4630      	mov	r0, r6
 801e4e4:	4639      	mov	r1, r7
 801e4e6:	f7e2 fb21 	bl	8000b2c <__aeabi_dcmpun>
 801e4ea:	b128      	cbz	r0, 801e4f8 <_scanf_float+0x40c>
 801e4ec:	4808      	ldr	r0, [pc, #32]	@ (801e510 <_scanf_float+0x424>)
 801e4ee:	f000 fb43 	bl	801eb78 <nanf>
 801e4f2:	ed85 0a00 	vstr	s0, [r5]
 801e4f6:	e7d1      	b.n	801e49c <_scanf_float+0x3b0>
 801e4f8:	4630      	mov	r0, r6
 801e4fa:	4639      	mov	r1, r7
 801e4fc:	f7e2 fb74 	bl	8000be8 <__aeabi_d2f>
 801e500:	6028      	str	r0, [r5, #0]
 801e502:	e7cb      	b.n	801e49c <_scanf_float+0x3b0>
 801e504:	f04f 0900 	mov.w	r9, #0
 801e508:	e629      	b.n	801e15e <_scanf_float+0x72>
 801e50a:	bf00      	nop
 801e50c:	0802644f 	.word	0x0802644f
 801e510:	0802648f 	.word	0x0802648f

0801e514 <__sflush_r>:
 801e514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e51c:	0716      	lsls	r6, r2, #28
 801e51e:	4605      	mov	r5, r0
 801e520:	460c      	mov	r4, r1
 801e522:	d454      	bmi.n	801e5ce <__sflush_r+0xba>
 801e524:	684b      	ldr	r3, [r1, #4]
 801e526:	2b00      	cmp	r3, #0
 801e528:	dc02      	bgt.n	801e530 <__sflush_r+0x1c>
 801e52a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e52c:	2b00      	cmp	r3, #0
 801e52e:	dd48      	ble.n	801e5c2 <__sflush_r+0xae>
 801e530:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e532:	2e00      	cmp	r6, #0
 801e534:	d045      	beq.n	801e5c2 <__sflush_r+0xae>
 801e536:	2300      	movs	r3, #0
 801e538:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e53c:	682f      	ldr	r7, [r5, #0]
 801e53e:	6a21      	ldr	r1, [r4, #32]
 801e540:	602b      	str	r3, [r5, #0]
 801e542:	d030      	beq.n	801e5a6 <__sflush_r+0x92>
 801e544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e546:	89a3      	ldrh	r3, [r4, #12]
 801e548:	0759      	lsls	r1, r3, #29
 801e54a:	d505      	bpl.n	801e558 <__sflush_r+0x44>
 801e54c:	6863      	ldr	r3, [r4, #4]
 801e54e:	1ad2      	subs	r2, r2, r3
 801e550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e552:	b10b      	cbz	r3, 801e558 <__sflush_r+0x44>
 801e554:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e556:	1ad2      	subs	r2, r2, r3
 801e558:	2300      	movs	r3, #0
 801e55a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e55c:	6a21      	ldr	r1, [r4, #32]
 801e55e:	4628      	mov	r0, r5
 801e560:	47b0      	blx	r6
 801e562:	1c43      	adds	r3, r0, #1
 801e564:	89a3      	ldrh	r3, [r4, #12]
 801e566:	d106      	bne.n	801e576 <__sflush_r+0x62>
 801e568:	6829      	ldr	r1, [r5, #0]
 801e56a:	291d      	cmp	r1, #29
 801e56c:	d82b      	bhi.n	801e5c6 <__sflush_r+0xb2>
 801e56e:	4a2a      	ldr	r2, [pc, #168]	@ (801e618 <__sflush_r+0x104>)
 801e570:	410a      	asrs	r2, r1
 801e572:	07d6      	lsls	r6, r2, #31
 801e574:	d427      	bmi.n	801e5c6 <__sflush_r+0xb2>
 801e576:	2200      	movs	r2, #0
 801e578:	6062      	str	r2, [r4, #4]
 801e57a:	04d9      	lsls	r1, r3, #19
 801e57c:	6922      	ldr	r2, [r4, #16]
 801e57e:	6022      	str	r2, [r4, #0]
 801e580:	d504      	bpl.n	801e58c <__sflush_r+0x78>
 801e582:	1c42      	adds	r2, r0, #1
 801e584:	d101      	bne.n	801e58a <__sflush_r+0x76>
 801e586:	682b      	ldr	r3, [r5, #0]
 801e588:	b903      	cbnz	r3, 801e58c <__sflush_r+0x78>
 801e58a:	6560      	str	r0, [r4, #84]	@ 0x54
 801e58c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e58e:	602f      	str	r7, [r5, #0]
 801e590:	b1b9      	cbz	r1, 801e5c2 <__sflush_r+0xae>
 801e592:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e596:	4299      	cmp	r1, r3
 801e598:	d002      	beq.n	801e5a0 <__sflush_r+0x8c>
 801e59a:	4628      	mov	r0, r5
 801e59c:	f001 f95c 	bl	801f858 <_free_r>
 801e5a0:	2300      	movs	r3, #0
 801e5a2:	6363      	str	r3, [r4, #52]	@ 0x34
 801e5a4:	e00d      	b.n	801e5c2 <__sflush_r+0xae>
 801e5a6:	2301      	movs	r3, #1
 801e5a8:	4628      	mov	r0, r5
 801e5aa:	47b0      	blx	r6
 801e5ac:	4602      	mov	r2, r0
 801e5ae:	1c50      	adds	r0, r2, #1
 801e5b0:	d1c9      	bne.n	801e546 <__sflush_r+0x32>
 801e5b2:	682b      	ldr	r3, [r5, #0]
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	d0c6      	beq.n	801e546 <__sflush_r+0x32>
 801e5b8:	2b1d      	cmp	r3, #29
 801e5ba:	d001      	beq.n	801e5c0 <__sflush_r+0xac>
 801e5bc:	2b16      	cmp	r3, #22
 801e5be:	d11e      	bne.n	801e5fe <__sflush_r+0xea>
 801e5c0:	602f      	str	r7, [r5, #0]
 801e5c2:	2000      	movs	r0, #0
 801e5c4:	e022      	b.n	801e60c <__sflush_r+0xf8>
 801e5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e5ca:	b21b      	sxth	r3, r3
 801e5cc:	e01b      	b.n	801e606 <__sflush_r+0xf2>
 801e5ce:	690f      	ldr	r7, [r1, #16]
 801e5d0:	2f00      	cmp	r7, #0
 801e5d2:	d0f6      	beq.n	801e5c2 <__sflush_r+0xae>
 801e5d4:	0793      	lsls	r3, r2, #30
 801e5d6:	680e      	ldr	r6, [r1, #0]
 801e5d8:	bf08      	it	eq
 801e5da:	694b      	ldreq	r3, [r1, #20]
 801e5dc:	600f      	str	r7, [r1, #0]
 801e5de:	bf18      	it	ne
 801e5e0:	2300      	movne	r3, #0
 801e5e2:	eba6 0807 	sub.w	r8, r6, r7
 801e5e6:	608b      	str	r3, [r1, #8]
 801e5e8:	f1b8 0f00 	cmp.w	r8, #0
 801e5ec:	dde9      	ble.n	801e5c2 <__sflush_r+0xae>
 801e5ee:	6a21      	ldr	r1, [r4, #32]
 801e5f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e5f2:	4643      	mov	r3, r8
 801e5f4:	463a      	mov	r2, r7
 801e5f6:	4628      	mov	r0, r5
 801e5f8:	47b0      	blx	r6
 801e5fa:	2800      	cmp	r0, #0
 801e5fc:	dc08      	bgt.n	801e610 <__sflush_r+0xfc>
 801e5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e606:	81a3      	strh	r3, [r4, #12]
 801e608:	f04f 30ff 	mov.w	r0, #4294967295
 801e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e610:	4407      	add	r7, r0
 801e612:	eba8 0800 	sub.w	r8, r8, r0
 801e616:	e7e7      	b.n	801e5e8 <__sflush_r+0xd4>
 801e618:	dfbffffe 	.word	0xdfbffffe

0801e61c <_fflush_r>:
 801e61c:	b538      	push	{r3, r4, r5, lr}
 801e61e:	690b      	ldr	r3, [r1, #16]
 801e620:	4605      	mov	r5, r0
 801e622:	460c      	mov	r4, r1
 801e624:	b913      	cbnz	r3, 801e62c <_fflush_r+0x10>
 801e626:	2500      	movs	r5, #0
 801e628:	4628      	mov	r0, r5
 801e62a:	bd38      	pop	{r3, r4, r5, pc}
 801e62c:	b118      	cbz	r0, 801e636 <_fflush_r+0x1a>
 801e62e:	6a03      	ldr	r3, [r0, #32]
 801e630:	b90b      	cbnz	r3, 801e636 <_fflush_r+0x1a>
 801e632:	f000 f8bb 	bl	801e7ac <__sinit>
 801e636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	d0f3      	beq.n	801e626 <_fflush_r+0xa>
 801e63e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e640:	07d0      	lsls	r0, r2, #31
 801e642:	d404      	bmi.n	801e64e <_fflush_r+0x32>
 801e644:	0599      	lsls	r1, r3, #22
 801e646:	d402      	bmi.n	801e64e <_fflush_r+0x32>
 801e648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e64a:	f000 fa7c 	bl	801eb46 <__retarget_lock_acquire_recursive>
 801e64e:	4628      	mov	r0, r5
 801e650:	4621      	mov	r1, r4
 801e652:	f7ff ff5f 	bl	801e514 <__sflush_r>
 801e656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e658:	07da      	lsls	r2, r3, #31
 801e65a:	4605      	mov	r5, r0
 801e65c:	d4e4      	bmi.n	801e628 <_fflush_r+0xc>
 801e65e:	89a3      	ldrh	r3, [r4, #12]
 801e660:	059b      	lsls	r3, r3, #22
 801e662:	d4e1      	bmi.n	801e628 <_fflush_r+0xc>
 801e664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e666:	f000 fa6f 	bl	801eb48 <__retarget_lock_release_recursive>
 801e66a:	e7dd      	b.n	801e628 <_fflush_r+0xc>

0801e66c <fflush>:
 801e66c:	4601      	mov	r1, r0
 801e66e:	b920      	cbnz	r0, 801e67a <fflush+0xe>
 801e670:	4a04      	ldr	r2, [pc, #16]	@ (801e684 <fflush+0x18>)
 801e672:	4905      	ldr	r1, [pc, #20]	@ (801e688 <fflush+0x1c>)
 801e674:	4805      	ldr	r0, [pc, #20]	@ (801e68c <fflush+0x20>)
 801e676:	f000 b8b1 	b.w	801e7dc <_fwalk_sglue>
 801e67a:	4b05      	ldr	r3, [pc, #20]	@ (801e690 <fflush+0x24>)
 801e67c:	6818      	ldr	r0, [r3, #0]
 801e67e:	f7ff bfcd 	b.w	801e61c <_fflush_r>
 801e682:	bf00      	nop
 801e684:	20000048 	.word	0x20000048
 801e688:	0801e61d 	.word	0x0801e61d
 801e68c:	20000058 	.word	0x20000058
 801e690:	20000054 	.word	0x20000054

0801e694 <std>:
 801e694:	2300      	movs	r3, #0
 801e696:	b510      	push	{r4, lr}
 801e698:	4604      	mov	r4, r0
 801e69a:	e9c0 3300 	strd	r3, r3, [r0]
 801e69e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e6a2:	6083      	str	r3, [r0, #8]
 801e6a4:	8181      	strh	r1, [r0, #12]
 801e6a6:	6643      	str	r3, [r0, #100]	@ 0x64
 801e6a8:	81c2      	strh	r2, [r0, #14]
 801e6aa:	6183      	str	r3, [r0, #24]
 801e6ac:	4619      	mov	r1, r3
 801e6ae:	2208      	movs	r2, #8
 801e6b0:	305c      	adds	r0, #92	@ 0x5c
 801e6b2:	f000 f950 	bl	801e956 <memset>
 801e6b6:	4b0d      	ldr	r3, [pc, #52]	@ (801e6ec <std+0x58>)
 801e6b8:	6263      	str	r3, [r4, #36]	@ 0x24
 801e6ba:	4b0d      	ldr	r3, [pc, #52]	@ (801e6f0 <std+0x5c>)
 801e6bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e6be:	4b0d      	ldr	r3, [pc, #52]	@ (801e6f4 <std+0x60>)
 801e6c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e6c2:	4b0d      	ldr	r3, [pc, #52]	@ (801e6f8 <std+0x64>)
 801e6c4:	6323      	str	r3, [r4, #48]	@ 0x30
 801e6c6:	4b0d      	ldr	r3, [pc, #52]	@ (801e6fc <std+0x68>)
 801e6c8:	6224      	str	r4, [r4, #32]
 801e6ca:	429c      	cmp	r4, r3
 801e6cc:	d006      	beq.n	801e6dc <std+0x48>
 801e6ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e6d2:	4294      	cmp	r4, r2
 801e6d4:	d002      	beq.n	801e6dc <std+0x48>
 801e6d6:	33d0      	adds	r3, #208	@ 0xd0
 801e6d8:	429c      	cmp	r4, r3
 801e6da:	d105      	bne.n	801e6e8 <std+0x54>
 801e6dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6e4:	f000 ba2e 	b.w	801eb44 <__retarget_lock_init_recursive>
 801e6e8:	bd10      	pop	{r4, pc}
 801e6ea:	bf00      	nop
 801e6ec:	0801e87d 	.word	0x0801e87d
 801e6f0:	0801e89f 	.word	0x0801e89f
 801e6f4:	0801e8d7 	.word	0x0801e8d7
 801e6f8:	0801e8fb 	.word	0x0801e8fb
 801e6fc:	2000f624 	.word	0x2000f624

0801e700 <stdio_exit_handler>:
 801e700:	4a02      	ldr	r2, [pc, #8]	@ (801e70c <stdio_exit_handler+0xc>)
 801e702:	4903      	ldr	r1, [pc, #12]	@ (801e710 <stdio_exit_handler+0x10>)
 801e704:	4803      	ldr	r0, [pc, #12]	@ (801e714 <stdio_exit_handler+0x14>)
 801e706:	f000 b869 	b.w	801e7dc <_fwalk_sglue>
 801e70a:	bf00      	nop
 801e70c:	20000048 	.word	0x20000048
 801e710:	0801e61d 	.word	0x0801e61d
 801e714:	20000058 	.word	0x20000058

0801e718 <cleanup_stdio>:
 801e718:	6841      	ldr	r1, [r0, #4]
 801e71a:	4b0c      	ldr	r3, [pc, #48]	@ (801e74c <cleanup_stdio+0x34>)
 801e71c:	4299      	cmp	r1, r3
 801e71e:	b510      	push	{r4, lr}
 801e720:	4604      	mov	r4, r0
 801e722:	d001      	beq.n	801e728 <cleanup_stdio+0x10>
 801e724:	f7ff ff7a 	bl	801e61c <_fflush_r>
 801e728:	68a1      	ldr	r1, [r4, #8]
 801e72a:	4b09      	ldr	r3, [pc, #36]	@ (801e750 <cleanup_stdio+0x38>)
 801e72c:	4299      	cmp	r1, r3
 801e72e:	d002      	beq.n	801e736 <cleanup_stdio+0x1e>
 801e730:	4620      	mov	r0, r4
 801e732:	f7ff ff73 	bl	801e61c <_fflush_r>
 801e736:	68e1      	ldr	r1, [r4, #12]
 801e738:	4b06      	ldr	r3, [pc, #24]	@ (801e754 <cleanup_stdio+0x3c>)
 801e73a:	4299      	cmp	r1, r3
 801e73c:	d004      	beq.n	801e748 <cleanup_stdio+0x30>
 801e73e:	4620      	mov	r0, r4
 801e740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e744:	f7ff bf6a 	b.w	801e61c <_fflush_r>
 801e748:	bd10      	pop	{r4, pc}
 801e74a:	bf00      	nop
 801e74c:	2000f624 	.word	0x2000f624
 801e750:	2000f68c 	.word	0x2000f68c
 801e754:	2000f6f4 	.word	0x2000f6f4

0801e758 <global_stdio_init.part.0>:
 801e758:	b510      	push	{r4, lr}
 801e75a:	4b0b      	ldr	r3, [pc, #44]	@ (801e788 <global_stdio_init.part.0+0x30>)
 801e75c:	4c0b      	ldr	r4, [pc, #44]	@ (801e78c <global_stdio_init.part.0+0x34>)
 801e75e:	4a0c      	ldr	r2, [pc, #48]	@ (801e790 <global_stdio_init.part.0+0x38>)
 801e760:	601a      	str	r2, [r3, #0]
 801e762:	4620      	mov	r0, r4
 801e764:	2200      	movs	r2, #0
 801e766:	2104      	movs	r1, #4
 801e768:	f7ff ff94 	bl	801e694 <std>
 801e76c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e770:	2201      	movs	r2, #1
 801e772:	2109      	movs	r1, #9
 801e774:	f7ff ff8e 	bl	801e694 <std>
 801e778:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e77c:	2202      	movs	r2, #2
 801e77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e782:	2112      	movs	r1, #18
 801e784:	f7ff bf86 	b.w	801e694 <std>
 801e788:	2000f75c 	.word	0x2000f75c
 801e78c:	2000f624 	.word	0x2000f624
 801e790:	0801e701 	.word	0x0801e701

0801e794 <__sfp_lock_acquire>:
 801e794:	4801      	ldr	r0, [pc, #4]	@ (801e79c <__sfp_lock_acquire+0x8>)
 801e796:	f000 b9d6 	b.w	801eb46 <__retarget_lock_acquire_recursive>
 801e79a:	bf00      	nop
 801e79c:	2000f765 	.word	0x2000f765

0801e7a0 <__sfp_lock_release>:
 801e7a0:	4801      	ldr	r0, [pc, #4]	@ (801e7a8 <__sfp_lock_release+0x8>)
 801e7a2:	f000 b9d1 	b.w	801eb48 <__retarget_lock_release_recursive>
 801e7a6:	bf00      	nop
 801e7a8:	2000f765 	.word	0x2000f765

0801e7ac <__sinit>:
 801e7ac:	b510      	push	{r4, lr}
 801e7ae:	4604      	mov	r4, r0
 801e7b0:	f7ff fff0 	bl	801e794 <__sfp_lock_acquire>
 801e7b4:	6a23      	ldr	r3, [r4, #32]
 801e7b6:	b11b      	cbz	r3, 801e7c0 <__sinit+0x14>
 801e7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7bc:	f7ff bff0 	b.w	801e7a0 <__sfp_lock_release>
 801e7c0:	4b04      	ldr	r3, [pc, #16]	@ (801e7d4 <__sinit+0x28>)
 801e7c2:	6223      	str	r3, [r4, #32]
 801e7c4:	4b04      	ldr	r3, [pc, #16]	@ (801e7d8 <__sinit+0x2c>)
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d1f5      	bne.n	801e7b8 <__sinit+0xc>
 801e7cc:	f7ff ffc4 	bl	801e758 <global_stdio_init.part.0>
 801e7d0:	e7f2      	b.n	801e7b8 <__sinit+0xc>
 801e7d2:	bf00      	nop
 801e7d4:	0801e719 	.word	0x0801e719
 801e7d8:	2000f75c 	.word	0x2000f75c

0801e7dc <_fwalk_sglue>:
 801e7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7e0:	4607      	mov	r7, r0
 801e7e2:	4688      	mov	r8, r1
 801e7e4:	4614      	mov	r4, r2
 801e7e6:	2600      	movs	r6, #0
 801e7e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e7ec:	f1b9 0901 	subs.w	r9, r9, #1
 801e7f0:	d505      	bpl.n	801e7fe <_fwalk_sglue+0x22>
 801e7f2:	6824      	ldr	r4, [r4, #0]
 801e7f4:	2c00      	cmp	r4, #0
 801e7f6:	d1f7      	bne.n	801e7e8 <_fwalk_sglue+0xc>
 801e7f8:	4630      	mov	r0, r6
 801e7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e7fe:	89ab      	ldrh	r3, [r5, #12]
 801e800:	2b01      	cmp	r3, #1
 801e802:	d907      	bls.n	801e814 <_fwalk_sglue+0x38>
 801e804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e808:	3301      	adds	r3, #1
 801e80a:	d003      	beq.n	801e814 <_fwalk_sglue+0x38>
 801e80c:	4629      	mov	r1, r5
 801e80e:	4638      	mov	r0, r7
 801e810:	47c0      	blx	r8
 801e812:	4306      	orrs	r6, r0
 801e814:	3568      	adds	r5, #104	@ 0x68
 801e816:	e7e9      	b.n	801e7ec <_fwalk_sglue+0x10>

0801e818 <iprintf>:
 801e818:	b40f      	push	{r0, r1, r2, r3}
 801e81a:	b507      	push	{r0, r1, r2, lr}
 801e81c:	4906      	ldr	r1, [pc, #24]	@ (801e838 <iprintf+0x20>)
 801e81e:	ab04      	add	r3, sp, #16
 801e820:	6808      	ldr	r0, [r1, #0]
 801e822:	f853 2b04 	ldr.w	r2, [r3], #4
 801e826:	6881      	ldr	r1, [r0, #8]
 801e828:	9301      	str	r3, [sp, #4]
 801e82a:	f002 fd51 	bl	80212d0 <_vfiprintf_r>
 801e82e:	b003      	add	sp, #12
 801e830:	f85d eb04 	ldr.w	lr, [sp], #4
 801e834:	b004      	add	sp, #16
 801e836:	4770      	bx	lr
 801e838:	20000054 	.word	0x20000054

0801e83c <siprintf>:
 801e83c:	b40e      	push	{r1, r2, r3}
 801e83e:	b500      	push	{lr}
 801e840:	b09c      	sub	sp, #112	@ 0x70
 801e842:	ab1d      	add	r3, sp, #116	@ 0x74
 801e844:	9002      	str	r0, [sp, #8]
 801e846:	9006      	str	r0, [sp, #24]
 801e848:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e84c:	4809      	ldr	r0, [pc, #36]	@ (801e874 <siprintf+0x38>)
 801e84e:	9107      	str	r1, [sp, #28]
 801e850:	9104      	str	r1, [sp, #16]
 801e852:	4909      	ldr	r1, [pc, #36]	@ (801e878 <siprintf+0x3c>)
 801e854:	f853 2b04 	ldr.w	r2, [r3], #4
 801e858:	9105      	str	r1, [sp, #20]
 801e85a:	6800      	ldr	r0, [r0, #0]
 801e85c:	9301      	str	r3, [sp, #4]
 801e85e:	a902      	add	r1, sp, #8
 801e860:	f002 fc10 	bl	8021084 <_svfiprintf_r>
 801e864:	9b02      	ldr	r3, [sp, #8]
 801e866:	2200      	movs	r2, #0
 801e868:	701a      	strb	r2, [r3, #0]
 801e86a:	b01c      	add	sp, #112	@ 0x70
 801e86c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e870:	b003      	add	sp, #12
 801e872:	4770      	bx	lr
 801e874:	20000054 	.word	0x20000054
 801e878:	ffff0208 	.word	0xffff0208

0801e87c <__sread>:
 801e87c:	b510      	push	{r4, lr}
 801e87e:	460c      	mov	r4, r1
 801e880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e884:	f000 f910 	bl	801eaa8 <_read_r>
 801e888:	2800      	cmp	r0, #0
 801e88a:	bfab      	itete	ge
 801e88c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e88e:	89a3      	ldrhlt	r3, [r4, #12]
 801e890:	181b      	addge	r3, r3, r0
 801e892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e896:	bfac      	ite	ge
 801e898:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e89a:	81a3      	strhlt	r3, [r4, #12]
 801e89c:	bd10      	pop	{r4, pc}

0801e89e <__swrite>:
 801e89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8a2:	461f      	mov	r7, r3
 801e8a4:	898b      	ldrh	r3, [r1, #12]
 801e8a6:	05db      	lsls	r3, r3, #23
 801e8a8:	4605      	mov	r5, r0
 801e8aa:	460c      	mov	r4, r1
 801e8ac:	4616      	mov	r6, r2
 801e8ae:	d505      	bpl.n	801e8bc <__swrite+0x1e>
 801e8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8b4:	2302      	movs	r3, #2
 801e8b6:	2200      	movs	r2, #0
 801e8b8:	f000 f8e4 	bl	801ea84 <_lseek_r>
 801e8bc:	89a3      	ldrh	r3, [r4, #12]
 801e8be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e8c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e8c6:	81a3      	strh	r3, [r4, #12]
 801e8c8:	4632      	mov	r2, r6
 801e8ca:	463b      	mov	r3, r7
 801e8cc:	4628      	mov	r0, r5
 801e8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e8d2:	f000 b8fb 	b.w	801eacc <_write_r>

0801e8d6 <__sseek>:
 801e8d6:	b510      	push	{r4, lr}
 801e8d8:	460c      	mov	r4, r1
 801e8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8de:	f000 f8d1 	bl	801ea84 <_lseek_r>
 801e8e2:	1c43      	adds	r3, r0, #1
 801e8e4:	89a3      	ldrh	r3, [r4, #12]
 801e8e6:	bf15      	itete	ne
 801e8e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e8ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e8ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e8f2:	81a3      	strheq	r3, [r4, #12]
 801e8f4:	bf18      	it	ne
 801e8f6:	81a3      	strhne	r3, [r4, #12]
 801e8f8:	bd10      	pop	{r4, pc}

0801e8fa <__sclose>:
 801e8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8fe:	f000 b85b 	b.w	801e9b8 <_close_r>

0801e902 <memcmp>:
 801e902:	b510      	push	{r4, lr}
 801e904:	3901      	subs	r1, #1
 801e906:	4402      	add	r2, r0
 801e908:	4290      	cmp	r0, r2
 801e90a:	d101      	bne.n	801e910 <memcmp+0xe>
 801e90c:	2000      	movs	r0, #0
 801e90e:	e005      	b.n	801e91c <memcmp+0x1a>
 801e910:	7803      	ldrb	r3, [r0, #0]
 801e912:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e916:	42a3      	cmp	r3, r4
 801e918:	d001      	beq.n	801e91e <memcmp+0x1c>
 801e91a:	1b18      	subs	r0, r3, r4
 801e91c:	bd10      	pop	{r4, pc}
 801e91e:	3001      	adds	r0, #1
 801e920:	e7f2      	b.n	801e908 <memcmp+0x6>

0801e922 <memmove>:
 801e922:	4288      	cmp	r0, r1
 801e924:	b510      	push	{r4, lr}
 801e926:	eb01 0402 	add.w	r4, r1, r2
 801e92a:	d902      	bls.n	801e932 <memmove+0x10>
 801e92c:	4284      	cmp	r4, r0
 801e92e:	4623      	mov	r3, r4
 801e930:	d807      	bhi.n	801e942 <memmove+0x20>
 801e932:	1e43      	subs	r3, r0, #1
 801e934:	42a1      	cmp	r1, r4
 801e936:	d008      	beq.n	801e94a <memmove+0x28>
 801e938:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e93c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e940:	e7f8      	b.n	801e934 <memmove+0x12>
 801e942:	4402      	add	r2, r0
 801e944:	4601      	mov	r1, r0
 801e946:	428a      	cmp	r2, r1
 801e948:	d100      	bne.n	801e94c <memmove+0x2a>
 801e94a:	bd10      	pop	{r4, pc}
 801e94c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e950:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e954:	e7f7      	b.n	801e946 <memmove+0x24>

0801e956 <memset>:
 801e956:	4402      	add	r2, r0
 801e958:	4603      	mov	r3, r0
 801e95a:	4293      	cmp	r3, r2
 801e95c:	d100      	bne.n	801e960 <memset+0xa>
 801e95e:	4770      	bx	lr
 801e960:	f803 1b01 	strb.w	r1, [r3], #1
 801e964:	e7f9      	b.n	801e95a <memset+0x4>

0801e966 <strncmp>:
 801e966:	b510      	push	{r4, lr}
 801e968:	b16a      	cbz	r2, 801e986 <strncmp+0x20>
 801e96a:	3901      	subs	r1, #1
 801e96c:	1884      	adds	r4, r0, r2
 801e96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e972:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e976:	429a      	cmp	r2, r3
 801e978:	d103      	bne.n	801e982 <strncmp+0x1c>
 801e97a:	42a0      	cmp	r0, r4
 801e97c:	d001      	beq.n	801e982 <strncmp+0x1c>
 801e97e:	2a00      	cmp	r2, #0
 801e980:	d1f5      	bne.n	801e96e <strncmp+0x8>
 801e982:	1ad0      	subs	r0, r2, r3
 801e984:	bd10      	pop	{r4, pc}
 801e986:	4610      	mov	r0, r2
 801e988:	e7fc      	b.n	801e984 <strncmp+0x1e>

0801e98a <strncpy>:
 801e98a:	b510      	push	{r4, lr}
 801e98c:	3901      	subs	r1, #1
 801e98e:	4603      	mov	r3, r0
 801e990:	b132      	cbz	r2, 801e9a0 <strncpy+0x16>
 801e992:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e996:	f803 4b01 	strb.w	r4, [r3], #1
 801e99a:	3a01      	subs	r2, #1
 801e99c:	2c00      	cmp	r4, #0
 801e99e:	d1f7      	bne.n	801e990 <strncpy+0x6>
 801e9a0:	441a      	add	r2, r3
 801e9a2:	2100      	movs	r1, #0
 801e9a4:	4293      	cmp	r3, r2
 801e9a6:	d100      	bne.n	801e9aa <strncpy+0x20>
 801e9a8:	bd10      	pop	{r4, pc}
 801e9aa:	f803 1b01 	strb.w	r1, [r3], #1
 801e9ae:	e7f9      	b.n	801e9a4 <strncpy+0x1a>

0801e9b0 <_localeconv_r>:
 801e9b0:	4800      	ldr	r0, [pc, #0]	@ (801e9b4 <_localeconv_r+0x4>)
 801e9b2:	4770      	bx	lr
 801e9b4:	20000194 	.word	0x20000194

0801e9b8 <_close_r>:
 801e9b8:	b538      	push	{r3, r4, r5, lr}
 801e9ba:	4d06      	ldr	r5, [pc, #24]	@ (801e9d4 <_close_r+0x1c>)
 801e9bc:	2300      	movs	r3, #0
 801e9be:	4604      	mov	r4, r0
 801e9c0:	4608      	mov	r0, r1
 801e9c2:	602b      	str	r3, [r5, #0]
 801e9c4:	f7e3 f9e8 	bl	8001d98 <_close>
 801e9c8:	1c43      	adds	r3, r0, #1
 801e9ca:	d102      	bne.n	801e9d2 <_close_r+0x1a>
 801e9cc:	682b      	ldr	r3, [r5, #0]
 801e9ce:	b103      	cbz	r3, 801e9d2 <_close_r+0x1a>
 801e9d0:	6023      	str	r3, [r4, #0]
 801e9d2:	bd38      	pop	{r3, r4, r5, pc}
 801e9d4:	2000f760 	.word	0x2000f760

0801e9d8 <_reclaim_reent>:
 801e9d8:	4b29      	ldr	r3, [pc, #164]	@ (801ea80 <_reclaim_reent+0xa8>)
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	4283      	cmp	r3, r0
 801e9de:	b570      	push	{r4, r5, r6, lr}
 801e9e0:	4604      	mov	r4, r0
 801e9e2:	d04b      	beq.n	801ea7c <_reclaim_reent+0xa4>
 801e9e4:	69c3      	ldr	r3, [r0, #28]
 801e9e6:	b1ab      	cbz	r3, 801ea14 <_reclaim_reent+0x3c>
 801e9e8:	68db      	ldr	r3, [r3, #12]
 801e9ea:	b16b      	cbz	r3, 801ea08 <_reclaim_reent+0x30>
 801e9ec:	2500      	movs	r5, #0
 801e9ee:	69e3      	ldr	r3, [r4, #28]
 801e9f0:	68db      	ldr	r3, [r3, #12]
 801e9f2:	5959      	ldr	r1, [r3, r5]
 801e9f4:	2900      	cmp	r1, #0
 801e9f6:	d13b      	bne.n	801ea70 <_reclaim_reent+0x98>
 801e9f8:	3504      	adds	r5, #4
 801e9fa:	2d80      	cmp	r5, #128	@ 0x80
 801e9fc:	d1f7      	bne.n	801e9ee <_reclaim_reent+0x16>
 801e9fe:	69e3      	ldr	r3, [r4, #28]
 801ea00:	4620      	mov	r0, r4
 801ea02:	68d9      	ldr	r1, [r3, #12]
 801ea04:	f000 ff28 	bl	801f858 <_free_r>
 801ea08:	69e3      	ldr	r3, [r4, #28]
 801ea0a:	6819      	ldr	r1, [r3, #0]
 801ea0c:	b111      	cbz	r1, 801ea14 <_reclaim_reent+0x3c>
 801ea0e:	4620      	mov	r0, r4
 801ea10:	f000 ff22 	bl	801f858 <_free_r>
 801ea14:	6961      	ldr	r1, [r4, #20]
 801ea16:	b111      	cbz	r1, 801ea1e <_reclaim_reent+0x46>
 801ea18:	4620      	mov	r0, r4
 801ea1a:	f000 ff1d 	bl	801f858 <_free_r>
 801ea1e:	69e1      	ldr	r1, [r4, #28]
 801ea20:	b111      	cbz	r1, 801ea28 <_reclaim_reent+0x50>
 801ea22:	4620      	mov	r0, r4
 801ea24:	f000 ff18 	bl	801f858 <_free_r>
 801ea28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ea2a:	b111      	cbz	r1, 801ea32 <_reclaim_reent+0x5a>
 801ea2c:	4620      	mov	r0, r4
 801ea2e:	f000 ff13 	bl	801f858 <_free_r>
 801ea32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ea34:	b111      	cbz	r1, 801ea3c <_reclaim_reent+0x64>
 801ea36:	4620      	mov	r0, r4
 801ea38:	f000 ff0e 	bl	801f858 <_free_r>
 801ea3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801ea3e:	b111      	cbz	r1, 801ea46 <_reclaim_reent+0x6e>
 801ea40:	4620      	mov	r0, r4
 801ea42:	f000 ff09 	bl	801f858 <_free_r>
 801ea46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801ea48:	b111      	cbz	r1, 801ea50 <_reclaim_reent+0x78>
 801ea4a:	4620      	mov	r0, r4
 801ea4c:	f000 ff04 	bl	801f858 <_free_r>
 801ea50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801ea52:	b111      	cbz	r1, 801ea5a <_reclaim_reent+0x82>
 801ea54:	4620      	mov	r0, r4
 801ea56:	f000 feff 	bl	801f858 <_free_r>
 801ea5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ea5c:	b111      	cbz	r1, 801ea64 <_reclaim_reent+0x8c>
 801ea5e:	4620      	mov	r0, r4
 801ea60:	f000 fefa 	bl	801f858 <_free_r>
 801ea64:	6a23      	ldr	r3, [r4, #32]
 801ea66:	b14b      	cbz	r3, 801ea7c <_reclaim_reent+0xa4>
 801ea68:	4620      	mov	r0, r4
 801ea6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ea6e:	4718      	bx	r3
 801ea70:	680e      	ldr	r6, [r1, #0]
 801ea72:	4620      	mov	r0, r4
 801ea74:	f000 fef0 	bl	801f858 <_free_r>
 801ea78:	4631      	mov	r1, r6
 801ea7a:	e7bb      	b.n	801e9f4 <_reclaim_reent+0x1c>
 801ea7c:	bd70      	pop	{r4, r5, r6, pc}
 801ea7e:	bf00      	nop
 801ea80:	20000054 	.word	0x20000054

0801ea84 <_lseek_r>:
 801ea84:	b538      	push	{r3, r4, r5, lr}
 801ea86:	4d07      	ldr	r5, [pc, #28]	@ (801eaa4 <_lseek_r+0x20>)
 801ea88:	4604      	mov	r4, r0
 801ea8a:	4608      	mov	r0, r1
 801ea8c:	4611      	mov	r1, r2
 801ea8e:	2200      	movs	r2, #0
 801ea90:	602a      	str	r2, [r5, #0]
 801ea92:	461a      	mov	r2, r3
 801ea94:	f7e3 f9a7 	bl	8001de6 <_lseek>
 801ea98:	1c43      	adds	r3, r0, #1
 801ea9a:	d102      	bne.n	801eaa2 <_lseek_r+0x1e>
 801ea9c:	682b      	ldr	r3, [r5, #0]
 801ea9e:	b103      	cbz	r3, 801eaa2 <_lseek_r+0x1e>
 801eaa0:	6023      	str	r3, [r4, #0]
 801eaa2:	bd38      	pop	{r3, r4, r5, pc}
 801eaa4:	2000f760 	.word	0x2000f760

0801eaa8 <_read_r>:
 801eaa8:	b538      	push	{r3, r4, r5, lr}
 801eaaa:	4d07      	ldr	r5, [pc, #28]	@ (801eac8 <_read_r+0x20>)
 801eaac:	4604      	mov	r4, r0
 801eaae:	4608      	mov	r0, r1
 801eab0:	4611      	mov	r1, r2
 801eab2:	2200      	movs	r2, #0
 801eab4:	602a      	str	r2, [r5, #0]
 801eab6:	461a      	mov	r2, r3
 801eab8:	f7e3 f951 	bl	8001d5e <_read>
 801eabc:	1c43      	adds	r3, r0, #1
 801eabe:	d102      	bne.n	801eac6 <_read_r+0x1e>
 801eac0:	682b      	ldr	r3, [r5, #0]
 801eac2:	b103      	cbz	r3, 801eac6 <_read_r+0x1e>
 801eac4:	6023      	str	r3, [r4, #0]
 801eac6:	bd38      	pop	{r3, r4, r5, pc}
 801eac8:	2000f760 	.word	0x2000f760

0801eacc <_write_r>:
 801eacc:	b538      	push	{r3, r4, r5, lr}
 801eace:	4d07      	ldr	r5, [pc, #28]	@ (801eaec <_write_r+0x20>)
 801ead0:	4604      	mov	r4, r0
 801ead2:	4608      	mov	r0, r1
 801ead4:	4611      	mov	r1, r2
 801ead6:	2200      	movs	r2, #0
 801ead8:	602a      	str	r2, [r5, #0]
 801eada:	461a      	mov	r2, r3
 801eadc:	f7e2 fc34 	bl	8001348 <_write>
 801eae0:	1c43      	adds	r3, r0, #1
 801eae2:	d102      	bne.n	801eaea <_write_r+0x1e>
 801eae4:	682b      	ldr	r3, [r5, #0]
 801eae6:	b103      	cbz	r3, 801eaea <_write_r+0x1e>
 801eae8:	6023      	str	r3, [r4, #0]
 801eaea:	bd38      	pop	{r3, r4, r5, pc}
 801eaec:	2000f760 	.word	0x2000f760

0801eaf0 <__errno>:
 801eaf0:	4b01      	ldr	r3, [pc, #4]	@ (801eaf8 <__errno+0x8>)
 801eaf2:	6818      	ldr	r0, [r3, #0]
 801eaf4:	4770      	bx	lr
 801eaf6:	bf00      	nop
 801eaf8:	20000054 	.word	0x20000054

0801eafc <__libc_init_array>:
 801eafc:	b570      	push	{r4, r5, r6, lr}
 801eafe:	4d0d      	ldr	r5, [pc, #52]	@ (801eb34 <__libc_init_array+0x38>)
 801eb00:	4c0d      	ldr	r4, [pc, #52]	@ (801eb38 <__libc_init_array+0x3c>)
 801eb02:	1b64      	subs	r4, r4, r5
 801eb04:	10a4      	asrs	r4, r4, #2
 801eb06:	2600      	movs	r6, #0
 801eb08:	42a6      	cmp	r6, r4
 801eb0a:	d109      	bne.n	801eb20 <__libc_init_array+0x24>
 801eb0c:	4d0b      	ldr	r5, [pc, #44]	@ (801eb3c <__libc_init_array+0x40>)
 801eb0e:	4c0c      	ldr	r4, [pc, #48]	@ (801eb40 <__libc_init_array+0x44>)
 801eb10:	f003 fa26 	bl	8021f60 <_init>
 801eb14:	1b64      	subs	r4, r4, r5
 801eb16:	10a4      	asrs	r4, r4, #2
 801eb18:	2600      	movs	r6, #0
 801eb1a:	42a6      	cmp	r6, r4
 801eb1c:	d105      	bne.n	801eb2a <__libc_init_array+0x2e>
 801eb1e:	bd70      	pop	{r4, r5, r6, pc}
 801eb20:	f855 3b04 	ldr.w	r3, [r5], #4
 801eb24:	4798      	blx	r3
 801eb26:	3601      	adds	r6, #1
 801eb28:	e7ee      	b.n	801eb08 <__libc_init_array+0xc>
 801eb2a:	f855 3b04 	ldr.w	r3, [r5], #4
 801eb2e:	4798      	blx	r3
 801eb30:	3601      	adds	r6, #1
 801eb32:	e7f2      	b.n	801eb1a <__libc_init_array+0x1e>
 801eb34:	0802673c 	.word	0x0802673c
 801eb38:	0802673c 	.word	0x0802673c
 801eb3c:	0802673c 	.word	0x0802673c
 801eb40:	08026740 	.word	0x08026740

0801eb44 <__retarget_lock_init_recursive>:
 801eb44:	4770      	bx	lr

0801eb46 <__retarget_lock_acquire_recursive>:
 801eb46:	4770      	bx	lr

0801eb48 <__retarget_lock_release_recursive>:
 801eb48:	4770      	bx	lr

0801eb4a <strcpy>:
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eb50:	f803 2b01 	strb.w	r2, [r3], #1
 801eb54:	2a00      	cmp	r2, #0
 801eb56:	d1f9      	bne.n	801eb4c <strcpy+0x2>
 801eb58:	4770      	bx	lr

0801eb5a <memcpy>:
 801eb5a:	440a      	add	r2, r1
 801eb5c:	4291      	cmp	r1, r2
 801eb5e:	f100 33ff 	add.w	r3, r0, #4294967295
 801eb62:	d100      	bne.n	801eb66 <memcpy+0xc>
 801eb64:	4770      	bx	lr
 801eb66:	b510      	push	{r4, lr}
 801eb68:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eb6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801eb70:	4291      	cmp	r1, r2
 801eb72:	d1f9      	bne.n	801eb68 <memcpy+0xe>
 801eb74:	bd10      	pop	{r4, pc}
	...

0801eb78 <nanf>:
 801eb78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801eb80 <nanf+0x8>
 801eb7c:	4770      	bx	lr
 801eb7e:	bf00      	nop
 801eb80:	7fc00000 	.word	0x7fc00000

0801eb84 <__assert_func>:
 801eb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801eb86:	4614      	mov	r4, r2
 801eb88:	461a      	mov	r2, r3
 801eb8a:	4b09      	ldr	r3, [pc, #36]	@ (801ebb0 <__assert_func+0x2c>)
 801eb8c:	681b      	ldr	r3, [r3, #0]
 801eb8e:	4605      	mov	r5, r0
 801eb90:	68d8      	ldr	r0, [r3, #12]
 801eb92:	b954      	cbnz	r4, 801ebaa <__assert_func+0x26>
 801eb94:	4b07      	ldr	r3, [pc, #28]	@ (801ebb4 <__assert_func+0x30>)
 801eb96:	461c      	mov	r4, r3
 801eb98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801eb9c:	9100      	str	r1, [sp, #0]
 801eb9e:	462b      	mov	r3, r5
 801eba0:	4905      	ldr	r1, [pc, #20]	@ (801ebb8 <__assert_func+0x34>)
 801eba2:	f002 fcad 	bl	8021500 <fiprintf>
 801eba6:	f002 fd6b 	bl	8021680 <abort>
 801ebaa:	4b04      	ldr	r3, [pc, #16]	@ (801ebbc <__assert_func+0x38>)
 801ebac:	e7f4      	b.n	801eb98 <__assert_func+0x14>
 801ebae:	bf00      	nop
 801ebb0:	20000054 	.word	0x20000054
 801ebb4:	0802648f 	.word	0x0802648f
 801ebb8:	08026461 	.word	0x08026461
 801ebbc:	08026454 	.word	0x08026454

0801ebc0 <quorem>:
 801ebc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebc4:	6903      	ldr	r3, [r0, #16]
 801ebc6:	690c      	ldr	r4, [r1, #16]
 801ebc8:	42a3      	cmp	r3, r4
 801ebca:	4607      	mov	r7, r0
 801ebcc:	db7e      	blt.n	801eccc <quorem+0x10c>
 801ebce:	3c01      	subs	r4, #1
 801ebd0:	f101 0814 	add.w	r8, r1, #20
 801ebd4:	00a3      	lsls	r3, r4, #2
 801ebd6:	f100 0514 	add.w	r5, r0, #20
 801ebda:	9300      	str	r3, [sp, #0]
 801ebdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ebe0:	9301      	str	r3, [sp, #4]
 801ebe2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ebe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ebea:	3301      	adds	r3, #1
 801ebec:	429a      	cmp	r2, r3
 801ebee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ebf2:	fbb2 f6f3 	udiv	r6, r2, r3
 801ebf6:	d32e      	bcc.n	801ec56 <quorem+0x96>
 801ebf8:	f04f 0a00 	mov.w	sl, #0
 801ebfc:	46c4      	mov	ip, r8
 801ebfe:	46ae      	mov	lr, r5
 801ec00:	46d3      	mov	fp, sl
 801ec02:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ec06:	b298      	uxth	r0, r3
 801ec08:	fb06 a000 	mla	r0, r6, r0, sl
 801ec0c:	0c02      	lsrs	r2, r0, #16
 801ec0e:	0c1b      	lsrs	r3, r3, #16
 801ec10:	fb06 2303 	mla	r3, r6, r3, r2
 801ec14:	f8de 2000 	ldr.w	r2, [lr]
 801ec18:	b280      	uxth	r0, r0
 801ec1a:	b292      	uxth	r2, r2
 801ec1c:	1a12      	subs	r2, r2, r0
 801ec1e:	445a      	add	r2, fp
 801ec20:	f8de 0000 	ldr.w	r0, [lr]
 801ec24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ec28:	b29b      	uxth	r3, r3
 801ec2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ec2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ec32:	b292      	uxth	r2, r2
 801ec34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ec38:	45e1      	cmp	r9, ip
 801ec3a:	f84e 2b04 	str.w	r2, [lr], #4
 801ec3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ec42:	d2de      	bcs.n	801ec02 <quorem+0x42>
 801ec44:	9b00      	ldr	r3, [sp, #0]
 801ec46:	58eb      	ldr	r3, [r5, r3]
 801ec48:	b92b      	cbnz	r3, 801ec56 <quorem+0x96>
 801ec4a:	9b01      	ldr	r3, [sp, #4]
 801ec4c:	3b04      	subs	r3, #4
 801ec4e:	429d      	cmp	r5, r3
 801ec50:	461a      	mov	r2, r3
 801ec52:	d32f      	bcc.n	801ecb4 <quorem+0xf4>
 801ec54:	613c      	str	r4, [r7, #16]
 801ec56:	4638      	mov	r0, r7
 801ec58:	f001 f9c2 	bl	801ffe0 <__mcmp>
 801ec5c:	2800      	cmp	r0, #0
 801ec5e:	db25      	blt.n	801ecac <quorem+0xec>
 801ec60:	4629      	mov	r1, r5
 801ec62:	2000      	movs	r0, #0
 801ec64:	f858 2b04 	ldr.w	r2, [r8], #4
 801ec68:	f8d1 c000 	ldr.w	ip, [r1]
 801ec6c:	fa1f fe82 	uxth.w	lr, r2
 801ec70:	fa1f f38c 	uxth.w	r3, ip
 801ec74:	eba3 030e 	sub.w	r3, r3, lr
 801ec78:	4403      	add	r3, r0
 801ec7a:	0c12      	lsrs	r2, r2, #16
 801ec7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ec80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ec84:	b29b      	uxth	r3, r3
 801ec86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ec8a:	45c1      	cmp	r9, r8
 801ec8c:	f841 3b04 	str.w	r3, [r1], #4
 801ec90:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ec94:	d2e6      	bcs.n	801ec64 <quorem+0xa4>
 801ec96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ec9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ec9e:	b922      	cbnz	r2, 801ecaa <quorem+0xea>
 801eca0:	3b04      	subs	r3, #4
 801eca2:	429d      	cmp	r5, r3
 801eca4:	461a      	mov	r2, r3
 801eca6:	d30b      	bcc.n	801ecc0 <quorem+0x100>
 801eca8:	613c      	str	r4, [r7, #16]
 801ecaa:	3601      	adds	r6, #1
 801ecac:	4630      	mov	r0, r6
 801ecae:	b003      	add	sp, #12
 801ecb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecb4:	6812      	ldr	r2, [r2, #0]
 801ecb6:	3b04      	subs	r3, #4
 801ecb8:	2a00      	cmp	r2, #0
 801ecba:	d1cb      	bne.n	801ec54 <quorem+0x94>
 801ecbc:	3c01      	subs	r4, #1
 801ecbe:	e7c6      	b.n	801ec4e <quorem+0x8e>
 801ecc0:	6812      	ldr	r2, [r2, #0]
 801ecc2:	3b04      	subs	r3, #4
 801ecc4:	2a00      	cmp	r2, #0
 801ecc6:	d1ef      	bne.n	801eca8 <quorem+0xe8>
 801ecc8:	3c01      	subs	r4, #1
 801ecca:	e7ea      	b.n	801eca2 <quorem+0xe2>
 801eccc:	2000      	movs	r0, #0
 801ecce:	e7ee      	b.n	801ecae <quorem+0xee>

0801ecd0 <_dtoa_r>:
 801ecd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecd4:	69c7      	ldr	r7, [r0, #28]
 801ecd6:	b099      	sub	sp, #100	@ 0x64
 801ecd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ecdc:	ec55 4b10 	vmov	r4, r5, d0
 801ece0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801ece2:	9109      	str	r1, [sp, #36]	@ 0x24
 801ece4:	4683      	mov	fp, r0
 801ece6:	920e      	str	r2, [sp, #56]	@ 0x38
 801ece8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ecea:	b97f      	cbnz	r7, 801ed0c <_dtoa_r+0x3c>
 801ecec:	2010      	movs	r0, #16
 801ecee:	f000 fdfd 	bl	801f8ec <malloc>
 801ecf2:	4602      	mov	r2, r0
 801ecf4:	f8cb 001c 	str.w	r0, [fp, #28]
 801ecf8:	b920      	cbnz	r0, 801ed04 <_dtoa_r+0x34>
 801ecfa:	4ba7      	ldr	r3, [pc, #668]	@ (801ef98 <_dtoa_r+0x2c8>)
 801ecfc:	21ef      	movs	r1, #239	@ 0xef
 801ecfe:	48a7      	ldr	r0, [pc, #668]	@ (801ef9c <_dtoa_r+0x2cc>)
 801ed00:	f7ff ff40 	bl	801eb84 <__assert_func>
 801ed04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ed08:	6007      	str	r7, [r0, #0]
 801ed0a:	60c7      	str	r7, [r0, #12]
 801ed0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ed10:	6819      	ldr	r1, [r3, #0]
 801ed12:	b159      	cbz	r1, 801ed2c <_dtoa_r+0x5c>
 801ed14:	685a      	ldr	r2, [r3, #4]
 801ed16:	604a      	str	r2, [r1, #4]
 801ed18:	2301      	movs	r3, #1
 801ed1a:	4093      	lsls	r3, r2
 801ed1c:	608b      	str	r3, [r1, #8]
 801ed1e:	4658      	mov	r0, fp
 801ed20:	f000 feda 	bl	801fad8 <_Bfree>
 801ed24:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ed28:	2200      	movs	r2, #0
 801ed2a:	601a      	str	r2, [r3, #0]
 801ed2c:	1e2b      	subs	r3, r5, #0
 801ed2e:	bfb9      	ittee	lt
 801ed30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ed34:	9303      	strlt	r3, [sp, #12]
 801ed36:	2300      	movge	r3, #0
 801ed38:	6033      	strge	r3, [r6, #0]
 801ed3a:	9f03      	ldr	r7, [sp, #12]
 801ed3c:	4b98      	ldr	r3, [pc, #608]	@ (801efa0 <_dtoa_r+0x2d0>)
 801ed3e:	bfbc      	itt	lt
 801ed40:	2201      	movlt	r2, #1
 801ed42:	6032      	strlt	r2, [r6, #0]
 801ed44:	43bb      	bics	r3, r7
 801ed46:	d112      	bne.n	801ed6e <_dtoa_r+0x9e>
 801ed48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ed4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ed4e:	6013      	str	r3, [r2, #0]
 801ed50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ed54:	4323      	orrs	r3, r4
 801ed56:	f000 854d 	beq.w	801f7f4 <_dtoa_r+0xb24>
 801ed5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ed5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801efb4 <_dtoa_r+0x2e4>
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	f000 854f 	beq.w	801f804 <_dtoa_r+0xb34>
 801ed66:	f10a 0303 	add.w	r3, sl, #3
 801ed6a:	f000 bd49 	b.w	801f800 <_dtoa_r+0xb30>
 801ed6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ed72:	2200      	movs	r2, #0
 801ed74:	ec51 0b17 	vmov	r0, r1, d7
 801ed78:	2300      	movs	r3, #0
 801ed7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ed7e:	f7e1 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 801ed82:	4680      	mov	r8, r0
 801ed84:	b158      	cbz	r0, 801ed9e <_dtoa_r+0xce>
 801ed86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ed88:	2301      	movs	r3, #1
 801ed8a:	6013      	str	r3, [r2, #0]
 801ed8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ed8e:	b113      	cbz	r3, 801ed96 <_dtoa_r+0xc6>
 801ed90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ed92:	4b84      	ldr	r3, [pc, #528]	@ (801efa4 <_dtoa_r+0x2d4>)
 801ed94:	6013      	str	r3, [r2, #0]
 801ed96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801efb8 <_dtoa_r+0x2e8>
 801ed9a:	f000 bd33 	b.w	801f804 <_dtoa_r+0xb34>
 801ed9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801eda2:	aa16      	add	r2, sp, #88	@ 0x58
 801eda4:	a917      	add	r1, sp, #92	@ 0x5c
 801eda6:	4658      	mov	r0, fp
 801eda8:	f001 fa3a 	bl	8020220 <__d2b>
 801edac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801edb0:	4681      	mov	r9, r0
 801edb2:	2e00      	cmp	r6, #0
 801edb4:	d077      	beq.n	801eea6 <_dtoa_r+0x1d6>
 801edb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801edbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801edc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801edc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801edc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801edcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801edd0:	4619      	mov	r1, r3
 801edd2:	2200      	movs	r2, #0
 801edd4:	4b74      	ldr	r3, [pc, #464]	@ (801efa8 <_dtoa_r+0x2d8>)
 801edd6:	f7e1 fa57 	bl	8000288 <__aeabi_dsub>
 801edda:	a369      	add	r3, pc, #420	@ (adr r3, 801ef80 <_dtoa_r+0x2b0>)
 801eddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ede0:	f7e1 fc0a 	bl	80005f8 <__aeabi_dmul>
 801ede4:	a368      	add	r3, pc, #416	@ (adr r3, 801ef88 <_dtoa_r+0x2b8>)
 801ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edea:	f7e1 fa4f 	bl	800028c <__adddf3>
 801edee:	4604      	mov	r4, r0
 801edf0:	4630      	mov	r0, r6
 801edf2:	460d      	mov	r5, r1
 801edf4:	f7e1 fb96 	bl	8000524 <__aeabi_i2d>
 801edf8:	a365      	add	r3, pc, #404	@ (adr r3, 801ef90 <_dtoa_r+0x2c0>)
 801edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edfe:	f7e1 fbfb 	bl	80005f8 <__aeabi_dmul>
 801ee02:	4602      	mov	r2, r0
 801ee04:	460b      	mov	r3, r1
 801ee06:	4620      	mov	r0, r4
 801ee08:	4629      	mov	r1, r5
 801ee0a:	f7e1 fa3f 	bl	800028c <__adddf3>
 801ee0e:	4604      	mov	r4, r0
 801ee10:	460d      	mov	r5, r1
 801ee12:	f7e1 fea1 	bl	8000b58 <__aeabi_d2iz>
 801ee16:	2200      	movs	r2, #0
 801ee18:	4607      	mov	r7, r0
 801ee1a:	2300      	movs	r3, #0
 801ee1c:	4620      	mov	r0, r4
 801ee1e:	4629      	mov	r1, r5
 801ee20:	f7e1 fe5c 	bl	8000adc <__aeabi_dcmplt>
 801ee24:	b140      	cbz	r0, 801ee38 <_dtoa_r+0x168>
 801ee26:	4638      	mov	r0, r7
 801ee28:	f7e1 fb7c 	bl	8000524 <__aeabi_i2d>
 801ee2c:	4622      	mov	r2, r4
 801ee2e:	462b      	mov	r3, r5
 801ee30:	f7e1 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 801ee34:	b900      	cbnz	r0, 801ee38 <_dtoa_r+0x168>
 801ee36:	3f01      	subs	r7, #1
 801ee38:	2f16      	cmp	r7, #22
 801ee3a:	d851      	bhi.n	801eee0 <_dtoa_r+0x210>
 801ee3c:	4b5b      	ldr	r3, [pc, #364]	@ (801efac <_dtoa_r+0x2dc>)
 801ee3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ee42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ee4a:	f7e1 fe47 	bl	8000adc <__aeabi_dcmplt>
 801ee4e:	2800      	cmp	r0, #0
 801ee50:	d048      	beq.n	801eee4 <_dtoa_r+0x214>
 801ee52:	3f01      	subs	r7, #1
 801ee54:	2300      	movs	r3, #0
 801ee56:	9312      	str	r3, [sp, #72]	@ 0x48
 801ee58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ee5a:	1b9b      	subs	r3, r3, r6
 801ee5c:	1e5a      	subs	r2, r3, #1
 801ee5e:	bf44      	itt	mi
 801ee60:	f1c3 0801 	rsbmi	r8, r3, #1
 801ee64:	2300      	movmi	r3, #0
 801ee66:	9208      	str	r2, [sp, #32]
 801ee68:	bf54      	ite	pl
 801ee6a:	f04f 0800 	movpl.w	r8, #0
 801ee6e:	9308      	strmi	r3, [sp, #32]
 801ee70:	2f00      	cmp	r7, #0
 801ee72:	db39      	blt.n	801eee8 <_dtoa_r+0x218>
 801ee74:	9b08      	ldr	r3, [sp, #32]
 801ee76:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ee78:	443b      	add	r3, r7
 801ee7a:	9308      	str	r3, [sp, #32]
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee82:	2b09      	cmp	r3, #9
 801ee84:	d864      	bhi.n	801ef50 <_dtoa_r+0x280>
 801ee86:	2b05      	cmp	r3, #5
 801ee88:	bfc4      	itt	gt
 801ee8a:	3b04      	subgt	r3, #4
 801ee8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ee8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee90:	f1a3 0302 	sub.w	r3, r3, #2
 801ee94:	bfcc      	ite	gt
 801ee96:	2400      	movgt	r4, #0
 801ee98:	2401      	movle	r4, #1
 801ee9a:	2b03      	cmp	r3, #3
 801ee9c:	d863      	bhi.n	801ef66 <_dtoa_r+0x296>
 801ee9e:	e8df f003 	tbb	[pc, r3]
 801eea2:	372a      	.short	0x372a
 801eea4:	5535      	.short	0x5535
 801eea6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801eeaa:	441e      	add	r6, r3
 801eeac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801eeb0:	2b20      	cmp	r3, #32
 801eeb2:	bfc1      	itttt	gt
 801eeb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801eeb8:	409f      	lslgt	r7, r3
 801eeba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801eebe:	fa24 f303 	lsrgt.w	r3, r4, r3
 801eec2:	bfd6      	itet	le
 801eec4:	f1c3 0320 	rsble	r3, r3, #32
 801eec8:	ea47 0003 	orrgt.w	r0, r7, r3
 801eecc:	fa04 f003 	lslle.w	r0, r4, r3
 801eed0:	f7e1 fb18 	bl	8000504 <__aeabi_ui2d>
 801eed4:	2201      	movs	r2, #1
 801eed6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801eeda:	3e01      	subs	r6, #1
 801eedc:	9214      	str	r2, [sp, #80]	@ 0x50
 801eede:	e777      	b.n	801edd0 <_dtoa_r+0x100>
 801eee0:	2301      	movs	r3, #1
 801eee2:	e7b8      	b.n	801ee56 <_dtoa_r+0x186>
 801eee4:	9012      	str	r0, [sp, #72]	@ 0x48
 801eee6:	e7b7      	b.n	801ee58 <_dtoa_r+0x188>
 801eee8:	427b      	negs	r3, r7
 801eeea:	930a      	str	r3, [sp, #40]	@ 0x28
 801eeec:	2300      	movs	r3, #0
 801eeee:	eba8 0807 	sub.w	r8, r8, r7
 801eef2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eef4:	e7c4      	b.n	801ee80 <_dtoa_r+0x1b0>
 801eef6:	2300      	movs	r3, #0
 801eef8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eefa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	dc35      	bgt.n	801ef6c <_dtoa_r+0x29c>
 801ef00:	2301      	movs	r3, #1
 801ef02:	9300      	str	r3, [sp, #0]
 801ef04:	9307      	str	r3, [sp, #28]
 801ef06:	461a      	mov	r2, r3
 801ef08:	920e      	str	r2, [sp, #56]	@ 0x38
 801ef0a:	e00b      	b.n	801ef24 <_dtoa_r+0x254>
 801ef0c:	2301      	movs	r3, #1
 801ef0e:	e7f3      	b.n	801eef8 <_dtoa_r+0x228>
 801ef10:	2300      	movs	r3, #0
 801ef12:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ef14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef16:	18fb      	adds	r3, r7, r3
 801ef18:	9300      	str	r3, [sp, #0]
 801ef1a:	3301      	adds	r3, #1
 801ef1c:	2b01      	cmp	r3, #1
 801ef1e:	9307      	str	r3, [sp, #28]
 801ef20:	bfb8      	it	lt
 801ef22:	2301      	movlt	r3, #1
 801ef24:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ef28:	2100      	movs	r1, #0
 801ef2a:	2204      	movs	r2, #4
 801ef2c:	f102 0514 	add.w	r5, r2, #20
 801ef30:	429d      	cmp	r5, r3
 801ef32:	d91f      	bls.n	801ef74 <_dtoa_r+0x2a4>
 801ef34:	6041      	str	r1, [r0, #4]
 801ef36:	4658      	mov	r0, fp
 801ef38:	f000 fd8e 	bl	801fa58 <_Balloc>
 801ef3c:	4682      	mov	sl, r0
 801ef3e:	2800      	cmp	r0, #0
 801ef40:	d13c      	bne.n	801efbc <_dtoa_r+0x2ec>
 801ef42:	4b1b      	ldr	r3, [pc, #108]	@ (801efb0 <_dtoa_r+0x2e0>)
 801ef44:	4602      	mov	r2, r0
 801ef46:	f240 11af 	movw	r1, #431	@ 0x1af
 801ef4a:	e6d8      	b.n	801ecfe <_dtoa_r+0x2e>
 801ef4c:	2301      	movs	r3, #1
 801ef4e:	e7e0      	b.n	801ef12 <_dtoa_r+0x242>
 801ef50:	2401      	movs	r4, #1
 801ef52:	2300      	movs	r3, #0
 801ef54:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef56:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ef58:	f04f 33ff 	mov.w	r3, #4294967295
 801ef5c:	9300      	str	r3, [sp, #0]
 801ef5e:	9307      	str	r3, [sp, #28]
 801ef60:	2200      	movs	r2, #0
 801ef62:	2312      	movs	r3, #18
 801ef64:	e7d0      	b.n	801ef08 <_dtoa_r+0x238>
 801ef66:	2301      	movs	r3, #1
 801ef68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ef6a:	e7f5      	b.n	801ef58 <_dtoa_r+0x288>
 801ef6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef6e:	9300      	str	r3, [sp, #0]
 801ef70:	9307      	str	r3, [sp, #28]
 801ef72:	e7d7      	b.n	801ef24 <_dtoa_r+0x254>
 801ef74:	3101      	adds	r1, #1
 801ef76:	0052      	lsls	r2, r2, #1
 801ef78:	e7d8      	b.n	801ef2c <_dtoa_r+0x25c>
 801ef7a:	bf00      	nop
 801ef7c:	f3af 8000 	nop.w
 801ef80:	636f4361 	.word	0x636f4361
 801ef84:	3fd287a7 	.word	0x3fd287a7
 801ef88:	8b60c8b3 	.word	0x8b60c8b3
 801ef8c:	3fc68a28 	.word	0x3fc68a28
 801ef90:	509f79fb 	.word	0x509f79fb
 801ef94:	3fd34413 	.word	0x3fd34413
 801ef98:	08026286 	.word	0x08026286
 801ef9c:	0802649d 	.word	0x0802649d
 801efa0:	7ff00000 	.word	0x7ff00000
 801efa4:	0802642c 	.word	0x0802642c
 801efa8:	3ff80000 	.word	0x3ff80000
 801efac:	08026598 	.word	0x08026598
 801efb0:	080264f5 	.word	0x080264f5
 801efb4:	08026499 	.word	0x08026499
 801efb8:	0802642b 	.word	0x0802642b
 801efbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801efc0:	6018      	str	r0, [r3, #0]
 801efc2:	9b07      	ldr	r3, [sp, #28]
 801efc4:	2b0e      	cmp	r3, #14
 801efc6:	f200 80a4 	bhi.w	801f112 <_dtoa_r+0x442>
 801efca:	2c00      	cmp	r4, #0
 801efcc:	f000 80a1 	beq.w	801f112 <_dtoa_r+0x442>
 801efd0:	2f00      	cmp	r7, #0
 801efd2:	dd33      	ble.n	801f03c <_dtoa_r+0x36c>
 801efd4:	4bad      	ldr	r3, [pc, #692]	@ (801f28c <_dtoa_r+0x5bc>)
 801efd6:	f007 020f 	and.w	r2, r7, #15
 801efda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801efde:	ed93 7b00 	vldr	d7, [r3]
 801efe2:	05f8      	lsls	r0, r7, #23
 801efe4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801efe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801efec:	d516      	bpl.n	801f01c <_dtoa_r+0x34c>
 801efee:	4ba8      	ldr	r3, [pc, #672]	@ (801f290 <_dtoa_r+0x5c0>)
 801eff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801eff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801eff8:	f7e1 fc28 	bl	800084c <__aeabi_ddiv>
 801effc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f000:	f004 040f 	and.w	r4, r4, #15
 801f004:	2603      	movs	r6, #3
 801f006:	4da2      	ldr	r5, [pc, #648]	@ (801f290 <_dtoa_r+0x5c0>)
 801f008:	b954      	cbnz	r4, 801f020 <_dtoa_r+0x350>
 801f00a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f012:	f7e1 fc1b 	bl	800084c <__aeabi_ddiv>
 801f016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f01a:	e028      	b.n	801f06e <_dtoa_r+0x39e>
 801f01c:	2602      	movs	r6, #2
 801f01e:	e7f2      	b.n	801f006 <_dtoa_r+0x336>
 801f020:	07e1      	lsls	r1, r4, #31
 801f022:	d508      	bpl.n	801f036 <_dtoa_r+0x366>
 801f024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f028:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f02c:	f7e1 fae4 	bl	80005f8 <__aeabi_dmul>
 801f030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f034:	3601      	adds	r6, #1
 801f036:	1064      	asrs	r4, r4, #1
 801f038:	3508      	adds	r5, #8
 801f03a:	e7e5      	b.n	801f008 <_dtoa_r+0x338>
 801f03c:	f000 80d2 	beq.w	801f1e4 <_dtoa_r+0x514>
 801f040:	427c      	negs	r4, r7
 801f042:	4b92      	ldr	r3, [pc, #584]	@ (801f28c <_dtoa_r+0x5bc>)
 801f044:	4d92      	ldr	r5, [pc, #584]	@ (801f290 <_dtoa_r+0x5c0>)
 801f046:	f004 020f 	and.w	r2, r4, #15
 801f04a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f052:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f056:	f7e1 facf 	bl	80005f8 <__aeabi_dmul>
 801f05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f05e:	1124      	asrs	r4, r4, #4
 801f060:	2300      	movs	r3, #0
 801f062:	2602      	movs	r6, #2
 801f064:	2c00      	cmp	r4, #0
 801f066:	f040 80b2 	bne.w	801f1ce <_dtoa_r+0x4fe>
 801f06a:	2b00      	cmp	r3, #0
 801f06c:	d1d3      	bne.n	801f016 <_dtoa_r+0x346>
 801f06e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f070:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f074:	2b00      	cmp	r3, #0
 801f076:	f000 80b7 	beq.w	801f1e8 <_dtoa_r+0x518>
 801f07a:	4b86      	ldr	r3, [pc, #536]	@ (801f294 <_dtoa_r+0x5c4>)
 801f07c:	2200      	movs	r2, #0
 801f07e:	4620      	mov	r0, r4
 801f080:	4629      	mov	r1, r5
 801f082:	f7e1 fd2b 	bl	8000adc <__aeabi_dcmplt>
 801f086:	2800      	cmp	r0, #0
 801f088:	f000 80ae 	beq.w	801f1e8 <_dtoa_r+0x518>
 801f08c:	9b07      	ldr	r3, [sp, #28]
 801f08e:	2b00      	cmp	r3, #0
 801f090:	f000 80aa 	beq.w	801f1e8 <_dtoa_r+0x518>
 801f094:	9b00      	ldr	r3, [sp, #0]
 801f096:	2b00      	cmp	r3, #0
 801f098:	dd37      	ble.n	801f10a <_dtoa_r+0x43a>
 801f09a:	1e7b      	subs	r3, r7, #1
 801f09c:	9304      	str	r3, [sp, #16]
 801f09e:	4620      	mov	r0, r4
 801f0a0:	4b7d      	ldr	r3, [pc, #500]	@ (801f298 <_dtoa_r+0x5c8>)
 801f0a2:	2200      	movs	r2, #0
 801f0a4:	4629      	mov	r1, r5
 801f0a6:	f7e1 faa7 	bl	80005f8 <__aeabi_dmul>
 801f0aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0ae:	9c00      	ldr	r4, [sp, #0]
 801f0b0:	3601      	adds	r6, #1
 801f0b2:	4630      	mov	r0, r6
 801f0b4:	f7e1 fa36 	bl	8000524 <__aeabi_i2d>
 801f0b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f0bc:	f7e1 fa9c 	bl	80005f8 <__aeabi_dmul>
 801f0c0:	4b76      	ldr	r3, [pc, #472]	@ (801f29c <_dtoa_r+0x5cc>)
 801f0c2:	2200      	movs	r2, #0
 801f0c4:	f7e1 f8e2 	bl	800028c <__adddf3>
 801f0c8:	4605      	mov	r5, r0
 801f0ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f0ce:	2c00      	cmp	r4, #0
 801f0d0:	f040 808d 	bne.w	801f1ee <_dtoa_r+0x51e>
 801f0d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f0d8:	4b71      	ldr	r3, [pc, #452]	@ (801f2a0 <_dtoa_r+0x5d0>)
 801f0da:	2200      	movs	r2, #0
 801f0dc:	f7e1 f8d4 	bl	8000288 <__aeabi_dsub>
 801f0e0:	4602      	mov	r2, r0
 801f0e2:	460b      	mov	r3, r1
 801f0e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f0e8:	462a      	mov	r2, r5
 801f0ea:	4633      	mov	r3, r6
 801f0ec:	f7e1 fd14 	bl	8000b18 <__aeabi_dcmpgt>
 801f0f0:	2800      	cmp	r0, #0
 801f0f2:	f040 828b 	bne.w	801f60c <_dtoa_r+0x93c>
 801f0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f0fa:	462a      	mov	r2, r5
 801f0fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f100:	f7e1 fcec 	bl	8000adc <__aeabi_dcmplt>
 801f104:	2800      	cmp	r0, #0
 801f106:	f040 8128 	bne.w	801f35a <_dtoa_r+0x68a>
 801f10a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f10e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f112:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f114:	2b00      	cmp	r3, #0
 801f116:	f2c0 815a 	blt.w	801f3ce <_dtoa_r+0x6fe>
 801f11a:	2f0e      	cmp	r7, #14
 801f11c:	f300 8157 	bgt.w	801f3ce <_dtoa_r+0x6fe>
 801f120:	4b5a      	ldr	r3, [pc, #360]	@ (801f28c <_dtoa_r+0x5bc>)
 801f122:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f126:	ed93 7b00 	vldr	d7, [r3]
 801f12a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	ed8d 7b00 	vstr	d7, [sp]
 801f132:	da03      	bge.n	801f13c <_dtoa_r+0x46c>
 801f134:	9b07      	ldr	r3, [sp, #28]
 801f136:	2b00      	cmp	r3, #0
 801f138:	f340 8101 	ble.w	801f33e <_dtoa_r+0x66e>
 801f13c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f140:	4656      	mov	r6, sl
 801f142:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f146:	4620      	mov	r0, r4
 801f148:	4629      	mov	r1, r5
 801f14a:	f7e1 fb7f 	bl	800084c <__aeabi_ddiv>
 801f14e:	f7e1 fd03 	bl	8000b58 <__aeabi_d2iz>
 801f152:	4680      	mov	r8, r0
 801f154:	f7e1 f9e6 	bl	8000524 <__aeabi_i2d>
 801f158:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f15c:	f7e1 fa4c 	bl	80005f8 <__aeabi_dmul>
 801f160:	4602      	mov	r2, r0
 801f162:	460b      	mov	r3, r1
 801f164:	4620      	mov	r0, r4
 801f166:	4629      	mov	r1, r5
 801f168:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f16c:	f7e1 f88c 	bl	8000288 <__aeabi_dsub>
 801f170:	f806 4b01 	strb.w	r4, [r6], #1
 801f174:	9d07      	ldr	r5, [sp, #28]
 801f176:	eba6 040a 	sub.w	r4, r6, sl
 801f17a:	42a5      	cmp	r5, r4
 801f17c:	4602      	mov	r2, r0
 801f17e:	460b      	mov	r3, r1
 801f180:	f040 8117 	bne.w	801f3b2 <_dtoa_r+0x6e2>
 801f184:	f7e1 f882 	bl	800028c <__adddf3>
 801f188:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f18c:	4604      	mov	r4, r0
 801f18e:	460d      	mov	r5, r1
 801f190:	f7e1 fcc2 	bl	8000b18 <__aeabi_dcmpgt>
 801f194:	2800      	cmp	r0, #0
 801f196:	f040 80f9 	bne.w	801f38c <_dtoa_r+0x6bc>
 801f19a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f19e:	4620      	mov	r0, r4
 801f1a0:	4629      	mov	r1, r5
 801f1a2:	f7e1 fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 801f1a6:	b118      	cbz	r0, 801f1b0 <_dtoa_r+0x4e0>
 801f1a8:	f018 0f01 	tst.w	r8, #1
 801f1ac:	f040 80ee 	bne.w	801f38c <_dtoa_r+0x6bc>
 801f1b0:	4649      	mov	r1, r9
 801f1b2:	4658      	mov	r0, fp
 801f1b4:	f000 fc90 	bl	801fad8 <_Bfree>
 801f1b8:	2300      	movs	r3, #0
 801f1ba:	7033      	strb	r3, [r6, #0]
 801f1bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1be:	3701      	adds	r7, #1
 801f1c0:	601f      	str	r7, [r3, #0]
 801f1c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	f000 831d 	beq.w	801f804 <_dtoa_r+0xb34>
 801f1ca:	601e      	str	r6, [r3, #0]
 801f1cc:	e31a      	b.n	801f804 <_dtoa_r+0xb34>
 801f1ce:	07e2      	lsls	r2, r4, #31
 801f1d0:	d505      	bpl.n	801f1de <_dtoa_r+0x50e>
 801f1d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f1d6:	f7e1 fa0f 	bl	80005f8 <__aeabi_dmul>
 801f1da:	3601      	adds	r6, #1
 801f1dc:	2301      	movs	r3, #1
 801f1de:	1064      	asrs	r4, r4, #1
 801f1e0:	3508      	adds	r5, #8
 801f1e2:	e73f      	b.n	801f064 <_dtoa_r+0x394>
 801f1e4:	2602      	movs	r6, #2
 801f1e6:	e742      	b.n	801f06e <_dtoa_r+0x39e>
 801f1e8:	9c07      	ldr	r4, [sp, #28]
 801f1ea:	9704      	str	r7, [sp, #16]
 801f1ec:	e761      	b.n	801f0b2 <_dtoa_r+0x3e2>
 801f1ee:	4b27      	ldr	r3, [pc, #156]	@ (801f28c <_dtoa_r+0x5bc>)
 801f1f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f1f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f1f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f1fa:	4454      	add	r4, sl
 801f1fc:	2900      	cmp	r1, #0
 801f1fe:	d053      	beq.n	801f2a8 <_dtoa_r+0x5d8>
 801f200:	4928      	ldr	r1, [pc, #160]	@ (801f2a4 <_dtoa_r+0x5d4>)
 801f202:	2000      	movs	r0, #0
 801f204:	f7e1 fb22 	bl	800084c <__aeabi_ddiv>
 801f208:	4633      	mov	r3, r6
 801f20a:	462a      	mov	r2, r5
 801f20c:	f7e1 f83c 	bl	8000288 <__aeabi_dsub>
 801f210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f214:	4656      	mov	r6, sl
 801f216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f21a:	f7e1 fc9d 	bl	8000b58 <__aeabi_d2iz>
 801f21e:	4605      	mov	r5, r0
 801f220:	f7e1 f980 	bl	8000524 <__aeabi_i2d>
 801f224:	4602      	mov	r2, r0
 801f226:	460b      	mov	r3, r1
 801f228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f22c:	f7e1 f82c 	bl	8000288 <__aeabi_dsub>
 801f230:	3530      	adds	r5, #48	@ 0x30
 801f232:	4602      	mov	r2, r0
 801f234:	460b      	mov	r3, r1
 801f236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f23a:	f806 5b01 	strb.w	r5, [r6], #1
 801f23e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f242:	f7e1 fc4b 	bl	8000adc <__aeabi_dcmplt>
 801f246:	2800      	cmp	r0, #0
 801f248:	d171      	bne.n	801f32e <_dtoa_r+0x65e>
 801f24a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f24e:	4911      	ldr	r1, [pc, #68]	@ (801f294 <_dtoa_r+0x5c4>)
 801f250:	2000      	movs	r0, #0
 801f252:	f7e1 f819 	bl	8000288 <__aeabi_dsub>
 801f256:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f25a:	f7e1 fc3f 	bl	8000adc <__aeabi_dcmplt>
 801f25e:	2800      	cmp	r0, #0
 801f260:	f040 8095 	bne.w	801f38e <_dtoa_r+0x6be>
 801f264:	42a6      	cmp	r6, r4
 801f266:	f43f af50 	beq.w	801f10a <_dtoa_r+0x43a>
 801f26a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f26e:	4b0a      	ldr	r3, [pc, #40]	@ (801f298 <_dtoa_r+0x5c8>)
 801f270:	2200      	movs	r2, #0
 801f272:	f7e1 f9c1 	bl	80005f8 <__aeabi_dmul>
 801f276:	4b08      	ldr	r3, [pc, #32]	@ (801f298 <_dtoa_r+0x5c8>)
 801f278:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f27c:	2200      	movs	r2, #0
 801f27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f282:	f7e1 f9b9 	bl	80005f8 <__aeabi_dmul>
 801f286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f28a:	e7c4      	b.n	801f216 <_dtoa_r+0x546>
 801f28c:	08026598 	.word	0x08026598
 801f290:	08026570 	.word	0x08026570
 801f294:	3ff00000 	.word	0x3ff00000
 801f298:	40240000 	.word	0x40240000
 801f29c:	401c0000 	.word	0x401c0000
 801f2a0:	40140000 	.word	0x40140000
 801f2a4:	3fe00000 	.word	0x3fe00000
 801f2a8:	4631      	mov	r1, r6
 801f2aa:	4628      	mov	r0, r5
 801f2ac:	f7e1 f9a4 	bl	80005f8 <__aeabi_dmul>
 801f2b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f2b4:	9415      	str	r4, [sp, #84]	@ 0x54
 801f2b6:	4656      	mov	r6, sl
 801f2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2bc:	f7e1 fc4c 	bl	8000b58 <__aeabi_d2iz>
 801f2c0:	4605      	mov	r5, r0
 801f2c2:	f7e1 f92f 	bl	8000524 <__aeabi_i2d>
 801f2c6:	4602      	mov	r2, r0
 801f2c8:	460b      	mov	r3, r1
 801f2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2ce:	f7e0 ffdb 	bl	8000288 <__aeabi_dsub>
 801f2d2:	3530      	adds	r5, #48	@ 0x30
 801f2d4:	f806 5b01 	strb.w	r5, [r6], #1
 801f2d8:	4602      	mov	r2, r0
 801f2da:	460b      	mov	r3, r1
 801f2dc:	42a6      	cmp	r6, r4
 801f2de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f2e2:	f04f 0200 	mov.w	r2, #0
 801f2e6:	d124      	bne.n	801f332 <_dtoa_r+0x662>
 801f2e8:	4bac      	ldr	r3, [pc, #688]	@ (801f59c <_dtoa_r+0x8cc>)
 801f2ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f2ee:	f7e0 ffcd 	bl	800028c <__adddf3>
 801f2f2:	4602      	mov	r2, r0
 801f2f4:	460b      	mov	r3, r1
 801f2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2fa:	f7e1 fc0d 	bl	8000b18 <__aeabi_dcmpgt>
 801f2fe:	2800      	cmp	r0, #0
 801f300:	d145      	bne.n	801f38e <_dtoa_r+0x6be>
 801f302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f306:	49a5      	ldr	r1, [pc, #660]	@ (801f59c <_dtoa_r+0x8cc>)
 801f308:	2000      	movs	r0, #0
 801f30a:	f7e0 ffbd 	bl	8000288 <__aeabi_dsub>
 801f30e:	4602      	mov	r2, r0
 801f310:	460b      	mov	r3, r1
 801f312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f316:	f7e1 fbe1 	bl	8000adc <__aeabi_dcmplt>
 801f31a:	2800      	cmp	r0, #0
 801f31c:	f43f aef5 	beq.w	801f10a <_dtoa_r+0x43a>
 801f320:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f322:	1e73      	subs	r3, r6, #1
 801f324:	9315      	str	r3, [sp, #84]	@ 0x54
 801f326:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f32a:	2b30      	cmp	r3, #48	@ 0x30
 801f32c:	d0f8      	beq.n	801f320 <_dtoa_r+0x650>
 801f32e:	9f04      	ldr	r7, [sp, #16]
 801f330:	e73e      	b.n	801f1b0 <_dtoa_r+0x4e0>
 801f332:	4b9b      	ldr	r3, [pc, #620]	@ (801f5a0 <_dtoa_r+0x8d0>)
 801f334:	f7e1 f960 	bl	80005f8 <__aeabi_dmul>
 801f338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f33c:	e7bc      	b.n	801f2b8 <_dtoa_r+0x5e8>
 801f33e:	d10c      	bne.n	801f35a <_dtoa_r+0x68a>
 801f340:	4b98      	ldr	r3, [pc, #608]	@ (801f5a4 <_dtoa_r+0x8d4>)
 801f342:	2200      	movs	r2, #0
 801f344:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f348:	f7e1 f956 	bl	80005f8 <__aeabi_dmul>
 801f34c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f350:	f7e1 fbd8 	bl	8000b04 <__aeabi_dcmpge>
 801f354:	2800      	cmp	r0, #0
 801f356:	f000 8157 	beq.w	801f608 <_dtoa_r+0x938>
 801f35a:	2400      	movs	r4, #0
 801f35c:	4625      	mov	r5, r4
 801f35e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f360:	43db      	mvns	r3, r3
 801f362:	9304      	str	r3, [sp, #16]
 801f364:	4656      	mov	r6, sl
 801f366:	2700      	movs	r7, #0
 801f368:	4621      	mov	r1, r4
 801f36a:	4658      	mov	r0, fp
 801f36c:	f000 fbb4 	bl	801fad8 <_Bfree>
 801f370:	2d00      	cmp	r5, #0
 801f372:	d0dc      	beq.n	801f32e <_dtoa_r+0x65e>
 801f374:	b12f      	cbz	r7, 801f382 <_dtoa_r+0x6b2>
 801f376:	42af      	cmp	r7, r5
 801f378:	d003      	beq.n	801f382 <_dtoa_r+0x6b2>
 801f37a:	4639      	mov	r1, r7
 801f37c:	4658      	mov	r0, fp
 801f37e:	f000 fbab 	bl	801fad8 <_Bfree>
 801f382:	4629      	mov	r1, r5
 801f384:	4658      	mov	r0, fp
 801f386:	f000 fba7 	bl	801fad8 <_Bfree>
 801f38a:	e7d0      	b.n	801f32e <_dtoa_r+0x65e>
 801f38c:	9704      	str	r7, [sp, #16]
 801f38e:	4633      	mov	r3, r6
 801f390:	461e      	mov	r6, r3
 801f392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f396:	2a39      	cmp	r2, #57	@ 0x39
 801f398:	d107      	bne.n	801f3aa <_dtoa_r+0x6da>
 801f39a:	459a      	cmp	sl, r3
 801f39c:	d1f8      	bne.n	801f390 <_dtoa_r+0x6c0>
 801f39e:	9a04      	ldr	r2, [sp, #16]
 801f3a0:	3201      	adds	r2, #1
 801f3a2:	9204      	str	r2, [sp, #16]
 801f3a4:	2230      	movs	r2, #48	@ 0x30
 801f3a6:	f88a 2000 	strb.w	r2, [sl]
 801f3aa:	781a      	ldrb	r2, [r3, #0]
 801f3ac:	3201      	adds	r2, #1
 801f3ae:	701a      	strb	r2, [r3, #0]
 801f3b0:	e7bd      	b.n	801f32e <_dtoa_r+0x65e>
 801f3b2:	4b7b      	ldr	r3, [pc, #492]	@ (801f5a0 <_dtoa_r+0x8d0>)
 801f3b4:	2200      	movs	r2, #0
 801f3b6:	f7e1 f91f 	bl	80005f8 <__aeabi_dmul>
 801f3ba:	2200      	movs	r2, #0
 801f3bc:	2300      	movs	r3, #0
 801f3be:	4604      	mov	r4, r0
 801f3c0:	460d      	mov	r5, r1
 801f3c2:	f7e1 fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 801f3c6:	2800      	cmp	r0, #0
 801f3c8:	f43f aebb 	beq.w	801f142 <_dtoa_r+0x472>
 801f3cc:	e6f0      	b.n	801f1b0 <_dtoa_r+0x4e0>
 801f3ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f3d0:	2a00      	cmp	r2, #0
 801f3d2:	f000 80db 	beq.w	801f58c <_dtoa_r+0x8bc>
 801f3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f3d8:	2a01      	cmp	r2, #1
 801f3da:	f300 80bf 	bgt.w	801f55c <_dtoa_r+0x88c>
 801f3de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f3e0:	2a00      	cmp	r2, #0
 801f3e2:	f000 80b7 	beq.w	801f554 <_dtoa_r+0x884>
 801f3e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f3ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f3ec:	4646      	mov	r6, r8
 801f3ee:	9a08      	ldr	r2, [sp, #32]
 801f3f0:	2101      	movs	r1, #1
 801f3f2:	441a      	add	r2, r3
 801f3f4:	4658      	mov	r0, fp
 801f3f6:	4498      	add	r8, r3
 801f3f8:	9208      	str	r2, [sp, #32]
 801f3fa:	f000 fc6b 	bl	801fcd4 <__i2b>
 801f3fe:	4605      	mov	r5, r0
 801f400:	b15e      	cbz	r6, 801f41a <_dtoa_r+0x74a>
 801f402:	9b08      	ldr	r3, [sp, #32]
 801f404:	2b00      	cmp	r3, #0
 801f406:	dd08      	ble.n	801f41a <_dtoa_r+0x74a>
 801f408:	42b3      	cmp	r3, r6
 801f40a:	9a08      	ldr	r2, [sp, #32]
 801f40c:	bfa8      	it	ge
 801f40e:	4633      	movge	r3, r6
 801f410:	eba8 0803 	sub.w	r8, r8, r3
 801f414:	1af6      	subs	r6, r6, r3
 801f416:	1ad3      	subs	r3, r2, r3
 801f418:	9308      	str	r3, [sp, #32]
 801f41a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f41c:	b1f3      	cbz	r3, 801f45c <_dtoa_r+0x78c>
 801f41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f420:	2b00      	cmp	r3, #0
 801f422:	f000 80b7 	beq.w	801f594 <_dtoa_r+0x8c4>
 801f426:	b18c      	cbz	r4, 801f44c <_dtoa_r+0x77c>
 801f428:	4629      	mov	r1, r5
 801f42a:	4622      	mov	r2, r4
 801f42c:	4658      	mov	r0, fp
 801f42e:	f000 fd11 	bl	801fe54 <__pow5mult>
 801f432:	464a      	mov	r2, r9
 801f434:	4601      	mov	r1, r0
 801f436:	4605      	mov	r5, r0
 801f438:	4658      	mov	r0, fp
 801f43a:	f000 fc61 	bl	801fd00 <__multiply>
 801f43e:	4649      	mov	r1, r9
 801f440:	9004      	str	r0, [sp, #16]
 801f442:	4658      	mov	r0, fp
 801f444:	f000 fb48 	bl	801fad8 <_Bfree>
 801f448:	9b04      	ldr	r3, [sp, #16]
 801f44a:	4699      	mov	r9, r3
 801f44c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f44e:	1b1a      	subs	r2, r3, r4
 801f450:	d004      	beq.n	801f45c <_dtoa_r+0x78c>
 801f452:	4649      	mov	r1, r9
 801f454:	4658      	mov	r0, fp
 801f456:	f000 fcfd 	bl	801fe54 <__pow5mult>
 801f45a:	4681      	mov	r9, r0
 801f45c:	2101      	movs	r1, #1
 801f45e:	4658      	mov	r0, fp
 801f460:	f000 fc38 	bl	801fcd4 <__i2b>
 801f464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f466:	4604      	mov	r4, r0
 801f468:	2b00      	cmp	r3, #0
 801f46a:	f000 81cf 	beq.w	801f80c <_dtoa_r+0xb3c>
 801f46e:	461a      	mov	r2, r3
 801f470:	4601      	mov	r1, r0
 801f472:	4658      	mov	r0, fp
 801f474:	f000 fcee 	bl	801fe54 <__pow5mult>
 801f478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f47a:	2b01      	cmp	r3, #1
 801f47c:	4604      	mov	r4, r0
 801f47e:	f300 8095 	bgt.w	801f5ac <_dtoa_r+0x8dc>
 801f482:	9b02      	ldr	r3, [sp, #8]
 801f484:	2b00      	cmp	r3, #0
 801f486:	f040 8087 	bne.w	801f598 <_dtoa_r+0x8c8>
 801f48a:	9b03      	ldr	r3, [sp, #12]
 801f48c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f490:	2b00      	cmp	r3, #0
 801f492:	f040 8089 	bne.w	801f5a8 <_dtoa_r+0x8d8>
 801f496:	9b03      	ldr	r3, [sp, #12]
 801f498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f49c:	0d1b      	lsrs	r3, r3, #20
 801f49e:	051b      	lsls	r3, r3, #20
 801f4a0:	b12b      	cbz	r3, 801f4ae <_dtoa_r+0x7de>
 801f4a2:	9b08      	ldr	r3, [sp, #32]
 801f4a4:	3301      	adds	r3, #1
 801f4a6:	9308      	str	r3, [sp, #32]
 801f4a8:	f108 0801 	add.w	r8, r8, #1
 801f4ac:	2301      	movs	r3, #1
 801f4ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801f4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	f000 81b0 	beq.w	801f818 <_dtoa_r+0xb48>
 801f4b8:	6923      	ldr	r3, [r4, #16]
 801f4ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f4be:	6918      	ldr	r0, [r3, #16]
 801f4c0:	f000 fbbc 	bl	801fc3c <__hi0bits>
 801f4c4:	f1c0 0020 	rsb	r0, r0, #32
 801f4c8:	9b08      	ldr	r3, [sp, #32]
 801f4ca:	4418      	add	r0, r3
 801f4cc:	f010 001f 	ands.w	r0, r0, #31
 801f4d0:	d077      	beq.n	801f5c2 <_dtoa_r+0x8f2>
 801f4d2:	f1c0 0320 	rsb	r3, r0, #32
 801f4d6:	2b04      	cmp	r3, #4
 801f4d8:	dd6b      	ble.n	801f5b2 <_dtoa_r+0x8e2>
 801f4da:	9b08      	ldr	r3, [sp, #32]
 801f4dc:	f1c0 001c 	rsb	r0, r0, #28
 801f4e0:	4403      	add	r3, r0
 801f4e2:	4480      	add	r8, r0
 801f4e4:	4406      	add	r6, r0
 801f4e6:	9308      	str	r3, [sp, #32]
 801f4e8:	f1b8 0f00 	cmp.w	r8, #0
 801f4ec:	dd05      	ble.n	801f4fa <_dtoa_r+0x82a>
 801f4ee:	4649      	mov	r1, r9
 801f4f0:	4642      	mov	r2, r8
 801f4f2:	4658      	mov	r0, fp
 801f4f4:	f000 fd08 	bl	801ff08 <__lshift>
 801f4f8:	4681      	mov	r9, r0
 801f4fa:	9b08      	ldr	r3, [sp, #32]
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	dd05      	ble.n	801f50c <_dtoa_r+0x83c>
 801f500:	4621      	mov	r1, r4
 801f502:	461a      	mov	r2, r3
 801f504:	4658      	mov	r0, fp
 801f506:	f000 fcff 	bl	801ff08 <__lshift>
 801f50a:	4604      	mov	r4, r0
 801f50c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d059      	beq.n	801f5c6 <_dtoa_r+0x8f6>
 801f512:	4621      	mov	r1, r4
 801f514:	4648      	mov	r0, r9
 801f516:	f000 fd63 	bl	801ffe0 <__mcmp>
 801f51a:	2800      	cmp	r0, #0
 801f51c:	da53      	bge.n	801f5c6 <_dtoa_r+0x8f6>
 801f51e:	1e7b      	subs	r3, r7, #1
 801f520:	9304      	str	r3, [sp, #16]
 801f522:	4649      	mov	r1, r9
 801f524:	2300      	movs	r3, #0
 801f526:	220a      	movs	r2, #10
 801f528:	4658      	mov	r0, fp
 801f52a:	f000 faf7 	bl	801fb1c <__multadd>
 801f52e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f530:	4681      	mov	r9, r0
 801f532:	2b00      	cmp	r3, #0
 801f534:	f000 8172 	beq.w	801f81c <_dtoa_r+0xb4c>
 801f538:	2300      	movs	r3, #0
 801f53a:	4629      	mov	r1, r5
 801f53c:	220a      	movs	r2, #10
 801f53e:	4658      	mov	r0, fp
 801f540:	f000 faec 	bl	801fb1c <__multadd>
 801f544:	9b00      	ldr	r3, [sp, #0]
 801f546:	2b00      	cmp	r3, #0
 801f548:	4605      	mov	r5, r0
 801f54a:	dc67      	bgt.n	801f61c <_dtoa_r+0x94c>
 801f54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f54e:	2b02      	cmp	r3, #2
 801f550:	dc41      	bgt.n	801f5d6 <_dtoa_r+0x906>
 801f552:	e063      	b.n	801f61c <_dtoa_r+0x94c>
 801f554:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f556:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f55a:	e746      	b.n	801f3ea <_dtoa_r+0x71a>
 801f55c:	9b07      	ldr	r3, [sp, #28]
 801f55e:	1e5c      	subs	r4, r3, #1
 801f560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f562:	42a3      	cmp	r3, r4
 801f564:	bfbf      	itttt	lt
 801f566:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f568:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f56a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f56c:	1ae3      	sublt	r3, r4, r3
 801f56e:	bfb4      	ite	lt
 801f570:	18d2      	addlt	r2, r2, r3
 801f572:	1b1c      	subge	r4, r3, r4
 801f574:	9b07      	ldr	r3, [sp, #28]
 801f576:	bfbc      	itt	lt
 801f578:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f57a:	2400      	movlt	r4, #0
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	bfb5      	itete	lt
 801f580:	eba8 0603 	sublt.w	r6, r8, r3
 801f584:	9b07      	ldrge	r3, [sp, #28]
 801f586:	2300      	movlt	r3, #0
 801f588:	4646      	movge	r6, r8
 801f58a:	e730      	b.n	801f3ee <_dtoa_r+0x71e>
 801f58c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f58e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f590:	4646      	mov	r6, r8
 801f592:	e735      	b.n	801f400 <_dtoa_r+0x730>
 801f594:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f596:	e75c      	b.n	801f452 <_dtoa_r+0x782>
 801f598:	2300      	movs	r3, #0
 801f59a:	e788      	b.n	801f4ae <_dtoa_r+0x7de>
 801f59c:	3fe00000 	.word	0x3fe00000
 801f5a0:	40240000 	.word	0x40240000
 801f5a4:	40140000 	.word	0x40140000
 801f5a8:	9b02      	ldr	r3, [sp, #8]
 801f5aa:	e780      	b.n	801f4ae <_dtoa_r+0x7de>
 801f5ac:	2300      	movs	r3, #0
 801f5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5b0:	e782      	b.n	801f4b8 <_dtoa_r+0x7e8>
 801f5b2:	d099      	beq.n	801f4e8 <_dtoa_r+0x818>
 801f5b4:	9a08      	ldr	r2, [sp, #32]
 801f5b6:	331c      	adds	r3, #28
 801f5b8:	441a      	add	r2, r3
 801f5ba:	4498      	add	r8, r3
 801f5bc:	441e      	add	r6, r3
 801f5be:	9208      	str	r2, [sp, #32]
 801f5c0:	e792      	b.n	801f4e8 <_dtoa_r+0x818>
 801f5c2:	4603      	mov	r3, r0
 801f5c4:	e7f6      	b.n	801f5b4 <_dtoa_r+0x8e4>
 801f5c6:	9b07      	ldr	r3, [sp, #28]
 801f5c8:	9704      	str	r7, [sp, #16]
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	dc20      	bgt.n	801f610 <_dtoa_r+0x940>
 801f5ce:	9300      	str	r3, [sp, #0]
 801f5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5d2:	2b02      	cmp	r3, #2
 801f5d4:	dd1e      	ble.n	801f614 <_dtoa_r+0x944>
 801f5d6:	9b00      	ldr	r3, [sp, #0]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	f47f aec0 	bne.w	801f35e <_dtoa_r+0x68e>
 801f5de:	4621      	mov	r1, r4
 801f5e0:	2205      	movs	r2, #5
 801f5e2:	4658      	mov	r0, fp
 801f5e4:	f000 fa9a 	bl	801fb1c <__multadd>
 801f5e8:	4601      	mov	r1, r0
 801f5ea:	4604      	mov	r4, r0
 801f5ec:	4648      	mov	r0, r9
 801f5ee:	f000 fcf7 	bl	801ffe0 <__mcmp>
 801f5f2:	2800      	cmp	r0, #0
 801f5f4:	f77f aeb3 	ble.w	801f35e <_dtoa_r+0x68e>
 801f5f8:	4656      	mov	r6, sl
 801f5fa:	2331      	movs	r3, #49	@ 0x31
 801f5fc:	f806 3b01 	strb.w	r3, [r6], #1
 801f600:	9b04      	ldr	r3, [sp, #16]
 801f602:	3301      	adds	r3, #1
 801f604:	9304      	str	r3, [sp, #16]
 801f606:	e6ae      	b.n	801f366 <_dtoa_r+0x696>
 801f608:	9c07      	ldr	r4, [sp, #28]
 801f60a:	9704      	str	r7, [sp, #16]
 801f60c:	4625      	mov	r5, r4
 801f60e:	e7f3      	b.n	801f5f8 <_dtoa_r+0x928>
 801f610:	9b07      	ldr	r3, [sp, #28]
 801f612:	9300      	str	r3, [sp, #0]
 801f614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f616:	2b00      	cmp	r3, #0
 801f618:	f000 8104 	beq.w	801f824 <_dtoa_r+0xb54>
 801f61c:	2e00      	cmp	r6, #0
 801f61e:	dd05      	ble.n	801f62c <_dtoa_r+0x95c>
 801f620:	4629      	mov	r1, r5
 801f622:	4632      	mov	r2, r6
 801f624:	4658      	mov	r0, fp
 801f626:	f000 fc6f 	bl	801ff08 <__lshift>
 801f62a:	4605      	mov	r5, r0
 801f62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d05a      	beq.n	801f6e8 <_dtoa_r+0xa18>
 801f632:	6869      	ldr	r1, [r5, #4]
 801f634:	4658      	mov	r0, fp
 801f636:	f000 fa0f 	bl	801fa58 <_Balloc>
 801f63a:	4606      	mov	r6, r0
 801f63c:	b928      	cbnz	r0, 801f64a <_dtoa_r+0x97a>
 801f63e:	4b84      	ldr	r3, [pc, #528]	@ (801f850 <_dtoa_r+0xb80>)
 801f640:	4602      	mov	r2, r0
 801f642:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f646:	f7ff bb5a 	b.w	801ecfe <_dtoa_r+0x2e>
 801f64a:	692a      	ldr	r2, [r5, #16]
 801f64c:	3202      	adds	r2, #2
 801f64e:	0092      	lsls	r2, r2, #2
 801f650:	f105 010c 	add.w	r1, r5, #12
 801f654:	300c      	adds	r0, #12
 801f656:	f7ff fa80 	bl	801eb5a <memcpy>
 801f65a:	2201      	movs	r2, #1
 801f65c:	4631      	mov	r1, r6
 801f65e:	4658      	mov	r0, fp
 801f660:	f000 fc52 	bl	801ff08 <__lshift>
 801f664:	f10a 0301 	add.w	r3, sl, #1
 801f668:	9307      	str	r3, [sp, #28]
 801f66a:	9b00      	ldr	r3, [sp, #0]
 801f66c:	4453      	add	r3, sl
 801f66e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f670:	9b02      	ldr	r3, [sp, #8]
 801f672:	f003 0301 	and.w	r3, r3, #1
 801f676:	462f      	mov	r7, r5
 801f678:	930a      	str	r3, [sp, #40]	@ 0x28
 801f67a:	4605      	mov	r5, r0
 801f67c:	9b07      	ldr	r3, [sp, #28]
 801f67e:	4621      	mov	r1, r4
 801f680:	3b01      	subs	r3, #1
 801f682:	4648      	mov	r0, r9
 801f684:	9300      	str	r3, [sp, #0]
 801f686:	f7ff fa9b 	bl	801ebc0 <quorem>
 801f68a:	4639      	mov	r1, r7
 801f68c:	9002      	str	r0, [sp, #8]
 801f68e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f692:	4648      	mov	r0, r9
 801f694:	f000 fca4 	bl	801ffe0 <__mcmp>
 801f698:	462a      	mov	r2, r5
 801f69a:	9008      	str	r0, [sp, #32]
 801f69c:	4621      	mov	r1, r4
 801f69e:	4658      	mov	r0, fp
 801f6a0:	f000 fcba 	bl	8020018 <__mdiff>
 801f6a4:	68c2      	ldr	r2, [r0, #12]
 801f6a6:	4606      	mov	r6, r0
 801f6a8:	bb02      	cbnz	r2, 801f6ec <_dtoa_r+0xa1c>
 801f6aa:	4601      	mov	r1, r0
 801f6ac:	4648      	mov	r0, r9
 801f6ae:	f000 fc97 	bl	801ffe0 <__mcmp>
 801f6b2:	4602      	mov	r2, r0
 801f6b4:	4631      	mov	r1, r6
 801f6b6:	4658      	mov	r0, fp
 801f6b8:	920e      	str	r2, [sp, #56]	@ 0x38
 801f6ba:	f000 fa0d 	bl	801fad8 <_Bfree>
 801f6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f6c2:	9e07      	ldr	r6, [sp, #28]
 801f6c4:	ea43 0102 	orr.w	r1, r3, r2
 801f6c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f6ca:	4319      	orrs	r1, r3
 801f6cc:	d110      	bne.n	801f6f0 <_dtoa_r+0xa20>
 801f6ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f6d2:	d029      	beq.n	801f728 <_dtoa_r+0xa58>
 801f6d4:	9b08      	ldr	r3, [sp, #32]
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	dd02      	ble.n	801f6e0 <_dtoa_r+0xa10>
 801f6da:	9b02      	ldr	r3, [sp, #8]
 801f6dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801f6e0:	9b00      	ldr	r3, [sp, #0]
 801f6e2:	f883 8000 	strb.w	r8, [r3]
 801f6e6:	e63f      	b.n	801f368 <_dtoa_r+0x698>
 801f6e8:	4628      	mov	r0, r5
 801f6ea:	e7bb      	b.n	801f664 <_dtoa_r+0x994>
 801f6ec:	2201      	movs	r2, #1
 801f6ee:	e7e1      	b.n	801f6b4 <_dtoa_r+0x9e4>
 801f6f0:	9b08      	ldr	r3, [sp, #32]
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	db04      	blt.n	801f700 <_dtoa_r+0xa30>
 801f6f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f6f8:	430b      	orrs	r3, r1
 801f6fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f6fc:	430b      	orrs	r3, r1
 801f6fe:	d120      	bne.n	801f742 <_dtoa_r+0xa72>
 801f700:	2a00      	cmp	r2, #0
 801f702:	dded      	ble.n	801f6e0 <_dtoa_r+0xa10>
 801f704:	4649      	mov	r1, r9
 801f706:	2201      	movs	r2, #1
 801f708:	4658      	mov	r0, fp
 801f70a:	f000 fbfd 	bl	801ff08 <__lshift>
 801f70e:	4621      	mov	r1, r4
 801f710:	4681      	mov	r9, r0
 801f712:	f000 fc65 	bl	801ffe0 <__mcmp>
 801f716:	2800      	cmp	r0, #0
 801f718:	dc03      	bgt.n	801f722 <_dtoa_r+0xa52>
 801f71a:	d1e1      	bne.n	801f6e0 <_dtoa_r+0xa10>
 801f71c:	f018 0f01 	tst.w	r8, #1
 801f720:	d0de      	beq.n	801f6e0 <_dtoa_r+0xa10>
 801f722:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f726:	d1d8      	bne.n	801f6da <_dtoa_r+0xa0a>
 801f728:	9a00      	ldr	r2, [sp, #0]
 801f72a:	2339      	movs	r3, #57	@ 0x39
 801f72c:	7013      	strb	r3, [r2, #0]
 801f72e:	4633      	mov	r3, r6
 801f730:	461e      	mov	r6, r3
 801f732:	3b01      	subs	r3, #1
 801f734:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f738:	2a39      	cmp	r2, #57	@ 0x39
 801f73a:	d052      	beq.n	801f7e2 <_dtoa_r+0xb12>
 801f73c:	3201      	adds	r2, #1
 801f73e:	701a      	strb	r2, [r3, #0]
 801f740:	e612      	b.n	801f368 <_dtoa_r+0x698>
 801f742:	2a00      	cmp	r2, #0
 801f744:	dd07      	ble.n	801f756 <_dtoa_r+0xa86>
 801f746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f74a:	d0ed      	beq.n	801f728 <_dtoa_r+0xa58>
 801f74c:	9a00      	ldr	r2, [sp, #0]
 801f74e:	f108 0301 	add.w	r3, r8, #1
 801f752:	7013      	strb	r3, [r2, #0]
 801f754:	e608      	b.n	801f368 <_dtoa_r+0x698>
 801f756:	9b07      	ldr	r3, [sp, #28]
 801f758:	9a07      	ldr	r2, [sp, #28]
 801f75a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f760:	4293      	cmp	r3, r2
 801f762:	d028      	beq.n	801f7b6 <_dtoa_r+0xae6>
 801f764:	4649      	mov	r1, r9
 801f766:	2300      	movs	r3, #0
 801f768:	220a      	movs	r2, #10
 801f76a:	4658      	mov	r0, fp
 801f76c:	f000 f9d6 	bl	801fb1c <__multadd>
 801f770:	42af      	cmp	r7, r5
 801f772:	4681      	mov	r9, r0
 801f774:	f04f 0300 	mov.w	r3, #0
 801f778:	f04f 020a 	mov.w	r2, #10
 801f77c:	4639      	mov	r1, r7
 801f77e:	4658      	mov	r0, fp
 801f780:	d107      	bne.n	801f792 <_dtoa_r+0xac2>
 801f782:	f000 f9cb 	bl	801fb1c <__multadd>
 801f786:	4607      	mov	r7, r0
 801f788:	4605      	mov	r5, r0
 801f78a:	9b07      	ldr	r3, [sp, #28]
 801f78c:	3301      	adds	r3, #1
 801f78e:	9307      	str	r3, [sp, #28]
 801f790:	e774      	b.n	801f67c <_dtoa_r+0x9ac>
 801f792:	f000 f9c3 	bl	801fb1c <__multadd>
 801f796:	4629      	mov	r1, r5
 801f798:	4607      	mov	r7, r0
 801f79a:	2300      	movs	r3, #0
 801f79c:	220a      	movs	r2, #10
 801f79e:	4658      	mov	r0, fp
 801f7a0:	f000 f9bc 	bl	801fb1c <__multadd>
 801f7a4:	4605      	mov	r5, r0
 801f7a6:	e7f0      	b.n	801f78a <_dtoa_r+0xaba>
 801f7a8:	9b00      	ldr	r3, [sp, #0]
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	bfcc      	ite	gt
 801f7ae:	461e      	movgt	r6, r3
 801f7b0:	2601      	movle	r6, #1
 801f7b2:	4456      	add	r6, sl
 801f7b4:	2700      	movs	r7, #0
 801f7b6:	4649      	mov	r1, r9
 801f7b8:	2201      	movs	r2, #1
 801f7ba:	4658      	mov	r0, fp
 801f7bc:	f000 fba4 	bl	801ff08 <__lshift>
 801f7c0:	4621      	mov	r1, r4
 801f7c2:	4681      	mov	r9, r0
 801f7c4:	f000 fc0c 	bl	801ffe0 <__mcmp>
 801f7c8:	2800      	cmp	r0, #0
 801f7ca:	dcb0      	bgt.n	801f72e <_dtoa_r+0xa5e>
 801f7cc:	d102      	bne.n	801f7d4 <_dtoa_r+0xb04>
 801f7ce:	f018 0f01 	tst.w	r8, #1
 801f7d2:	d1ac      	bne.n	801f72e <_dtoa_r+0xa5e>
 801f7d4:	4633      	mov	r3, r6
 801f7d6:	461e      	mov	r6, r3
 801f7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f7dc:	2a30      	cmp	r2, #48	@ 0x30
 801f7de:	d0fa      	beq.n	801f7d6 <_dtoa_r+0xb06>
 801f7e0:	e5c2      	b.n	801f368 <_dtoa_r+0x698>
 801f7e2:	459a      	cmp	sl, r3
 801f7e4:	d1a4      	bne.n	801f730 <_dtoa_r+0xa60>
 801f7e6:	9b04      	ldr	r3, [sp, #16]
 801f7e8:	3301      	adds	r3, #1
 801f7ea:	9304      	str	r3, [sp, #16]
 801f7ec:	2331      	movs	r3, #49	@ 0x31
 801f7ee:	f88a 3000 	strb.w	r3, [sl]
 801f7f2:	e5b9      	b.n	801f368 <_dtoa_r+0x698>
 801f7f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f7f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801f854 <_dtoa_r+0xb84>
 801f7fa:	b11b      	cbz	r3, 801f804 <_dtoa_r+0xb34>
 801f7fc:	f10a 0308 	add.w	r3, sl, #8
 801f800:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f802:	6013      	str	r3, [r2, #0]
 801f804:	4650      	mov	r0, sl
 801f806:	b019      	add	sp, #100	@ 0x64
 801f808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f80e:	2b01      	cmp	r3, #1
 801f810:	f77f ae37 	ble.w	801f482 <_dtoa_r+0x7b2>
 801f814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f816:	930a      	str	r3, [sp, #40]	@ 0x28
 801f818:	2001      	movs	r0, #1
 801f81a:	e655      	b.n	801f4c8 <_dtoa_r+0x7f8>
 801f81c:	9b00      	ldr	r3, [sp, #0]
 801f81e:	2b00      	cmp	r3, #0
 801f820:	f77f aed6 	ble.w	801f5d0 <_dtoa_r+0x900>
 801f824:	4656      	mov	r6, sl
 801f826:	4621      	mov	r1, r4
 801f828:	4648      	mov	r0, r9
 801f82a:	f7ff f9c9 	bl	801ebc0 <quorem>
 801f82e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f832:	f806 8b01 	strb.w	r8, [r6], #1
 801f836:	9b00      	ldr	r3, [sp, #0]
 801f838:	eba6 020a 	sub.w	r2, r6, sl
 801f83c:	4293      	cmp	r3, r2
 801f83e:	ddb3      	ble.n	801f7a8 <_dtoa_r+0xad8>
 801f840:	4649      	mov	r1, r9
 801f842:	2300      	movs	r3, #0
 801f844:	220a      	movs	r2, #10
 801f846:	4658      	mov	r0, fp
 801f848:	f000 f968 	bl	801fb1c <__multadd>
 801f84c:	4681      	mov	r9, r0
 801f84e:	e7ea      	b.n	801f826 <_dtoa_r+0xb56>
 801f850:	080264f5 	.word	0x080264f5
 801f854:	08026490 	.word	0x08026490

0801f858 <_free_r>:
 801f858:	b538      	push	{r3, r4, r5, lr}
 801f85a:	4605      	mov	r5, r0
 801f85c:	2900      	cmp	r1, #0
 801f85e:	d041      	beq.n	801f8e4 <_free_r+0x8c>
 801f860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f864:	1f0c      	subs	r4, r1, #4
 801f866:	2b00      	cmp	r3, #0
 801f868:	bfb8      	it	lt
 801f86a:	18e4      	addlt	r4, r4, r3
 801f86c:	f000 f8e8 	bl	801fa40 <__malloc_lock>
 801f870:	4a1d      	ldr	r2, [pc, #116]	@ (801f8e8 <_free_r+0x90>)
 801f872:	6813      	ldr	r3, [r2, #0]
 801f874:	b933      	cbnz	r3, 801f884 <_free_r+0x2c>
 801f876:	6063      	str	r3, [r4, #4]
 801f878:	6014      	str	r4, [r2, #0]
 801f87a:	4628      	mov	r0, r5
 801f87c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f880:	f000 b8e4 	b.w	801fa4c <__malloc_unlock>
 801f884:	42a3      	cmp	r3, r4
 801f886:	d908      	bls.n	801f89a <_free_r+0x42>
 801f888:	6820      	ldr	r0, [r4, #0]
 801f88a:	1821      	adds	r1, r4, r0
 801f88c:	428b      	cmp	r3, r1
 801f88e:	bf01      	itttt	eq
 801f890:	6819      	ldreq	r1, [r3, #0]
 801f892:	685b      	ldreq	r3, [r3, #4]
 801f894:	1809      	addeq	r1, r1, r0
 801f896:	6021      	streq	r1, [r4, #0]
 801f898:	e7ed      	b.n	801f876 <_free_r+0x1e>
 801f89a:	461a      	mov	r2, r3
 801f89c:	685b      	ldr	r3, [r3, #4]
 801f89e:	b10b      	cbz	r3, 801f8a4 <_free_r+0x4c>
 801f8a0:	42a3      	cmp	r3, r4
 801f8a2:	d9fa      	bls.n	801f89a <_free_r+0x42>
 801f8a4:	6811      	ldr	r1, [r2, #0]
 801f8a6:	1850      	adds	r0, r2, r1
 801f8a8:	42a0      	cmp	r0, r4
 801f8aa:	d10b      	bne.n	801f8c4 <_free_r+0x6c>
 801f8ac:	6820      	ldr	r0, [r4, #0]
 801f8ae:	4401      	add	r1, r0
 801f8b0:	1850      	adds	r0, r2, r1
 801f8b2:	4283      	cmp	r3, r0
 801f8b4:	6011      	str	r1, [r2, #0]
 801f8b6:	d1e0      	bne.n	801f87a <_free_r+0x22>
 801f8b8:	6818      	ldr	r0, [r3, #0]
 801f8ba:	685b      	ldr	r3, [r3, #4]
 801f8bc:	6053      	str	r3, [r2, #4]
 801f8be:	4408      	add	r0, r1
 801f8c0:	6010      	str	r0, [r2, #0]
 801f8c2:	e7da      	b.n	801f87a <_free_r+0x22>
 801f8c4:	d902      	bls.n	801f8cc <_free_r+0x74>
 801f8c6:	230c      	movs	r3, #12
 801f8c8:	602b      	str	r3, [r5, #0]
 801f8ca:	e7d6      	b.n	801f87a <_free_r+0x22>
 801f8cc:	6820      	ldr	r0, [r4, #0]
 801f8ce:	1821      	adds	r1, r4, r0
 801f8d0:	428b      	cmp	r3, r1
 801f8d2:	bf04      	itt	eq
 801f8d4:	6819      	ldreq	r1, [r3, #0]
 801f8d6:	685b      	ldreq	r3, [r3, #4]
 801f8d8:	6063      	str	r3, [r4, #4]
 801f8da:	bf04      	itt	eq
 801f8dc:	1809      	addeq	r1, r1, r0
 801f8de:	6021      	streq	r1, [r4, #0]
 801f8e0:	6054      	str	r4, [r2, #4]
 801f8e2:	e7ca      	b.n	801f87a <_free_r+0x22>
 801f8e4:	bd38      	pop	{r3, r4, r5, pc}
 801f8e6:	bf00      	nop
 801f8e8:	2000f76c 	.word	0x2000f76c

0801f8ec <malloc>:
 801f8ec:	4b02      	ldr	r3, [pc, #8]	@ (801f8f8 <malloc+0xc>)
 801f8ee:	4601      	mov	r1, r0
 801f8f0:	6818      	ldr	r0, [r3, #0]
 801f8f2:	f000 b825 	b.w	801f940 <_malloc_r>
 801f8f6:	bf00      	nop
 801f8f8:	20000054 	.word	0x20000054

0801f8fc <sbrk_aligned>:
 801f8fc:	b570      	push	{r4, r5, r6, lr}
 801f8fe:	4e0f      	ldr	r6, [pc, #60]	@ (801f93c <sbrk_aligned+0x40>)
 801f900:	460c      	mov	r4, r1
 801f902:	6831      	ldr	r1, [r6, #0]
 801f904:	4605      	mov	r5, r0
 801f906:	b911      	cbnz	r1, 801f90e <sbrk_aligned+0x12>
 801f908:	f001 fea0 	bl	802164c <_sbrk_r>
 801f90c:	6030      	str	r0, [r6, #0]
 801f90e:	4621      	mov	r1, r4
 801f910:	4628      	mov	r0, r5
 801f912:	f001 fe9b 	bl	802164c <_sbrk_r>
 801f916:	1c43      	adds	r3, r0, #1
 801f918:	d103      	bne.n	801f922 <sbrk_aligned+0x26>
 801f91a:	f04f 34ff 	mov.w	r4, #4294967295
 801f91e:	4620      	mov	r0, r4
 801f920:	bd70      	pop	{r4, r5, r6, pc}
 801f922:	1cc4      	adds	r4, r0, #3
 801f924:	f024 0403 	bic.w	r4, r4, #3
 801f928:	42a0      	cmp	r0, r4
 801f92a:	d0f8      	beq.n	801f91e <sbrk_aligned+0x22>
 801f92c:	1a21      	subs	r1, r4, r0
 801f92e:	4628      	mov	r0, r5
 801f930:	f001 fe8c 	bl	802164c <_sbrk_r>
 801f934:	3001      	adds	r0, #1
 801f936:	d1f2      	bne.n	801f91e <sbrk_aligned+0x22>
 801f938:	e7ef      	b.n	801f91a <sbrk_aligned+0x1e>
 801f93a:	bf00      	nop
 801f93c:	2000f768 	.word	0x2000f768

0801f940 <_malloc_r>:
 801f940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f944:	1ccd      	adds	r5, r1, #3
 801f946:	f025 0503 	bic.w	r5, r5, #3
 801f94a:	3508      	adds	r5, #8
 801f94c:	2d0c      	cmp	r5, #12
 801f94e:	bf38      	it	cc
 801f950:	250c      	movcc	r5, #12
 801f952:	2d00      	cmp	r5, #0
 801f954:	4606      	mov	r6, r0
 801f956:	db01      	blt.n	801f95c <_malloc_r+0x1c>
 801f958:	42a9      	cmp	r1, r5
 801f95a:	d904      	bls.n	801f966 <_malloc_r+0x26>
 801f95c:	230c      	movs	r3, #12
 801f95e:	6033      	str	r3, [r6, #0]
 801f960:	2000      	movs	r0, #0
 801f962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801fa3c <_malloc_r+0xfc>
 801f96a:	f000 f869 	bl	801fa40 <__malloc_lock>
 801f96e:	f8d8 3000 	ldr.w	r3, [r8]
 801f972:	461c      	mov	r4, r3
 801f974:	bb44      	cbnz	r4, 801f9c8 <_malloc_r+0x88>
 801f976:	4629      	mov	r1, r5
 801f978:	4630      	mov	r0, r6
 801f97a:	f7ff ffbf 	bl	801f8fc <sbrk_aligned>
 801f97e:	1c43      	adds	r3, r0, #1
 801f980:	4604      	mov	r4, r0
 801f982:	d158      	bne.n	801fa36 <_malloc_r+0xf6>
 801f984:	f8d8 4000 	ldr.w	r4, [r8]
 801f988:	4627      	mov	r7, r4
 801f98a:	2f00      	cmp	r7, #0
 801f98c:	d143      	bne.n	801fa16 <_malloc_r+0xd6>
 801f98e:	2c00      	cmp	r4, #0
 801f990:	d04b      	beq.n	801fa2a <_malloc_r+0xea>
 801f992:	6823      	ldr	r3, [r4, #0]
 801f994:	4639      	mov	r1, r7
 801f996:	4630      	mov	r0, r6
 801f998:	eb04 0903 	add.w	r9, r4, r3
 801f99c:	f001 fe56 	bl	802164c <_sbrk_r>
 801f9a0:	4581      	cmp	r9, r0
 801f9a2:	d142      	bne.n	801fa2a <_malloc_r+0xea>
 801f9a4:	6821      	ldr	r1, [r4, #0]
 801f9a6:	1a6d      	subs	r5, r5, r1
 801f9a8:	4629      	mov	r1, r5
 801f9aa:	4630      	mov	r0, r6
 801f9ac:	f7ff ffa6 	bl	801f8fc <sbrk_aligned>
 801f9b0:	3001      	adds	r0, #1
 801f9b2:	d03a      	beq.n	801fa2a <_malloc_r+0xea>
 801f9b4:	6823      	ldr	r3, [r4, #0]
 801f9b6:	442b      	add	r3, r5
 801f9b8:	6023      	str	r3, [r4, #0]
 801f9ba:	f8d8 3000 	ldr.w	r3, [r8]
 801f9be:	685a      	ldr	r2, [r3, #4]
 801f9c0:	bb62      	cbnz	r2, 801fa1c <_malloc_r+0xdc>
 801f9c2:	f8c8 7000 	str.w	r7, [r8]
 801f9c6:	e00f      	b.n	801f9e8 <_malloc_r+0xa8>
 801f9c8:	6822      	ldr	r2, [r4, #0]
 801f9ca:	1b52      	subs	r2, r2, r5
 801f9cc:	d420      	bmi.n	801fa10 <_malloc_r+0xd0>
 801f9ce:	2a0b      	cmp	r2, #11
 801f9d0:	d917      	bls.n	801fa02 <_malloc_r+0xc2>
 801f9d2:	1961      	adds	r1, r4, r5
 801f9d4:	42a3      	cmp	r3, r4
 801f9d6:	6025      	str	r5, [r4, #0]
 801f9d8:	bf18      	it	ne
 801f9da:	6059      	strne	r1, [r3, #4]
 801f9dc:	6863      	ldr	r3, [r4, #4]
 801f9de:	bf08      	it	eq
 801f9e0:	f8c8 1000 	streq.w	r1, [r8]
 801f9e4:	5162      	str	r2, [r4, r5]
 801f9e6:	604b      	str	r3, [r1, #4]
 801f9e8:	4630      	mov	r0, r6
 801f9ea:	f000 f82f 	bl	801fa4c <__malloc_unlock>
 801f9ee:	f104 000b 	add.w	r0, r4, #11
 801f9f2:	1d23      	adds	r3, r4, #4
 801f9f4:	f020 0007 	bic.w	r0, r0, #7
 801f9f8:	1ac2      	subs	r2, r0, r3
 801f9fa:	bf1c      	itt	ne
 801f9fc:	1a1b      	subne	r3, r3, r0
 801f9fe:	50a3      	strne	r3, [r4, r2]
 801fa00:	e7af      	b.n	801f962 <_malloc_r+0x22>
 801fa02:	6862      	ldr	r2, [r4, #4]
 801fa04:	42a3      	cmp	r3, r4
 801fa06:	bf0c      	ite	eq
 801fa08:	f8c8 2000 	streq.w	r2, [r8]
 801fa0c:	605a      	strne	r2, [r3, #4]
 801fa0e:	e7eb      	b.n	801f9e8 <_malloc_r+0xa8>
 801fa10:	4623      	mov	r3, r4
 801fa12:	6864      	ldr	r4, [r4, #4]
 801fa14:	e7ae      	b.n	801f974 <_malloc_r+0x34>
 801fa16:	463c      	mov	r4, r7
 801fa18:	687f      	ldr	r7, [r7, #4]
 801fa1a:	e7b6      	b.n	801f98a <_malloc_r+0x4a>
 801fa1c:	461a      	mov	r2, r3
 801fa1e:	685b      	ldr	r3, [r3, #4]
 801fa20:	42a3      	cmp	r3, r4
 801fa22:	d1fb      	bne.n	801fa1c <_malloc_r+0xdc>
 801fa24:	2300      	movs	r3, #0
 801fa26:	6053      	str	r3, [r2, #4]
 801fa28:	e7de      	b.n	801f9e8 <_malloc_r+0xa8>
 801fa2a:	230c      	movs	r3, #12
 801fa2c:	6033      	str	r3, [r6, #0]
 801fa2e:	4630      	mov	r0, r6
 801fa30:	f000 f80c 	bl	801fa4c <__malloc_unlock>
 801fa34:	e794      	b.n	801f960 <_malloc_r+0x20>
 801fa36:	6005      	str	r5, [r0, #0]
 801fa38:	e7d6      	b.n	801f9e8 <_malloc_r+0xa8>
 801fa3a:	bf00      	nop
 801fa3c:	2000f76c 	.word	0x2000f76c

0801fa40 <__malloc_lock>:
 801fa40:	4801      	ldr	r0, [pc, #4]	@ (801fa48 <__malloc_lock+0x8>)
 801fa42:	f7ff b880 	b.w	801eb46 <__retarget_lock_acquire_recursive>
 801fa46:	bf00      	nop
 801fa48:	2000f764 	.word	0x2000f764

0801fa4c <__malloc_unlock>:
 801fa4c:	4801      	ldr	r0, [pc, #4]	@ (801fa54 <__malloc_unlock+0x8>)
 801fa4e:	f7ff b87b 	b.w	801eb48 <__retarget_lock_release_recursive>
 801fa52:	bf00      	nop
 801fa54:	2000f764 	.word	0x2000f764

0801fa58 <_Balloc>:
 801fa58:	b570      	push	{r4, r5, r6, lr}
 801fa5a:	69c6      	ldr	r6, [r0, #28]
 801fa5c:	4604      	mov	r4, r0
 801fa5e:	460d      	mov	r5, r1
 801fa60:	b976      	cbnz	r6, 801fa80 <_Balloc+0x28>
 801fa62:	2010      	movs	r0, #16
 801fa64:	f7ff ff42 	bl	801f8ec <malloc>
 801fa68:	4602      	mov	r2, r0
 801fa6a:	61e0      	str	r0, [r4, #28]
 801fa6c:	b920      	cbnz	r0, 801fa78 <_Balloc+0x20>
 801fa6e:	4b18      	ldr	r3, [pc, #96]	@ (801fad0 <_Balloc+0x78>)
 801fa70:	4818      	ldr	r0, [pc, #96]	@ (801fad4 <_Balloc+0x7c>)
 801fa72:	216b      	movs	r1, #107	@ 0x6b
 801fa74:	f7ff f886 	bl	801eb84 <__assert_func>
 801fa78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fa7c:	6006      	str	r6, [r0, #0]
 801fa7e:	60c6      	str	r6, [r0, #12]
 801fa80:	69e6      	ldr	r6, [r4, #28]
 801fa82:	68f3      	ldr	r3, [r6, #12]
 801fa84:	b183      	cbz	r3, 801faa8 <_Balloc+0x50>
 801fa86:	69e3      	ldr	r3, [r4, #28]
 801fa88:	68db      	ldr	r3, [r3, #12]
 801fa8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fa8e:	b9b8      	cbnz	r0, 801fac0 <_Balloc+0x68>
 801fa90:	2101      	movs	r1, #1
 801fa92:	fa01 f605 	lsl.w	r6, r1, r5
 801fa96:	1d72      	adds	r2, r6, #5
 801fa98:	0092      	lsls	r2, r2, #2
 801fa9a:	4620      	mov	r0, r4
 801fa9c:	f001 fdf7 	bl	802168e <_calloc_r>
 801faa0:	b160      	cbz	r0, 801fabc <_Balloc+0x64>
 801faa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801faa6:	e00e      	b.n	801fac6 <_Balloc+0x6e>
 801faa8:	2221      	movs	r2, #33	@ 0x21
 801faaa:	2104      	movs	r1, #4
 801faac:	4620      	mov	r0, r4
 801faae:	f001 fdee 	bl	802168e <_calloc_r>
 801fab2:	69e3      	ldr	r3, [r4, #28]
 801fab4:	60f0      	str	r0, [r6, #12]
 801fab6:	68db      	ldr	r3, [r3, #12]
 801fab8:	2b00      	cmp	r3, #0
 801faba:	d1e4      	bne.n	801fa86 <_Balloc+0x2e>
 801fabc:	2000      	movs	r0, #0
 801fabe:	bd70      	pop	{r4, r5, r6, pc}
 801fac0:	6802      	ldr	r2, [r0, #0]
 801fac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fac6:	2300      	movs	r3, #0
 801fac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801facc:	e7f7      	b.n	801fabe <_Balloc+0x66>
 801face:	bf00      	nop
 801fad0:	08026286 	.word	0x08026286
 801fad4:	08026506 	.word	0x08026506

0801fad8 <_Bfree>:
 801fad8:	b570      	push	{r4, r5, r6, lr}
 801fada:	69c6      	ldr	r6, [r0, #28]
 801fadc:	4605      	mov	r5, r0
 801fade:	460c      	mov	r4, r1
 801fae0:	b976      	cbnz	r6, 801fb00 <_Bfree+0x28>
 801fae2:	2010      	movs	r0, #16
 801fae4:	f7ff ff02 	bl	801f8ec <malloc>
 801fae8:	4602      	mov	r2, r0
 801faea:	61e8      	str	r0, [r5, #28]
 801faec:	b920      	cbnz	r0, 801faf8 <_Bfree+0x20>
 801faee:	4b09      	ldr	r3, [pc, #36]	@ (801fb14 <_Bfree+0x3c>)
 801faf0:	4809      	ldr	r0, [pc, #36]	@ (801fb18 <_Bfree+0x40>)
 801faf2:	218f      	movs	r1, #143	@ 0x8f
 801faf4:	f7ff f846 	bl	801eb84 <__assert_func>
 801faf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fafc:	6006      	str	r6, [r0, #0]
 801fafe:	60c6      	str	r6, [r0, #12]
 801fb00:	b13c      	cbz	r4, 801fb12 <_Bfree+0x3a>
 801fb02:	69eb      	ldr	r3, [r5, #28]
 801fb04:	6862      	ldr	r2, [r4, #4]
 801fb06:	68db      	ldr	r3, [r3, #12]
 801fb08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fb0c:	6021      	str	r1, [r4, #0]
 801fb0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fb12:	bd70      	pop	{r4, r5, r6, pc}
 801fb14:	08026286 	.word	0x08026286
 801fb18:	08026506 	.word	0x08026506

0801fb1c <__multadd>:
 801fb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb20:	690d      	ldr	r5, [r1, #16]
 801fb22:	4607      	mov	r7, r0
 801fb24:	460c      	mov	r4, r1
 801fb26:	461e      	mov	r6, r3
 801fb28:	f101 0c14 	add.w	ip, r1, #20
 801fb2c:	2000      	movs	r0, #0
 801fb2e:	f8dc 3000 	ldr.w	r3, [ip]
 801fb32:	b299      	uxth	r1, r3
 801fb34:	fb02 6101 	mla	r1, r2, r1, r6
 801fb38:	0c1e      	lsrs	r6, r3, #16
 801fb3a:	0c0b      	lsrs	r3, r1, #16
 801fb3c:	fb02 3306 	mla	r3, r2, r6, r3
 801fb40:	b289      	uxth	r1, r1
 801fb42:	3001      	adds	r0, #1
 801fb44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fb48:	4285      	cmp	r5, r0
 801fb4a:	f84c 1b04 	str.w	r1, [ip], #4
 801fb4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fb52:	dcec      	bgt.n	801fb2e <__multadd+0x12>
 801fb54:	b30e      	cbz	r6, 801fb9a <__multadd+0x7e>
 801fb56:	68a3      	ldr	r3, [r4, #8]
 801fb58:	42ab      	cmp	r3, r5
 801fb5a:	dc19      	bgt.n	801fb90 <__multadd+0x74>
 801fb5c:	6861      	ldr	r1, [r4, #4]
 801fb5e:	4638      	mov	r0, r7
 801fb60:	3101      	adds	r1, #1
 801fb62:	f7ff ff79 	bl	801fa58 <_Balloc>
 801fb66:	4680      	mov	r8, r0
 801fb68:	b928      	cbnz	r0, 801fb76 <__multadd+0x5a>
 801fb6a:	4602      	mov	r2, r0
 801fb6c:	4b0c      	ldr	r3, [pc, #48]	@ (801fba0 <__multadd+0x84>)
 801fb6e:	480d      	ldr	r0, [pc, #52]	@ (801fba4 <__multadd+0x88>)
 801fb70:	21ba      	movs	r1, #186	@ 0xba
 801fb72:	f7ff f807 	bl	801eb84 <__assert_func>
 801fb76:	6922      	ldr	r2, [r4, #16]
 801fb78:	3202      	adds	r2, #2
 801fb7a:	f104 010c 	add.w	r1, r4, #12
 801fb7e:	0092      	lsls	r2, r2, #2
 801fb80:	300c      	adds	r0, #12
 801fb82:	f7fe ffea 	bl	801eb5a <memcpy>
 801fb86:	4621      	mov	r1, r4
 801fb88:	4638      	mov	r0, r7
 801fb8a:	f7ff ffa5 	bl	801fad8 <_Bfree>
 801fb8e:	4644      	mov	r4, r8
 801fb90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fb94:	3501      	adds	r5, #1
 801fb96:	615e      	str	r6, [r3, #20]
 801fb98:	6125      	str	r5, [r4, #16]
 801fb9a:	4620      	mov	r0, r4
 801fb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fba0:	080264f5 	.word	0x080264f5
 801fba4:	08026506 	.word	0x08026506

0801fba8 <__s2b>:
 801fba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fbac:	460c      	mov	r4, r1
 801fbae:	4615      	mov	r5, r2
 801fbb0:	461f      	mov	r7, r3
 801fbb2:	2209      	movs	r2, #9
 801fbb4:	3308      	adds	r3, #8
 801fbb6:	4606      	mov	r6, r0
 801fbb8:	fb93 f3f2 	sdiv	r3, r3, r2
 801fbbc:	2100      	movs	r1, #0
 801fbbe:	2201      	movs	r2, #1
 801fbc0:	429a      	cmp	r2, r3
 801fbc2:	db09      	blt.n	801fbd8 <__s2b+0x30>
 801fbc4:	4630      	mov	r0, r6
 801fbc6:	f7ff ff47 	bl	801fa58 <_Balloc>
 801fbca:	b940      	cbnz	r0, 801fbde <__s2b+0x36>
 801fbcc:	4602      	mov	r2, r0
 801fbce:	4b19      	ldr	r3, [pc, #100]	@ (801fc34 <__s2b+0x8c>)
 801fbd0:	4819      	ldr	r0, [pc, #100]	@ (801fc38 <__s2b+0x90>)
 801fbd2:	21d3      	movs	r1, #211	@ 0xd3
 801fbd4:	f7fe ffd6 	bl	801eb84 <__assert_func>
 801fbd8:	0052      	lsls	r2, r2, #1
 801fbda:	3101      	adds	r1, #1
 801fbdc:	e7f0      	b.n	801fbc0 <__s2b+0x18>
 801fbde:	9b08      	ldr	r3, [sp, #32]
 801fbe0:	6143      	str	r3, [r0, #20]
 801fbe2:	2d09      	cmp	r5, #9
 801fbe4:	f04f 0301 	mov.w	r3, #1
 801fbe8:	6103      	str	r3, [r0, #16]
 801fbea:	dd16      	ble.n	801fc1a <__s2b+0x72>
 801fbec:	f104 0909 	add.w	r9, r4, #9
 801fbf0:	46c8      	mov	r8, r9
 801fbf2:	442c      	add	r4, r5
 801fbf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fbf8:	4601      	mov	r1, r0
 801fbfa:	3b30      	subs	r3, #48	@ 0x30
 801fbfc:	220a      	movs	r2, #10
 801fbfe:	4630      	mov	r0, r6
 801fc00:	f7ff ff8c 	bl	801fb1c <__multadd>
 801fc04:	45a0      	cmp	r8, r4
 801fc06:	d1f5      	bne.n	801fbf4 <__s2b+0x4c>
 801fc08:	f1a5 0408 	sub.w	r4, r5, #8
 801fc0c:	444c      	add	r4, r9
 801fc0e:	1b2d      	subs	r5, r5, r4
 801fc10:	1963      	adds	r3, r4, r5
 801fc12:	42bb      	cmp	r3, r7
 801fc14:	db04      	blt.n	801fc20 <__s2b+0x78>
 801fc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc1a:	340a      	adds	r4, #10
 801fc1c:	2509      	movs	r5, #9
 801fc1e:	e7f6      	b.n	801fc0e <__s2b+0x66>
 801fc20:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fc24:	4601      	mov	r1, r0
 801fc26:	3b30      	subs	r3, #48	@ 0x30
 801fc28:	220a      	movs	r2, #10
 801fc2a:	4630      	mov	r0, r6
 801fc2c:	f7ff ff76 	bl	801fb1c <__multadd>
 801fc30:	e7ee      	b.n	801fc10 <__s2b+0x68>
 801fc32:	bf00      	nop
 801fc34:	080264f5 	.word	0x080264f5
 801fc38:	08026506 	.word	0x08026506

0801fc3c <__hi0bits>:
 801fc3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801fc40:	4603      	mov	r3, r0
 801fc42:	bf36      	itet	cc
 801fc44:	0403      	lslcc	r3, r0, #16
 801fc46:	2000      	movcs	r0, #0
 801fc48:	2010      	movcc	r0, #16
 801fc4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fc4e:	bf3c      	itt	cc
 801fc50:	021b      	lslcc	r3, r3, #8
 801fc52:	3008      	addcc	r0, #8
 801fc54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fc58:	bf3c      	itt	cc
 801fc5a:	011b      	lslcc	r3, r3, #4
 801fc5c:	3004      	addcc	r0, #4
 801fc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fc62:	bf3c      	itt	cc
 801fc64:	009b      	lslcc	r3, r3, #2
 801fc66:	3002      	addcc	r0, #2
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	db05      	blt.n	801fc78 <__hi0bits+0x3c>
 801fc6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801fc70:	f100 0001 	add.w	r0, r0, #1
 801fc74:	bf08      	it	eq
 801fc76:	2020      	moveq	r0, #32
 801fc78:	4770      	bx	lr

0801fc7a <__lo0bits>:
 801fc7a:	6803      	ldr	r3, [r0, #0]
 801fc7c:	4602      	mov	r2, r0
 801fc7e:	f013 0007 	ands.w	r0, r3, #7
 801fc82:	d00b      	beq.n	801fc9c <__lo0bits+0x22>
 801fc84:	07d9      	lsls	r1, r3, #31
 801fc86:	d421      	bmi.n	801fccc <__lo0bits+0x52>
 801fc88:	0798      	lsls	r0, r3, #30
 801fc8a:	bf49      	itett	mi
 801fc8c:	085b      	lsrmi	r3, r3, #1
 801fc8e:	089b      	lsrpl	r3, r3, #2
 801fc90:	2001      	movmi	r0, #1
 801fc92:	6013      	strmi	r3, [r2, #0]
 801fc94:	bf5c      	itt	pl
 801fc96:	6013      	strpl	r3, [r2, #0]
 801fc98:	2002      	movpl	r0, #2
 801fc9a:	4770      	bx	lr
 801fc9c:	b299      	uxth	r1, r3
 801fc9e:	b909      	cbnz	r1, 801fca4 <__lo0bits+0x2a>
 801fca0:	0c1b      	lsrs	r3, r3, #16
 801fca2:	2010      	movs	r0, #16
 801fca4:	b2d9      	uxtb	r1, r3
 801fca6:	b909      	cbnz	r1, 801fcac <__lo0bits+0x32>
 801fca8:	3008      	adds	r0, #8
 801fcaa:	0a1b      	lsrs	r3, r3, #8
 801fcac:	0719      	lsls	r1, r3, #28
 801fcae:	bf04      	itt	eq
 801fcb0:	091b      	lsreq	r3, r3, #4
 801fcb2:	3004      	addeq	r0, #4
 801fcb4:	0799      	lsls	r1, r3, #30
 801fcb6:	bf04      	itt	eq
 801fcb8:	089b      	lsreq	r3, r3, #2
 801fcba:	3002      	addeq	r0, #2
 801fcbc:	07d9      	lsls	r1, r3, #31
 801fcbe:	d403      	bmi.n	801fcc8 <__lo0bits+0x4e>
 801fcc0:	085b      	lsrs	r3, r3, #1
 801fcc2:	f100 0001 	add.w	r0, r0, #1
 801fcc6:	d003      	beq.n	801fcd0 <__lo0bits+0x56>
 801fcc8:	6013      	str	r3, [r2, #0]
 801fcca:	4770      	bx	lr
 801fccc:	2000      	movs	r0, #0
 801fcce:	4770      	bx	lr
 801fcd0:	2020      	movs	r0, #32
 801fcd2:	4770      	bx	lr

0801fcd4 <__i2b>:
 801fcd4:	b510      	push	{r4, lr}
 801fcd6:	460c      	mov	r4, r1
 801fcd8:	2101      	movs	r1, #1
 801fcda:	f7ff febd 	bl	801fa58 <_Balloc>
 801fcde:	4602      	mov	r2, r0
 801fce0:	b928      	cbnz	r0, 801fcee <__i2b+0x1a>
 801fce2:	4b05      	ldr	r3, [pc, #20]	@ (801fcf8 <__i2b+0x24>)
 801fce4:	4805      	ldr	r0, [pc, #20]	@ (801fcfc <__i2b+0x28>)
 801fce6:	f240 1145 	movw	r1, #325	@ 0x145
 801fcea:	f7fe ff4b 	bl	801eb84 <__assert_func>
 801fcee:	2301      	movs	r3, #1
 801fcf0:	6144      	str	r4, [r0, #20]
 801fcf2:	6103      	str	r3, [r0, #16]
 801fcf4:	bd10      	pop	{r4, pc}
 801fcf6:	bf00      	nop
 801fcf8:	080264f5 	.word	0x080264f5
 801fcfc:	08026506 	.word	0x08026506

0801fd00 <__multiply>:
 801fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd04:	4614      	mov	r4, r2
 801fd06:	690a      	ldr	r2, [r1, #16]
 801fd08:	6923      	ldr	r3, [r4, #16]
 801fd0a:	429a      	cmp	r2, r3
 801fd0c:	bfa8      	it	ge
 801fd0e:	4623      	movge	r3, r4
 801fd10:	460f      	mov	r7, r1
 801fd12:	bfa4      	itt	ge
 801fd14:	460c      	movge	r4, r1
 801fd16:	461f      	movge	r7, r3
 801fd18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801fd1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801fd20:	68a3      	ldr	r3, [r4, #8]
 801fd22:	6861      	ldr	r1, [r4, #4]
 801fd24:	eb0a 0609 	add.w	r6, sl, r9
 801fd28:	42b3      	cmp	r3, r6
 801fd2a:	b085      	sub	sp, #20
 801fd2c:	bfb8      	it	lt
 801fd2e:	3101      	addlt	r1, #1
 801fd30:	f7ff fe92 	bl	801fa58 <_Balloc>
 801fd34:	b930      	cbnz	r0, 801fd44 <__multiply+0x44>
 801fd36:	4602      	mov	r2, r0
 801fd38:	4b44      	ldr	r3, [pc, #272]	@ (801fe4c <__multiply+0x14c>)
 801fd3a:	4845      	ldr	r0, [pc, #276]	@ (801fe50 <__multiply+0x150>)
 801fd3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801fd40:	f7fe ff20 	bl	801eb84 <__assert_func>
 801fd44:	f100 0514 	add.w	r5, r0, #20
 801fd48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801fd4c:	462b      	mov	r3, r5
 801fd4e:	2200      	movs	r2, #0
 801fd50:	4543      	cmp	r3, r8
 801fd52:	d321      	bcc.n	801fd98 <__multiply+0x98>
 801fd54:	f107 0114 	add.w	r1, r7, #20
 801fd58:	f104 0214 	add.w	r2, r4, #20
 801fd5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801fd60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801fd64:	9302      	str	r3, [sp, #8]
 801fd66:	1b13      	subs	r3, r2, r4
 801fd68:	3b15      	subs	r3, #21
 801fd6a:	f023 0303 	bic.w	r3, r3, #3
 801fd6e:	3304      	adds	r3, #4
 801fd70:	f104 0715 	add.w	r7, r4, #21
 801fd74:	42ba      	cmp	r2, r7
 801fd76:	bf38      	it	cc
 801fd78:	2304      	movcc	r3, #4
 801fd7a:	9301      	str	r3, [sp, #4]
 801fd7c:	9b02      	ldr	r3, [sp, #8]
 801fd7e:	9103      	str	r1, [sp, #12]
 801fd80:	428b      	cmp	r3, r1
 801fd82:	d80c      	bhi.n	801fd9e <__multiply+0x9e>
 801fd84:	2e00      	cmp	r6, #0
 801fd86:	dd03      	ble.n	801fd90 <__multiply+0x90>
 801fd88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	d05b      	beq.n	801fe48 <__multiply+0x148>
 801fd90:	6106      	str	r6, [r0, #16]
 801fd92:	b005      	add	sp, #20
 801fd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd98:	f843 2b04 	str.w	r2, [r3], #4
 801fd9c:	e7d8      	b.n	801fd50 <__multiply+0x50>
 801fd9e:	f8b1 a000 	ldrh.w	sl, [r1]
 801fda2:	f1ba 0f00 	cmp.w	sl, #0
 801fda6:	d024      	beq.n	801fdf2 <__multiply+0xf2>
 801fda8:	f104 0e14 	add.w	lr, r4, #20
 801fdac:	46a9      	mov	r9, r5
 801fdae:	f04f 0c00 	mov.w	ip, #0
 801fdb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fdb6:	f8d9 3000 	ldr.w	r3, [r9]
 801fdba:	fa1f fb87 	uxth.w	fp, r7
 801fdbe:	b29b      	uxth	r3, r3
 801fdc0:	fb0a 330b 	mla	r3, sl, fp, r3
 801fdc4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801fdc8:	f8d9 7000 	ldr.w	r7, [r9]
 801fdcc:	4463      	add	r3, ip
 801fdce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801fdd2:	fb0a c70b 	mla	r7, sl, fp, ip
 801fdd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801fdda:	b29b      	uxth	r3, r3
 801fddc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fde0:	4572      	cmp	r2, lr
 801fde2:	f849 3b04 	str.w	r3, [r9], #4
 801fde6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801fdea:	d8e2      	bhi.n	801fdb2 <__multiply+0xb2>
 801fdec:	9b01      	ldr	r3, [sp, #4]
 801fdee:	f845 c003 	str.w	ip, [r5, r3]
 801fdf2:	9b03      	ldr	r3, [sp, #12]
 801fdf4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801fdf8:	3104      	adds	r1, #4
 801fdfa:	f1b9 0f00 	cmp.w	r9, #0
 801fdfe:	d021      	beq.n	801fe44 <__multiply+0x144>
 801fe00:	682b      	ldr	r3, [r5, #0]
 801fe02:	f104 0c14 	add.w	ip, r4, #20
 801fe06:	46ae      	mov	lr, r5
 801fe08:	f04f 0a00 	mov.w	sl, #0
 801fe0c:	f8bc b000 	ldrh.w	fp, [ip]
 801fe10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801fe14:	fb09 770b 	mla	r7, r9, fp, r7
 801fe18:	4457      	add	r7, sl
 801fe1a:	b29b      	uxth	r3, r3
 801fe1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fe20:	f84e 3b04 	str.w	r3, [lr], #4
 801fe24:	f85c 3b04 	ldr.w	r3, [ip], #4
 801fe28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fe2c:	f8be 3000 	ldrh.w	r3, [lr]
 801fe30:	fb09 330a 	mla	r3, r9, sl, r3
 801fe34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801fe38:	4562      	cmp	r2, ip
 801fe3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fe3e:	d8e5      	bhi.n	801fe0c <__multiply+0x10c>
 801fe40:	9f01      	ldr	r7, [sp, #4]
 801fe42:	51eb      	str	r3, [r5, r7]
 801fe44:	3504      	adds	r5, #4
 801fe46:	e799      	b.n	801fd7c <__multiply+0x7c>
 801fe48:	3e01      	subs	r6, #1
 801fe4a:	e79b      	b.n	801fd84 <__multiply+0x84>
 801fe4c:	080264f5 	.word	0x080264f5
 801fe50:	08026506 	.word	0x08026506

0801fe54 <__pow5mult>:
 801fe54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe58:	4615      	mov	r5, r2
 801fe5a:	f012 0203 	ands.w	r2, r2, #3
 801fe5e:	4607      	mov	r7, r0
 801fe60:	460e      	mov	r6, r1
 801fe62:	d007      	beq.n	801fe74 <__pow5mult+0x20>
 801fe64:	4c25      	ldr	r4, [pc, #148]	@ (801fefc <__pow5mult+0xa8>)
 801fe66:	3a01      	subs	r2, #1
 801fe68:	2300      	movs	r3, #0
 801fe6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fe6e:	f7ff fe55 	bl	801fb1c <__multadd>
 801fe72:	4606      	mov	r6, r0
 801fe74:	10ad      	asrs	r5, r5, #2
 801fe76:	d03d      	beq.n	801fef4 <__pow5mult+0xa0>
 801fe78:	69fc      	ldr	r4, [r7, #28]
 801fe7a:	b97c      	cbnz	r4, 801fe9c <__pow5mult+0x48>
 801fe7c:	2010      	movs	r0, #16
 801fe7e:	f7ff fd35 	bl	801f8ec <malloc>
 801fe82:	4602      	mov	r2, r0
 801fe84:	61f8      	str	r0, [r7, #28]
 801fe86:	b928      	cbnz	r0, 801fe94 <__pow5mult+0x40>
 801fe88:	4b1d      	ldr	r3, [pc, #116]	@ (801ff00 <__pow5mult+0xac>)
 801fe8a:	481e      	ldr	r0, [pc, #120]	@ (801ff04 <__pow5mult+0xb0>)
 801fe8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801fe90:	f7fe fe78 	bl	801eb84 <__assert_func>
 801fe94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fe98:	6004      	str	r4, [r0, #0]
 801fe9a:	60c4      	str	r4, [r0, #12]
 801fe9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801fea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fea4:	b94c      	cbnz	r4, 801feba <__pow5mult+0x66>
 801fea6:	f240 2171 	movw	r1, #625	@ 0x271
 801feaa:	4638      	mov	r0, r7
 801feac:	f7ff ff12 	bl	801fcd4 <__i2b>
 801feb0:	2300      	movs	r3, #0
 801feb2:	f8c8 0008 	str.w	r0, [r8, #8]
 801feb6:	4604      	mov	r4, r0
 801feb8:	6003      	str	r3, [r0, #0]
 801feba:	f04f 0900 	mov.w	r9, #0
 801febe:	07eb      	lsls	r3, r5, #31
 801fec0:	d50a      	bpl.n	801fed8 <__pow5mult+0x84>
 801fec2:	4631      	mov	r1, r6
 801fec4:	4622      	mov	r2, r4
 801fec6:	4638      	mov	r0, r7
 801fec8:	f7ff ff1a 	bl	801fd00 <__multiply>
 801fecc:	4631      	mov	r1, r6
 801fece:	4680      	mov	r8, r0
 801fed0:	4638      	mov	r0, r7
 801fed2:	f7ff fe01 	bl	801fad8 <_Bfree>
 801fed6:	4646      	mov	r6, r8
 801fed8:	106d      	asrs	r5, r5, #1
 801feda:	d00b      	beq.n	801fef4 <__pow5mult+0xa0>
 801fedc:	6820      	ldr	r0, [r4, #0]
 801fede:	b938      	cbnz	r0, 801fef0 <__pow5mult+0x9c>
 801fee0:	4622      	mov	r2, r4
 801fee2:	4621      	mov	r1, r4
 801fee4:	4638      	mov	r0, r7
 801fee6:	f7ff ff0b 	bl	801fd00 <__multiply>
 801feea:	6020      	str	r0, [r4, #0]
 801feec:	f8c0 9000 	str.w	r9, [r0]
 801fef0:	4604      	mov	r4, r0
 801fef2:	e7e4      	b.n	801febe <__pow5mult+0x6a>
 801fef4:	4630      	mov	r0, r6
 801fef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fefa:	bf00      	nop
 801fefc:	08026560 	.word	0x08026560
 801ff00:	08026286 	.word	0x08026286
 801ff04:	08026506 	.word	0x08026506

0801ff08 <__lshift>:
 801ff08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff0c:	460c      	mov	r4, r1
 801ff0e:	6849      	ldr	r1, [r1, #4]
 801ff10:	6923      	ldr	r3, [r4, #16]
 801ff12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ff16:	68a3      	ldr	r3, [r4, #8]
 801ff18:	4607      	mov	r7, r0
 801ff1a:	4691      	mov	r9, r2
 801ff1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ff20:	f108 0601 	add.w	r6, r8, #1
 801ff24:	42b3      	cmp	r3, r6
 801ff26:	db0b      	blt.n	801ff40 <__lshift+0x38>
 801ff28:	4638      	mov	r0, r7
 801ff2a:	f7ff fd95 	bl	801fa58 <_Balloc>
 801ff2e:	4605      	mov	r5, r0
 801ff30:	b948      	cbnz	r0, 801ff46 <__lshift+0x3e>
 801ff32:	4602      	mov	r2, r0
 801ff34:	4b28      	ldr	r3, [pc, #160]	@ (801ffd8 <__lshift+0xd0>)
 801ff36:	4829      	ldr	r0, [pc, #164]	@ (801ffdc <__lshift+0xd4>)
 801ff38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ff3c:	f7fe fe22 	bl	801eb84 <__assert_func>
 801ff40:	3101      	adds	r1, #1
 801ff42:	005b      	lsls	r3, r3, #1
 801ff44:	e7ee      	b.n	801ff24 <__lshift+0x1c>
 801ff46:	2300      	movs	r3, #0
 801ff48:	f100 0114 	add.w	r1, r0, #20
 801ff4c:	f100 0210 	add.w	r2, r0, #16
 801ff50:	4618      	mov	r0, r3
 801ff52:	4553      	cmp	r3, sl
 801ff54:	db33      	blt.n	801ffbe <__lshift+0xb6>
 801ff56:	6920      	ldr	r0, [r4, #16]
 801ff58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ff5c:	f104 0314 	add.w	r3, r4, #20
 801ff60:	f019 091f 	ands.w	r9, r9, #31
 801ff64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ff68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ff6c:	d02b      	beq.n	801ffc6 <__lshift+0xbe>
 801ff6e:	f1c9 0e20 	rsb	lr, r9, #32
 801ff72:	468a      	mov	sl, r1
 801ff74:	2200      	movs	r2, #0
 801ff76:	6818      	ldr	r0, [r3, #0]
 801ff78:	fa00 f009 	lsl.w	r0, r0, r9
 801ff7c:	4310      	orrs	r0, r2
 801ff7e:	f84a 0b04 	str.w	r0, [sl], #4
 801ff82:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff86:	459c      	cmp	ip, r3
 801ff88:	fa22 f20e 	lsr.w	r2, r2, lr
 801ff8c:	d8f3      	bhi.n	801ff76 <__lshift+0x6e>
 801ff8e:	ebac 0304 	sub.w	r3, ip, r4
 801ff92:	3b15      	subs	r3, #21
 801ff94:	f023 0303 	bic.w	r3, r3, #3
 801ff98:	3304      	adds	r3, #4
 801ff9a:	f104 0015 	add.w	r0, r4, #21
 801ff9e:	4584      	cmp	ip, r0
 801ffa0:	bf38      	it	cc
 801ffa2:	2304      	movcc	r3, #4
 801ffa4:	50ca      	str	r2, [r1, r3]
 801ffa6:	b10a      	cbz	r2, 801ffac <__lshift+0xa4>
 801ffa8:	f108 0602 	add.w	r6, r8, #2
 801ffac:	3e01      	subs	r6, #1
 801ffae:	4638      	mov	r0, r7
 801ffb0:	612e      	str	r6, [r5, #16]
 801ffb2:	4621      	mov	r1, r4
 801ffb4:	f7ff fd90 	bl	801fad8 <_Bfree>
 801ffb8:	4628      	mov	r0, r5
 801ffba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffbe:	f842 0f04 	str.w	r0, [r2, #4]!
 801ffc2:	3301      	adds	r3, #1
 801ffc4:	e7c5      	b.n	801ff52 <__lshift+0x4a>
 801ffc6:	3904      	subs	r1, #4
 801ffc8:	f853 2b04 	ldr.w	r2, [r3], #4
 801ffcc:	f841 2f04 	str.w	r2, [r1, #4]!
 801ffd0:	459c      	cmp	ip, r3
 801ffd2:	d8f9      	bhi.n	801ffc8 <__lshift+0xc0>
 801ffd4:	e7ea      	b.n	801ffac <__lshift+0xa4>
 801ffd6:	bf00      	nop
 801ffd8:	080264f5 	.word	0x080264f5
 801ffdc:	08026506 	.word	0x08026506

0801ffe0 <__mcmp>:
 801ffe0:	690a      	ldr	r2, [r1, #16]
 801ffe2:	4603      	mov	r3, r0
 801ffe4:	6900      	ldr	r0, [r0, #16]
 801ffe6:	1a80      	subs	r0, r0, r2
 801ffe8:	b530      	push	{r4, r5, lr}
 801ffea:	d10e      	bne.n	802000a <__mcmp+0x2a>
 801ffec:	3314      	adds	r3, #20
 801ffee:	3114      	adds	r1, #20
 801fff0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801fff4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801fff8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801fffc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8020000:	4295      	cmp	r5, r2
 8020002:	d003      	beq.n	802000c <__mcmp+0x2c>
 8020004:	d205      	bcs.n	8020012 <__mcmp+0x32>
 8020006:	f04f 30ff 	mov.w	r0, #4294967295
 802000a:	bd30      	pop	{r4, r5, pc}
 802000c:	42a3      	cmp	r3, r4
 802000e:	d3f3      	bcc.n	801fff8 <__mcmp+0x18>
 8020010:	e7fb      	b.n	802000a <__mcmp+0x2a>
 8020012:	2001      	movs	r0, #1
 8020014:	e7f9      	b.n	802000a <__mcmp+0x2a>
	...

08020018 <__mdiff>:
 8020018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802001c:	4689      	mov	r9, r1
 802001e:	4606      	mov	r6, r0
 8020020:	4611      	mov	r1, r2
 8020022:	4648      	mov	r0, r9
 8020024:	4614      	mov	r4, r2
 8020026:	f7ff ffdb 	bl	801ffe0 <__mcmp>
 802002a:	1e05      	subs	r5, r0, #0
 802002c:	d112      	bne.n	8020054 <__mdiff+0x3c>
 802002e:	4629      	mov	r1, r5
 8020030:	4630      	mov	r0, r6
 8020032:	f7ff fd11 	bl	801fa58 <_Balloc>
 8020036:	4602      	mov	r2, r0
 8020038:	b928      	cbnz	r0, 8020046 <__mdiff+0x2e>
 802003a:	4b3f      	ldr	r3, [pc, #252]	@ (8020138 <__mdiff+0x120>)
 802003c:	f240 2137 	movw	r1, #567	@ 0x237
 8020040:	483e      	ldr	r0, [pc, #248]	@ (802013c <__mdiff+0x124>)
 8020042:	f7fe fd9f 	bl	801eb84 <__assert_func>
 8020046:	2301      	movs	r3, #1
 8020048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802004c:	4610      	mov	r0, r2
 802004e:	b003      	add	sp, #12
 8020050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020054:	bfbc      	itt	lt
 8020056:	464b      	movlt	r3, r9
 8020058:	46a1      	movlt	r9, r4
 802005a:	4630      	mov	r0, r6
 802005c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020060:	bfba      	itte	lt
 8020062:	461c      	movlt	r4, r3
 8020064:	2501      	movlt	r5, #1
 8020066:	2500      	movge	r5, #0
 8020068:	f7ff fcf6 	bl	801fa58 <_Balloc>
 802006c:	4602      	mov	r2, r0
 802006e:	b918      	cbnz	r0, 8020078 <__mdiff+0x60>
 8020070:	4b31      	ldr	r3, [pc, #196]	@ (8020138 <__mdiff+0x120>)
 8020072:	f240 2145 	movw	r1, #581	@ 0x245
 8020076:	e7e3      	b.n	8020040 <__mdiff+0x28>
 8020078:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802007c:	6926      	ldr	r6, [r4, #16]
 802007e:	60c5      	str	r5, [r0, #12]
 8020080:	f109 0310 	add.w	r3, r9, #16
 8020084:	f109 0514 	add.w	r5, r9, #20
 8020088:	f104 0e14 	add.w	lr, r4, #20
 802008c:	f100 0b14 	add.w	fp, r0, #20
 8020090:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8020094:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8020098:	9301      	str	r3, [sp, #4]
 802009a:	46d9      	mov	r9, fp
 802009c:	f04f 0c00 	mov.w	ip, #0
 80200a0:	9b01      	ldr	r3, [sp, #4]
 80200a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80200a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80200aa:	9301      	str	r3, [sp, #4]
 80200ac:	fa1f f38a 	uxth.w	r3, sl
 80200b0:	4619      	mov	r1, r3
 80200b2:	b283      	uxth	r3, r0
 80200b4:	1acb      	subs	r3, r1, r3
 80200b6:	0c00      	lsrs	r0, r0, #16
 80200b8:	4463      	add	r3, ip
 80200ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80200be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80200c2:	b29b      	uxth	r3, r3
 80200c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80200c8:	4576      	cmp	r6, lr
 80200ca:	f849 3b04 	str.w	r3, [r9], #4
 80200ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80200d2:	d8e5      	bhi.n	80200a0 <__mdiff+0x88>
 80200d4:	1b33      	subs	r3, r6, r4
 80200d6:	3b15      	subs	r3, #21
 80200d8:	f023 0303 	bic.w	r3, r3, #3
 80200dc:	3415      	adds	r4, #21
 80200de:	3304      	adds	r3, #4
 80200e0:	42a6      	cmp	r6, r4
 80200e2:	bf38      	it	cc
 80200e4:	2304      	movcc	r3, #4
 80200e6:	441d      	add	r5, r3
 80200e8:	445b      	add	r3, fp
 80200ea:	461e      	mov	r6, r3
 80200ec:	462c      	mov	r4, r5
 80200ee:	4544      	cmp	r4, r8
 80200f0:	d30e      	bcc.n	8020110 <__mdiff+0xf8>
 80200f2:	f108 0103 	add.w	r1, r8, #3
 80200f6:	1b49      	subs	r1, r1, r5
 80200f8:	f021 0103 	bic.w	r1, r1, #3
 80200fc:	3d03      	subs	r5, #3
 80200fe:	45a8      	cmp	r8, r5
 8020100:	bf38      	it	cc
 8020102:	2100      	movcc	r1, #0
 8020104:	440b      	add	r3, r1
 8020106:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802010a:	b191      	cbz	r1, 8020132 <__mdiff+0x11a>
 802010c:	6117      	str	r7, [r2, #16]
 802010e:	e79d      	b.n	802004c <__mdiff+0x34>
 8020110:	f854 1b04 	ldr.w	r1, [r4], #4
 8020114:	46e6      	mov	lr, ip
 8020116:	0c08      	lsrs	r0, r1, #16
 8020118:	fa1c fc81 	uxtah	ip, ip, r1
 802011c:	4471      	add	r1, lr
 802011e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8020122:	b289      	uxth	r1, r1
 8020124:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020128:	f846 1b04 	str.w	r1, [r6], #4
 802012c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020130:	e7dd      	b.n	80200ee <__mdiff+0xd6>
 8020132:	3f01      	subs	r7, #1
 8020134:	e7e7      	b.n	8020106 <__mdiff+0xee>
 8020136:	bf00      	nop
 8020138:	080264f5 	.word	0x080264f5
 802013c:	08026506 	.word	0x08026506

08020140 <__ulp>:
 8020140:	b082      	sub	sp, #8
 8020142:	ed8d 0b00 	vstr	d0, [sp]
 8020146:	9a01      	ldr	r2, [sp, #4]
 8020148:	4b0f      	ldr	r3, [pc, #60]	@ (8020188 <__ulp+0x48>)
 802014a:	4013      	ands	r3, r2
 802014c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8020150:	2b00      	cmp	r3, #0
 8020152:	dc08      	bgt.n	8020166 <__ulp+0x26>
 8020154:	425b      	negs	r3, r3
 8020156:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802015a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802015e:	da04      	bge.n	802016a <__ulp+0x2a>
 8020160:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8020164:	4113      	asrs	r3, r2
 8020166:	2200      	movs	r2, #0
 8020168:	e008      	b.n	802017c <__ulp+0x3c>
 802016a:	f1a2 0314 	sub.w	r3, r2, #20
 802016e:	2b1e      	cmp	r3, #30
 8020170:	bfda      	itte	le
 8020172:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8020176:	40da      	lsrle	r2, r3
 8020178:	2201      	movgt	r2, #1
 802017a:	2300      	movs	r3, #0
 802017c:	4619      	mov	r1, r3
 802017e:	4610      	mov	r0, r2
 8020180:	ec41 0b10 	vmov	d0, r0, r1
 8020184:	b002      	add	sp, #8
 8020186:	4770      	bx	lr
 8020188:	7ff00000 	.word	0x7ff00000

0802018c <__b2d>:
 802018c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020190:	6906      	ldr	r6, [r0, #16]
 8020192:	f100 0814 	add.w	r8, r0, #20
 8020196:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802019a:	1f37      	subs	r7, r6, #4
 802019c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80201a0:	4610      	mov	r0, r2
 80201a2:	f7ff fd4b 	bl	801fc3c <__hi0bits>
 80201a6:	f1c0 0320 	rsb	r3, r0, #32
 80201aa:	280a      	cmp	r0, #10
 80201ac:	600b      	str	r3, [r1, #0]
 80201ae:	491b      	ldr	r1, [pc, #108]	@ (802021c <__b2d+0x90>)
 80201b0:	dc15      	bgt.n	80201de <__b2d+0x52>
 80201b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80201b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80201ba:	45b8      	cmp	r8, r7
 80201bc:	ea43 0501 	orr.w	r5, r3, r1
 80201c0:	bf34      	ite	cc
 80201c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80201c6:	2300      	movcs	r3, #0
 80201c8:	3015      	adds	r0, #21
 80201ca:	fa02 f000 	lsl.w	r0, r2, r0
 80201ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80201d2:	4303      	orrs	r3, r0
 80201d4:	461c      	mov	r4, r3
 80201d6:	ec45 4b10 	vmov	d0, r4, r5
 80201da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201de:	45b8      	cmp	r8, r7
 80201e0:	bf3a      	itte	cc
 80201e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80201e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80201ea:	2300      	movcs	r3, #0
 80201ec:	380b      	subs	r0, #11
 80201ee:	d012      	beq.n	8020216 <__b2d+0x8a>
 80201f0:	f1c0 0120 	rsb	r1, r0, #32
 80201f4:	fa23 f401 	lsr.w	r4, r3, r1
 80201f8:	4082      	lsls	r2, r0
 80201fa:	4322      	orrs	r2, r4
 80201fc:	4547      	cmp	r7, r8
 80201fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8020202:	bf8c      	ite	hi
 8020204:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8020208:	2200      	movls	r2, #0
 802020a:	4083      	lsls	r3, r0
 802020c:	40ca      	lsrs	r2, r1
 802020e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8020212:	4313      	orrs	r3, r2
 8020214:	e7de      	b.n	80201d4 <__b2d+0x48>
 8020216:	ea42 0501 	orr.w	r5, r2, r1
 802021a:	e7db      	b.n	80201d4 <__b2d+0x48>
 802021c:	3ff00000 	.word	0x3ff00000

08020220 <__d2b>:
 8020220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020224:	460f      	mov	r7, r1
 8020226:	2101      	movs	r1, #1
 8020228:	ec59 8b10 	vmov	r8, r9, d0
 802022c:	4616      	mov	r6, r2
 802022e:	f7ff fc13 	bl	801fa58 <_Balloc>
 8020232:	4604      	mov	r4, r0
 8020234:	b930      	cbnz	r0, 8020244 <__d2b+0x24>
 8020236:	4602      	mov	r2, r0
 8020238:	4b23      	ldr	r3, [pc, #140]	@ (80202c8 <__d2b+0xa8>)
 802023a:	4824      	ldr	r0, [pc, #144]	@ (80202cc <__d2b+0xac>)
 802023c:	f240 310f 	movw	r1, #783	@ 0x30f
 8020240:	f7fe fca0 	bl	801eb84 <__assert_func>
 8020244:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802024c:	b10d      	cbz	r5, 8020252 <__d2b+0x32>
 802024e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020252:	9301      	str	r3, [sp, #4]
 8020254:	f1b8 0300 	subs.w	r3, r8, #0
 8020258:	d023      	beq.n	80202a2 <__d2b+0x82>
 802025a:	4668      	mov	r0, sp
 802025c:	9300      	str	r3, [sp, #0]
 802025e:	f7ff fd0c 	bl	801fc7a <__lo0bits>
 8020262:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020266:	b1d0      	cbz	r0, 802029e <__d2b+0x7e>
 8020268:	f1c0 0320 	rsb	r3, r0, #32
 802026c:	fa02 f303 	lsl.w	r3, r2, r3
 8020270:	430b      	orrs	r3, r1
 8020272:	40c2      	lsrs	r2, r0
 8020274:	6163      	str	r3, [r4, #20]
 8020276:	9201      	str	r2, [sp, #4]
 8020278:	9b01      	ldr	r3, [sp, #4]
 802027a:	61a3      	str	r3, [r4, #24]
 802027c:	2b00      	cmp	r3, #0
 802027e:	bf0c      	ite	eq
 8020280:	2201      	moveq	r2, #1
 8020282:	2202      	movne	r2, #2
 8020284:	6122      	str	r2, [r4, #16]
 8020286:	b1a5      	cbz	r5, 80202b2 <__d2b+0x92>
 8020288:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802028c:	4405      	add	r5, r0
 802028e:	603d      	str	r5, [r7, #0]
 8020290:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020294:	6030      	str	r0, [r6, #0]
 8020296:	4620      	mov	r0, r4
 8020298:	b003      	add	sp, #12
 802029a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802029e:	6161      	str	r1, [r4, #20]
 80202a0:	e7ea      	b.n	8020278 <__d2b+0x58>
 80202a2:	a801      	add	r0, sp, #4
 80202a4:	f7ff fce9 	bl	801fc7a <__lo0bits>
 80202a8:	9b01      	ldr	r3, [sp, #4]
 80202aa:	6163      	str	r3, [r4, #20]
 80202ac:	3020      	adds	r0, #32
 80202ae:	2201      	movs	r2, #1
 80202b0:	e7e8      	b.n	8020284 <__d2b+0x64>
 80202b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80202b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80202ba:	6038      	str	r0, [r7, #0]
 80202bc:	6918      	ldr	r0, [r3, #16]
 80202be:	f7ff fcbd 	bl	801fc3c <__hi0bits>
 80202c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80202c6:	e7e5      	b.n	8020294 <__d2b+0x74>
 80202c8:	080264f5 	.word	0x080264f5
 80202cc:	08026506 	.word	0x08026506

080202d0 <__ratio>:
 80202d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202d4:	b085      	sub	sp, #20
 80202d6:	e9cd 1000 	strd	r1, r0, [sp]
 80202da:	a902      	add	r1, sp, #8
 80202dc:	f7ff ff56 	bl	802018c <__b2d>
 80202e0:	9800      	ldr	r0, [sp, #0]
 80202e2:	a903      	add	r1, sp, #12
 80202e4:	ec55 4b10 	vmov	r4, r5, d0
 80202e8:	f7ff ff50 	bl	802018c <__b2d>
 80202ec:	9b01      	ldr	r3, [sp, #4]
 80202ee:	6919      	ldr	r1, [r3, #16]
 80202f0:	9b00      	ldr	r3, [sp, #0]
 80202f2:	691b      	ldr	r3, [r3, #16]
 80202f4:	1ac9      	subs	r1, r1, r3
 80202f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80202fa:	1a9b      	subs	r3, r3, r2
 80202fc:	ec5b ab10 	vmov	sl, fp, d0
 8020300:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020304:	2b00      	cmp	r3, #0
 8020306:	bfce      	itee	gt
 8020308:	462a      	movgt	r2, r5
 802030a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802030e:	465a      	movle	r2, fp
 8020310:	462f      	mov	r7, r5
 8020312:	46d9      	mov	r9, fp
 8020314:	bfcc      	ite	gt
 8020316:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802031a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802031e:	464b      	mov	r3, r9
 8020320:	4652      	mov	r2, sl
 8020322:	4620      	mov	r0, r4
 8020324:	4639      	mov	r1, r7
 8020326:	f7e0 fa91 	bl	800084c <__aeabi_ddiv>
 802032a:	ec41 0b10 	vmov	d0, r0, r1
 802032e:	b005      	add	sp, #20
 8020330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020334 <__copybits>:
 8020334:	3901      	subs	r1, #1
 8020336:	b570      	push	{r4, r5, r6, lr}
 8020338:	1149      	asrs	r1, r1, #5
 802033a:	6914      	ldr	r4, [r2, #16]
 802033c:	3101      	adds	r1, #1
 802033e:	f102 0314 	add.w	r3, r2, #20
 8020342:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020346:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802034a:	1f05      	subs	r5, r0, #4
 802034c:	42a3      	cmp	r3, r4
 802034e:	d30c      	bcc.n	802036a <__copybits+0x36>
 8020350:	1aa3      	subs	r3, r4, r2
 8020352:	3b11      	subs	r3, #17
 8020354:	f023 0303 	bic.w	r3, r3, #3
 8020358:	3211      	adds	r2, #17
 802035a:	42a2      	cmp	r2, r4
 802035c:	bf88      	it	hi
 802035e:	2300      	movhi	r3, #0
 8020360:	4418      	add	r0, r3
 8020362:	2300      	movs	r3, #0
 8020364:	4288      	cmp	r0, r1
 8020366:	d305      	bcc.n	8020374 <__copybits+0x40>
 8020368:	bd70      	pop	{r4, r5, r6, pc}
 802036a:	f853 6b04 	ldr.w	r6, [r3], #4
 802036e:	f845 6f04 	str.w	r6, [r5, #4]!
 8020372:	e7eb      	b.n	802034c <__copybits+0x18>
 8020374:	f840 3b04 	str.w	r3, [r0], #4
 8020378:	e7f4      	b.n	8020364 <__copybits+0x30>

0802037a <__any_on>:
 802037a:	f100 0214 	add.w	r2, r0, #20
 802037e:	6900      	ldr	r0, [r0, #16]
 8020380:	114b      	asrs	r3, r1, #5
 8020382:	4298      	cmp	r0, r3
 8020384:	b510      	push	{r4, lr}
 8020386:	db11      	blt.n	80203ac <__any_on+0x32>
 8020388:	dd0a      	ble.n	80203a0 <__any_on+0x26>
 802038a:	f011 011f 	ands.w	r1, r1, #31
 802038e:	d007      	beq.n	80203a0 <__any_on+0x26>
 8020390:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020394:	fa24 f001 	lsr.w	r0, r4, r1
 8020398:	fa00 f101 	lsl.w	r1, r0, r1
 802039c:	428c      	cmp	r4, r1
 802039e:	d10b      	bne.n	80203b8 <__any_on+0x3e>
 80203a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80203a4:	4293      	cmp	r3, r2
 80203a6:	d803      	bhi.n	80203b0 <__any_on+0x36>
 80203a8:	2000      	movs	r0, #0
 80203aa:	bd10      	pop	{r4, pc}
 80203ac:	4603      	mov	r3, r0
 80203ae:	e7f7      	b.n	80203a0 <__any_on+0x26>
 80203b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80203b4:	2900      	cmp	r1, #0
 80203b6:	d0f5      	beq.n	80203a4 <__any_on+0x2a>
 80203b8:	2001      	movs	r0, #1
 80203ba:	e7f6      	b.n	80203aa <__any_on+0x30>

080203bc <sulp>:
 80203bc:	b570      	push	{r4, r5, r6, lr}
 80203be:	4604      	mov	r4, r0
 80203c0:	460d      	mov	r5, r1
 80203c2:	ec45 4b10 	vmov	d0, r4, r5
 80203c6:	4616      	mov	r6, r2
 80203c8:	f7ff feba 	bl	8020140 <__ulp>
 80203cc:	ec51 0b10 	vmov	r0, r1, d0
 80203d0:	b17e      	cbz	r6, 80203f2 <sulp+0x36>
 80203d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80203d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80203da:	2b00      	cmp	r3, #0
 80203dc:	dd09      	ble.n	80203f2 <sulp+0x36>
 80203de:	051b      	lsls	r3, r3, #20
 80203e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80203e4:	2400      	movs	r4, #0
 80203e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80203ea:	4622      	mov	r2, r4
 80203ec:	462b      	mov	r3, r5
 80203ee:	f7e0 f903 	bl	80005f8 <__aeabi_dmul>
 80203f2:	ec41 0b10 	vmov	d0, r0, r1
 80203f6:	bd70      	pop	{r4, r5, r6, pc}

080203f8 <_strtod_l>:
 80203f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203fc:	b09f      	sub	sp, #124	@ 0x7c
 80203fe:	460c      	mov	r4, r1
 8020400:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020402:	2200      	movs	r2, #0
 8020404:	921a      	str	r2, [sp, #104]	@ 0x68
 8020406:	9005      	str	r0, [sp, #20]
 8020408:	f04f 0a00 	mov.w	sl, #0
 802040c:	f04f 0b00 	mov.w	fp, #0
 8020410:	460a      	mov	r2, r1
 8020412:	9219      	str	r2, [sp, #100]	@ 0x64
 8020414:	7811      	ldrb	r1, [r2, #0]
 8020416:	292b      	cmp	r1, #43	@ 0x2b
 8020418:	d04a      	beq.n	80204b0 <_strtod_l+0xb8>
 802041a:	d838      	bhi.n	802048e <_strtod_l+0x96>
 802041c:	290d      	cmp	r1, #13
 802041e:	d832      	bhi.n	8020486 <_strtod_l+0x8e>
 8020420:	2908      	cmp	r1, #8
 8020422:	d832      	bhi.n	802048a <_strtod_l+0x92>
 8020424:	2900      	cmp	r1, #0
 8020426:	d03b      	beq.n	80204a0 <_strtod_l+0xa8>
 8020428:	2200      	movs	r2, #0
 802042a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802042c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802042e:	782a      	ldrb	r2, [r5, #0]
 8020430:	2a30      	cmp	r2, #48	@ 0x30
 8020432:	f040 80b3 	bne.w	802059c <_strtod_l+0x1a4>
 8020436:	786a      	ldrb	r2, [r5, #1]
 8020438:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802043c:	2a58      	cmp	r2, #88	@ 0x58
 802043e:	d16e      	bne.n	802051e <_strtod_l+0x126>
 8020440:	9302      	str	r3, [sp, #8]
 8020442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020444:	9301      	str	r3, [sp, #4]
 8020446:	ab1a      	add	r3, sp, #104	@ 0x68
 8020448:	9300      	str	r3, [sp, #0]
 802044a:	4a8e      	ldr	r2, [pc, #568]	@ (8020684 <_strtod_l+0x28c>)
 802044c:	9805      	ldr	r0, [sp, #20]
 802044e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8020450:	a919      	add	r1, sp, #100	@ 0x64
 8020452:	f001 f997 	bl	8021784 <__gethex>
 8020456:	f010 060f 	ands.w	r6, r0, #15
 802045a:	4604      	mov	r4, r0
 802045c:	d005      	beq.n	802046a <_strtod_l+0x72>
 802045e:	2e06      	cmp	r6, #6
 8020460:	d128      	bne.n	80204b4 <_strtod_l+0xbc>
 8020462:	3501      	adds	r5, #1
 8020464:	2300      	movs	r3, #0
 8020466:	9519      	str	r5, [sp, #100]	@ 0x64
 8020468:	930b      	str	r3, [sp, #44]	@ 0x2c
 802046a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802046c:	2b00      	cmp	r3, #0
 802046e:	f040 858e 	bne.w	8020f8e <_strtod_l+0xb96>
 8020472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020474:	b1cb      	cbz	r3, 80204aa <_strtod_l+0xb2>
 8020476:	4652      	mov	r2, sl
 8020478:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802047c:	ec43 2b10 	vmov	d0, r2, r3
 8020480:	b01f      	add	sp, #124	@ 0x7c
 8020482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020486:	2920      	cmp	r1, #32
 8020488:	d1ce      	bne.n	8020428 <_strtod_l+0x30>
 802048a:	3201      	adds	r2, #1
 802048c:	e7c1      	b.n	8020412 <_strtod_l+0x1a>
 802048e:	292d      	cmp	r1, #45	@ 0x2d
 8020490:	d1ca      	bne.n	8020428 <_strtod_l+0x30>
 8020492:	2101      	movs	r1, #1
 8020494:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020496:	1c51      	adds	r1, r2, #1
 8020498:	9119      	str	r1, [sp, #100]	@ 0x64
 802049a:	7852      	ldrb	r2, [r2, #1]
 802049c:	2a00      	cmp	r2, #0
 802049e:	d1c5      	bne.n	802042c <_strtod_l+0x34>
 80204a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80204a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	f040 8570 	bne.w	8020f8a <_strtod_l+0xb92>
 80204aa:	4652      	mov	r2, sl
 80204ac:	465b      	mov	r3, fp
 80204ae:	e7e5      	b.n	802047c <_strtod_l+0x84>
 80204b0:	2100      	movs	r1, #0
 80204b2:	e7ef      	b.n	8020494 <_strtod_l+0x9c>
 80204b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80204b6:	b13a      	cbz	r2, 80204c8 <_strtod_l+0xd0>
 80204b8:	2135      	movs	r1, #53	@ 0x35
 80204ba:	a81c      	add	r0, sp, #112	@ 0x70
 80204bc:	f7ff ff3a 	bl	8020334 <__copybits>
 80204c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80204c2:	9805      	ldr	r0, [sp, #20]
 80204c4:	f7ff fb08 	bl	801fad8 <_Bfree>
 80204c8:	3e01      	subs	r6, #1
 80204ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80204cc:	2e04      	cmp	r6, #4
 80204ce:	d806      	bhi.n	80204de <_strtod_l+0xe6>
 80204d0:	e8df f006 	tbb	[pc, r6]
 80204d4:	201d0314 	.word	0x201d0314
 80204d8:	14          	.byte	0x14
 80204d9:	00          	.byte	0x00
 80204da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80204de:	05e1      	lsls	r1, r4, #23
 80204e0:	bf48      	it	mi
 80204e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80204e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80204ea:	0d1b      	lsrs	r3, r3, #20
 80204ec:	051b      	lsls	r3, r3, #20
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d1bb      	bne.n	802046a <_strtod_l+0x72>
 80204f2:	f7fe fafd 	bl	801eaf0 <__errno>
 80204f6:	2322      	movs	r3, #34	@ 0x22
 80204f8:	6003      	str	r3, [r0, #0]
 80204fa:	e7b6      	b.n	802046a <_strtod_l+0x72>
 80204fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8020500:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8020504:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8020508:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802050c:	e7e7      	b.n	80204de <_strtod_l+0xe6>
 802050e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802068c <_strtod_l+0x294>
 8020512:	e7e4      	b.n	80204de <_strtod_l+0xe6>
 8020514:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8020518:	f04f 3aff 	mov.w	sl, #4294967295
 802051c:	e7df      	b.n	80204de <_strtod_l+0xe6>
 802051e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020520:	1c5a      	adds	r2, r3, #1
 8020522:	9219      	str	r2, [sp, #100]	@ 0x64
 8020524:	785b      	ldrb	r3, [r3, #1]
 8020526:	2b30      	cmp	r3, #48	@ 0x30
 8020528:	d0f9      	beq.n	802051e <_strtod_l+0x126>
 802052a:	2b00      	cmp	r3, #0
 802052c:	d09d      	beq.n	802046a <_strtod_l+0x72>
 802052e:	2301      	movs	r3, #1
 8020530:	9309      	str	r3, [sp, #36]	@ 0x24
 8020532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020534:	930c      	str	r3, [sp, #48]	@ 0x30
 8020536:	2300      	movs	r3, #0
 8020538:	9308      	str	r3, [sp, #32]
 802053a:	930a      	str	r3, [sp, #40]	@ 0x28
 802053c:	461f      	mov	r7, r3
 802053e:	220a      	movs	r2, #10
 8020540:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020542:	7805      	ldrb	r5, [r0, #0]
 8020544:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8020548:	b2d9      	uxtb	r1, r3
 802054a:	2909      	cmp	r1, #9
 802054c:	d928      	bls.n	80205a0 <_strtod_l+0x1a8>
 802054e:	494e      	ldr	r1, [pc, #312]	@ (8020688 <_strtod_l+0x290>)
 8020550:	2201      	movs	r2, #1
 8020552:	f7fe fa08 	bl	801e966 <strncmp>
 8020556:	2800      	cmp	r0, #0
 8020558:	d032      	beq.n	80205c0 <_strtod_l+0x1c8>
 802055a:	2000      	movs	r0, #0
 802055c:	462a      	mov	r2, r5
 802055e:	4681      	mov	r9, r0
 8020560:	463d      	mov	r5, r7
 8020562:	4603      	mov	r3, r0
 8020564:	2a65      	cmp	r2, #101	@ 0x65
 8020566:	d001      	beq.n	802056c <_strtod_l+0x174>
 8020568:	2a45      	cmp	r2, #69	@ 0x45
 802056a:	d114      	bne.n	8020596 <_strtod_l+0x19e>
 802056c:	b91d      	cbnz	r5, 8020576 <_strtod_l+0x17e>
 802056e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020570:	4302      	orrs	r2, r0
 8020572:	d095      	beq.n	80204a0 <_strtod_l+0xa8>
 8020574:	2500      	movs	r5, #0
 8020576:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8020578:	1c62      	adds	r2, r4, #1
 802057a:	9219      	str	r2, [sp, #100]	@ 0x64
 802057c:	7862      	ldrb	r2, [r4, #1]
 802057e:	2a2b      	cmp	r2, #43	@ 0x2b
 8020580:	d077      	beq.n	8020672 <_strtod_l+0x27a>
 8020582:	2a2d      	cmp	r2, #45	@ 0x2d
 8020584:	d07b      	beq.n	802067e <_strtod_l+0x286>
 8020586:	f04f 0c00 	mov.w	ip, #0
 802058a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802058e:	2909      	cmp	r1, #9
 8020590:	f240 8082 	bls.w	8020698 <_strtod_l+0x2a0>
 8020594:	9419      	str	r4, [sp, #100]	@ 0x64
 8020596:	f04f 0800 	mov.w	r8, #0
 802059a:	e0a2      	b.n	80206e2 <_strtod_l+0x2ea>
 802059c:	2300      	movs	r3, #0
 802059e:	e7c7      	b.n	8020530 <_strtod_l+0x138>
 80205a0:	2f08      	cmp	r7, #8
 80205a2:	bfd5      	itete	le
 80205a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80205a6:	9908      	ldrgt	r1, [sp, #32]
 80205a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80205ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80205b0:	f100 0001 	add.w	r0, r0, #1
 80205b4:	bfd4      	ite	le
 80205b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80205b8:	9308      	strgt	r3, [sp, #32]
 80205ba:	3701      	adds	r7, #1
 80205bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80205be:	e7bf      	b.n	8020540 <_strtod_l+0x148>
 80205c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80205c2:	1c5a      	adds	r2, r3, #1
 80205c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80205c6:	785a      	ldrb	r2, [r3, #1]
 80205c8:	b37f      	cbz	r7, 802062a <_strtod_l+0x232>
 80205ca:	4681      	mov	r9, r0
 80205cc:	463d      	mov	r5, r7
 80205ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80205d2:	2b09      	cmp	r3, #9
 80205d4:	d912      	bls.n	80205fc <_strtod_l+0x204>
 80205d6:	2301      	movs	r3, #1
 80205d8:	e7c4      	b.n	8020564 <_strtod_l+0x16c>
 80205da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80205dc:	1c5a      	adds	r2, r3, #1
 80205de:	9219      	str	r2, [sp, #100]	@ 0x64
 80205e0:	785a      	ldrb	r2, [r3, #1]
 80205e2:	3001      	adds	r0, #1
 80205e4:	2a30      	cmp	r2, #48	@ 0x30
 80205e6:	d0f8      	beq.n	80205da <_strtod_l+0x1e2>
 80205e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80205ec:	2b08      	cmp	r3, #8
 80205ee:	f200 84d3 	bhi.w	8020f98 <_strtod_l+0xba0>
 80205f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80205f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80205f6:	4681      	mov	r9, r0
 80205f8:	2000      	movs	r0, #0
 80205fa:	4605      	mov	r5, r0
 80205fc:	3a30      	subs	r2, #48	@ 0x30
 80205fe:	f100 0301 	add.w	r3, r0, #1
 8020602:	d02a      	beq.n	802065a <_strtod_l+0x262>
 8020604:	4499      	add	r9, r3
 8020606:	eb00 0c05 	add.w	ip, r0, r5
 802060a:	462b      	mov	r3, r5
 802060c:	210a      	movs	r1, #10
 802060e:	4563      	cmp	r3, ip
 8020610:	d10d      	bne.n	802062e <_strtod_l+0x236>
 8020612:	1c69      	adds	r1, r5, #1
 8020614:	4401      	add	r1, r0
 8020616:	4428      	add	r0, r5
 8020618:	2808      	cmp	r0, #8
 802061a:	dc16      	bgt.n	802064a <_strtod_l+0x252>
 802061c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802061e:	230a      	movs	r3, #10
 8020620:	fb03 2300 	mla	r3, r3, r0, r2
 8020624:	930a      	str	r3, [sp, #40]	@ 0x28
 8020626:	2300      	movs	r3, #0
 8020628:	e018      	b.n	802065c <_strtod_l+0x264>
 802062a:	4638      	mov	r0, r7
 802062c:	e7da      	b.n	80205e4 <_strtod_l+0x1ec>
 802062e:	2b08      	cmp	r3, #8
 8020630:	f103 0301 	add.w	r3, r3, #1
 8020634:	dc03      	bgt.n	802063e <_strtod_l+0x246>
 8020636:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020638:	434e      	muls	r6, r1
 802063a:	960a      	str	r6, [sp, #40]	@ 0x28
 802063c:	e7e7      	b.n	802060e <_strtod_l+0x216>
 802063e:	2b10      	cmp	r3, #16
 8020640:	bfde      	ittt	le
 8020642:	9e08      	ldrle	r6, [sp, #32]
 8020644:	434e      	mulle	r6, r1
 8020646:	9608      	strle	r6, [sp, #32]
 8020648:	e7e1      	b.n	802060e <_strtod_l+0x216>
 802064a:	280f      	cmp	r0, #15
 802064c:	dceb      	bgt.n	8020626 <_strtod_l+0x22e>
 802064e:	9808      	ldr	r0, [sp, #32]
 8020650:	230a      	movs	r3, #10
 8020652:	fb03 2300 	mla	r3, r3, r0, r2
 8020656:	9308      	str	r3, [sp, #32]
 8020658:	e7e5      	b.n	8020626 <_strtod_l+0x22e>
 802065a:	4629      	mov	r1, r5
 802065c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802065e:	1c50      	adds	r0, r2, #1
 8020660:	9019      	str	r0, [sp, #100]	@ 0x64
 8020662:	7852      	ldrb	r2, [r2, #1]
 8020664:	4618      	mov	r0, r3
 8020666:	460d      	mov	r5, r1
 8020668:	e7b1      	b.n	80205ce <_strtod_l+0x1d6>
 802066a:	f04f 0900 	mov.w	r9, #0
 802066e:	2301      	movs	r3, #1
 8020670:	e77d      	b.n	802056e <_strtod_l+0x176>
 8020672:	f04f 0c00 	mov.w	ip, #0
 8020676:	1ca2      	adds	r2, r4, #2
 8020678:	9219      	str	r2, [sp, #100]	@ 0x64
 802067a:	78a2      	ldrb	r2, [r4, #2]
 802067c:	e785      	b.n	802058a <_strtod_l+0x192>
 802067e:	f04f 0c01 	mov.w	ip, #1
 8020682:	e7f8      	b.n	8020676 <_strtod_l+0x27e>
 8020684:	08026678 	.word	0x08026678
 8020688:	08026660 	.word	0x08026660
 802068c:	7ff00000 	.word	0x7ff00000
 8020690:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020692:	1c51      	adds	r1, r2, #1
 8020694:	9119      	str	r1, [sp, #100]	@ 0x64
 8020696:	7852      	ldrb	r2, [r2, #1]
 8020698:	2a30      	cmp	r2, #48	@ 0x30
 802069a:	d0f9      	beq.n	8020690 <_strtod_l+0x298>
 802069c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80206a0:	2908      	cmp	r1, #8
 80206a2:	f63f af78 	bhi.w	8020596 <_strtod_l+0x19e>
 80206a6:	3a30      	subs	r2, #48	@ 0x30
 80206a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80206aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80206ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80206ae:	f04f 080a 	mov.w	r8, #10
 80206b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80206b4:	1c56      	adds	r6, r2, #1
 80206b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80206b8:	7852      	ldrb	r2, [r2, #1]
 80206ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80206be:	f1be 0f09 	cmp.w	lr, #9
 80206c2:	d939      	bls.n	8020738 <_strtod_l+0x340>
 80206c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80206c6:	1a76      	subs	r6, r6, r1
 80206c8:	2e08      	cmp	r6, #8
 80206ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80206ce:	dc03      	bgt.n	80206d8 <_strtod_l+0x2e0>
 80206d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80206d2:	4588      	cmp	r8, r1
 80206d4:	bfa8      	it	ge
 80206d6:	4688      	movge	r8, r1
 80206d8:	f1bc 0f00 	cmp.w	ip, #0
 80206dc:	d001      	beq.n	80206e2 <_strtod_l+0x2ea>
 80206de:	f1c8 0800 	rsb	r8, r8, #0
 80206e2:	2d00      	cmp	r5, #0
 80206e4:	d14e      	bne.n	8020784 <_strtod_l+0x38c>
 80206e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80206e8:	4308      	orrs	r0, r1
 80206ea:	f47f aebe 	bne.w	802046a <_strtod_l+0x72>
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	f47f aed6 	bne.w	80204a0 <_strtod_l+0xa8>
 80206f4:	2a69      	cmp	r2, #105	@ 0x69
 80206f6:	d028      	beq.n	802074a <_strtod_l+0x352>
 80206f8:	dc25      	bgt.n	8020746 <_strtod_l+0x34e>
 80206fa:	2a49      	cmp	r2, #73	@ 0x49
 80206fc:	d025      	beq.n	802074a <_strtod_l+0x352>
 80206fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8020700:	f47f aece 	bne.w	80204a0 <_strtod_l+0xa8>
 8020704:	499b      	ldr	r1, [pc, #620]	@ (8020974 <_strtod_l+0x57c>)
 8020706:	a819      	add	r0, sp, #100	@ 0x64
 8020708:	f001 fa5e 	bl	8021bc8 <__match>
 802070c:	2800      	cmp	r0, #0
 802070e:	f43f aec7 	beq.w	80204a0 <_strtod_l+0xa8>
 8020712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020714:	781b      	ldrb	r3, [r3, #0]
 8020716:	2b28      	cmp	r3, #40	@ 0x28
 8020718:	d12e      	bne.n	8020778 <_strtod_l+0x380>
 802071a:	4997      	ldr	r1, [pc, #604]	@ (8020978 <_strtod_l+0x580>)
 802071c:	aa1c      	add	r2, sp, #112	@ 0x70
 802071e:	a819      	add	r0, sp, #100	@ 0x64
 8020720:	f001 fa66 	bl	8021bf0 <__hexnan>
 8020724:	2805      	cmp	r0, #5
 8020726:	d127      	bne.n	8020778 <_strtod_l+0x380>
 8020728:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802072a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802072e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8020732:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8020736:	e698      	b.n	802046a <_strtod_l+0x72>
 8020738:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802073a:	fb08 2101 	mla	r1, r8, r1, r2
 802073e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8020742:	920e      	str	r2, [sp, #56]	@ 0x38
 8020744:	e7b5      	b.n	80206b2 <_strtod_l+0x2ba>
 8020746:	2a6e      	cmp	r2, #110	@ 0x6e
 8020748:	e7da      	b.n	8020700 <_strtod_l+0x308>
 802074a:	498c      	ldr	r1, [pc, #560]	@ (802097c <_strtod_l+0x584>)
 802074c:	a819      	add	r0, sp, #100	@ 0x64
 802074e:	f001 fa3b 	bl	8021bc8 <__match>
 8020752:	2800      	cmp	r0, #0
 8020754:	f43f aea4 	beq.w	80204a0 <_strtod_l+0xa8>
 8020758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802075a:	4989      	ldr	r1, [pc, #548]	@ (8020980 <_strtod_l+0x588>)
 802075c:	3b01      	subs	r3, #1
 802075e:	a819      	add	r0, sp, #100	@ 0x64
 8020760:	9319      	str	r3, [sp, #100]	@ 0x64
 8020762:	f001 fa31 	bl	8021bc8 <__match>
 8020766:	b910      	cbnz	r0, 802076e <_strtod_l+0x376>
 8020768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802076a:	3301      	adds	r3, #1
 802076c:	9319      	str	r3, [sp, #100]	@ 0x64
 802076e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020990 <_strtod_l+0x598>
 8020772:	f04f 0a00 	mov.w	sl, #0
 8020776:	e678      	b.n	802046a <_strtod_l+0x72>
 8020778:	4882      	ldr	r0, [pc, #520]	@ (8020984 <_strtod_l+0x58c>)
 802077a:	f000 ff79 	bl	8021670 <nan>
 802077e:	ec5b ab10 	vmov	sl, fp, d0
 8020782:	e672      	b.n	802046a <_strtod_l+0x72>
 8020784:	eba8 0309 	sub.w	r3, r8, r9
 8020788:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802078a:	9309      	str	r3, [sp, #36]	@ 0x24
 802078c:	2f00      	cmp	r7, #0
 802078e:	bf08      	it	eq
 8020790:	462f      	moveq	r7, r5
 8020792:	2d10      	cmp	r5, #16
 8020794:	462c      	mov	r4, r5
 8020796:	bfa8      	it	ge
 8020798:	2410      	movge	r4, #16
 802079a:	f7df feb3 	bl	8000504 <__aeabi_ui2d>
 802079e:	2d09      	cmp	r5, #9
 80207a0:	4682      	mov	sl, r0
 80207a2:	468b      	mov	fp, r1
 80207a4:	dc13      	bgt.n	80207ce <_strtod_l+0x3d6>
 80207a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	f43f ae5e 	beq.w	802046a <_strtod_l+0x72>
 80207ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207b0:	dd78      	ble.n	80208a4 <_strtod_l+0x4ac>
 80207b2:	2b16      	cmp	r3, #22
 80207b4:	dc5f      	bgt.n	8020876 <_strtod_l+0x47e>
 80207b6:	4974      	ldr	r1, [pc, #464]	@ (8020988 <_strtod_l+0x590>)
 80207b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80207bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80207c0:	4652      	mov	r2, sl
 80207c2:	465b      	mov	r3, fp
 80207c4:	f7df ff18 	bl	80005f8 <__aeabi_dmul>
 80207c8:	4682      	mov	sl, r0
 80207ca:	468b      	mov	fp, r1
 80207cc:	e64d      	b.n	802046a <_strtod_l+0x72>
 80207ce:	4b6e      	ldr	r3, [pc, #440]	@ (8020988 <_strtod_l+0x590>)
 80207d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80207d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80207d8:	f7df ff0e 	bl	80005f8 <__aeabi_dmul>
 80207dc:	4682      	mov	sl, r0
 80207de:	9808      	ldr	r0, [sp, #32]
 80207e0:	468b      	mov	fp, r1
 80207e2:	f7df fe8f 	bl	8000504 <__aeabi_ui2d>
 80207e6:	4602      	mov	r2, r0
 80207e8:	460b      	mov	r3, r1
 80207ea:	4650      	mov	r0, sl
 80207ec:	4659      	mov	r1, fp
 80207ee:	f7df fd4d 	bl	800028c <__adddf3>
 80207f2:	2d0f      	cmp	r5, #15
 80207f4:	4682      	mov	sl, r0
 80207f6:	468b      	mov	fp, r1
 80207f8:	ddd5      	ble.n	80207a6 <_strtod_l+0x3ae>
 80207fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207fc:	1b2c      	subs	r4, r5, r4
 80207fe:	441c      	add	r4, r3
 8020800:	2c00      	cmp	r4, #0
 8020802:	f340 8096 	ble.w	8020932 <_strtod_l+0x53a>
 8020806:	f014 030f 	ands.w	r3, r4, #15
 802080a:	d00a      	beq.n	8020822 <_strtod_l+0x42a>
 802080c:	495e      	ldr	r1, [pc, #376]	@ (8020988 <_strtod_l+0x590>)
 802080e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020812:	4652      	mov	r2, sl
 8020814:	465b      	mov	r3, fp
 8020816:	e9d1 0100 	ldrd	r0, r1, [r1]
 802081a:	f7df feed 	bl	80005f8 <__aeabi_dmul>
 802081e:	4682      	mov	sl, r0
 8020820:	468b      	mov	fp, r1
 8020822:	f034 040f 	bics.w	r4, r4, #15
 8020826:	d073      	beq.n	8020910 <_strtod_l+0x518>
 8020828:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802082c:	dd48      	ble.n	80208c0 <_strtod_l+0x4c8>
 802082e:	2400      	movs	r4, #0
 8020830:	46a0      	mov	r8, r4
 8020832:	940a      	str	r4, [sp, #40]	@ 0x28
 8020834:	46a1      	mov	r9, r4
 8020836:	9a05      	ldr	r2, [sp, #20]
 8020838:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020990 <_strtod_l+0x598>
 802083c:	2322      	movs	r3, #34	@ 0x22
 802083e:	6013      	str	r3, [r2, #0]
 8020840:	f04f 0a00 	mov.w	sl, #0
 8020844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020846:	2b00      	cmp	r3, #0
 8020848:	f43f ae0f 	beq.w	802046a <_strtod_l+0x72>
 802084c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802084e:	9805      	ldr	r0, [sp, #20]
 8020850:	f7ff f942 	bl	801fad8 <_Bfree>
 8020854:	9805      	ldr	r0, [sp, #20]
 8020856:	4649      	mov	r1, r9
 8020858:	f7ff f93e 	bl	801fad8 <_Bfree>
 802085c:	9805      	ldr	r0, [sp, #20]
 802085e:	4641      	mov	r1, r8
 8020860:	f7ff f93a 	bl	801fad8 <_Bfree>
 8020864:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020866:	9805      	ldr	r0, [sp, #20]
 8020868:	f7ff f936 	bl	801fad8 <_Bfree>
 802086c:	9805      	ldr	r0, [sp, #20]
 802086e:	4621      	mov	r1, r4
 8020870:	f7ff f932 	bl	801fad8 <_Bfree>
 8020874:	e5f9      	b.n	802046a <_strtod_l+0x72>
 8020876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020878:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802087c:	4293      	cmp	r3, r2
 802087e:	dbbc      	blt.n	80207fa <_strtod_l+0x402>
 8020880:	4c41      	ldr	r4, [pc, #260]	@ (8020988 <_strtod_l+0x590>)
 8020882:	f1c5 050f 	rsb	r5, r5, #15
 8020886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802088a:	4652      	mov	r2, sl
 802088c:	465b      	mov	r3, fp
 802088e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020892:	f7df feb1 	bl	80005f8 <__aeabi_dmul>
 8020896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020898:	1b5d      	subs	r5, r3, r5
 802089a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802089e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80208a2:	e78f      	b.n	80207c4 <_strtod_l+0x3cc>
 80208a4:	3316      	adds	r3, #22
 80208a6:	dba8      	blt.n	80207fa <_strtod_l+0x402>
 80208a8:	4b37      	ldr	r3, [pc, #220]	@ (8020988 <_strtod_l+0x590>)
 80208aa:	eba9 0808 	sub.w	r8, r9, r8
 80208ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80208b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80208b6:	4650      	mov	r0, sl
 80208b8:	4659      	mov	r1, fp
 80208ba:	f7df ffc7 	bl	800084c <__aeabi_ddiv>
 80208be:	e783      	b.n	80207c8 <_strtod_l+0x3d0>
 80208c0:	4b32      	ldr	r3, [pc, #200]	@ (802098c <_strtod_l+0x594>)
 80208c2:	9308      	str	r3, [sp, #32]
 80208c4:	2300      	movs	r3, #0
 80208c6:	1124      	asrs	r4, r4, #4
 80208c8:	4650      	mov	r0, sl
 80208ca:	4659      	mov	r1, fp
 80208cc:	461e      	mov	r6, r3
 80208ce:	2c01      	cmp	r4, #1
 80208d0:	dc21      	bgt.n	8020916 <_strtod_l+0x51e>
 80208d2:	b10b      	cbz	r3, 80208d8 <_strtod_l+0x4e0>
 80208d4:	4682      	mov	sl, r0
 80208d6:	468b      	mov	fp, r1
 80208d8:	492c      	ldr	r1, [pc, #176]	@ (802098c <_strtod_l+0x594>)
 80208da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80208de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80208e2:	4652      	mov	r2, sl
 80208e4:	465b      	mov	r3, fp
 80208e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80208ea:	f7df fe85 	bl	80005f8 <__aeabi_dmul>
 80208ee:	4b28      	ldr	r3, [pc, #160]	@ (8020990 <_strtod_l+0x598>)
 80208f0:	460a      	mov	r2, r1
 80208f2:	400b      	ands	r3, r1
 80208f4:	4927      	ldr	r1, [pc, #156]	@ (8020994 <_strtod_l+0x59c>)
 80208f6:	428b      	cmp	r3, r1
 80208f8:	4682      	mov	sl, r0
 80208fa:	d898      	bhi.n	802082e <_strtod_l+0x436>
 80208fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8020900:	428b      	cmp	r3, r1
 8020902:	bf86      	itte	hi
 8020904:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020998 <_strtod_l+0x5a0>
 8020908:	f04f 3aff 	movhi.w	sl, #4294967295
 802090c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020910:	2300      	movs	r3, #0
 8020912:	9308      	str	r3, [sp, #32]
 8020914:	e07a      	b.n	8020a0c <_strtod_l+0x614>
 8020916:	07e2      	lsls	r2, r4, #31
 8020918:	d505      	bpl.n	8020926 <_strtod_l+0x52e>
 802091a:	9b08      	ldr	r3, [sp, #32]
 802091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020920:	f7df fe6a 	bl	80005f8 <__aeabi_dmul>
 8020924:	2301      	movs	r3, #1
 8020926:	9a08      	ldr	r2, [sp, #32]
 8020928:	3208      	adds	r2, #8
 802092a:	3601      	adds	r6, #1
 802092c:	1064      	asrs	r4, r4, #1
 802092e:	9208      	str	r2, [sp, #32]
 8020930:	e7cd      	b.n	80208ce <_strtod_l+0x4d6>
 8020932:	d0ed      	beq.n	8020910 <_strtod_l+0x518>
 8020934:	4264      	negs	r4, r4
 8020936:	f014 020f 	ands.w	r2, r4, #15
 802093a:	d00a      	beq.n	8020952 <_strtod_l+0x55a>
 802093c:	4b12      	ldr	r3, [pc, #72]	@ (8020988 <_strtod_l+0x590>)
 802093e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020942:	4650      	mov	r0, sl
 8020944:	4659      	mov	r1, fp
 8020946:	e9d3 2300 	ldrd	r2, r3, [r3]
 802094a:	f7df ff7f 	bl	800084c <__aeabi_ddiv>
 802094e:	4682      	mov	sl, r0
 8020950:	468b      	mov	fp, r1
 8020952:	1124      	asrs	r4, r4, #4
 8020954:	d0dc      	beq.n	8020910 <_strtod_l+0x518>
 8020956:	2c1f      	cmp	r4, #31
 8020958:	dd20      	ble.n	802099c <_strtod_l+0x5a4>
 802095a:	2400      	movs	r4, #0
 802095c:	46a0      	mov	r8, r4
 802095e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020960:	46a1      	mov	r9, r4
 8020962:	9a05      	ldr	r2, [sp, #20]
 8020964:	2322      	movs	r3, #34	@ 0x22
 8020966:	f04f 0a00 	mov.w	sl, #0
 802096a:	f04f 0b00 	mov.w	fp, #0
 802096e:	6013      	str	r3, [r2, #0]
 8020970:	e768      	b.n	8020844 <_strtod_l+0x44c>
 8020972:	bf00      	nop
 8020974:	08026428 	.word	0x08026428
 8020978:	08026664 	.word	0x08026664
 802097c:	08026420 	.word	0x08026420
 8020980:	08026493 	.word	0x08026493
 8020984:	0802648f 	.word	0x0802648f
 8020988:	08026598 	.word	0x08026598
 802098c:	08026570 	.word	0x08026570
 8020990:	7ff00000 	.word	0x7ff00000
 8020994:	7ca00000 	.word	0x7ca00000
 8020998:	7fefffff 	.word	0x7fefffff
 802099c:	f014 0310 	ands.w	r3, r4, #16
 80209a0:	bf18      	it	ne
 80209a2:	236a      	movne	r3, #106	@ 0x6a
 80209a4:	4ea9      	ldr	r6, [pc, #676]	@ (8020c4c <_strtod_l+0x854>)
 80209a6:	9308      	str	r3, [sp, #32]
 80209a8:	4650      	mov	r0, sl
 80209aa:	4659      	mov	r1, fp
 80209ac:	2300      	movs	r3, #0
 80209ae:	07e2      	lsls	r2, r4, #31
 80209b0:	d504      	bpl.n	80209bc <_strtod_l+0x5c4>
 80209b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80209b6:	f7df fe1f 	bl	80005f8 <__aeabi_dmul>
 80209ba:	2301      	movs	r3, #1
 80209bc:	1064      	asrs	r4, r4, #1
 80209be:	f106 0608 	add.w	r6, r6, #8
 80209c2:	d1f4      	bne.n	80209ae <_strtod_l+0x5b6>
 80209c4:	b10b      	cbz	r3, 80209ca <_strtod_l+0x5d2>
 80209c6:	4682      	mov	sl, r0
 80209c8:	468b      	mov	fp, r1
 80209ca:	9b08      	ldr	r3, [sp, #32]
 80209cc:	b1b3      	cbz	r3, 80209fc <_strtod_l+0x604>
 80209ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80209d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80209d6:	2b00      	cmp	r3, #0
 80209d8:	4659      	mov	r1, fp
 80209da:	dd0f      	ble.n	80209fc <_strtod_l+0x604>
 80209dc:	2b1f      	cmp	r3, #31
 80209de:	dd55      	ble.n	8020a8c <_strtod_l+0x694>
 80209e0:	2b34      	cmp	r3, #52	@ 0x34
 80209e2:	bfde      	ittt	le
 80209e4:	f04f 33ff 	movle.w	r3, #4294967295
 80209e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80209ec:	4093      	lslle	r3, r2
 80209ee:	f04f 0a00 	mov.w	sl, #0
 80209f2:	bfcc      	ite	gt
 80209f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80209f8:	ea03 0b01 	andle.w	fp, r3, r1
 80209fc:	2200      	movs	r2, #0
 80209fe:	2300      	movs	r3, #0
 8020a00:	4650      	mov	r0, sl
 8020a02:	4659      	mov	r1, fp
 8020a04:	f7e0 f860 	bl	8000ac8 <__aeabi_dcmpeq>
 8020a08:	2800      	cmp	r0, #0
 8020a0a:	d1a6      	bne.n	802095a <_strtod_l+0x562>
 8020a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a0e:	9300      	str	r3, [sp, #0]
 8020a10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020a12:	9805      	ldr	r0, [sp, #20]
 8020a14:	462b      	mov	r3, r5
 8020a16:	463a      	mov	r2, r7
 8020a18:	f7ff f8c6 	bl	801fba8 <__s2b>
 8020a1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a1e:	2800      	cmp	r0, #0
 8020a20:	f43f af05 	beq.w	802082e <_strtod_l+0x436>
 8020a24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a26:	2a00      	cmp	r2, #0
 8020a28:	eba9 0308 	sub.w	r3, r9, r8
 8020a2c:	bfa8      	it	ge
 8020a2e:	2300      	movge	r3, #0
 8020a30:	9312      	str	r3, [sp, #72]	@ 0x48
 8020a32:	2400      	movs	r4, #0
 8020a34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020a38:	9316      	str	r3, [sp, #88]	@ 0x58
 8020a3a:	46a0      	mov	r8, r4
 8020a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a3e:	9805      	ldr	r0, [sp, #20]
 8020a40:	6859      	ldr	r1, [r3, #4]
 8020a42:	f7ff f809 	bl	801fa58 <_Balloc>
 8020a46:	4681      	mov	r9, r0
 8020a48:	2800      	cmp	r0, #0
 8020a4a:	f43f aef4 	beq.w	8020836 <_strtod_l+0x43e>
 8020a4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a50:	691a      	ldr	r2, [r3, #16]
 8020a52:	3202      	adds	r2, #2
 8020a54:	f103 010c 	add.w	r1, r3, #12
 8020a58:	0092      	lsls	r2, r2, #2
 8020a5a:	300c      	adds	r0, #12
 8020a5c:	f7fe f87d 	bl	801eb5a <memcpy>
 8020a60:	ec4b ab10 	vmov	d0, sl, fp
 8020a64:	9805      	ldr	r0, [sp, #20]
 8020a66:	aa1c      	add	r2, sp, #112	@ 0x70
 8020a68:	a91b      	add	r1, sp, #108	@ 0x6c
 8020a6a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020a6e:	f7ff fbd7 	bl	8020220 <__d2b>
 8020a72:	901a      	str	r0, [sp, #104]	@ 0x68
 8020a74:	2800      	cmp	r0, #0
 8020a76:	f43f aede 	beq.w	8020836 <_strtod_l+0x43e>
 8020a7a:	9805      	ldr	r0, [sp, #20]
 8020a7c:	2101      	movs	r1, #1
 8020a7e:	f7ff f929 	bl	801fcd4 <__i2b>
 8020a82:	4680      	mov	r8, r0
 8020a84:	b948      	cbnz	r0, 8020a9a <_strtod_l+0x6a2>
 8020a86:	f04f 0800 	mov.w	r8, #0
 8020a8a:	e6d4      	b.n	8020836 <_strtod_l+0x43e>
 8020a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8020a90:	fa02 f303 	lsl.w	r3, r2, r3
 8020a94:	ea03 0a0a 	and.w	sl, r3, sl
 8020a98:	e7b0      	b.n	80209fc <_strtod_l+0x604>
 8020a9a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020a9c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020a9e:	2d00      	cmp	r5, #0
 8020aa0:	bfab      	itete	ge
 8020aa2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020aa4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020aa6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020aa8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020aaa:	bfac      	ite	ge
 8020aac:	18ef      	addge	r7, r5, r3
 8020aae:	1b5e      	sublt	r6, r3, r5
 8020ab0:	9b08      	ldr	r3, [sp, #32]
 8020ab2:	1aed      	subs	r5, r5, r3
 8020ab4:	4415      	add	r5, r2
 8020ab6:	4b66      	ldr	r3, [pc, #408]	@ (8020c50 <_strtod_l+0x858>)
 8020ab8:	3d01      	subs	r5, #1
 8020aba:	429d      	cmp	r5, r3
 8020abc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020ac0:	da50      	bge.n	8020b64 <_strtod_l+0x76c>
 8020ac2:	1b5b      	subs	r3, r3, r5
 8020ac4:	2b1f      	cmp	r3, #31
 8020ac6:	eba2 0203 	sub.w	r2, r2, r3
 8020aca:	f04f 0101 	mov.w	r1, #1
 8020ace:	dc3d      	bgt.n	8020b4c <_strtod_l+0x754>
 8020ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8020ad4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020ad6:	2300      	movs	r3, #0
 8020ad8:	9310      	str	r3, [sp, #64]	@ 0x40
 8020ada:	18bd      	adds	r5, r7, r2
 8020adc:	9b08      	ldr	r3, [sp, #32]
 8020ade:	42af      	cmp	r7, r5
 8020ae0:	4416      	add	r6, r2
 8020ae2:	441e      	add	r6, r3
 8020ae4:	463b      	mov	r3, r7
 8020ae6:	bfa8      	it	ge
 8020ae8:	462b      	movge	r3, r5
 8020aea:	42b3      	cmp	r3, r6
 8020aec:	bfa8      	it	ge
 8020aee:	4633      	movge	r3, r6
 8020af0:	2b00      	cmp	r3, #0
 8020af2:	bfc2      	ittt	gt
 8020af4:	1aed      	subgt	r5, r5, r3
 8020af6:	1af6      	subgt	r6, r6, r3
 8020af8:	1aff      	subgt	r7, r7, r3
 8020afa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	dd16      	ble.n	8020b2e <_strtod_l+0x736>
 8020b00:	4641      	mov	r1, r8
 8020b02:	9805      	ldr	r0, [sp, #20]
 8020b04:	461a      	mov	r2, r3
 8020b06:	f7ff f9a5 	bl	801fe54 <__pow5mult>
 8020b0a:	4680      	mov	r8, r0
 8020b0c:	2800      	cmp	r0, #0
 8020b0e:	d0ba      	beq.n	8020a86 <_strtod_l+0x68e>
 8020b10:	4601      	mov	r1, r0
 8020b12:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020b14:	9805      	ldr	r0, [sp, #20]
 8020b16:	f7ff f8f3 	bl	801fd00 <__multiply>
 8020b1a:	900e      	str	r0, [sp, #56]	@ 0x38
 8020b1c:	2800      	cmp	r0, #0
 8020b1e:	f43f ae8a 	beq.w	8020836 <_strtod_l+0x43e>
 8020b22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020b24:	9805      	ldr	r0, [sp, #20]
 8020b26:	f7fe ffd7 	bl	801fad8 <_Bfree>
 8020b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020b2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020b2e:	2d00      	cmp	r5, #0
 8020b30:	dc1d      	bgt.n	8020b6e <_strtod_l+0x776>
 8020b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b34:	2b00      	cmp	r3, #0
 8020b36:	dd23      	ble.n	8020b80 <_strtod_l+0x788>
 8020b38:	4649      	mov	r1, r9
 8020b3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020b3c:	9805      	ldr	r0, [sp, #20]
 8020b3e:	f7ff f989 	bl	801fe54 <__pow5mult>
 8020b42:	4681      	mov	r9, r0
 8020b44:	b9e0      	cbnz	r0, 8020b80 <_strtod_l+0x788>
 8020b46:	f04f 0900 	mov.w	r9, #0
 8020b4a:	e674      	b.n	8020836 <_strtod_l+0x43e>
 8020b4c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020b50:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020b54:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020b58:	35e2      	adds	r5, #226	@ 0xe2
 8020b5a:	fa01 f305 	lsl.w	r3, r1, r5
 8020b5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020b60:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020b62:	e7ba      	b.n	8020ada <_strtod_l+0x6e2>
 8020b64:	2300      	movs	r3, #0
 8020b66:	9310      	str	r3, [sp, #64]	@ 0x40
 8020b68:	2301      	movs	r3, #1
 8020b6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020b6c:	e7b5      	b.n	8020ada <_strtod_l+0x6e2>
 8020b6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020b70:	9805      	ldr	r0, [sp, #20]
 8020b72:	462a      	mov	r2, r5
 8020b74:	f7ff f9c8 	bl	801ff08 <__lshift>
 8020b78:	901a      	str	r0, [sp, #104]	@ 0x68
 8020b7a:	2800      	cmp	r0, #0
 8020b7c:	d1d9      	bne.n	8020b32 <_strtod_l+0x73a>
 8020b7e:	e65a      	b.n	8020836 <_strtod_l+0x43e>
 8020b80:	2e00      	cmp	r6, #0
 8020b82:	dd07      	ble.n	8020b94 <_strtod_l+0x79c>
 8020b84:	4649      	mov	r1, r9
 8020b86:	9805      	ldr	r0, [sp, #20]
 8020b88:	4632      	mov	r2, r6
 8020b8a:	f7ff f9bd 	bl	801ff08 <__lshift>
 8020b8e:	4681      	mov	r9, r0
 8020b90:	2800      	cmp	r0, #0
 8020b92:	d0d8      	beq.n	8020b46 <_strtod_l+0x74e>
 8020b94:	2f00      	cmp	r7, #0
 8020b96:	dd08      	ble.n	8020baa <_strtod_l+0x7b2>
 8020b98:	4641      	mov	r1, r8
 8020b9a:	9805      	ldr	r0, [sp, #20]
 8020b9c:	463a      	mov	r2, r7
 8020b9e:	f7ff f9b3 	bl	801ff08 <__lshift>
 8020ba2:	4680      	mov	r8, r0
 8020ba4:	2800      	cmp	r0, #0
 8020ba6:	f43f ae46 	beq.w	8020836 <_strtod_l+0x43e>
 8020baa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020bac:	9805      	ldr	r0, [sp, #20]
 8020bae:	464a      	mov	r2, r9
 8020bb0:	f7ff fa32 	bl	8020018 <__mdiff>
 8020bb4:	4604      	mov	r4, r0
 8020bb6:	2800      	cmp	r0, #0
 8020bb8:	f43f ae3d 	beq.w	8020836 <_strtod_l+0x43e>
 8020bbc:	68c3      	ldr	r3, [r0, #12]
 8020bbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020bc0:	2300      	movs	r3, #0
 8020bc2:	60c3      	str	r3, [r0, #12]
 8020bc4:	4641      	mov	r1, r8
 8020bc6:	f7ff fa0b 	bl	801ffe0 <__mcmp>
 8020bca:	2800      	cmp	r0, #0
 8020bcc:	da46      	bge.n	8020c5c <_strtod_l+0x864>
 8020bce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020bd0:	ea53 030a 	orrs.w	r3, r3, sl
 8020bd4:	d16c      	bne.n	8020cb0 <_strtod_l+0x8b8>
 8020bd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	d168      	bne.n	8020cb0 <_strtod_l+0x8b8>
 8020bde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020be2:	0d1b      	lsrs	r3, r3, #20
 8020be4:	051b      	lsls	r3, r3, #20
 8020be6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020bea:	d961      	bls.n	8020cb0 <_strtod_l+0x8b8>
 8020bec:	6963      	ldr	r3, [r4, #20]
 8020bee:	b913      	cbnz	r3, 8020bf6 <_strtod_l+0x7fe>
 8020bf0:	6923      	ldr	r3, [r4, #16]
 8020bf2:	2b01      	cmp	r3, #1
 8020bf4:	dd5c      	ble.n	8020cb0 <_strtod_l+0x8b8>
 8020bf6:	4621      	mov	r1, r4
 8020bf8:	2201      	movs	r2, #1
 8020bfa:	9805      	ldr	r0, [sp, #20]
 8020bfc:	f7ff f984 	bl	801ff08 <__lshift>
 8020c00:	4641      	mov	r1, r8
 8020c02:	4604      	mov	r4, r0
 8020c04:	f7ff f9ec 	bl	801ffe0 <__mcmp>
 8020c08:	2800      	cmp	r0, #0
 8020c0a:	dd51      	ble.n	8020cb0 <_strtod_l+0x8b8>
 8020c0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020c10:	9a08      	ldr	r2, [sp, #32]
 8020c12:	0d1b      	lsrs	r3, r3, #20
 8020c14:	051b      	lsls	r3, r3, #20
 8020c16:	2a00      	cmp	r2, #0
 8020c18:	d06b      	beq.n	8020cf2 <_strtod_l+0x8fa>
 8020c1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020c1e:	d868      	bhi.n	8020cf2 <_strtod_l+0x8fa>
 8020c20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020c24:	f67f ae9d 	bls.w	8020962 <_strtod_l+0x56a>
 8020c28:	4b0a      	ldr	r3, [pc, #40]	@ (8020c54 <_strtod_l+0x85c>)
 8020c2a:	4650      	mov	r0, sl
 8020c2c:	4659      	mov	r1, fp
 8020c2e:	2200      	movs	r2, #0
 8020c30:	f7df fce2 	bl	80005f8 <__aeabi_dmul>
 8020c34:	4b08      	ldr	r3, [pc, #32]	@ (8020c58 <_strtod_l+0x860>)
 8020c36:	400b      	ands	r3, r1
 8020c38:	4682      	mov	sl, r0
 8020c3a:	468b      	mov	fp, r1
 8020c3c:	2b00      	cmp	r3, #0
 8020c3e:	f47f ae05 	bne.w	802084c <_strtod_l+0x454>
 8020c42:	9a05      	ldr	r2, [sp, #20]
 8020c44:	2322      	movs	r3, #34	@ 0x22
 8020c46:	6013      	str	r3, [r2, #0]
 8020c48:	e600      	b.n	802084c <_strtod_l+0x454>
 8020c4a:	bf00      	nop
 8020c4c:	08026690 	.word	0x08026690
 8020c50:	fffffc02 	.word	0xfffffc02
 8020c54:	39500000 	.word	0x39500000
 8020c58:	7ff00000 	.word	0x7ff00000
 8020c5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020c60:	d165      	bne.n	8020d2e <_strtod_l+0x936>
 8020c62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020c68:	b35a      	cbz	r2, 8020cc2 <_strtod_l+0x8ca>
 8020c6a:	4a9f      	ldr	r2, [pc, #636]	@ (8020ee8 <_strtod_l+0xaf0>)
 8020c6c:	4293      	cmp	r3, r2
 8020c6e:	d12b      	bne.n	8020cc8 <_strtod_l+0x8d0>
 8020c70:	9b08      	ldr	r3, [sp, #32]
 8020c72:	4651      	mov	r1, sl
 8020c74:	b303      	cbz	r3, 8020cb8 <_strtod_l+0x8c0>
 8020c76:	4b9d      	ldr	r3, [pc, #628]	@ (8020eec <_strtod_l+0xaf4>)
 8020c78:	465a      	mov	r2, fp
 8020c7a:	4013      	ands	r3, r2
 8020c7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020c80:	f04f 32ff 	mov.w	r2, #4294967295
 8020c84:	d81b      	bhi.n	8020cbe <_strtod_l+0x8c6>
 8020c86:	0d1b      	lsrs	r3, r3, #20
 8020c88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8020c90:	4299      	cmp	r1, r3
 8020c92:	d119      	bne.n	8020cc8 <_strtod_l+0x8d0>
 8020c94:	4b96      	ldr	r3, [pc, #600]	@ (8020ef0 <_strtod_l+0xaf8>)
 8020c96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020c98:	429a      	cmp	r2, r3
 8020c9a:	d102      	bne.n	8020ca2 <_strtod_l+0x8aa>
 8020c9c:	3101      	adds	r1, #1
 8020c9e:	f43f adca 	beq.w	8020836 <_strtod_l+0x43e>
 8020ca2:	4b92      	ldr	r3, [pc, #584]	@ (8020eec <_strtod_l+0xaf4>)
 8020ca4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ca6:	401a      	ands	r2, r3
 8020ca8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020cac:	f04f 0a00 	mov.w	sl, #0
 8020cb0:	9b08      	ldr	r3, [sp, #32]
 8020cb2:	2b00      	cmp	r3, #0
 8020cb4:	d1b8      	bne.n	8020c28 <_strtod_l+0x830>
 8020cb6:	e5c9      	b.n	802084c <_strtod_l+0x454>
 8020cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8020cbc:	e7e8      	b.n	8020c90 <_strtod_l+0x898>
 8020cbe:	4613      	mov	r3, r2
 8020cc0:	e7e6      	b.n	8020c90 <_strtod_l+0x898>
 8020cc2:	ea53 030a 	orrs.w	r3, r3, sl
 8020cc6:	d0a1      	beq.n	8020c0c <_strtod_l+0x814>
 8020cc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020cca:	b1db      	cbz	r3, 8020d04 <_strtod_l+0x90c>
 8020ccc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020cce:	4213      	tst	r3, r2
 8020cd0:	d0ee      	beq.n	8020cb0 <_strtod_l+0x8b8>
 8020cd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cd4:	9a08      	ldr	r2, [sp, #32]
 8020cd6:	4650      	mov	r0, sl
 8020cd8:	4659      	mov	r1, fp
 8020cda:	b1bb      	cbz	r3, 8020d0c <_strtod_l+0x914>
 8020cdc:	f7ff fb6e 	bl	80203bc <sulp>
 8020ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020ce4:	ec53 2b10 	vmov	r2, r3, d0
 8020ce8:	f7df fad0 	bl	800028c <__adddf3>
 8020cec:	4682      	mov	sl, r0
 8020cee:	468b      	mov	fp, r1
 8020cf0:	e7de      	b.n	8020cb0 <_strtod_l+0x8b8>
 8020cf2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8020cf6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020cfa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020cfe:	f04f 3aff 	mov.w	sl, #4294967295
 8020d02:	e7d5      	b.n	8020cb0 <_strtod_l+0x8b8>
 8020d04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020d06:	ea13 0f0a 	tst.w	r3, sl
 8020d0a:	e7e1      	b.n	8020cd0 <_strtod_l+0x8d8>
 8020d0c:	f7ff fb56 	bl	80203bc <sulp>
 8020d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020d14:	ec53 2b10 	vmov	r2, r3, d0
 8020d18:	f7df fab6 	bl	8000288 <__aeabi_dsub>
 8020d1c:	2200      	movs	r2, #0
 8020d1e:	2300      	movs	r3, #0
 8020d20:	4682      	mov	sl, r0
 8020d22:	468b      	mov	fp, r1
 8020d24:	f7df fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8020d28:	2800      	cmp	r0, #0
 8020d2a:	d0c1      	beq.n	8020cb0 <_strtod_l+0x8b8>
 8020d2c:	e619      	b.n	8020962 <_strtod_l+0x56a>
 8020d2e:	4641      	mov	r1, r8
 8020d30:	4620      	mov	r0, r4
 8020d32:	f7ff facd 	bl	80202d0 <__ratio>
 8020d36:	ec57 6b10 	vmov	r6, r7, d0
 8020d3a:	2200      	movs	r2, #0
 8020d3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020d40:	4630      	mov	r0, r6
 8020d42:	4639      	mov	r1, r7
 8020d44:	f7df fed4 	bl	8000af0 <__aeabi_dcmple>
 8020d48:	2800      	cmp	r0, #0
 8020d4a:	d06f      	beq.n	8020e2c <_strtod_l+0xa34>
 8020d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d17a      	bne.n	8020e48 <_strtod_l+0xa50>
 8020d52:	f1ba 0f00 	cmp.w	sl, #0
 8020d56:	d158      	bne.n	8020e0a <_strtod_l+0xa12>
 8020d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d15a      	bne.n	8020e18 <_strtod_l+0xa20>
 8020d62:	4b64      	ldr	r3, [pc, #400]	@ (8020ef4 <_strtod_l+0xafc>)
 8020d64:	2200      	movs	r2, #0
 8020d66:	4630      	mov	r0, r6
 8020d68:	4639      	mov	r1, r7
 8020d6a:	f7df feb7 	bl	8000adc <__aeabi_dcmplt>
 8020d6e:	2800      	cmp	r0, #0
 8020d70:	d159      	bne.n	8020e26 <_strtod_l+0xa2e>
 8020d72:	4630      	mov	r0, r6
 8020d74:	4639      	mov	r1, r7
 8020d76:	4b60      	ldr	r3, [pc, #384]	@ (8020ef8 <_strtod_l+0xb00>)
 8020d78:	2200      	movs	r2, #0
 8020d7a:	f7df fc3d 	bl	80005f8 <__aeabi_dmul>
 8020d7e:	4606      	mov	r6, r0
 8020d80:	460f      	mov	r7, r1
 8020d82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020d86:	9606      	str	r6, [sp, #24]
 8020d88:	9307      	str	r3, [sp, #28]
 8020d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020d8e:	4d57      	ldr	r5, [pc, #348]	@ (8020eec <_strtod_l+0xaf4>)
 8020d90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d96:	401d      	ands	r5, r3
 8020d98:	4b58      	ldr	r3, [pc, #352]	@ (8020efc <_strtod_l+0xb04>)
 8020d9a:	429d      	cmp	r5, r3
 8020d9c:	f040 80b2 	bne.w	8020f04 <_strtod_l+0xb0c>
 8020da0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020da2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020da6:	ec4b ab10 	vmov	d0, sl, fp
 8020daa:	f7ff f9c9 	bl	8020140 <__ulp>
 8020dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020db2:	ec51 0b10 	vmov	r0, r1, d0
 8020db6:	f7df fc1f 	bl	80005f8 <__aeabi_dmul>
 8020dba:	4652      	mov	r2, sl
 8020dbc:	465b      	mov	r3, fp
 8020dbe:	f7df fa65 	bl	800028c <__adddf3>
 8020dc2:	460b      	mov	r3, r1
 8020dc4:	4949      	ldr	r1, [pc, #292]	@ (8020eec <_strtod_l+0xaf4>)
 8020dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8020f00 <_strtod_l+0xb08>)
 8020dc8:	4019      	ands	r1, r3
 8020dca:	4291      	cmp	r1, r2
 8020dcc:	4682      	mov	sl, r0
 8020dce:	d942      	bls.n	8020e56 <_strtod_l+0xa5e>
 8020dd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020dd2:	4b47      	ldr	r3, [pc, #284]	@ (8020ef0 <_strtod_l+0xaf8>)
 8020dd4:	429a      	cmp	r2, r3
 8020dd6:	d103      	bne.n	8020de0 <_strtod_l+0x9e8>
 8020dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020dda:	3301      	adds	r3, #1
 8020ddc:	f43f ad2b 	beq.w	8020836 <_strtod_l+0x43e>
 8020de0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8020ef0 <_strtod_l+0xaf8>
 8020de4:	f04f 3aff 	mov.w	sl, #4294967295
 8020de8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020dea:	9805      	ldr	r0, [sp, #20]
 8020dec:	f7fe fe74 	bl	801fad8 <_Bfree>
 8020df0:	9805      	ldr	r0, [sp, #20]
 8020df2:	4649      	mov	r1, r9
 8020df4:	f7fe fe70 	bl	801fad8 <_Bfree>
 8020df8:	9805      	ldr	r0, [sp, #20]
 8020dfa:	4641      	mov	r1, r8
 8020dfc:	f7fe fe6c 	bl	801fad8 <_Bfree>
 8020e00:	9805      	ldr	r0, [sp, #20]
 8020e02:	4621      	mov	r1, r4
 8020e04:	f7fe fe68 	bl	801fad8 <_Bfree>
 8020e08:	e618      	b.n	8020a3c <_strtod_l+0x644>
 8020e0a:	f1ba 0f01 	cmp.w	sl, #1
 8020e0e:	d103      	bne.n	8020e18 <_strtod_l+0xa20>
 8020e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	f43f ada5 	beq.w	8020962 <_strtod_l+0x56a>
 8020e18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8020ec8 <_strtod_l+0xad0>
 8020e1c:	4f35      	ldr	r7, [pc, #212]	@ (8020ef4 <_strtod_l+0xafc>)
 8020e1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020e22:	2600      	movs	r6, #0
 8020e24:	e7b1      	b.n	8020d8a <_strtod_l+0x992>
 8020e26:	4f34      	ldr	r7, [pc, #208]	@ (8020ef8 <_strtod_l+0xb00>)
 8020e28:	2600      	movs	r6, #0
 8020e2a:	e7aa      	b.n	8020d82 <_strtod_l+0x98a>
 8020e2c:	4b32      	ldr	r3, [pc, #200]	@ (8020ef8 <_strtod_l+0xb00>)
 8020e2e:	4630      	mov	r0, r6
 8020e30:	4639      	mov	r1, r7
 8020e32:	2200      	movs	r2, #0
 8020e34:	f7df fbe0 	bl	80005f8 <__aeabi_dmul>
 8020e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e3a:	4606      	mov	r6, r0
 8020e3c:	460f      	mov	r7, r1
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d09f      	beq.n	8020d82 <_strtod_l+0x98a>
 8020e42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8020e46:	e7a0      	b.n	8020d8a <_strtod_l+0x992>
 8020e48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8020ed0 <_strtod_l+0xad8>
 8020e4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020e50:	ec57 6b17 	vmov	r6, r7, d7
 8020e54:	e799      	b.n	8020d8a <_strtod_l+0x992>
 8020e56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8020e5a:	9b08      	ldr	r3, [sp, #32]
 8020e5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d1c1      	bne.n	8020de8 <_strtod_l+0x9f0>
 8020e64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020e68:	0d1b      	lsrs	r3, r3, #20
 8020e6a:	051b      	lsls	r3, r3, #20
 8020e6c:	429d      	cmp	r5, r3
 8020e6e:	d1bb      	bne.n	8020de8 <_strtod_l+0x9f0>
 8020e70:	4630      	mov	r0, r6
 8020e72:	4639      	mov	r1, r7
 8020e74:	f7df ff20 	bl	8000cb8 <__aeabi_d2lz>
 8020e78:	f7df fb90 	bl	800059c <__aeabi_l2d>
 8020e7c:	4602      	mov	r2, r0
 8020e7e:	460b      	mov	r3, r1
 8020e80:	4630      	mov	r0, r6
 8020e82:	4639      	mov	r1, r7
 8020e84:	f7df fa00 	bl	8000288 <__aeabi_dsub>
 8020e88:	460b      	mov	r3, r1
 8020e8a:	4602      	mov	r2, r0
 8020e8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8020e90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8020e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e96:	ea46 060a 	orr.w	r6, r6, sl
 8020e9a:	431e      	orrs	r6, r3
 8020e9c:	d06f      	beq.n	8020f7e <_strtod_l+0xb86>
 8020e9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8020ed8 <_strtod_l+0xae0>)
 8020ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ea4:	f7df fe1a 	bl	8000adc <__aeabi_dcmplt>
 8020ea8:	2800      	cmp	r0, #0
 8020eaa:	f47f accf 	bne.w	802084c <_strtod_l+0x454>
 8020eae:	a30c      	add	r3, pc, #48	@ (adr r3, 8020ee0 <_strtod_l+0xae8>)
 8020eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020eb8:	f7df fe2e 	bl	8000b18 <__aeabi_dcmpgt>
 8020ebc:	2800      	cmp	r0, #0
 8020ebe:	d093      	beq.n	8020de8 <_strtod_l+0x9f0>
 8020ec0:	e4c4      	b.n	802084c <_strtod_l+0x454>
 8020ec2:	bf00      	nop
 8020ec4:	f3af 8000 	nop.w
 8020ec8:	00000000 	.word	0x00000000
 8020ecc:	bff00000 	.word	0xbff00000
 8020ed0:	00000000 	.word	0x00000000
 8020ed4:	3ff00000 	.word	0x3ff00000
 8020ed8:	94a03595 	.word	0x94a03595
 8020edc:	3fdfffff 	.word	0x3fdfffff
 8020ee0:	35afe535 	.word	0x35afe535
 8020ee4:	3fe00000 	.word	0x3fe00000
 8020ee8:	000fffff 	.word	0x000fffff
 8020eec:	7ff00000 	.word	0x7ff00000
 8020ef0:	7fefffff 	.word	0x7fefffff
 8020ef4:	3ff00000 	.word	0x3ff00000
 8020ef8:	3fe00000 	.word	0x3fe00000
 8020efc:	7fe00000 	.word	0x7fe00000
 8020f00:	7c9fffff 	.word	0x7c9fffff
 8020f04:	9b08      	ldr	r3, [sp, #32]
 8020f06:	b323      	cbz	r3, 8020f52 <_strtod_l+0xb5a>
 8020f08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8020f0c:	d821      	bhi.n	8020f52 <_strtod_l+0xb5a>
 8020f0e:	a328      	add	r3, pc, #160	@ (adr r3, 8020fb0 <_strtod_l+0xbb8>)
 8020f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f14:	4630      	mov	r0, r6
 8020f16:	4639      	mov	r1, r7
 8020f18:	f7df fdea 	bl	8000af0 <__aeabi_dcmple>
 8020f1c:	b1a0      	cbz	r0, 8020f48 <_strtod_l+0xb50>
 8020f1e:	4639      	mov	r1, r7
 8020f20:	4630      	mov	r0, r6
 8020f22:	f7df fe41 	bl	8000ba8 <__aeabi_d2uiz>
 8020f26:	2801      	cmp	r0, #1
 8020f28:	bf38      	it	cc
 8020f2a:	2001      	movcc	r0, #1
 8020f2c:	f7df faea 	bl	8000504 <__aeabi_ui2d>
 8020f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f32:	4606      	mov	r6, r0
 8020f34:	460f      	mov	r7, r1
 8020f36:	b9fb      	cbnz	r3, 8020f78 <_strtod_l+0xb80>
 8020f38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020f3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8020f3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8020f40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8020f44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020f48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020f4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8020f4e:	1b5b      	subs	r3, r3, r5
 8020f50:	9311      	str	r3, [sp, #68]	@ 0x44
 8020f52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8020f56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8020f5a:	f7ff f8f1 	bl	8020140 <__ulp>
 8020f5e:	4650      	mov	r0, sl
 8020f60:	ec53 2b10 	vmov	r2, r3, d0
 8020f64:	4659      	mov	r1, fp
 8020f66:	f7df fb47 	bl	80005f8 <__aeabi_dmul>
 8020f6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8020f6e:	f7df f98d 	bl	800028c <__adddf3>
 8020f72:	4682      	mov	sl, r0
 8020f74:	468b      	mov	fp, r1
 8020f76:	e770      	b.n	8020e5a <_strtod_l+0xa62>
 8020f78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8020f7c:	e7e0      	b.n	8020f40 <_strtod_l+0xb48>
 8020f7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8020fb8 <_strtod_l+0xbc0>)
 8020f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f84:	f7df fdaa 	bl	8000adc <__aeabi_dcmplt>
 8020f88:	e798      	b.n	8020ebc <_strtod_l+0xac4>
 8020f8a:	2300      	movs	r3, #0
 8020f8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020f8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020f90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020f92:	6013      	str	r3, [r2, #0]
 8020f94:	f7ff ba6d 	b.w	8020472 <_strtod_l+0x7a>
 8020f98:	2a65      	cmp	r2, #101	@ 0x65
 8020f9a:	f43f ab66 	beq.w	802066a <_strtod_l+0x272>
 8020f9e:	2a45      	cmp	r2, #69	@ 0x45
 8020fa0:	f43f ab63 	beq.w	802066a <_strtod_l+0x272>
 8020fa4:	2301      	movs	r3, #1
 8020fa6:	f7ff bb9e 	b.w	80206e6 <_strtod_l+0x2ee>
 8020faa:	bf00      	nop
 8020fac:	f3af 8000 	nop.w
 8020fb0:	ffc00000 	.word	0xffc00000
 8020fb4:	41dfffff 	.word	0x41dfffff
 8020fb8:	94a03595 	.word	0x94a03595
 8020fbc:	3fcfffff 	.word	0x3fcfffff

08020fc0 <_strtod_r>:
 8020fc0:	4b01      	ldr	r3, [pc, #4]	@ (8020fc8 <_strtod_r+0x8>)
 8020fc2:	f7ff ba19 	b.w	80203f8 <_strtod_l>
 8020fc6:	bf00      	nop
 8020fc8:	200000a4 	.word	0x200000a4

08020fcc <__ssputs_r>:
 8020fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020fd0:	688e      	ldr	r6, [r1, #8]
 8020fd2:	461f      	mov	r7, r3
 8020fd4:	42be      	cmp	r6, r7
 8020fd6:	680b      	ldr	r3, [r1, #0]
 8020fd8:	4682      	mov	sl, r0
 8020fda:	460c      	mov	r4, r1
 8020fdc:	4690      	mov	r8, r2
 8020fde:	d82d      	bhi.n	802103c <__ssputs_r+0x70>
 8020fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020fe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020fe8:	d026      	beq.n	8021038 <__ssputs_r+0x6c>
 8020fea:	6965      	ldr	r5, [r4, #20]
 8020fec:	6909      	ldr	r1, [r1, #16]
 8020fee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020ff2:	eba3 0901 	sub.w	r9, r3, r1
 8020ff6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020ffa:	1c7b      	adds	r3, r7, #1
 8020ffc:	444b      	add	r3, r9
 8020ffe:	106d      	asrs	r5, r5, #1
 8021000:	429d      	cmp	r5, r3
 8021002:	bf38      	it	cc
 8021004:	461d      	movcc	r5, r3
 8021006:	0553      	lsls	r3, r2, #21
 8021008:	d527      	bpl.n	802105a <__ssputs_r+0x8e>
 802100a:	4629      	mov	r1, r5
 802100c:	f7fe fc98 	bl	801f940 <_malloc_r>
 8021010:	4606      	mov	r6, r0
 8021012:	b360      	cbz	r0, 802106e <__ssputs_r+0xa2>
 8021014:	6921      	ldr	r1, [r4, #16]
 8021016:	464a      	mov	r2, r9
 8021018:	f7fd fd9f 	bl	801eb5a <memcpy>
 802101c:	89a3      	ldrh	r3, [r4, #12]
 802101e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021026:	81a3      	strh	r3, [r4, #12]
 8021028:	6126      	str	r6, [r4, #16]
 802102a:	6165      	str	r5, [r4, #20]
 802102c:	444e      	add	r6, r9
 802102e:	eba5 0509 	sub.w	r5, r5, r9
 8021032:	6026      	str	r6, [r4, #0]
 8021034:	60a5      	str	r5, [r4, #8]
 8021036:	463e      	mov	r6, r7
 8021038:	42be      	cmp	r6, r7
 802103a:	d900      	bls.n	802103e <__ssputs_r+0x72>
 802103c:	463e      	mov	r6, r7
 802103e:	6820      	ldr	r0, [r4, #0]
 8021040:	4632      	mov	r2, r6
 8021042:	4641      	mov	r1, r8
 8021044:	f7fd fc6d 	bl	801e922 <memmove>
 8021048:	68a3      	ldr	r3, [r4, #8]
 802104a:	1b9b      	subs	r3, r3, r6
 802104c:	60a3      	str	r3, [r4, #8]
 802104e:	6823      	ldr	r3, [r4, #0]
 8021050:	4433      	add	r3, r6
 8021052:	6023      	str	r3, [r4, #0]
 8021054:	2000      	movs	r0, #0
 8021056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802105a:	462a      	mov	r2, r5
 802105c:	f000 fe75 	bl	8021d4a <_realloc_r>
 8021060:	4606      	mov	r6, r0
 8021062:	2800      	cmp	r0, #0
 8021064:	d1e0      	bne.n	8021028 <__ssputs_r+0x5c>
 8021066:	6921      	ldr	r1, [r4, #16]
 8021068:	4650      	mov	r0, sl
 802106a:	f7fe fbf5 	bl	801f858 <_free_r>
 802106e:	230c      	movs	r3, #12
 8021070:	f8ca 3000 	str.w	r3, [sl]
 8021074:	89a3      	ldrh	r3, [r4, #12]
 8021076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802107a:	81a3      	strh	r3, [r4, #12]
 802107c:	f04f 30ff 	mov.w	r0, #4294967295
 8021080:	e7e9      	b.n	8021056 <__ssputs_r+0x8a>
	...

08021084 <_svfiprintf_r>:
 8021084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021088:	4698      	mov	r8, r3
 802108a:	898b      	ldrh	r3, [r1, #12]
 802108c:	061b      	lsls	r3, r3, #24
 802108e:	b09d      	sub	sp, #116	@ 0x74
 8021090:	4607      	mov	r7, r0
 8021092:	460d      	mov	r5, r1
 8021094:	4614      	mov	r4, r2
 8021096:	d510      	bpl.n	80210ba <_svfiprintf_r+0x36>
 8021098:	690b      	ldr	r3, [r1, #16]
 802109a:	b973      	cbnz	r3, 80210ba <_svfiprintf_r+0x36>
 802109c:	2140      	movs	r1, #64	@ 0x40
 802109e:	f7fe fc4f 	bl	801f940 <_malloc_r>
 80210a2:	6028      	str	r0, [r5, #0]
 80210a4:	6128      	str	r0, [r5, #16]
 80210a6:	b930      	cbnz	r0, 80210b6 <_svfiprintf_r+0x32>
 80210a8:	230c      	movs	r3, #12
 80210aa:	603b      	str	r3, [r7, #0]
 80210ac:	f04f 30ff 	mov.w	r0, #4294967295
 80210b0:	b01d      	add	sp, #116	@ 0x74
 80210b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210b6:	2340      	movs	r3, #64	@ 0x40
 80210b8:	616b      	str	r3, [r5, #20]
 80210ba:	2300      	movs	r3, #0
 80210bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80210be:	2320      	movs	r3, #32
 80210c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80210c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80210c8:	2330      	movs	r3, #48	@ 0x30
 80210ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021268 <_svfiprintf_r+0x1e4>
 80210ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80210d2:	f04f 0901 	mov.w	r9, #1
 80210d6:	4623      	mov	r3, r4
 80210d8:	469a      	mov	sl, r3
 80210da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80210de:	b10a      	cbz	r2, 80210e4 <_svfiprintf_r+0x60>
 80210e0:	2a25      	cmp	r2, #37	@ 0x25
 80210e2:	d1f9      	bne.n	80210d8 <_svfiprintf_r+0x54>
 80210e4:	ebba 0b04 	subs.w	fp, sl, r4
 80210e8:	d00b      	beq.n	8021102 <_svfiprintf_r+0x7e>
 80210ea:	465b      	mov	r3, fp
 80210ec:	4622      	mov	r2, r4
 80210ee:	4629      	mov	r1, r5
 80210f0:	4638      	mov	r0, r7
 80210f2:	f7ff ff6b 	bl	8020fcc <__ssputs_r>
 80210f6:	3001      	adds	r0, #1
 80210f8:	f000 80a7 	beq.w	802124a <_svfiprintf_r+0x1c6>
 80210fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80210fe:	445a      	add	r2, fp
 8021100:	9209      	str	r2, [sp, #36]	@ 0x24
 8021102:	f89a 3000 	ldrb.w	r3, [sl]
 8021106:	2b00      	cmp	r3, #0
 8021108:	f000 809f 	beq.w	802124a <_svfiprintf_r+0x1c6>
 802110c:	2300      	movs	r3, #0
 802110e:	f04f 32ff 	mov.w	r2, #4294967295
 8021112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021116:	f10a 0a01 	add.w	sl, sl, #1
 802111a:	9304      	str	r3, [sp, #16]
 802111c:	9307      	str	r3, [sp, #28]
 802111e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021122:	931a      	str	r3, [sp, #104]	@ 0x68
 8021124:	4654      	mov	r4, sl
 8021126:	2205      	movs	r2, #5
 8021128:	f814 1b01 	ldrb.w	r1, [r4], #1
 802112c:	484e      	ldr	r0, [pc, #312]	@ (8021268 <_svfiprintf_r+0x1e4>)
 802112e:	f7df f84f 	bl	80001d0 <memchr>
 8021132:	9a04      	ldr	r2, [sp, #16]
 8021134:	b9d8      	cbnz	r0, 802116e <_svfiprintf_r+0xea>
 8021136:	06d0      	lsls	r0, r2, #27
 8021138:	bf44      	itt	mi
 802113a:	2320      	movmi	r3, #32
 802113c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021140:	0711      	lsls	r1, r2, #28
 8021142:	bf44      	itt	mi
 8021144:	232b      	movmi	r3, #43	@ 0x2b
 8021146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802114a:	f89a 3000 	ldrb.w	r3, [sl]
 802114e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021150:	d015      	beq.n	802117e <_svfiprintf_r+0xfa>
 8021152:	9a07      	ldr	r2, [sp, #28]
 8021154:	4654      	mov	r4, sl
 8021156:	2000      	movs	r0, #0
 8021158:	f04f 0c0a 	mov.w	ip, #10
 802115c:	4621      	mov	r1, r4
 802115e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021162:	3b30      	subs	r3, #48	@ 0x30
 8021164:	2b09      	cmp	r3, #9
 8021166:	d94b      	bls.n	8021200 <_svfiprintf_r+0x17c>
 8021168:	b1b0      	cbz	r0, 8021198 <_svfiprintf_r+0x114>
 802116a:	9207      	str	r2, [sp, #28]
 802116c:	e014      	b.n	8021198 <_svfiprintf_r+0x114>
 802116e:	eba0 0308 	sub.w	r3, r0, r8
 8021172:	fa09 f303 	lsl.w	r3, r9, r3
 8021176:	4313      	orrs	r3, r2
 8021178:	9304      	str	r3, [sp, #16]
 802117a:	46a2      	mov	sl, r4
 802117c:	e7d2      	b.n	8021124 <_svfiprintf_r+0xa0>
 802117e:	9b03      	ldr	r3, [sp, #12]
 8021180:	1d19      	adds	r1, r3, #4
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	9103      	str	r1, [sp, #12]
 8021186:	2b00      	cmp	r3, #0
 8021188:	bfbb      	ittet	lt
 802118a:	425b      	neglt	r3, r3
 802118c:	f042 0202 	orrlt.w	r2, r2, #2
 8021190:	9307      	strge	r3, [sp, #28]
 8021192:	9307      	strlt	r3, [sp, #28]
 8021194:	bfb8      	it	lt
 8021196:	9204      	strlt	r2, [sp, #16]
 8021198:	7823      	ldrb	r3, [r4, #0]
 802119a:	2b2e      	cmp	r3, #46	@ 0x2e
 802119c:	d10a      	bne.n	80211b4 <_svfiprintf_r+0x130>
 802119e:	7863      	ldrb	r3, [r4, #1]
 80211a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80211a2:	d132      	bne.n	802120a <_svfiprintf_r+0x186>
 80211a4:	9b03      	ldr	r3, [sp, #12]
 80211a6:	1d1a      	adds	r2, r3, #4
 80211a8:	681b      	ldr	r3, [r3, #0]
 80211aa:	9203      	str	r2, [sp, #12]
 80211ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80211b0:	3402      	adds	r4, #2
 80211b2:	9305      	str	r3, [sp, #20]
 80211b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021278 <_svfiprintf_r+0x1f4>
 80211b8:	7821      	ldrb	r1, [r4, #0]
 80211ba:	2203      	movs	r2, #3
 80211bc:	4650      	mov	r0, sl
 80211be:	f7df f807 	bl	80001d0 <memchr>
 80211c2:	b138      	cbz	r0, 80211d4 <_svfiprintf_r+0x150>
 80211c4:	9b04      	ldr	r3, [sp, #16]
 80211c6:	eba0 000a 	sub.w	r0, r0, sl
 80211ca:	2240      	movs	r2, #64	@ 0x40
 80211cc:	4082      	lsls	r2, r0
 80211ce:	4313      	orrs	r3, r2
 80211d0:	3401      	adds	r4, #1
 80211d2:	9304      	str	r3, [sp, #16]
 80211d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80211d8:	4824      	ldr	r0, [pc, #144]	@ (802126c <_svfiprintf_r+0x1e8>)
 80211da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80211de:	2206      	movs	r2, #6
 80211e0:	f7de fff6 	bl	80001d0 <memchr>
 80211e4:	2800      	cmp	r0, #0
 80211e6:	d036      	beq.n	8021256 <_svfiprintf_r+0x1d2>
 80211e8:	4b21      	ldr	r3, [pc, #132]	@ (8021270 <_svfiprintf_r+0x1ec>)
 80211ea:	bb1b      	cbnz	r3, 8021234 <_svfiprintf_r+0x1b0>
 80211ec:	9b03      	ldr	r3, [sp, #12]
 80211ee:	3307      	adds	r3, #7
 80211f0:	f023 0307 	bic.w	r3, r3, #7
 80211f4:	3308      	adds	r3, #8
 80211f6:	9303      	str	r3, [sp, #12]
 80211f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80211fa:	4433      	add	r3, r6
 80211fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80211fe:	e76a      	b.n	80210d6 <_svfiprintf_r+0x52>
 8021200:	fb0c 3202 	mla	r2, ip, r2, r3
 8021204:	460c      	mov	r4, r1
 8021206:	2001      	movs	r0, #1
 8021208:	e7a8      	b.n	802115c <_svfiprintf_r+0xd8>
 802120a:	2300      	movs	r3, #0
 802120c:	3401      	adds	r4, #1
 802120e:	9305      	str	r3, [sp, #20]
 8021210:	4619      	mov	r1, r3
 8021212:	f04f 0c0a 	mov.w	ip, #10
 8021216:	4620      	mov	r0, r4
 8021218:	f810 2b01 	ldrb.w	r2, [r0], #1
 802121c:	3a30      	subs	r2, #48	@ 0x30
 802121e:	2a09      	cmp	r2, #9
 8021220:	d903      	bls.n	802122a <_svfiprintf_r+0x1a6>
 8021222:	2b00      	cmp	r3, #0
 8021224:	d0c6      	beq.n	80211b4 <_svfiprintf_r+0x130>
 8021226:	9105      	str	r1, [sp, #20]
 8021228:	e7c4      	b.n	80211b4 <_svfiprintf_r+0x130>
 802122a:	fb0c 2101 	mla	r1, ip, r1, r2
 802122e:	4604      	mov	r4, r0
 8021230:	2301      	movs	r3, #1
 8021232:	e7f0      	b.n	8021216 <_svfiprintf_r+0x192>
 8021234:	ab03      	add	r3, sp, #12
 8021236:	9300      	str	r3, [sp, #0]
 8021238:	462a      	mov	r2, r5
 802123a:	4b0e      	ldr	r3, [pc, #56]	@ (8021274 <_svfiprintf_r+0x1f0>)
 802123c:	a904      	add	r1, sp, #16
 802123e:	4638      	mov	r0, r7
 8021240:	f7fc fb9c 	bl	801d97c <_printf_float>
 8021244:	1c42      	adds	r2, r0, #1
 8021246:	4606      	mov	r6, r0
 8021248:	d1d6      	bne.n	80211f8 <_svfiprintf_r+0x174>
 802124a:	89ab      	ldrh	r3, [r5, #12]
 802124c:	065b      	lsls	r3, r3, #25
 802124e:	f53f af2d 	bmi.w	80210ac <_svfiprintf_r+0x28>
 8021252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021254:	e72c      	b.n	80210b0 <_svfiprintf_r+0x2c>
 8021256:	ab03      	add	r3, sp, #12
 8021258:	9300      	str	r3, [sp, #0]
 802125a:	462a      	mov	r2, r5
 802125c:	4b05      	ldr	r3, [pc, #20]	@ (8021274 <_svfiprintf_r+0x1f0>)
 802125e:	a904      	add	r1, sp, #16
 8021260:	4638      	mov	r0, r7
 8021262:	f7fc fe23 	bl	801deac <_printf_i>
 8021266:	e7ed      	b.n	8021244 <_svfiprintf_r+0x1c0>
 8021268:	080266b8 	.word	0x080266b8
 802126c:	080266c2 	.word	0x080266c2
 8021270:	0801d97d 	.word	0x0801d97d
 8021274:	08020fcd 	.word	0x08020fcd
 8021278:	080266be 	.word	0x080266be

0802127c <__sfputc_r>:
 802127c:	6893      	ldr	r3, [r2, #8]
 802127e:	3b01      	subs	r3, #1
 8021280:	2b00      	cmp	r3, #0
 8021282:	b410      	push	{r4}
 8021284:	6093      	str	r3, [r2, #8]
 8021286:	da08      	bge.n	802129a <__sfputc_r+0x1e>
 8021288:	6994      	ldr	r4, [r2, #24]
 802128a:	42a3      	cmp	r3, r4
 802128c:	db01      	blt.n	8021292 <__sfputc_r+0x16>
 802128e:	290a      	cmp	r1, #10
 8021290:	d103      	bne.n	802129a <__sfputc_r+0x1e>
 8021292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021296:	f000 b945 	b.w	8021524 <__swbuf_r>
 802129a:	6813      	ldr	r3, [r2, #0]
 802129c:	1c58      	adds	r0, r3, #1
 802129e:	6010      	str	r0, [r2, #0]
 80212a0:	7019      	strb	r1, [r3, #0]
 80212a2:	4608      	mov	r0, r1
 80212a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80212a8:	4770      	bx	lr

080212aa <__sfputs_r>:
 80212aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80212ac:	4606      	mov	r6, r0
 80212ae:	460f      	mov	r7, r1
 80212b0:	4614      	mov	r4, r2
 80212b2:	18d5      	adds	r5, r2, r3
 80212b4:	42ac      	cmp	r4, r5
 80212b6:	d101      	bne.n	80212bc <__sfputs_r+0x12>
 80212b8:	2000      	movs	r0, #0
 80212ba:	e007      	b.n	80212cc <__sfputs_r+0x22>
 80212bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80212c0:	463a      	mov	r2, r7
 80212c2:	4630      	mov	r0, r6
 80212c4:	f7ff ffda 	bl	802127c <__sfputc_r>
 80212c8:	1c43      	adds	r3, r0, #1
 80212ca:	d1f3      	bne.n	80212b4 <__sfputs_r+0xa>
 80212cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080212d0 <_vfiprintf_r>:
 80212d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212d4:	460d      	mov	r5, r1
 80212d6:	b09d      	sub	sp, #116	@ 0x74
 80212d8:	4614      	mov	r4, r2
 80212da:	4698      	mov	r8, r3
 80212dc:	4606      	mov	r6, r0
 80212de:	b118      	cbz	r0, 80212e8 <_vfiprintf_r+0x18>
 80212e0:	6a03      	ldr	r3, [r0, #32]
 80212e2:	b90b      	cbnz	r3, 80212e8 <_vfiprintf_r+0x18>
 80212e4:	f7fd fa62 	bl	801e7ac <__sinit>
 80212e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80212ea:	07d9      	lsls	r1, r3, #31
 80212ec:	d405      	bmi.n	80212fa <_vfiprintf_r+0x2a>
 80212ee:	89ab      	ldrh	r3, [r5, #12]
 80212f0:	059a      	lsls	r2, r3, #22
 80212f2:	d402      	bmi.n	80212fa <_vfiprintf_r+0x2a>
 80212f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80212f6:	f7fd fc26 	bl	801eb46 <__retarget_lock_acquire_recursive>
 80212fa:	89ab      	ldrh	r3, [r5, #12]
 80212fc:	071b      	lsls	r3, r3, #28
 80212fe:	d501      	bpl.n	8021304 <_vfiprintf_r+0x34>
 8021300:	692b      	ldr	r3, [r5, #16]
 8021302:	b99b      	cbnz	r3, 802132c <_vfiprintf_r+0x5c>
 8021304:	4629      	mov	r1, r5
 8021306:	4630      	mov	r0, r6
 8021308:	f000 f94a 	bl	80215a0 <__swsetup_r>
 802130c:	b170      	cbz	r0, 802132c <_vfiprintf_r+0x5c>
 802130e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021310:	07dc      	lsls	r4, r3, #31
 8021312:	d504      	bpl.n	802131e <_vfiprintf_r+0x4e>
 8021314:	f04f 30ff 	mov.w	r0, #4294967295
 8021318:	b01d      	add	sp, #116	@ 0x74
 802131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802131e:	89ab      	ldrh	r3, [r5, #12]
 8021320:	0598      	lsls	r0, r3, #22
 8021322:	d4f7      	bmi.n	8021314 <_vfiprintf_r+0x44>
 8021324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021326:	f7fd fc0f 	bl	801eb48 <__retarget_lock_release_recursive>
 802132a:	e7f3      	b.n	8021314 <_vfiprintf_r+0x44>
 802132c:	2300      	movs	r3, #0
 802132e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021330:	2320      	movs	r3, #32
 8021332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021336:	f8cd 800c 	str.w	r8, [sp, #12]
 802133a:	2330      	movs	r3, #48	@ 0x30
 802133c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80214ec <_vfiprintf_r+0x21c>
 8021340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021344:	f04f 0901 	mov.w	r9, #1
 8021348:	4623      	mov	r3, r4
 802134a:	469a      	mov	sl, r3
 802134c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021350:	b10a      	cbz	r2, 8021356 <_vfiprintf_r+0x86>
 8021352:	2a25      	cmp	r2, #37	@ 0x25
 8021354:	d1f9      	bne.n	802134a <_vfiprintf_r+0x7a>
 8021356:	ebba 0b04 	subs.w	fp, sl, r4
 802135a:	d00b      	beq.n	8021374 <_vfiprintf_r+0xa4>
 802135c:	465b      	mov	r3, fp
 802135e:	4622      	mov	r2, r4
 8021360:	4629      	mov	r1, r5
 8021362:	4630      	mov	r0, r6
 8021364:	f7ff ffa1 	bl	80212aa <__sfputs_r>
 8021368:	3001      	adds	r0, #1
 802136a:	f000 80a7 	beq.w	80214bc <_vfiprintf_r+0x1ec>
 802136e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021370:	445a      	add	r2, fp
 8021372:	9209      	str	r2, [sp, #36]	@ 0x24
 8021374:	f89a 3000 	ldrb.w	r3, [sl]
 8021378:	2b00      	cmp	r3, #0
 802137a:	f000 809f 	beq.w	80214bc <_vfiprintf_r+0x1ec>
 802137e:	2300      	movs	r3, #0
 8021380:	f04f 32ff 	mov.w	r2, #4294967295
 8021384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021388:	f10a 0a01 	add.w	sl, sl, #1
 802138c:	9304      	str	r3, [sp, #16]
 802138e:	9307      	str	r3, [sp, #28]
 8021390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021394:	931a      	str	r3, [sp, #104]	@ 0x68
 8021396:	4654      	mov	r4, sl
 8021398:	2205      	movs	r2, #5
 802139a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802139e:	4853      	ldr	r0, [pc, #332]	@ (80214ec <_vfiprintf_r+0x21c>)
 80213a0:	f7de ff16 	bl	80001d0 <memchr>
 80213a4:	9a04      	ldr	r2, [sp, #16]
 80213a6:	b9d8      	cbnz	r0, 80213e0 <_vfiprintf_r+0x110>
 80213a8:	06d1      	lsls	r1, r2, #27
 80213aa:	bf44      	itt	mi
 80213ac:	2320      	movmi	r3, #32
 80213ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80213b2:	0713      	lsls	r3, r2, #28
 80213b4:	bf44      	itt	mi
 80213b6:	232b      	movmi	r3, #43	@ 0x2b
 80213b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80213bc:	f89a 3000 	ldrb.w	r3, [sl]
 80213c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80213c2:	d015      	beq.n	80213f0 <_vfiprintf_r+0x120>
 80213c4:	9a07      	ldr	r2, [sp, #28]
 80213c6:	4654      	mov	r4, sl
 80213c8:	2000      	movs	r0, #0
 80213ca:	f04f 0c0a 	mov.w	ip, #10
 80213ce:	4621      	mov	r1, r4
 80213d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80213d4:	3b30      	subs	r3, #48	@ 0x30
 80213d6:	2b09      	cmp	r3, #9
 80213d8:	d94b      	bls.n	8021472 <_vfiprintf_r+0x1a2>
 80213da:	b1b0      	cbz	r0, 802140a <_vfiprintf_r+0x13a>
 80213dc:	9207      	str	r2, [sp, #28]
 80213de:	e014      	b.n	802140a <_vfiprintf_r+0x13a>
 80213e0:	eba0 0308 	sub.w	r3, r0, r8
 80213e4:	fa09 f303 	lsl.w	r3, r9, r3
 80213e8:	4313      	orrs	r3, r2
 80213ea:	9304      	str	r3, [sp, #16]
 80213ec:	46a2      	mov	sl, r4
 80213ee:	e7d2      	b.n	8021396 <_vfiprintf_r+0xc6>
 80213f0:	9b03      	ldr	r3, [sp, #12]
 80213f2:	1d19      	adds	r1, r3, #4
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	9103      	str	r1, [sp, #12]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	bfbb      	ittet	lt
 80213fc:	425b      	neglt	r3, r3
 80213fe:	f042 0202 	orrlt.w	r2, r2, #2
 8021402:	9307      	strge	r3, [sp, #28]
 8021404:	9307      	strlt	r3, [sp, #28]
 8021406:	bfb8      	it	lt
 8021408:	9204      	strlt	r2, [sp, #16]
 802140a:	7823      	ldrb	r3, [r4, #0]
 802140c:	2b2e      	cmp	r3, #46	@ 0x2e
 802140e:	d10a      	bne.n	8021426 <_vfiprintf_r+0x156>
 8021410:	7863      	ldrb	r3, [r4, #1]
 8021412:	2b2a      	cmp	r3, #42	@ 0x2a
 8021414:	d132      	bne.n	802147c <_vfiprintf_r+0x1ac>
 8021416:	9b03      	ldr	r3, [sp, #12]
 8021418:	1d1a      	adds	r2, r3, #4
 802141a:	681b      	ldr	r3, [r3, #0]
 802141c:	9203      	str	r2, [sp, #12]
 802141e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021422:	3402      	adds	r4, #2
 8021424:	9305      	str	r3, [sp, #20]
 8021426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80214fc <_vfiprintf_r+0x22c>
 802142a:	7821      	ldrb	r1, [r4, #0]
 802142c:	2203      	movs	r2, #3
 802142e:	4650      	mov	r0, sl
 8021430:	f7de fece 	bl	80001d0 <memchr>
 8021434:	b138      	cbz	r0, 8021446 <_vfiprintf_r+0x176>
 8021436:	9b04      	ldr	r3, [sp, #16]
 8021438:	eba0 000a 	sub.w	r0, r0, sl
 802143c:	2240      	movs	r2, #64	@ 0x40
 802143e:	4082      	lsls	r2, r0
 8021440:	4313      	orrs	r3, r2
 8021442:	3401      	adds	r4, #1
 8021444:	9304      	str	r3, [sp, #16]
 8021446:	f814 1b01 	ldrb.w	r1, [r4], #1
 802144a:	4829      	ldr	r0, [pc, #164]	@ (80214f0 <_vfiprintf_r+0x220>)
 802144c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021450:	2206      	movs	r2, #6
 8021452:	f7de febd 	bl	80001d0 <memchr>
 8021456:	2800      	cmp	r0, #0
 8021458:	d03f      	beq.n	80214da <_vfiprintf_r+0x20a>
 802145a:	4b26      	ldr	r3, [pc, #152]	@ (80214f4 <_vfiprintf_r+0x224>)
 802145c:	bb1b      	cbnz	r3, 80214a6 <_vfiprintf_r+0x1d6>
 802145e:	9b03      	ldr	r3, [sp, #12]
 8021460:	3307      	adds	r3, #7
 8021462:	f023 0307 	bic.w	r3, r3, #7
 8021466:	3308      	adds	r3, #8
 8021468:	9303      	str	r3, [sp, #12]
 802146a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802146c:	443b      	add	r3, r7
 802146e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021470:	e76a      	b.n	8021348 <_vfiprintf_r+0x78>
 8021472:	fb0c 3202 	mla	r2, ip, r2, r3
 8021476:	460c      	mov	r4, r1
 8021478:	2001      	movs	r0, #1
 802147a:	e7a8      	b.n	80213ce <_vfiprintf_r+0xfe>
 802147c:	2300      	movs	r3, #0
 802147e:	3401      	adds	r4, #1
 8021480:	9305      	str	r3, [sp, #20]
 8021482:	4619      	mov	r1, r3
 8021484:	f04f 0c0a 	mov.w	ip, #10
 8021488:	4620      	mov	r0, r4
 802148a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802148e:	3a30      	subs	r2, #48	@ 0x30
 8021490:	2a09      	cmp	r2, #9
 8021492:	d903      	bls.n	802149c <_vfiprintf_r+0x1cc>
 8021494:	2b00      	cmp	r3, #0
 8021496:	d0c6      	beq.n	8021426 <_vfiprintf_r+0x156>
 8021498:	9105      	str	r1, [sp, #20]
 802149a:	e7c4      	b.n	8021426 <_vfiprintf_r+0x156>
 802149c:	fb0c 2101 	mla	r1, ip, r1, r2
 80214a0:	4604      	mov	r4, r0
 80214a2:	2301      	movs	r3, #1
 80214a4:	e7f0      	b.n	8021488 <_vfiprintf_r+0x1b8>
 80214a6:	ab03      	add	r3, sp, #12
 80214a8:	9300      	str	r3, [sp, #0]
 80214aa:	462a      	mov	r2, r5
 80214ac:	4b12      	ldr	r3, [pc, #72]	@ (80214f8 <_vfiprintf_r+0x228>)
 80214ae:	a904      	add	r1, sp, #16
 80214b0:	4630      	mov	r0, r6
 80214b2:	f7fc fa63 	bl	801d97c <_printf_float>
 80214b6:	4607      	mov	r7, r0
 80214b8:	1c78      	adds	r0, r7, #1
 80214ba:	d1d6      	bne.n	802146a <_vfiprintf_r+0x19a>
 80214bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80214be:	07d9      	lsls	r1, r3, #31
 80214c0:	d405      	bmi.n	80214ce <_vfiprintf_r+0x1fe>
 80214c2:	89ab      	ldrh	r3, [r5, #12]
 80214c4:	059a      	lsls	r2, r3, #22
 80214c6:	d402      	bmi.n	80214ce <_vfiprintf_r+0x1fe>
 80214c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80214ca:	f7fd fb3d 	bl	801eb48 <__retarget_lock_release_recursive>
 80214ce:	89ab      	ldrh	r3, [r5, #12]
 80214d0:	065b      	lsls	r3, r3, #25
 80214d2:	f53f af1f 	bmi.w	8021314 <_vfiprintf_r+0x44>
 80214d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80214d8:	e71e      	b.n	8021318 <_vfiprintf_r+0x48>
 80214da:	ab03      	add	r3, sp, #12
 80214dc:	9300      	str	r3, [sp, #0]
 80214de:	462a      	mov	r2, r5
 80214e0:	4b05      	ldr	r3, [pc, #20]	@ (80214f8 <_vfiprintf_r+0x228>)
 80214e2:	a904      	add	r1, sp, #16
 80214e4:	4630      	mov	r0, r6
 80214e6:	f7fc fce1 	bl	801deac <_printf_i>
 80214ea:	e7e4      	b.n	80214b6 <_vfiprintf_r+0x1e6>
 80214ec:	080266b8 	.word	0x080266b8
 80214f0:	080266c2 	.word	0x080266c2
 80214f4:	0801d97d 	.word	0x0801d97d
 80214f8:	080212ab 	.word	0x080212ab
 80214fc:	080266be 	.word	0x080266be

08021500 <fiprintf>:
 8021500:	b40e      	push	{r1, r2, r3}
 8021502:	b503      	push	{r0, r1, lr}
 8021504:	4601      	mov	r1, r0
 8021506:	ab03      	add	r3, sp, #12
 8021508:	4805      	ldr	r0, [pc, #20]	@ (8021520 <fiprintf+0x20>)
 802150a:	f853 2b04 	ldr.w	r2, [r3], #4
 802150e:	6800      	ldr	r0, [r0, #0]
 8021510:	9301      	str	r3, [sp, #4]
 8021512:	f7ff fedd 	bl	80212d0 <_vfiprintf_r>
 8021516:	b002      	add	sp, #8
 8021518:	f85d eb04 	ldr.w	lr, [sp], #4
 802151c:	b003      	add	sp, #12
 802151e:	4770      	bx	lr
 8021520:	20000054 	.word	0x20000054

08021524 <__swbuf_r>:
 8021524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021526:	460e      	mov	r6, r1
 8021528:	4614      	mov	r4, r2
 802152a:	4605      	mov	r5, r0
 802152c:	b118      	cbz	r0, 8021536 <__swbuf_r+0x12>
 802152e:	6a03      	ldr	r3, [r0, #32]
 8021530:	b90b      	cbnz	r3, 8021536 <__swbuf_r+0x12>
 8021532:	f7fd f93b 	bl	801e7ac <__sinit>
 8021536:	69a3      	ldr	r3, [r4, #24]
 8021538:	60a3      	str	r3, [r4, #8]
 802153a:	89a3      	ldrh	r3, [r4, #12]
 802153c:	071a      	lsls	r2, r3, #28
 802153e:	d501      	bpl.n	8021544 <__swbuf_r+0x20>
 8021540:	6923      	ldr	r3, [r4, #16]
 8021542:	b943      	cbnz	r3, 8021556 <__swbuf_r+0x32>
 8021544:	4621      	mov	r1, r4
 8021546:	4628      	mov	r0, r5
 8021548:	f000 f82a 	bl	80215a0 <__swsetup_r>
 802154c:	b118      	cbz	r0, 8021556 <__swbuf_r+0x32>
 802154e:	f04f 37ff 	mov.w	r7, #4294967295
 8021552:	4638      	mov	r0, r7
 8021554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021556:	6823      	ldr	r3, [r4, #0]
 8021558:	6922      	ldr	r2, [r4, #16]
 802155a:	1a98      	subs	r0, r3, r2
 802155c:	6963      	ldr	r3, [r4, #20]
 802155e:	b2f6      	uxtb	r6, r6
 8021560:	4283      	cmp	r3, r0
 8021562:	4637      	mov	r7, r6
 8021564:	dc05      	bgt.n	8021572 <__swbuf_r+0x4e>
 8021566:	4621      	mov	r1, r4
 8021568:	4628      	mov	r0, r5
 802156a:	f7fd f857 	bl	801e61c <_fflush_r>
 802156e:	2800      	cmp	r0, #0
 8021570:	d1ed      	bne.n	802154e <__swbuf_r+0x2a>
 8021572:	68a3      	ldr	r3, [r4, #8]
 8021574:	3b01      	subs	r3, #1
 8021576:	60a3      	str	r3, [r4, #8]
 8021578:	6823      	ldr	r3, [r4, #0]
 802157a:	1c5a      	adds	r2, r3, #1
 802157c:	6022      	str	r2, [r4, #0]
 802157e:	701e      	strb	r6, [r3, #0]
 8021580:	6962      	ldr	r2, [r4, #20]
 8021582:	1c43      	adds	r3, r0, #1
 8021584:	429a      	cmp	r2, r3
 8021586:	d004      	beq.n	8021592 <__swbuf_r+0x6e>
 8021588:	89a3      	ldrh	r3, [r4, #12]
 802158a:	07db      	lsls	r3, r3, #31
 802158c:	d5e1      	bpl.n	8021552 <__swbuf_r+0x2e>
 802158e:	2e0a      	cmp	r6, #10
 8021590:	d1df      	bne.n	8021552 <__swbuf_r+0x2e>
 8021592:	4621      	mov	r1, r4
 8021594:	4628      	mov	r0, r5
 8021596:	f7fd f841 	bl	801e61c <_fflush_r>
 802159a:	2800      	cmp	r0, #0
 802159c:	d0d9      	beq.n	8021552 <__swbuf_r+0x2e>
 802159e:	e7d6      	b.n	802154e <__swbuf_r+0x2a>

080215a0 <__swsetup_r>:
 80215a0:	b538      	push	{r3, r4, r5, lr}
 80215a2:	4b29      	ldr	r3, [pc, #164]	@ (8021648 <__swsetup_r+0xa8>)
 80215a4:	4605      	mov	r5, r0
 80215a6:	6818      	ldr	r0, [r3, #0]
 80215a8:	460c      	mov	r4, r1
 80215aa:	b118      	cbz	r0, 80215b4 <__swsetup_r+0x14>
 80215ac:	6a03      	ldr	r3, [r0, #32]
 80215ae:	b90b      	cbnz	r3, 80215b4 <__swsetup_r+0x14>
 80215b0:	f7fd f8fc 	bl	801e7ac <__sinit>
 80215b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80215b8:	0719      	lsls	r1, r3, #28
 80215ba:	d422      	bmi.n	8021602 <__swsetup_r+0x62>
 80215bc:	06da      	lsls	r2, r3, #27
 80215be:	d407      	bmi.n	80215d0 <__swsetup_r+0x30>
 80215c0:	2209      	movs	r2, #9
 80215c2:	602a      	str	r2, [r5, #0]
 80215c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80215c8:	81a3      	strh	r3, [r4, #12]
 80215ca:	f04f 30ff 	mov.w	r0, #4294967295
 80215ce:	e033      	b.n	8021638 <__swsetup_r+0x98>
 80215d0:	0758      	lsls	r0, r3, #29
 80215d2:	d512      	bpl.n	80215fa <__swsetup_r+0x5a>
 80215d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80215d6:	b141      	cbz	r1, 80215ea <__swsetup_r+0x4a>
 80215d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80215dc:	4299      	cmp	r1, r3
 80215de:	d002      	beq.n	80215e6 <__swsetup_r+0x46>
 80215e0:	4628      	mov	r0, r5
 80215e2:	f7fe f939 	bl	801f858 <_free_r>
 80215e6:	2300      	movs	r3, #0
 80215e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80215ea:	89a3      	ldrh	r3, [r4, #12]
 80215ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80215f0:	81a3      	strh	r3, [r4, #12]
 80215f2:	2300      	movs	r3, #0
 80215f4:	6063      	str	r3, [r4, #4]
 80215f6:	6923      	ldr	r3, [r4, #16]
 80215f8:	6023      	str	r3, [r4, #0]
 80215fa:	89a3      	ldrh	r3, [r4, #12]
 80215fc:	f043 0308 	orr.w	r3, r3, #8
 8021600:	81a3      	strh	r3, [r4, #12]
 8021602:	6923      	ldr	r3, [r4, #16]
 8021604:	b94b      	cbnz	r3, 802161a <__swsetup_r+0x7a>
 8021606:	89a3      	ldrh	r3, [r4, #12]
 8021608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802160c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021610:	d003      	beq.n	802161a <__swsetup_r+0x7a>
 8021612:	4621      	mov	r1, r4
 8021614:	4628      	mov	r0, r5
 8021616:	f000 fbf9 	bl	8021e0c <__smakebuf_r>
 802161a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802161e:	f013 0201 	ands.w	r2, r3, #1
 8021622:	d00a      	beq.n	802163a <__swsetup_r+0x9a>
 8021624:	2200      	movs	r2, #0
 8021626:	60a2      	str	r2, [r4, #8]
 8021628:	6962      	ldr	r2, [r4, #20]
 802162a:	4252      	negs	r2, r2
 802162c:	61a2      	str	r2, [r4, #24]
 802162e:	6922      	ldr	r2, [r4, #16]
 8021630:	b942      	cbnz	r2, 8021644 <__swsetup_r+0xa4>
 8021632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021636:	d1c5      	bne.n	80215c4 <__swsetup_r+0x24>
 8021638:	bd38      	pop	{r3, r4, r5, pc}
 802163a:	0799      	lsls	r1, r3, #30
 802163c:	bf58      	it	pl
 802163e:	6962      	ldrpl	r2, [r4, #20]
 8021640:	60a2      	str	r2, [r4, #8]
 8021642:	e7f4      	b.n	802162e <__swsetup_r+0x8e>
 8021644:	2000      	movs	r0, #0
 8021646:	e7f7      	b.n	8021638 <__swsetup_r+0x98>
 8021648:	20000054 	.word	0x20000054

0802164c <_sbrk_r>:
 802164c:	b538      	push	{r3, r4, r5, lr}
 802164e:	4d06      	ldr	r5, [pc, #24]	@ (8021668 <_sbrk_r+0x1c>)
 8021650:	2300      	movs	r3, #0
 8021652:	4604      	mov	r4, r0
 8021654:	4608      	mov	r0, r1
 8021656:	602b      	str	r3, [r5, #0]
 8021658:	f7e0 fbd2 	bl	8001e00 <_sbrk>
 802165c:	1c43      	adds	r3, r0, #1
 802165e:	d102      	bne.n	8021666 <_sbrk_r+0x1a>
 8021660:	682b      	ldr	r3, [r5, #0]
 8021662:	b103      	cbz	r3, 8021666 <_sbrk_r+0x1a>
 8021664:	6023      	str	r3, [r4, #0]
 8021666:	bd38      	pop	{r3, r4, r5, pc}
 8021668:	2000f760 	.word	0x2000f760
 802166c:	00000000 	.word	0x00000000

08021670 <nan>:
 8021670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021678 <nan+0x8>
 8021674:	4770      	bx	lr
 8021676:	bf00      	nop
 8021678:	00000000 	.word	0x00000000
 802167c:	7ff80000 	.word	0x7ff80000

08021680 <abort>:
 8021680:	b508      	push	{r3, lr}
 8021682:	2006      	movs	r0, #6
 8021684:	f000 fc26 	bl	8021ed4 <raise>
 8021688:	2001      	movs	r0, #1
 802168a:	f7e0 fb5d 	bl	8001d48 <_exit>

0802168e <_calloc_r>:
 802168e:	b570      	push	{r4, r5, r6, lr}
 8021690:	fba1 5402 	umull	r5, r4, r1, r2
 8021694:	b93c      	cbnz	r4, 80216a6 <_calloc_r+0x18>
 8021696:	4629      	mov	r1, r5
 8021698:	f7fe f952 	bl	801f940 <_malloc_r>
 802169c:	4606      	mov	r6, r0
 802169e:	b928      	cbnz	r0, 80216ac <_calloc_r+0x1e>
 80216a0:	2600      	movs	r6, #0
 80216a2:	4630      	mov	r0, r6
 80216a4:	bd70      	pop	{r4, r5, r6, pc}
 80216a6:	220c      	movs	r2, #12
 80216a8:	6002      	str	r2, [r0, #0]
 80216aa:	e7f9      	b.n	80216a0 <_calloc_r+0x12>
 80216ac:	462a      	mov	r2, r5
 80216ae:	4621      	mov	r1, r4
 80216b0:	f7fd f951 	bl	801e956 <memset>
 80216b4:	e7f5      	b.n	80216a2 <_calloc_r+0x14>

080216b6 <rshift>:
 80216b6:	6903      	ldr	r3, [r0, #16]
 80216b8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80216bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80216c0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80216c4:	f100 0414 	add.w	r4, r0, #20
 80216c8:	dd45      	ble.n	8021756 <rshift+0xa0>
 80216ca:	f011 011f 	ands.w	r1, r1, #31
 80216ce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80216d2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80216d6:	d10c      	bne.n	80216f2 <rshift+0x3c>
 80216d8:	f100 0710 	add.w	r7, r0, #16
 80216dc:	4629      	mov	r1, r5
 80216de:	42b1      	cmp	r1, r6
 80216e0:	d334      	bcc.n	802174c <rshift+0x96>
 80216e2:	1a9b      	subs	r3, r3, r2
 80216e4:	009b      	lsls	r3, r3, #2
 80216e6:	1eea      	subs	r2, r5, #3
 80216e8:	4296      	cmp	r6, r2
 80216ea:	bf38      	it	cc
 80216ec:	2300      	movcc	r3, #0
 80216ee:	4423      	add	r3, r4
 80216f0:	e015      	b.n	802171e <rshift+0x68>
 80216f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80216f6:	f1c1 0820 	rsb	r8, r1, #32
 80216fa:	40cf      	lsrs	r7, r1
 80216fc:	f105 0e04 	add.w	lr, r5, #4
 8021700:	46a1      	mov	r9, r4
 8021702:	4576      	cmp	r6, lr
 8021704:	46f4      	mov	ip, lr
 8021706:	d815      	bhi.n	8021734 <rshift+0x7e>
 8021708:	1a9a      	subs	r2, r3, r2
 802170a:	0092      	lsls	r2, r2, #2
 802170c:	3a04      	subs	r2, #4
 802170e:	3501      	adds	r5, #1
 8021710:	42ae      	cmp	r6, r5
 8021712:	bf38      	it	cc
 8021714:	2200      	movcc	r2, #0
 8021716:	18a3      	adds	r3, r4, r2
 8021718:	50a7      	str	r7, [r4, r2]
 802171a:	b107      	cbz	r7, 802171e <rshift+0x68>
 802171c:	3304      	adds	r3, #4
 802171e:	1b1a      	subs	r2, r3, r4
 8021720:	42a3      	cmp	r3, r4
 8021722:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021726:	bf08      	it	eq
 8021728:	2300      	moveq	r3, #0
 802172a:	6102      	str	r2, [r0, #16]
 802172c:	bf08      	it	eq
 802172e:	6143      	streq	r3, [r0, #20]
 8021730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021734:	f8dc c000 	ldr.w	ip, [ip]
 8021738:	fa0c fc08 	lsl.w	ip, ip, r8
 802173c:	ea4c 0707 	orr.w	r7, ip, r7
 8021740:	f849 7b04 	str.w	r7, [r9], #4
 8021744:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021748:	40cf      	lsrs	r7, r1
 802174a:	e7da      	b.n	8021702 <rshift+0x4c>
 802174c:	f851 cb04 	ldr.w	ip, [r1], #4
 8021750:	f847 cf04 	str.w	ip, [r7, #4]!
 8021754:	e7c3      	b.n	80216de <rshift+0x28>
 8021756:	4623      	mov	r3, r4
 8021758:	e7e1      	b.n	802171e <rshift+0x68>

0802175a <__hexdig_fun>:
 802175a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802175e:	2b09      	cmp	r3, #9
 8021760:	d802      	bhi.n	8021768 <__hexdig_fun+0xe>
 8021762:	3820      	subs	r0, #32
 8021764:	b2c0      	uxtb	r0, r0
 8021766:	4770      	bx	lr
 8021768:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802176c:	2b05      	cmp	r3, #5
 802176e:	d801      	bhi.n	8021774 <__hexdig_fun+0x1a>
 8021770:	3847      	subs	r0, #71	@ 0x47
 8021772:	e7f7      	b.n	8021764 <__hexdig_fun+0xa>
 8021774:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021778:	2b05      	cmp	r3, #5
 802177a:	d801      	bhi.n	8021780 <__hexdig_fun+0x26>
 802177c:	3827      	subs	r0, #39	@ 0x27
 802177e:	e7f1      	b.n	8021764 <__hexdig_fun+0xa>
 8021780:	2000      	movs	r0, #0
 8021782:	4770      	bx	lr

08021784 <__gethex>:
 8021784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021788:	b085      	sub	sp, #20
 802178a:	468a      	mov	sl, r1
 802178c:	9302      	str	r3, [sp, #8]
 802178e:	680b      	ldr	r3, [r1, #0]
 8021790:	9001      	str	r0, [sp, #4]
 8021792:	4690      	mov	r8, r2
 8021794:	1c9c      	adds	r4, r3, #2
 8021796:	46a1      	mov	r9, r4
 8021798:	f814 0b01 	ldrb.w	r0, [r4], #1
 802179c:	2830      	cmp	r0, #48	@ 0x30
 802179e:	d0fa      	beq.n	8021796 <__gethex+0x12>
 80217a0:	eba9 0303 	sub.w	r3, r9, r3
 80217a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80217a8:	f7ff ffd7 	bl	802175a <__hexdig_fun>
 80217ac:	4605      	mov	r5, r0
 80217ae:	2800      	cmp	r0, #0
 80217b0:	d168      	bne.n	8021884 <__gethex+0x100>
 80217b2:	49a0      	ldr	r1, [pc, #640]	@ (8021a34 <__gethex+0x2b0>)
 80217b4:	2201      	movs	r2, #1
 80217b6:	4648      	mov	r0, r9
 80217b8:	f7fd f8d5 	bl	801e966 <strncmp>
 80217bc:	4607      	mov	r7, r0
 80217be:	2800      	cmp	r0, #0
 80217c0:	d167      	bne.n	8021892 <__gethex+0x10e>
 80217c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80217c6:	4626      	mov	r6, r4
 80217c8:	f7ff ffc7 	bl	802175a <__hexdig_fun>
 80217cc:	2800      	cmp	r0, #0
 80217ce:	d062      	beq.n	8021896 <__gethex+0x112>
 80217d0:	4623      	mov	r3, r4
 80217d2:	7818      	ldrb	r0, [r3, #0]
 80217d4:	2830      	cmp	r0, #48	@ 0x30
 80217d6:	4699      	mov	r9, r3
 80217d8:	f103 0301 	add.w	r3, r3, #1
 80217dc:	d0f9      	beq.n	80217d2 <__gethex+0x4e>
 80217de:	f7ff ffbc 	bl	802175a <__hexdig_fun>
 80217e2:	fab0 f580 	clz	r5, r0
 80217e6:	096d      	lsrs	r5, r5, #5
 80217e8:	f04f 0b01 	mov.w	fp, #1
 80217ec:	464a      	mov	r2, r9
 80217ee:	4616      	mov	r6, r2
 80217f0:	3201      	adds	r2, #1
 80217f2:	7830      	ldrb	r0, [r6, #0]
 80217f4:	f7ff ffb1 	bl	802175a <__hexdig_fun>
 80217f8:	2800      	cmp	r0, #0
 80217fa:	d1f8      	bne.n	80217ee <__gethex+0x6a>
 80217fc:	498d      	ldr	r1, [pc, #564]	@ (8021a34 <__gethex+0x2b0>)
 80217fe:	2201      	movs	r2, #1
 8021800:	4630      	mov	r0, r6
 8021802:	f7fd f8b0 	bl	801e966 <strncmp>
 8021806:	2800      	cmp	r0, #0
 8021808:	d13f      	bne.n	802188a <__gethex+0x106>
 802180a:	b944      	cbnz	r4, 802181e <__gethex+0x9a>
 802180c:	1c74      	adds	r4, r6, #1
 802180e:	4622      	mov	r2, r4
 8021810:	4616      	mov	r6, r2
 8021812:	3201      	adds	r2, #1
 8021814:	7830      	ldrb	r0, [r6, #0]
 8021816:	f7ff ffa0 	bl	802175a <__hexdig_fun>
 802181a:	2800      	cmp	r0, #0
 802181c:	d1f8      	bne.n	8021810 <__gethex+0x8c>
 802181e:	1ba4      	subs	r4, r4, r6
 8021820:	00a7      	lsls	r7, r4, #2
 8021822:	7833      	ldrb	r3, [r6, #0]
 8021824:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021828:	2b50      	cmp	r3, #80	@ 0x50
 802182a:	d13e      	bne.n	80218aa <__gethex+0x126>
 802182c:	7873      	ldrb	r3, [r6, #1]
 802182e:	2b2b      	cmp	r3, #43	@ 0x2b
 8021830:	d033      	beq.n	802189a <__gethex+0x116>
 8021832:	2b2d      	cmp	r3, #45	@ 0x2d
 8021834:	d034      	beq.n	80218a0 <__gethex+0x11c>
 8021836:	1c71      	adds	r1, r6, #1
 8021838:	2400      	movs	r4, #0
 802183a:	7808      	ldrb	r0, [r1, #0]
 802183c:	f7ff ff8d 	bl	802175a <__hexdig_fun>
 8021840:	1e43      	subs	r3, r0, #1
 8021842:	b2db      	uxtb	r3, r3
 8021844:	2b18      	cmp	r3, #24
 8021846:	d830      	bhi.n	80218aa <__gethex+0x126>
 8021848:	f1a0 0210 	sub.w	r2, r0, #16
 802184c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021850:	f7ff ff83 	bl	802175a <__hexdig_fun>
 8021854:	f100 3cff 	add.w	ip, r0, #4294967295
 8021858:	fa5f fc8c 	uxtb.w	ip, ip
 802185c:	f1bc 0f18 	cmp.w	ip, #24
 8021860:	f04f 030a 	mov.w	r3, #10
 8021864:	d91e      	bls.n	80218a4 <__gethex+0x120>
 8021866:	b104      	cbz	r4, 802186a <__gethex+0xe6>
 8021868:	4252      	negs	r2, r2
 802186a:	4417      	add	r7, r2
 802186c:	f8ca 1000 	str.w	r1, [sl]
 8021870:	b1ed      	cbz	r5, 80218ae <__gethex+0x12a>
 8021872:	f1bb 0f00 	cmp.w	fp, #0
 8021876:	bf0c      	ite	eq
 8021878:	2506      	moveq	r5, #6
 802187a:	2500      	movne	r5, #0
 802187c:	4628      	mov	r0, r5
 802187e:	b005      	add	sp, #20
 8021880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021884:	2500      	movs	r5, #0
 8021886:	462c      	mov	r4, r5
 8021888:	e7b0      	b.n	80217ec <__gethex+0x68>
 802188a:	2c00      	cmp	r4, #0
 802188c:	d1c7      	bne.n	802181e <__gethex+0x9a>
 802188e:	4627      	mov	r7, r4
 8021890:	e7c7      	b.n	8021822 <__gethex+0x9e>
 8021892:	464e      	mov	r6, r9
 8021894:	462f      	mov	r7, r5
 8021896:	2501      	movs	r5, #1
 8021898:	e7c3      	b.n	8021822 <__gethex+0x9e>
 802189a:	2400      	movs	r4, #0
 802189c:	1cb1      	adds	r1, r6, #2
 802189e:	e7cc      	b.n	802183a <__gethex+0xb6>
 80218a0:	2401      	movs	r4, #1
 80218a2:	e7fb      	b.n	802189c <__gethex+0x118>
 80218a4:	fb03 0002 	mla	r0, r3, r2, r0
 80218a8:	e7ce      	b.n	8021848 <__gethex+0xc4>
 80218aa:	4631      	mov	r1, r6
 80218ac:	e7de      	b.n	802186c <__gethex+0xe8>
 80218ae:	eba6 0309 	sub.w	r3, r6, r9
 80218b2:	3b01      	subs	r3, #1
 80218b4:	4629      	mov	r1, r5
 80218b6:	2b07      	cmp	r3, #7
 80218b8:	dc0a      	bgt.n	80218d0 <__gethex+0x14c>
 80218ba:	9801      	ldr	r0, [sp, #4]
 80218bc:	f7fe f8cc 	bl	801fa58 <_Balloc>
 80218c0:	4604      	mov	r4, r0
 80218c2:	b940      	cbnz	r0, 80218d6 <__gethex+0x152>
 80218c4:	4b5c      	ldr	r3, [pc, #368]	@ (8021a38 <__gethex+0x2b4>)
 80218c6:	4602      	mov	r2, r0
 80218c8:	21e4      	movs	r1, #228	@ 0xe4
 80218ca:	485c      	ldr	r0, [pc, #368]	@ (8021a3c <__gethex+0x2b8>)
 80218cc:	f7fd f95a 	bl	801eb84 <__assert_func>
 80218d0:	3101      	adds	r1, #1
 80218d2:	105b      	asrs	r3, r3, #1
 80218d4:	e7ef      	b.n	80218b6 <__gethex+0x132>
 80218d6:	f100 0a14 	add.w	sl, r0, #20
 80218da:	2300      	movs	r3, #0
 80218dc:	4655      	mov	r5, sl
 80218de:	469b      	mov	fp, r3
 80218e0:	45b1      	cmp	r9, r6
 80218e2:	d337      	bcc.n	8021954 <__gethex+0x1d0>
 80218e4:	f845 bb04 	str.w	fp, [r5], #4
 80218e8:	eba5 050a 	sub.w	r5, r5, sl
 80218ec:	10ad      	asrs	r5, r5, #2
 80218ee:	6125      	str	r5, [r4, #16]
 80218f0:	4658      	mov	r0, fp
 80218f2:	f7fe f9a3 	bl	801fc3c <__hi0bits>
 80218f6:	016d      	lsls	r5, r5, #5
 80218f8:	f8d8 6000 	ldr.w	r6, [r8]
 80218fc:	1a2d      	subs	r5, r5, r0
 80218fe:	42b5      	cmp	r5, r6
 8021900:	dd54      	ble.n	80219ac <__gethex+0x228>
 8021902:	1bad      	subs	r5, r5, r6
 8021904:	4629      	mov	r1, r5
 8021906:	4620      	mov	r0, r4
 8021908:	f7fe fd37 	bl	802037a <__any_on>
 802190c:	4681      	mov	r9, r0
 802190e:	b178      	cbz	r0, 8021930 <__gethex+0x1ac>
 8021910:	1e6b      	subs	r3, r5, #1
 8021912:	1159      	asrs	r1, r3, #5
 8021914:	f003 021f 	and.w	r2, r3, #31
 8021918:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802191c:	f04f 0901 	mov.w	r9, #1
 8021920:	fa09 f202 	lsl.w	r2, r9, r2
 8021924:	420a      	tst	r2, r1
 8021926:	d003      	beq.n	8021930 <__gethex+0x1ac>
 8021928:	454b      	cmp	r3, r9
 802192a:	dc36      	bgt.n	802199a <__gethex+0x216>
 802192c:	f04f 0902 	mov.w	r9, #2
 8021930:	4629      	mov	r1, r5
 8021932:	4620      	mov	r0, r4
 8021934:	f7ff febf 	bl	80216b6 <rshift>
 8021938:	442f      	add	r7, r5
 802193a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802193e:	42bb      	cmp	r3, r7
 8021940:	da42      	bge.n	80219c8 <__gethex+0x244>
 8021942:	9801      	ldr	r0, [sp, #4]
 8021944:	4621      	mov	r1, r4
 8021946:	f7fe f8c7 	bl	801fad8 <_Bfree>
 802194a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802194c:	2300      	movs	r3, #0
 802194e:	6013      	str	r3, [r2, #0]
 8021950:	25a3      	movs	r5, #163	@ 0xa3
 8021952:	e793      	b.n	802187c <__gethex+0xf8>
 8021954:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021958:	2a2e      	cmp	r2, #46	@ 0x2e
 802195a:	d012      	beq.n	8021982 <__gethex+0x1fe>
 802195c:	2b20      	cmp	r3, #32
 802195e:	d104      	bne.n	802196a <__gethex+0x1e6>
 8021960:	f845 bb04 	str.w	fp, [r5], #4
 8021964:	f04f 0b00 	mov.w	fp, #0
 8021968:	465b      	mov	r3, fp
 802196a:	7830      	ldrb	r0, [r6, #0]
 802196c:	9303      	str	r3, [sp, #12]
 802196e:	f7ff fef4 	bl	802175a <__hexdig_fun>
 8021972:	9b03      	ldr	r3, [sp, #12]
 8021974:	f000 000f 	and.w	r0, r0, #15
 8021978:	4098      	lsls	r0, r3
 802197a:	ea4b 0b00 	orr.w	fp, fp, r0
 802197e:	3304      	adds	r3, #4
 8021980:	e7ae      	b.n	80218e0 <__gethex+0x15c>
 8021982:	45b1      	cmp	r9, r6
 8021984:	d8ea      	bhi.n	802195c <__gethex+0x1d8>
 8021986:	492b      	ldr	r1, [pc, #172]	@ (8021a34 <__gethex+0x2b0>)
 8021988:	9303      	str	r3, [sp, #12]
 802198a:	2201      	movs	r2, #1
 802198c:	4630      	mov	r0, r6
 802198e:	f7fc ffea 	bl	801e966 <strncmp>
 8021992:	9b03      	ldr	r3, [sp, #12]
 8021994:	2800      	cmp	r0, #0
 8021996:	d1e1      	bne.n	802195c <__gethex+0x1d8>
 8021998:	e7a2      	b.n	80218e0 <__gethex+0x15c>
 802199a:	1ea9      	subs	r1, r5, #2
 802199c:	4620      	mov	r0, r4
 802199e:	f7fe fcec 	bl	802037a <__any_on>
 80219a2:	2800      	cmp	r0, #0
 80219a4:	d0c2      	beq.n	802192c <__gethex+0x1a8>
 80219a6:	f04f 0903 	mov.w	r9, #3
 80219aa:	e7c1      	b.n	8021930 <__gethex+0x1ac>
 80219ac:	da09      	bge.n	80219c2 <__gethex+0x23e>
 80219ae:	1b75      	subs	r5, r6, r5
 80219b0:	4621      	mov	r1, r4
 80219b2:	9801      	ldr	r0, [sp, #4]
 80219b4:	462a      	mov	r2, r5
 80219b6:	f7fe faa7 	bl	801ff08 <__lshift>
 80219ba:	1b7f      	subs	r7, r7, r5
 80219bc:	4604      	mov	r4, r0
 80219be:	f100 0a14 	add.w	sl, r0, #20
 80219c2:	f04f 0900 	mov.w	r9, #0
 80219c6:	e7b8      	b.n	802193a <__gethex+0x1b6>
 80219c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80219cc:	42bd      	cmp	r5, r7
 80219ce:	dd6f      	ble.n	8021ab0 <__gethex+0x32c>
 80219d0:	1bed      	subs	r5, r5, r7
 80219d2:	42ae      	cmp	r6, r5
 80219d4:	dc34      	bgt.n	8021a40 <__gethex+0x2bc>
 80219d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80219da:	2b02      	cmp	r3, #2
 80219dc:	d022      	beq.n	8021a24 <__gethex+0x2a0>
 80219de:	2b03      	cmp	r3, #3
 80219e0:	d024      	beq.n	8021a2c <__gethex+0x2a8>
 80219e2:	2b01      	cmp	r3, #1
 80219e4:	d115      	bne.n	8021a12 <__gethex+0x28e>
 80219e6:	42ae      	cmp	r6, r5
 80219e8:	d113      	bne.n	8021a12 <__gethex+0x28e>
 80219ea:	2e01      	cmp	r6, #1
 80219ec:	d10b      	bne.n	8021a06 <__gethex+0x282>
 80219ee:	9a02      	ldr	r2, [sp, #8]
 80219f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80219f4:	6013      	str	r3, [r2, #0]
 80219f6:	2301      	movs	r3, #1
 80219f8:	6123      	str	r3, [r4, #16]
 80219fa:	f8ca 3000 	str.w	r3, [sl]
 80219fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a00:	2562      	movs	r5, #98	@ 0x62
 8021a02:	601c      	str	r4, [r3, #0]
 8021a04:	e73a      	b.n	802187c <__gethex+0xf8>
 8021a06:	1e71      	subs	r1, r6, #1
 8021a08:	4620      	mov	r0, r4
 8021a0a:	f7fe fcb6 	bl	802037a <__any_on>
 8021a0e:	2800      	cmp	r0, #0
 8021a10:	d1ed      	bne.n	80219ee <__gethex+0x26a>
 8021a12:	9801      	ldr	r0, [sp, #4]
 8021a14:	4621      	mov	r1, r4
 8021a16:	f7fe f85f 	bl	801fad8 <_Bfree>
 8021a1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021a1c:	2300      	movs	r3, #0
 8021a1e:	6013      	str	r3, [r2, #0]
 8021a20:	2550      	movs	r5, #80	@ 0x50
 8021a22:	e72b      	b.n	802187c <__gethex+0xf8>
 8021a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021a26:	2b00      	cmp	r3, #0
 8021a28:	d1f3      	bne.n	8021a12 <__gethex+0x28e>
 8021a2a:	e7e0      	b.n	80219ee <__gethex+0x26a>
 8021a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d1dd      	bne.n	80219ee <__gethex+0x26a>
 8021a32:	e7ee      	b.n	8021a12 <__gethex+0x28e>
 8021a34:	08026660 	.word	0x08026660
 8021a38:	080264f5 	.word	0x080264f5
 8021a3c:	080266d1 	.word	0x080266d1
 8021a40:	1e6f      	subs	r7, r5, #1
 8021a42:	f1b9 0f00 	cmp.w	r9, #0
 8021a46:	d130      	bne.n	8021aaa <__gethex+0x326>
 8021a48:	b127      	cbz	r7, 8021a54 <__gethex+0x2d0>
 8021a4a:	4639      	mov	r1, r7
 8021a4c:	4620      	mov	r0, r4
 8021a4e:	f7fe fc94 	bl	802037a <__any_on>
 8021a52:	4681      	mov	r9, r0
 8021a54:	117a      	asrs	r2, r7, #5
 8021a56:	2301      	movs	r3, #1
 8021a58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021a5c:	f007 071f 	and.w	r7, r7, #31
 8021a60:	40bb      	lsls	r3, r7
 8021a62:	4213      	tst	r3, r2
 8021a64:	4629      	mov	r1, r5
 8021a66:	4620      	mov	r0, r4
 8021a68:	bf18      	it	ne
 8021a6a:	f049 0902 	orrne.w	r9, r9, #2
 8021a6e:	f7ff fe22 	bl	80216b6 <rshift>
 8021a72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021a76:	1b76      	subs	r6, r6, r5
 8021a78:	2502      	movs	r5, #2
 8021a7a:	f1b9 0f00 	cmp.w	r9, #0
 8021a7e:	d047      	beq.n	8021b10 <__gethex+0x38c>
 8021a80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021a84:	2b02      	cmp	r3, #2
 8021a86:	d015      	beq.n	8021ab4 <__gethex+0x330>
 8021a88:	2b03      	cmp	r3, #3
 8021a8a:	d017      	beq.n	8021abc <__gethex+0x338>
 8021a8c:	2b01      	cmp	r3, #1
 8021a8e:	d109      	bne.n	8021aa4 <__gethex+0x320>
 8021a90:	f019 0f02 	tst.w	r9, #2
 8021a94:	d006      	beq.n	8021aa4 <__gethex+0x320>
 8021a96:	f8da 3000 	ldr.w	r3, [sl]
 8021a9a:	ea49 0903 	orr.w	r9, r9, r3
 8021a9e:	f019 0f01 	tst.w	r9, #1
 8021aa2:	d10e      	bne.n	8021ac2 <__gethex+0x33e>
 8021aa4:	f045 0510 	orr.w	r5, r5, #16
 8021aa8:	e032      	b.n	8021b10 <__gethex+0x38c>
 8021aaa:	f04f 0901 	mov.w	r9, #1
 8021aae:	e7d1      	b.n	8021a54 <__gethex+0x2d0>
 8021ab0:	2501      	movs	r5, #1
 8021ab2:	e7e2      	b.n	8021a7a <__gethex+0x2f6>
 8021ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021ab6:	f1c3 0301 	rsb	r3, r3, #1
 8021aba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d0f0      	beq.n	8021aa4 <__gethex+0x320>
 8021ac2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021ac6:	f104 0314 	add.w	r3, r4, #20
 8021aca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021ace:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021ad2:	f04f 0c00 	mov.w	ip, #0
 8021ad6:	4618      	mov	r0, r3
 8021ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8021adc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021ae0:	d01b      	beq.n	8021b1a <__gethex+0x396>
 8021ae2:	3201      	adds	r2, #1
 8021ae4:	6002      	str	r2, [r0, #0]
 8021ae6:	2d02      	cmp	r5, #2
 8021ae8:	f104 0314 	add.w	r3, r4, #20
 8021aec:	d13c      	bne.n	8021b68 <__gethex+0x3e4>
 8021aee:	f8d8 2000 	ldr.w	r2, [r8]
 8021af2:	3a01      	subs	r2, #1
 8021af4:	42b2      	cmp	r2, r6
 8021af6:	d109      	bne.n	8021b0c <__gethex+0x388>
 8021af8:	1171      	asrs	r1, r6, #5
 8021afa:	2201      	movs	r2, #1
 8021afc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021b00:	f006 061f 	and.w	r6, r6, #31
 8021b04:	fa02 f606 	lsl.w	r6, r2, r6
 8021b08:	421e      	tst	r6, r3
 8021b0a:	d13a      	bne.n	8021b82 <__gethex+0x3fe>
 8021b0c:	f045 0520 	orr.w	r5, r5, #32
 8021b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b12:	601c      	str	r4, [r3, #0]
 8021b14:	9b02      	ldr	r3, [sp, #8]
 8021b16:	601f      	str	r7, [r3, #0]
 8021b18:	e6b0      	b.n	802187c <__gethex+0xf8>
 8021b1a:	4299      	cmp	r1, r3
 8021b1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8021b20:	d8d9      	bhi.n	8021ad6 <__gethex+0x352>
 8021b22:	68a3      	ldr	r3, [r4, #8]
 8021b24:	459b      	cmp	fp, r3
 8021b26:	db17      	blt.n	8021b58 <__gethex+0x3d4>
 8021b28:	6861      	ldr	r1, [r4, #4]
 8021b2a:	9801      	ldr	r0, [sp, #4]
 8021b2c:	3101      	adds	r1, #1
 8021b2e:	f7fd ff93 	bl	801fa58 <_Balloc>
 8021b32:	4681      	mov	r9, r0
 8021b34:	b918      	cbnz	r0, 8021b3e <__gethex+0x3ba>
 8021b36:	4b1a      	ldr	r3, [pc, #104]	@ (8021ba0 <__gethex+0x41c>)
 8021b38:	4602      	mov	r2, r0
 8021b3a:	2184      	movs	r1, #132	@ 0x84
 8021b3c:	e6c5      	b.n	80218ca <__gethex+0x146>
 8021b3e:	6922      	ldr	r2, [r4, #16]
 8021b40:	3202      	adds	r2, #2
 8021b42:	f104 010c 	add.w	r1, r4, #12
 8021b46:	0092      	lsls	r2, r2, #2
 8021b48:	300c      	adds	r0, #12
 8021b4a:	f7fd f806 	bl	801eb5a <memcpy>
 8021b4e:	4621      	mov	r1, r4
 8021b50:	9801      	ldr	r0, [sp, #4]
 8021b52:	f7fd ffc1 	bl	801fad8 <_Bfree>
 8021b56:	464c      	mov	r4, r9
 8021b58:	6923      	ldr	r3, [r4, #16]
 8021b5a:	1c5a      	adds	r2, r3, #1
 8021b5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021b60:	6122      	str	r2, [r4, #16]
 8021b62:	2201      	movs	r2, #1
 8021b64:	615a      	str	r2, [r3, #20]
 8021b66:	e7be      	b.n	8021ae6 <__gethex+0x362>
 8021b68:	6922      	ldr	r2, [r4, #16]
 8021b6a:	455a      	cmp	r2, fp
 8021b6c:	dd0b      	ble.n	8021b86 <__gethex+0x402>
 8021b6e:	2101      	movs	r1, #1
 8021b70:	4620      	mov	r0, r4
 8021b72:	f7ff fda0 	bl	80216b6 <rshift>
 8021b76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021b7a:	3701      	adds	r7, #1
 8021b7c:	42bb      	cmp	r3, r7
 8021b7e:	f6ff aee0 	blt.w	8021942 <__gethex+0x1be>
 8021b82:	2501      	movs	r5, #1
 8021b84:	e7c2      	b.n	8021b0c <__gethex+0x388>
 8021b86:	f016 061f 	ands.w	r6, r6, #31
 8021b8a:	d0fa      	beq.n	8021b82 <__gethex+0x3fe>
 8021b8c:	4453      	add	r3, sl
 8021b8e:	f1c6 0620 	rsb	r6, r6, #32
 8021b92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021b96:	f7fe f851 	bl	801fc3c <__hi0bits>
 8021b9a:	42b0      	cmp	r0, r6
 8021b9c:	dbe7      	blt.n	8021b6e <__gethex+0x3ea>
 8021b9e:	e7f0      	b.n	8021b82 <__gethex+0x3fe>
 8021ba0:	080264f5 	.word	0x080264f5

08021ba4 <L_shift>:
 8021ba4:	f1c2 0208 	rsb	r2, r2, #8
 8021ba8:	0092      	lsls	r2, r2, #2
 8021baa:	b570      	push	{r4, r5, r6, lr}
 8021bac:	f1c2 0620 	rsb	r6, r2, #32
 8021bb0:	6843      	ldr	r3, [r0, #4]
 8021bb2:	6804      	ldr	r4, [r0, #0]
 8021bb4:	fa03 f506 	lsl.w	r5, r3, r6
 8021bb8:	432c      	orrs	r4, r5
 8021bba:	40d3      	lsrs	r3, r2
 8021bbc:	6004      	str	r4, [r0, #0]
 8021bbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8021bc2:	4288      	cmp	r0, r1
 8021bc4:	d3f4      	bcc.n	8021bb0 <L_shift+0xc>
 8021bc6:	bd70      	pop	{r4, r5, r6, pc}

08021bc8 <__match>:
 8021bc8:	b530      	push	{r4, r5, lr}
 8021bca:	6803      	ldr	r3, [r0, #0]
 8021bcc:	3301      	adds	r3, #1
 8021bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021bd2:	b914      	cbnz	r4, 8021bda <__match+0x12>
 8021bd4:	6003      	str	r3, [r0, #0]
 8021bd6:	2001      	movs	r0, #1
 8021bd8:	bd30      	pop	{r4, r5, pc}
 8021bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021bde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8021be2:	2d19      	cmp	r5, #25
 8021be4:	bf98      	it	ls
 8021be6:	3220      	addls	r2, #32
 8021be8:	42a2      	cmp	r2, r4
 8021bea:	d0f0      	beq.n	8021bce <__match+0x6>
 8021bec:	2000      	movs	r0, #0
 8021bee:	e7f3      	b.n	8021bd8 <__match+0x10>

08021bf0 <__hexnan>:
 8021bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bf4:	680b      	ldr	r3, [r1, #0]
 8021bf6:	6801      	ldr	r1, [r0, #0]
 8021bf8:	115e      	asrs	r6, r3, #5
 8021bfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021bfe:	f013 031f 	ands.w	r3, r3, #31
 8021c02:	b087      	sub	sp, #28
 8021c04:	bf18      	it	ne
 8021c06:	3604      	addne	r6, #4
 8021c08:	2500      	movs	r5, #0
 8021c0a:	1f37      	subs	r7, r6, #4
 8021c0c:	4682      	mov	sl, r0
 8021c0e:	4690      	mov	r8, r2
 8021c10:	9301      	str	r3, [sp, #4]
 8021c12:	f846 5c04 	str.w	r5, [r6, #-4]
 8021c16:	46b9      	mov	r9, r7
 8021c18:	463c      	mov	r4, r7
 8021c1a:	9502      	str	r5, [sp, #8]
 8021c1c:	46ab      	mov	fp, r5
 8021c1e:	784a      	ldrb	r2, [r1, #1]
 8021c20:	1c4b      	adds	r3, r1, #1
 8021c22:	9303      	str	r3, [sp, #12]
 8021c24:	b342      	cbz	r2, 8021c78 <__hexnan+0x88>
 8021c26:	4610      	mov	r0, r2
 8021c28:	9105      	str	r1, [sp, #20]
 8021c2a:	9204      	str	r2, [sp, #16]
 8021c2c:	f7ff fd95 	bl	802175a <__hexdig_fun>
 8021c30:	2800      	cmp	r0, #0
 8021c32:	d151      	bne.n	8021cd8 <__hexnan+0xe8>
 8021c34:	9a04      	ldr	r2, [sp, #16]
 8021c36:	9905      	ldr	r1, [sp, #20]
 8021c38:	2a20      	cmp	r2, #32
 8021c3a:	d818      	bhi.n	8021c6e <__hexnan+0x7e>
 8021c3c:	9b02      	ldr	r3, [sp, #8]
 8021c3e:	459b      	cmp	fp, r3
 8021c40:	dd13      	ble.n	8021c6a <__hexnan+0x7a>
 8021c42:	454c      	cmp	r4, r9
 8021c44:	d206      	bcs.n	8021c54 <__hexnan+0x64>
 8021c46:	2d07      	cmp	r5, #7
 8021c48:	dc04      	bgt.n	8021c54 <__hexnan+0x64>
 8021c4a:	462a      	mov	r2, r5
 8021c4c:	4649      	mov	r1, r9
 8021c4e:	4620      	mov	r0, r4
 8021c50:	f7ff ffa8 	bl	8021ba4 <L_shift>
 8021c54:	4544      	cmp	r4, r8
 8021c56:	d952      	bls.n	8021cfe <__hexnan+0x10e>
 8021c58:	2300      	movs	r3, #0
 8021c5a:	f1a4 0904 	sub.w	r9, r4, #4
 8021c5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8021c62:	f8cd b008 	str.w	fp, [sp, #8]
 8021c66:	464c      	mov	r4, r9
 8021c68:	461d      	mov	r5, r3
 8021c6a:	9903      	ldr	r1, [sp, #12]
 8021c6c:	e7d7      	b.n	8021c1e <__hexnan+0x2e>
 8021c6e:	2a29      	cmp	r2, #41	@ 0x29
 8021c70:	d157      	bne.n	8021d22 <__hexnan+0x132>
 8021c72:	3102      	adds	r1, #2
 8021c74:	f8ca 1000 	str.w	r1, [sl]
 8021c78:	f1bb 0f00 	cmp.w	fp, #0
 8021c7c:	d051      	beq.n	8021d22 <__hexnan+0x132>
 8021c7e:	454c      	cmp	r4, r9
 8021c80:	d206      	bcs.n	8021c90 <__hexnan+0xa0>
 8021c82:	2d07      	cmp	r5, #7
 8021c84:	dc04      	bgt.n	8021c90 <__hexnan+0xa0>
 8021c86:	462a      	mov	r2, r5
 8021c88:	4649      	mov	r1, r9
 8021c8a:	4620      	mov	r0, r4
 8021c8c:	f7ff ff8a 	bl	8021ba4 <L_shift>
 8021c90:	4544      	cmp	r4, r8
 8021c92:	d936      	bls.n	8021d02 <__hexnan+0x112>
 8021c94:	f1a8 0204 	sub.w	r2, r8, #4
 8021c98:	4623      	mov	r3, r4
 8021c9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8021c9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8021ca2:	429f      	cmp	r7, r3
 8021ca4:	d2f9      	bcs.n	8021c9a <__hexnan+0xaa>
 8021ca6:	1b3b      	subs	r3, r7, r4
 8021ca8:	f023 0303 	bic.w	r3, r3, #3
 8021cac:	3304      	adds	r3, #4
 8021cae:	3401      	adds	r4, #1
 8021cb0:	3e03      	subs	r6, #3
 8021cb2:	42b4      	cmp	r4, r6
 8021cb4:	bf88      	it	hi
 8021cb6:	2304      	movhi	r3, #4
 8021cb8:	4443      	add	r3, r8
 8021cba:	2200      	movs	r2, #0
 8021cbc:	f843 2b04 	str.w	r2, [r3], #4
 8021cc0:	429f      	cmp	r7, r3
 8021cc2:	d2fb      	bcs.n	8021cbc <__hexnan+0xcc>
 8021cc4:	683b      	ldr	r3, [r7, #0]
 8021cc6:	b91b      	cbnz	r3, 8021cd0 <__hexnan+0xe0>
 8021cc8:	4547      	cmp	r7, r8
 8021cca:	d128      	bne.n	8021d1e <__hexnan+0x12e>
 8021ccc:	2301      	movs	r3, #1
 8021cce:	603b      	str	r3, [r7, #0]
 8021cd0:	2005      	movs	r0, #5
 8021cd2:	b007      	add	sp, #28
 8021cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cd8:	3501      	adds	r5, #1
 8021cda:	2d08      	cmp	r5, #8
 8021cdc:	f10b 0b01 	add.w	fp, fp, #1
 8021ce0:	dd06      	ble.n	8021cf0 <__hexnan+0x100>
 8021ce2:	4544      	cmp	r4, r8
 8021ce4:	d9c1      	bls.n	8021c6a <__hexnan+0x7a>
 8021ce6:	2300      	movs	r3, #0
 8021ce8:	f844 3c04 	str.w	r3, [r4, #-4]
 8021cec:	2501      	movs	r5, #1
 8021cee:	3c04      	subs	r4, #4
 8021cf0:	6822      	ldr	r2, [r4, #0]
 8021cf2:	f000 000f 	and.w	r0, r0, #15
 8021cf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8021cfa:	6020      	str	r0, [r4, #0]
 8021cfc:	e7b5      	b.n	8021c6a <__hexnan+0x7a>
 8021cfe:	2508      	movs	r5, #8
 8021d00:	e7b3      	b.n	8021c6a <__hexnan+0x7a>
 8021d02:	9b01      	ldr	r3, [sp, #4]
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	d0dd      	beq.n	8021cc4 <__hexnan+0xd4>
 8021d08:	f1c3 0320 	rsb	r3, r3, #32
 8021d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8021d10:	40da      	lsrs	r2, r3
 8021d12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8021d16:	4013      	ands	r3, r2
 8021d18:	f846 3c04 	str.w	r3, [r6, #-4]
 8021d1c:	e7d2      	b.n	8021cc4 <__hexnan+0xd4>
 8021d1e:	3f04      	subs	r7, #4
 8021d20:	e7d0      	b.n	8021cc4 <__hexnan+0xd4>
 8021d22:	2004      	movs	r0, #4
 8021d24:	e7d5      	b.n	8021cd2 <__hexnan+0xe2>

08021d26 <__ascii_mbtowc>:
 8021d26:	b082      	sub	sp, #8
 8021d28:	b901      	cbnz	r1, 8021d2c <__ascii_mbtowc+0x6>
 8021d2a:	a901      	add	r1, sp, #4
 8021d2c:	b142      	cbz	r2, 8021d40 <__ascii_mbtowc+0x1a>
 8021d2e:	b14b      	cbz	r3, 8021d44 <__ascii_mbtowc+0x1e>
 8021d30:	7813      	ldrb	r3, [r2, #0]
 8021d32:	600b      	str	r3, [r1, #0]
 8021d34:	7812      	ldrb	r2, [r2, #0]
 8021d36:	1e10      	subs	r0, r2, #0
 8021d38:	bf18      	it	ne
 8021d3a:	2001      	movne	r0, #1
 8021d3c:	b002      	add	sp, #8
 8021d3e:	4770      	bx	lr
 8021d40:	4610      	mov	r0, r2
 8021d42:	e7fb      	b.n	8021d3c <__ascii_mbtowc+0x16>
 8021d44:	f06f 0001 	mvn.w	r0, #1
 8021d48:	e7f8      	b.n	8021d3c <__ascii_mbtowc+0x16>

08021d4a <_realloc_r>:
 8021d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d4e:	4680      	mov	r8, r0
 8021d50:	4615      	mov	r5, r2
 8021d52:	460c      	mov	r4, r1
 8021d54:	b921      	cbnz	r1, 8021d60 <_realloc_r+0x16>
 8021d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021d5a:	4611      	mov	r1, r2
 8021d5c:	f7fd bdf0 	b.w	801f940 <_malloc_r>
 8021d60:	b92a      	cbnz	r2, 8021d6e <_realloc_r+0x24>
 8021d62:	f7fd fd79 	bl	801f858 <_free_r>
 8021d66:	2400      	movs	r4, #0
 8021d68:	4620      	mov	r0, r4
 8021d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d6e:	f000 f8ef 	bl	8021f50 <_malloc_usable_size_r>
 8021d72:	4285      	cmp	r5, r0
 8021d74:	4606      	mov	r6, r0
 8021d76:	d802      	bhi.n	8021d7e <_realloc_r+0x34>
 8021d78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021d7c:	d8f4      	bhi.n	8021d68 <_realloc_r+0x1e>
 8021d7e:	4629      	mov	r1, r5
 8021d80:	4640      	mov	r0, r8
 8021d82:	f7fd fddd 	bl	801f940 <_malloc_r>
 8021d86:	4607      	mov	r7, r0
 8021d88:	2800      	cmp	r0, #0
 8021d8a:	d0ec      	beq.n	8021d66 <_realloc_r+0x1c>
 8021d8c:	42b5      	cmp	r5, r6
 8021d8e:	462a      	mov	r2, r5
 8021d90:	4621      	mov	r1, r4
 8021d92:	bf28      	it	cs
 8021d94:	4632      	movcs	r2, r6
 8021d96:	f7fc fee0 	bl	801eb5a <memcpy>
 8021d9a:	4621      	mov	r1, r4
 8021d9c:	4640      	mov	r0, r8
 8021d9e:	f7fd fd5b 	bl	801f858 <_free_r>
 8021da2:	463c      	mov	r4, r7
 8021da4:	e7e0      	b.n	8021d68 <_realloc_r+0x1e>

08021da6 <__ascii_wctomb>:
 8021da6:	4603      	mov	r3, r0
 8021da8:	4608      	mov	r0, r1
 8021daa:	b141      	cbz	r1, 8021dbe <__ascii_wctomb+0x18>
 8021dac:	2aff      	cmp	r2, #255	@ 0xff
 8021dae:	d904      	bls.n	8021dba <__ascii_wctomb+0x14>
 8021db0:	228a      	movs	r2, #138	@ 0x8a
 8021db2:	601a      	str	r2, [r3, #0]
 8021db4:	f04f 30ff 	mov.w	r0, #4294967295
 8021db8:	4770      	bx	lr
 8021dba:	700a      	strb	r2, [r1, #0]
 8021dbc:	2001      	movs	r0, #1
 8021dbe:	4770      	bx	lr

08021dc0 <__swhatbuf_r>:
 8021dc0:	b570      	push	{r4, r5, r6, lr}
 8021dc2:	460c      	mov	r4, r1
 8021dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021dc8:	2900      	cmp	r1, #0
 8021dca:	b096      	sub	sp, #88	@ 0x58
 8021dcc:	4615      	mov	r5, r2
 8021dce:	461e      	mov	r6, r3
 8021dd0:	da0d      	bge.n	8021dee <__swhatbuf_r+0x2e>
 8021dd2:	89a3      	ldrh	r3, [r4, #12]
 8021dd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021dd8:	f04f 0100 	mov.w	r1, #0
 8021ddc:	bf14      	ite	ne
 8021dde:	2340      	movne	r3, #64	@ 0x40
 8021de0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021de4:	2000      	movs	r0, #0
 8021de6:	6031      	str	r1, [r6, #0]
 8021de8:	602b      	str	r3, [r5, #0]
 8021dea:	b016      	add	sp, #88	@ 0x58
 8021dec:	bd70      	pop	{r4, r5, r6, pc}
 8021dee:	466a      	mov	r2, sp
 8021df0:	f000 f878 	bl	8021ee4 <_fstat_r>
 8021df4:	2800      	cmp	r0, #0
 8021df6:	dbec      	blt.n	8021dd2 <__swhatbuf_r+0x12>
 8021df8:	9901      	ldr	r1, [sp, #4]
 8021dfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021dfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021e02:	4259      	negs	r1, r3
 8021e04:	4159      	adcs	r1, r3
 8021e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021e0a:	e7eb      	b.n	8021de4 <__swhatbuf_r+0x24>

08021e0c <__smakebuf_r>:
 8021e0c:	898b      	ldrh	r3, [r1, #12]
 8021e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021e10:	079d      	lsls	r5, r3, #30
 8021e12:	4606      	mov	r6, r0
 8021e14:	460c      	mov	r4, r1
 8021e16:	d507      	bpl.n	8021e28 <__smakebuf_r+0x1c>
 8021e18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021e1c:	6023      	str	r3, [r4, #0]
 8021e1e:	6123      	str	r3, [r4, #16]
 8021e20:	2301      	movs	r3, #1
 8021e22:	6163      	str	r3, [r4, #20]
 8021e24:	b003      	add	sp, #12
 8021e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e28:	ab01      	add	r3, sp, #4
 8021e2a:	466a      	mov	r2, sp
 8021e2c:	f7ff ffc8 	bl	8021dc0 <__swhatbuf_r>
 8021e30:	9f00      	ldr	r7, [sp, #0]
 8021e32:	4605      	mov	r5, r0
 8021e34:	4639      	mov	r1, r7
 8021e36:	4630      	mov	r0, r6
 8021e38:	f7fd fd82 	bl	801f940 <_malloc_r>
 8021e3c:	b948      	cbnz	r0, 8021e52 <__smakebuf_r+0x46>
 8021e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e42:	059a      	lsls	r2, r3, #22
 8021e44:	d4ee      	bmi.n	8021e24 <__smakebuf_r+0x18>
 8021e46:	f023 0303 	bic.w	r3, r3, #3
 8021e4a:	f043 0302 	orr.w	r3, r3, #2
 8021e4e:	81a3      	strh	r3, [r4, #12]
 8021e50:	e7e2      	b.n	8021e18 <__smakebuf_r+0xc>
 8021e52:	89a3      	ldrh	r3, [r4, #12]
 8021e54:	6020      	str	r0, [r4, #0]
 8021e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021e5a:	81a3      	strh	r3, [r4, #12]
 8021e5c:	9b01      	ldr	r3, [sp, #4]
 8021e5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021e62:	b15b      	cbz	r3, 8021e7c <__smakebuf_r+0x70>
 8021e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021e68:	4630      	mov	r0, r6
 8021e6a:	f000 f84d 	bl	8021f08 <_isatty_r>
 8021e6e:	b128      	cbz	r0, 8021e7c <__smakebuf_r+0x70>
 8021e70:	89a3      	ldrh	r3, [r4, #12]
 8021e72:	f023 0303 	bic.w	r3, r3, #3
 8021e76:	f043 0301 	orr.w	r3, r3, #1
 8021e7a:	81a3      	strh	r3, [r4, #12]
 8021e7c:	89a3      	ldrh	r3, [r4, #12]
 8021e7e:	431d      	orrs	r5, r3
 8021e80:	81a5      	strh	r5, [r4, #12]
 8021e82:	e7cf      	b.n	8021e24 <__smakebuf_r+0x18>

08021e84 <_raise_r>:
 8021e84:	291f      	cmp	r1, #31
 8021e86:	b538      	push	{r3, r4, r5, lr}
 8021e88:	4605      	mov	r5, r0
 8021e8a:	460c      	mov	r4, r1
 8021e8c:	d904      	bls.n	8021e98 <_raise_r+0x14>
 8021e8e:	2316      	movs	r3, #22
 8021e90:	6003      	str	r3, [r0, #0]
 8021e92:	f04f 30ff 	mov.w	r0, #4294967295
 8021e96:	bd38      	pop	{r3, r4, r5, pc}
 8021e98:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021e9a:	b112      	cbz	r2, 8021ea2 <_raise_r+0x1e>
 8021e9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021ea0:	b94b      	cbnz	r3, 8021eb6 <_raise_r+0x32>
 8021ea2:	4628      	mov	r0, r5
 8021ea4:	f000 f852 	bl	8021f4c <_getpid_r>
 8021ea8:	4622      	mov	r2, r4
 8021eaa:	4601      	mov	r1, r0
 8021eac:	4628      	mov	r0, r5
 8021eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021eb2:	f000 b839 	b.w	8021f28 <_kill_r>
 8021eb6:	2b01      	cmp	r3, #1
 8021eb8:	d00a      	beq.n	8021ed0 <_raise_r+0x4c>
 8021eba:	1c59      	adds	r1, r3, #1
 8021ebc:	d103      	bne.n	8021ec6 <_raise_r+0x42>
 8021ebe:	2316      	movs	r3, #22
 8021ec0:	6003      	str	r3, [r0, #0]
 8021ec2:	2001      	movs	r0, #1
 8021ec4:	e7e7      	b.n	8021e96 <_raise_r+0x12>
 8021ec6:	2100      	movs	r1, #0
 8021ec8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021ecc:	4620      	mov	r0, r4
 8021ece:	4798      	blx	r3
 8021ed0:	2000      	movs	r0, #0
 8021ed2:	e7e0      	b.n	8021e96 <_raise_r+0x12>

08021ed4 <raise>:
 8021ed4:	4b02      	ldr	r3, [pc, #8]	@ (8021ee0 <raise+0xc>)
 8021ed6:	4601      	mov	r1, r0
 8021ed8:	6818      	ldr	r0, [r3, #0]
 8021eda:	f7ff bfd3 	b.w	8021e84 <_raise_r>
 8021ede:	bf00      	nop
 8021ee0:	20000054 	.word	0x20000054

08021ee4 <_fstat_r>:
 8021ee4:	b538      	push	{r3, r4, r5, lr}
 8021ee6:	4d07      	ldr	r5, [pc, #28]	@ (8021f04 <_fstat_r+0x20>)
 8021ee8:	2300      	movs	r3, #0
 8021eea:	4604      	mov	r4, r0
 8021eec:	4608      	mov	r0, r1
 8021eee:	4611      	mov	r1, r2
 8021ef0:	602b      	str	r3, [r5, #0]
 8021ef2:	f7df ff5d 	bl	8001db0 <_fstat>
 8021ef6:	1c43      	adds	r3, r0, #1
 8021ef8:	d102      	bne.n	8021f00 <_fstat_r+0x1c>
 8021efa:	682b      	ldr	r3, [r5, #0]
 8021efc:	b103      	cbz	r3, 8021f00 <_fstat_r+0x1c>
 8021efe:	6023      	str	r3, [r4, #0]
 8021f00:	bd38      	pop	{r3, r4, r5, pc}
 8021f02:	bf00      	nop
 8021f04:	2000f760 	.word	0x2000f760

08021f08 <_isatty_r>:
 8021f08:	b538      	push	{r3, r4, r5, lr}
 8021f0a:	4d06      	ldr	r5, [pc, #24]	@ (8021f24 <_isatty_r+0x1c>)
 8021f0c:	2300      	movs	r3, #0
 8021f0e:	4604      	mov	r4, r0
 8021f10:	4608      	mov	r0, r1
 8021f12:	602b      	str	r3, [r5, #0]
 8021f14:	f7df ff5c 	bl	8001dd0 <_isatty>
 8021f18:	1c43      	adds	r3, r0, #1
 8021f1a:	d102      	bne.n	8021f22 <_isatty_r+0x1a>
 8021f1c:	682b      	ldr	r3, [r5, #0]
 8021f1e:	b103      	cbz	r3, 8021f22 <_isatty_r+0x1a>
 8021f20:	6023      	str	r3, [r4, #0]
 8021f22:	bd38      	pop	{r3, r4, r5, pc}
 8021f24:	2000f760 	.word	0x2000f760

08021f28 <_kill_r>:
 8021f28:	b538      	push	{r3, r4, r5, lr}
 8021f2a:	4d07      	ldr	r5, [pc, #28]	@ (8021f48 <_kill_r+0x20>)
 8021f2c:	2300      	movs	r3, #0
 8021f2e:	4604      	mov	r4, r0
 8021f30:	4608      	mov	r0, r1
 8021f32:	4611      	mov	r1, r2
 8021f34:	602b      	str	r3, [r5, #0]
 8021f36:	f7df fef5 	bl	8001d24 <_kill>
 8021f3a:	1c43      	adds	r3, r0, #1
 8021f3c:	d102      	bne.n	8021f44 <_kill_r+0x1c>
 8021f3e:	682b      	ldr	r3, [r5, #0]
 8021f40:	b103      	cbz	r3, 8021f44 <_kill_r+0x1c>
 8021f42:	6023      	str	r3, [r4, #0]
 8021f44:	bd38      	pop	{r3, r4, r5, pc}
 8021f46:	bf00      	nop
 8021f48:	2000f760 	.word	0x2000f760

08021f4c <_getpid_r>:
 8021f4c:	f7df bee2 	b.w	8001d14 <_getpid>

08021f50 <_malloc_usable_size_r>:
 8021f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021f54:	1f18      	subs	r0, r3, #4
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	bfbc      	itt	lt
 8021f5a:	580b      	ldrlt	r3, [r1, r0]
 8021f5c:	18c0      	addlt	r0, r0, r3
 8021f5e:	4770      	bx	lr

08021f60 <_init>:
 8021f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f62:	bf00      	nop
 8021f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021f66:	bc08      	pop	{r3}
 8021f68:	469e      	mov	lr, r3
 8021f6a:	4770      	bx	lr

08021f6c <_fini>:
 8021f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f6e:	bf00      	nop
 8021f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021f72:	bc08      	pop	{r3}
 8021f74:	469e      	mov	lr, r3
 8021f76:	4770      	bx	lr
