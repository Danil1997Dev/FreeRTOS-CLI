
RTOS-CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a74  08012550  08012550  00013550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fc4  08012fc4  000141f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012fc4  08012fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fcc  08012fcc  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fcc  08012fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012fd0  08012fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08012fd4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000141f4  2**0
                  CONTENTS
 10 .bss          0000b804  200001f4  200001f4  000141f4  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2000b9f8  2000b9f8  000141f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ba9a  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006319  00000000  00000000  0003fcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002178  00000000  00000000  00045fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019ae  00000000  00000000  00048150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fdd2  00000000  00000000  00049afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d4a3  00000000  00000000  000798d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fca39  00000000  00000000  000a6d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a37ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a05c  00000000  00000000  001a37f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  001ad84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012538 	.word	0x08012538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08012538 	.word	0x08012538

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800100e:	2008      	movs	r0, #8
 8001010:	f00c fc84 	bl	800d91c <pvPortMalloc>
 8001014:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001020:	f383 8811 	msr	BASEPRI, r3
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	60bb      	str	r3, [r7, #8]
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8e7 	bl	8001210 <prvRegisterCommand>
            xReturn = pdPASS;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8001046:	697b      	ldr	r3, [r7, #20]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d141      	bne.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800106a:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <FreeRTOS_CLIProcessCommand+0x100>)
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e037      	b.n	80010e0 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800107a:	69b8      	ldr	r0, [r7, #24]
 800107c:	f7ff f8f8 	bl	8000270 <strlen>
 8001080:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f00e f8d3 	bl	800f232 <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d121      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d005      	beq.n	80010aa <FreeRTOS_CLIProcessCommand+0x5a>
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d115      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db18      	blt.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f911 	bl	80012e0 <prvGetNumberOfParameters>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d00c      	beq.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 80010d4:	e009      	b.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1c3      	bne.n	8001070 <FreeRTOS_CLIProcessCommand+0x20>
 80010e8:	e000      	b.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ea:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d108      	bne.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4915      	ldr	r1, [pc, #84]	@ (8001154 <FreeRTOS_CLIProcessCommand+0x104>)
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f00e f8a9 	bl	800f256 <strncpy>
        pxCommand = NULL;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e01a      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00f      	beq.n	8001134 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	4798      	blx	r3
 8001124:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e006      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <FreeRTOS_CLIProcessCommand+0x108>)
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f00e f88c 	bl	800f256 <strncpy>
        xReturn = pdFALSE;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001142:	69fb      	ldr	r3, [r7, #28]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000210 	.word	0x20000210
 8001150:	20000000 	.word	0x20000000
 8001154:	08012588 	.word	0x08012588
 8001158:	080125e0 	.word	0x080125e0

0800115c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8001176:	e03b      	b.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1f4      	bne.n	8001178 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800118e:	e002      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x4a>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d0f4      	beq.n	8001190 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d025      	beq.n	80011fa <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d119      	bne.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011c0:	e007      	b.n	80011d2 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FreeRTOS_CLIGetParameter+0x86>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d1ef      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
                }

                break;
 80011ee:	e006      	b.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3c2      	bcc.n	800117e <FreeRTOS_CLIGetParameter+0x22>
 80011f8:	e002      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011fe:	bf00      	nop
        }
    }

    return pcReturn;
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <prvRegisterCommand+0x28>
	__asm volatile
 8001220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	60fb      	str	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <prvRegisterCommand+0x46>
	__asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	60bb      	str	r3, [r7, #8]
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	e7fd      	b.n	8001252 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 8001256:	f00c fa3f 	bl	800d6d8 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <prvRegisterCommand+0x70>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <prvRegisterCommand+0x70>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001274:	f00c fa62 	bl	800d73c <vPortExitCritical>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <prvHelpCommand+0x54>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <prvHelpCommand+0x54>)
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <prvHelpCommand+0x58>)
 800129c:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <prvHelpCommand+0x54>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f00d ffd3 	bl	800f256 <strncpy>
    pxCommand = pxCommand->pxNext;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <prvHelpCommand+0x54>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e001      	b.n	80012cc <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000214 	.word	0x20000214
 80012dc:	20000000 	.word	0x20000000

080012e0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012f0:	e014      	b.n	800131c <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d10b      	bne.n	8001312 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d00a      	beq.n	8001316 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 800130c:	2301      	movs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e001      	b.n	8001316 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e6      	bne.n	80012f2 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_write>:
/* CLI escape sequences*/
uint8_t backspace[] = "\b \b";
uint8_t backspace_tt[] = " \b";

int _write(int file, char *data, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00b      	b.n	8001372 <_write+0x2a>
    {
        // Send the character
    	HAL_UART_Transmit(&huart3, (const uint8_t*)&data[i], 1, 0xffff);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	18d1      	adds	r1, r2, r3
 8001360:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001364:	2201      	movs	r2, #1
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <_write+0x3c>)
 8001368:	f004 fac6 	bl	80058f8 <HAL_UART_Transmit>
    for (int i = 0; i < len; i++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbef      	blt.n	800135a <_write+0x12>
        // Wait for the transmit buffer to be empty
//        while (!(USART3->ISR & USART_ISR_TXE));
    }
    return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200056bc 	.word	0x200056bc

08001388 <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	2100      	movs	r1, #0
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f00d ff35 	bl	800f208 <memset>
    printf("\033[2J\033[1;1H");
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <cmd_clearScreen+0x28>)
 80013a0:	f00d fe0e 	bl	800efc0 <iprintf>
    return pdFALSE;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0801263c 	.word	0x0801263c

080013b4 <cmd_fs>:
//*****************************************************************************
BaseType_t cmd_fs(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    const char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	461a      	mov	r2, r3
 80013c6:	2101      	movs	r1, #1
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fec7 	bl	800115c <FreeRTOS_CLIGetParameter>
 80013ce:	6278      	str	r0, [r7, #36]	@ 0x24
                          1,
                          /* Store the parameter string length. */
						  &xParameter1StringLength
                        );

    if (pcParameter1 == (const char *)"-m")
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	4a1a      	ldr	r2, [pc, #104]	@ (800143c <cmd_fs+0x88>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d104      	bne.n	80013e2 <cmd_fs+0x2e>
    {
    	mount_fs(&fs, FS_MOUNT);
 80013d8:	2101      	movs	r1, #1
 80013da:	4819      	ldr	r0, [pc, #100]	@ (8001440 <cmd_fs+0x8c>)
 80013dc:	f005 ffde 	bl	800739c <mount_fs>
 80013e0:	e013      	b.n	800140a <cmd_fs+0x56>

    }
    else if (pcParameter1 == (const char *)"-u")
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <cmd_fs+0x90>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d104      	bne.n	80013f4 <cmd_fs+0x40>
    {
    	mount_fs(&fs, FS_UNMOUNT);
 80013ea:	2102      	movs	r1, #2
 80013ec:	4814      	ldr	r0, [pc, #80]	@ (8001440 <cmd_fs+0x8c>)
 80013ee:	f005 ffd5 	bl	800739c <mount_fs>
 80013f2:	e00a      	b.n	800140a <cmd_fs+0x56>

    }
    else
    {

    	strcpy(pcWriteBuffer, (char *)"incorrect parameter");
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <cmd_fs+0x94>)
 80013f8:	461d      	mov	r5, r3
 80013fa:	4614      	mov	r4, r2
 80013fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fe:	6028      	str	r0, [r5, #0]
 8001400:	6069      	str	r1, [r5, #4]
 8001402:	60aa      	str	r2, [r5, #8]
 8001404:	60eb      	str	r3, [r5, #12]
 8001406:	6820      	ldr	r0, [r4, #0]
 8001408:	6128      	str	r0, [r5, #16]
    }
    xSemaphoreGive(fsSemHandle);
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <cmd_fs+0x98>)
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	f009 fdf2 	bl	800affc <xQueueGenericSend>
    uint8_t string[] = "\r\nfs comlited\r\n";
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <cmd_fs+0x9c>)
 800141a:	f107 0410 	add.w	r4, r7, #16
 800141e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strcpy(pcWriteBuffer, (char *)string);
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4619      	mov	r1, r3
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f00e f847 	bl	800f4be <strcpy>

    return pdFALSE;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bdb0      	pop	{r4, r5, r7, pc}
 800143a:	bf00      	nop
 800143c:	08012648 	.word	0x08012648
 8001440:	20005710 	.word	0x20005710
 8001444:	0801264c 	.word	0x0801264c
 8001448:	08012650 	.word	0x08012650
 800144c:	200054d0 	.word	0x200054d0
 8001450:	08012664 	.word	0x08012664

08001454 <cmd_connect>:
//*****************************************************************************
BaseType_t cmd_connect(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08f      	sub	sp, #60	@ 0x3c
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
    BaseType_t xParameter1StringLength, xParameter2StringLength;
    char *addr_len;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8001460:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001464:	461a      	mov	r2, r3
 8001466:	2101      	movs	r1, #1
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fe77 	bl	800115c <FreeRTOS_CLIGetParameter>
 800146e:	6378      	str	r0, [r7, #52]	@ 0x34
                          1,
                          /* Store the parameter string length. */
						  &xParameter1StringLength
                        );

    pcParameter2 = FreeRTOS_CLIGetParameter
 8001470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001474:	461a      	mov	r2, r3
 8001476:	2102      	movs	r1, #2
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fe6f 	bl	800115c <FreeRTOS_CLIGetParameter>
 800147e:	6338      	str	r0, [r7, #48]	@ 0x30
                          2,
                          /* Store the parameter string length. */
						  &xParameter2StringLength
                        );

    remout_port = atoi(pcParameter2);
 8001480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001482:	f00c fc40 	bl	800dd06 <atoi>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <cmd_connect+0x8c>)
 800148c:	801a      	strh	r2, [r3, #0]
    addr_len = strstr(pcParameter1, " ");
 800148e:	2120      	movs	r1, #32
 8001490:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001492:	f00d fec1 	bl	800f218 <strchr>
 8001496:	62f8      	str	r0, [r7, #44]	@ 0x2c
    *addr_len = '\0';
 8001498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
    remout_ip = (char *)pcParameter1;
 800149e:	4a11      	ldr	r2, [pc, #68]	@ (80014e4 <cmd_connect+0x90>)
 80014a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a2:	6013      	str	r3, [r2, #0]
    uint8_t string[] = "\r\nConnected!\r\n";
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <cmd_connect+0x94>)
 80014a6:	f107 0414 	add.w	r4, r7, #20
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	c407      	stmia	r4!, {r0, r1, r2}
 80014ae:	8023      	strh	r3, [r4, #0]
 80014b0:	3402      	adds	r4, #2
 80014b2:	0c1b      	lsrs	r3, r3, #16
 80014b4:	7023      	strb	r3, [r4, #0]
    cliWrite((char *)"Connection...\r\n");
 80014b6:	480d      	ldr	r0, [pc, #52]	@ (80014ec <cmd_connect+0x98>)
 80014b8:	f000 f83a 	bl	8001530 <cliWrite>
    xSemaphoreGive(connectSemHandle);
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <cmd_connect+0x9c>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	f009 fd99 	bl	800affc <xQueueGenericSend>
    strcpy(pcWriteBuffer, (char *)string);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f00d fff4 	bl	800f4be <strcpy>

    return pdFALSE;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	373c      	adds	r7, #60	@ 0x3c
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd90      	pop	{r4, r7, pc}
 80014e0:	20000a4c 	.word	0x20000a4c
 80014e4:	20000010 	.word	0x20000010
 80014e8:	08012684 	.word	0x08012684
 80014ec:	08012674 	.word	0x08012674
 80014f0:	200054c8 	.word	0x200054c8

080014f4 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
    //itterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	e009      	b.n	8001514 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	4a09      	ldr	r2, [pc, #36]	@ (800152c <vRegisterCLICommands+0x38>)
 8001506:	4413      	add	r3, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fd6b 	bl	8000fe4 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3301      	adds	r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4a05      	ldr	r2, [pc, #20]	@ (800152c <vRegisterCLICommands+0x38>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4413      	add	r3, r2
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1ee      	bne.n	8001500 <vRegisterCLICommands+0xc>
    }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	08012a04 	.word	0x08012a04

08001530 <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
   printf("%s", str);
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4806      	ldr	r0, [pc, #24]	@ (8001554 <cliWrite+0x24>)
 800153c:	f00d fd40 	bl	800efc0 <iprintf>
   // flush stdout
   fflush(stdout);
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <cliWrite+0x28>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4618      	mov	r0, r3
 8001548:	f00d fc64 	bl	800ee14 <fflush>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	0801275c 	.word	0x0801275c
 8001558:	20000038 	.word	0x20000038

0800155c <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint8_t *cInputIndex)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
    cliWrite("\r\n");
 8001568:	4810      	ldr	r0, [pc, #64]	@ (80015ac <handleNewline+0x50>)
 800156a:	f7ff ffe1 	bl	8001530 <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800156e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff fd6b 	bl	8001050 <FreeRTOS_CLIProcessCommand>
 800157a:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer);
 800157c:	68b8      	ldr	r0, [r7, #8]
 800157e:	f7ff ffd7 	bl	8001530 <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f2      	bne.n	800156e <handleNewline+0x12>

    cliWrite(cli_prompt);
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <handleNewline+0x54>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ffcf 	bl	8001530 <cliWrite>
    *cInputIndex = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 8001598:	2232      	movs	r2, #50	@ 0x32
 800159a:	2100      	movs	r1, #0
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f00d fe33 	bl	800f208 <memset>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08012760 	.word	0x08012760
 80015b0:	2000000c 	.word	0x2000000c

080015b4 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d010      	beq.n	80015e8 <handleBackspace+0x34>
    {
        (*cInputIndex)--;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace);
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt);
 80015e0:	4807      	ldr	r0, [pc, #28]	@ (8001600 <handleBackspace+0x4c>)
 80015e2:	f7ff ffa5 	bl	8001530 <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right);
#endif
    }
}
 80015e6:	e006      	b.n	80015f6 <handleBackspace+0x42>
        uint8_t right[] = "\x1b\x5b\x43";
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <handleBackspace+0x50>)
 80015ea:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff9d 	bl	8001530 <cliWrite>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000014 	.word	0x20000014
 8001604:	00435b1b 	.word	0x00435b1b

08001608 <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <handleCharacterInput+0x5c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b0d      	cmp	r3, #13
 8001618:	d01f      	beq.n	800165a <handleCharacterInput+0x52>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <handleCharacterInput+0x5c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b08      	cmp	r3, #8
 8001620:	d003      	beq.n	800162a <handleCharacterInput+0x22>
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <handleCharacterInput+0x5c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b7f      	cmp	r3, #127	@ 0x7f
 8001628:	d104      	bne.n	8001634 <handleCharacterInput+0x2c>
    {
        handleBackspace(cInputIndex, pcInputString);
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffc1 	bl	80015b4 <handleBackspace>
 8001632:	e013      	b.n	800165c <handleCharacterInput+0x54>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b31      	cmp	r3, #49	@ 0x31
 800163a:	d80f      	bhi.n	800165c <handleCharacterInput+0x54>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <handleCharacterInput+0x5c>)
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e000      	b.n	800165c <handleCharacterInput+0x54>
        return;
 800165a:	bf00      	nop
        }
    }
}
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000a4a 	.word	0x20000a4a

08001668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_DMA_Init+0x4c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <MX_DMA_Init+0x4c>)
 8001678:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <MX_DMA_Init+0x4c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	203b      	movs	r0, #59	@ 0x3b
 8001690:	f000 ff76 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001694:	203b      	movs	r0, #59	@ 0x3b
 8001696:	f000 ff8f 	bl	80025b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2105      	movs	r1, #5
 800169e:	2045      	movs	r0, #69	@ 0x45
 80016a0:	f000 ff6e 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016a4:	2045      	movs	r0, #69	@ 0x45
 80016a6:	f000 ff87 	bl	80025b8 <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
return 0;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of printMux */
  printMuxHandle = osMutexNew(&printMux_attributes);
 80016dc:	481b      	ldr	r0, [pc, #108]	@ (800174c <MX_FREERTOS_Init+0x74>)
 80016de:	f008 feaa 	bl	800a436 <osMutexNew>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001750 <MX_FREERTOS_Init+0x78>)
 80016e6:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of connectSem */
  connectSemHandle = osSemaphoreNew(1, 0, &connectSem_attributes);
 80016e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <MX_FREERTOS_Init+0x7c>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	2001      	movs	r0, #1
 80016ee:	f008 ff28 	bl	800a542 <osSemaphoreNew>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <MX_FREERTOS_Init+0x80>)
 80016f6:	6013      	str	r3, [r2, #0]

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);
 80016f8:	4a18      	ldr	r2, [pc, #96]	@ (800175c <MX_FREERTOS_Init+0x84>)
 80016fa:	2100      	movs	r1, #0
 80016fc:	2001      	movs	r0, #1
 80016fe:	f008 ff20 	bl	800a542 <osSemaphoreNew>
 8001702:	4603      	mov	r3, r0
 8001704:	4a16      	ldr	r2, [pc, #88]	@ (8001760 <MX_FREERTOS_Init+0x88>)
 8001706:	6013      	str	r3, [r2, #0]

  /* creation of fsSem */
  fsSemHandle = osSemaphoreNew(1, 0, &fsSem_attributes);
 8001708:	4a16      	ldr	r2, [pc, #88]	@ (8001764 <MX_FREERTOS_Init+0x8c>)
 800170a:	2100      	movs	r1, #0
 800170c:	2001      	movs	r0, #1
 800170e:	f008 ff18 	bl	800a542 <osSemaphoreNew>
 8001712:	4603      	mov	r3, r0
 8001714:	4a14      	ldr	r2, [pc, #80]	@ (8001768 <MX_FREERTOS_Init+0x90>)
 8001716:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of structFSQueue */
  structFSQueueHandle = osMessageQueueNew (16, sizeof(fatfs_struct_t), &structFSQueue_attributes);
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <MX_FREERTOS_Init+0x94>)
 800171a:	210c      	movs	r1, #12
 800171c:	2010      	movs	r0, #16
 800171e:	f009 f853 	bl	800a7c8 <osMessageQueueNew>
 8001722:	4603      	mov	r3, r0
 8001724:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <MX_FREERTOS_Init+0x98>)
 8001726:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of vInitTask */
//  vInitTaskHandle = osThreadNew(vStartInitTask, NULL, &vInitTask_attributes);
//
  /* creation of vCmdTask */
  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
 8001728:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <MX_FREERTOS_Init+0x9c>)
 800172a:	2100      	movs	r1, #0
 800172c:	4812      	ldr	r0, [pc, #72]	@ (8001778 <MX_FREERTOS_Init+0xa0>)
 800172e:	f008 fdd4 	bl	800a2da <osThreadNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a11      	ldr	r2, [pc, #68]	@ (800177c <MX_FREERTOS_Init+0xa4>)
 8001736:	6013      	str	r3, [r2, #0]
//
//  /* creation of vClientTask */
//  vClientTaskHandle = osThreadNew(vStartClientTask, NULL, &vClientTask_attributes);
//
  /* creation of vFatFSTask */
  vFatFSTaskHandle = osThreadNew(vStartFatFSTask, NULL, &vFatFSTask_attributes);
 8001738:	4a11      	ldr	r2, [pc, #68]	@ (8001780 <MX_FREERTOS_Init+0xa8>)
 800173a:	2100      	movs	r1, #0
 800173c:	4811      	ldr	r0, [pc, #68]	@ (8001784 <MX_FREERTOS_Init+0xac>)
 800173e:	f008 fdcc 	bl	800a2da <osThreadNew>
 8001742:	4603      	mov	r3, r0
 8001744:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <MX_FREERTOS_Init+0xb0>)
 8001746:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	08012aa4 	.word	0x08012aa4
 8001750:	200054c4 	.word	0x200054c4
 8001754:	08012ab4 	.word	0x08012ab4
 8001758:	200054c8 	.word	0x200054c8
 800175c:	08012ac4 	.word	0x08012ac4
 8001760:	200054cc 	.word	0x200054cc
 8001764:	08012ad4 	.word	0x08012ad4
 8001768:	200054d0 	.word	0x200054d0
 800176c:	08012a8c 	.word	0x08012a8c
 8001770:	200053b0 	.word	0x200053b0
 8001774:	08012a44 	.word	0x08012a44
 8001778:	0800178d 	.word	0x0800178d
 800177c:	20000a50 	.word	0x20000a50
 8001780:	08012a68 	.word	0x08012a68
 8001784:	08001819 	.word	0x08001819
 8001788:	20001300 	.word	0x20001300

0800178c <vStartCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
    vRegisterCLICommands();
 8001798:	f7ff feac 	bl	80014f4 <vRegisterCLICommands>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Start cli\r\n", sizeof("Start cli\r\n"), 0xffff);
 800179c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017a0:	220c      	movs	r2, #12
 80017a2:	4916      	ldr	r1, [pc, #88]	@ (80017fc <vStartCmdTask+0x70>)
 80017a4:	4816      	ldr	r0, [pc, #88]	@ (8001800 <vStartCmdTask+0x74>)
 80017a6:	f004 f8a7 	bl	80058f8 <HAL_UART_Transmit>
    cliWrite(cli_prompt);
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <vStartCmdTask+0x78>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff febe 	bl	8001530 <cliWrite>

    for (;;)
    {
  	    xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY);
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <vStartCmdTask+0x7c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	4618      	mov	r0, r3
 80017be:	f009 ff2f 	bl	800b620 <xQueueSemaphoreTake>
        //echo recevied char
//        cRxedChar = receivedValue & 0xFF;

        cliWrite((char *)&cRxedChar);
 80017c2:	4812      	ldr	r0, [pc, #72]	@ (800180c <vStartCmdTask+0x80>)
 80017c4:	f7ff feb4 	bl	8001530 <cliWrite>
        if (cRxedChar == '\r' || cRxedChar == '\n')
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <vStartCmdTask+0x80>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b0d      	cmp	r3, #13
 80017ce:	d003      	beq.n	80017d8 <vStartCmdTask+0x4c>
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <vStartCmdTask+0x80>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b0a      	cmp	r3, #10
 80017d6:	d107      	bne.n	80017e8 <vStartCmdTask+0x5c>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
 80017d8:	f107 030f 	add.w	r3, r7, #15
 80017dc:	461a      	mov	r2, r3
 80017de:	490c      	ldr	r1, [pc, #48]	@ (8001810 <vStartCmdTask+0x84>)
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <vStartCmdTask+0x88>)
 80017e2:	f7ff febb 	bl	800155c <handleNewline>
 80017e6:	e005      	b.n	80017f4 <vStartCmdTask+0x68>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 80017e8:	f107 030f 	add.w	r3, r7, #15
 80017ec:	4909      	ldr	r1, [pc, #36]	@ (8001814 <vStartCmdTask+0x88>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff0a 	bl	8001608 <handleCharacterInput>
        }
        osDelay(100);
 80017f4:	2064      	movs	r0, #100	@ 0x64
 80017f6:	f008 fe03 	bl	800a400 <osDelay>
  	    xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY);
 80017fa:	e7db      	b.n	80017b4 <vStartCmdTask+0x28>
 80017fc:	080127d4 	.word	0x080127d4
 8001800:	200056bc 	.word	0x200056bc
 8001804:	2000000c 	.word	0x2000000c
 8001808:	200054cc 	.word	0x200054cc
 800180c:	20000a4a 	.word	0x20000a4a
 8001810:	20000218 	.word	0x20000218
 8001814:	20000a18 	.word	0x20000a18

08001818 <vStartFatFSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartFatFSTask */
void vStartFatFSTask(void *argument)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartFatFSTask */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(fsSemHandle, portMAX_DELAY);
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <vStartFatFSTask+0x48>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	4618      	mov	r0, r3
 800182a:	f009 fef9 	bl	800b620 <xQueueSemaphoreTake>
//	  switch ( ) {
//		case 1 ... 2:
			if (mount_fs(&fs, 1) != 0)
 800182e:	2101      	movs	r1, #1
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <vStartFatFSTask+0x4c>)
 8001832:	f005 fdb3 	bl	800739c <mount_fs>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <vStartFatFSTask+0x2a>
			{
				cliWrite("Failed mount\r\n");
 800183c:	480a      	ldr	r0, [pc, #40]	@ (8001868 <vStartFatFSTask+0x50>)
 800183e:	f7ff fe77 	bl	8001530 <cliWrite>
			}
			cliWrite("Success mount\r\n");
 8001842:	480a      	ldr	r0, [pc, #40]	@ (800186c <vStartFatFSTask+0x54>)
 8001844:	f7ff fe74 	bl	8001530 <cliWrite>
			write_fs("WolfFile", "Work om Wolf lib");
 8001848:	4909      	ldr	r1, [pc, #36]	@ (8001870 <vStartFatFSTask+0x58>)
 800184a:	480a      	ldr	r0, [pc, #40]	@ (8001874 <vStartFatFSTask+0x5c>)
 800184c:	f005 fe04 	bl	8007458 <write_fs>
			cliWrite("Failed mount\r\n");
 8001850:	4805      	ldr	r0, [pc, #20]	@ (8001868 <vStartFatFSTask+0x50>)
 8001852:	f7ff fe6d 	bl	8001530 <cliWrite>
//			res_fs = write_fs(&text[0], &text[1]);
//			break;
//		default:
//			break;
//	}
    osDelay(500);
 8001856:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800185a:	f008 fdd1 	bl	800a400 <osDelay>
	  xSemaphoreTake(fsSemHandle, portMAX_DELAY);
 800185e:	e7df      	b.n	8001820 <vStartFatFSTask+0x8>
 8001860:	200054d0 	.word	0x200054d0
 8001864:	20005710 	.word	0x20005710
 8001868:	080127e0 	.word	0x080127e0
 800186c:	080127f0 	.word	0x080127f0
 8001870:	08012800 	.word	0x08012800
 8001874:	08012814 	.word	0x08012814

08001878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <MX_GPIO_Init+0xa0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <MX_GPIO_Init+0xa0>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <MX_GPIO_Init+0xa0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a16      	ldr	r2, [pc, #88]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <MX_GPIO_Init+0xa0>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_GPIO_Init+0xa0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

}
 800190a:	bf00      	nop
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001920:	f000 fd10 	bl	8002344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001924:	f000 f822 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001928:	f7ff ffa6 	bl	8001878 <MX_GPIO_Init>
  MX_DMA_Init();
 800192c:	f7ff fe9c 	bl	8001668 <MX_DMA_Init>
  MX_TIM5_Init();
 8001930:	f000 fbce 	bl	80020d0 <MX_TIM5_Init>
  MX_RNG_Init();
 8001934:	f000 f89c 	bl	8001a70 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8001938:	f000 fc40 	bl	80021bc <MX_USART3_UART_Init>
  MX_SDIO_SD_Init();
 800193c:	f000 f8d4 	bl	8001ae8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001940:	f005 fd12 	bl	8007368 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
// HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
  HAL_UART_Receive_IT(&huart3, pcRxedChar, 1);
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <main+0x48>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	4619      	mov	r1, r3
 800194c:	4806      	ldr	r0, [pc, #24]	@ (8001968 <main+0x4c>)
 800194e:	f004 f85e 	bl	8005a0e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001952:	f008 fc41 	bl	800a1d8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001956:	f7ff febf 	bl	80016d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800195a:	f008 fc83 	bl	800a264 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800195e:	bf00      	nop
 8001960:	e7fd      	b.n	800195e <main+0x42>
 8001962:	bf00      	nop
 8001964:	2000001c 	.word	0x2000001c
 8001968:	200056bc 	.word	0x200056bc

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b094      	sub	sp, #80	@ 0x50
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	2230      	movs	r2, #48	@ 0x30
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f00d fc44 	bl	800f208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <SystemClock_Config+0xcc>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	4a27      	ldr	r2, [pc, #156]	@ (8001a38 <SystemClock_Config+0xcc>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <SystemClock_Config+0xcc>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <SystemClock_Config+0xd0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <SystemClock_Config+0xd0>)
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <SystemClock_Config+0xd0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c8:	2302      	movs	r3, #2
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d0:	2310      	movs	r3, #16
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d4:	2302      	movs	r3, #2
 80019d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d8:	2300      	movs	r3, #0
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019dc:	2308      	movs	r3, #8
 80019de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019e0:	23a8      	movs	r3, #168	@ 0xa8
 80019e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019e8:	2307      	movs	r3, #7
 80019ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 fc6d 	bl	80032d0 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019fc:	f000 f832 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2302      	movs	r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fece 	bl	80037c0 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a2a:	f000 f81b 	bl	8001a64 <Error_Handler>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3750      	adds	r7, #80	@ 0x50
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a52:	f000 fc99 	bl	8002388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <Error_Handler+0x8>

08001a70 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_RNG_Init+0x20>)
 8001a76:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <MX_RNG_Init+0x24>)
 8001a78:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_RNG_Init+0x20>)
 8001a7c:	f002 f8b2 	bl	8003be4 <HAL_RNG_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001a86:	f7ff ffed 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200054d4 	.word	0x200054d4
 8001a94:	50060800 	.word	0x50060800

08001a98 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <HAL_RNG_MspInit+0x48>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d115      	bne.n	8001ad6 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_RNG_MspInit+0x4c>)
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <HAL_RNG_MspInit+0x4c>)
 8001ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ab8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_RNG_MspInit+0x4c>)
 8001abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2105      	movs	r1, #5
 8001aca:	2050      	movs	r0, #80	@ 0x50
 8001acc:	f000 fd58 	bl	8002580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001ad0:	2050      	movs	r0, #80	@ 0x50
 8001ad2:	f000 fd71 	bl	80025b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	50060800 	.word	0x50060800
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <MX_SDIO_SD_Init+0x38>)
 8001aee:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <MX_SDIO_SD_Init+0x3c>)
 8001af0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <MX_SDIO_SD_Init+0x38>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_SDIO_SD_Init+0x38>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <MX_SDIO_SD_Init+0x38>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_SDIO_SD_Init+0x38>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <MX_SDIO_SD_Init+0x38>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001b10:	4b03      	ldr	r3, [pc, #12]	@ (8001b20 <MX_SDIO_SD_Init+0x38>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	200054e4 	.word	0x200054e4
 8001b24:	40012c00 	.word	0x40012c00

08001b28 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a68      	ldr	r2, [pc, #416]	@ (8001ce8 <HAL_SD_MspInit+0x1c0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	f040 80c9 	bne.w	8001cde <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	4b66      	ldr	r3, [pc, #408]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b54:	4a65      	ldr	r2, [pc, #404]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5c:	4b63      	ldr	r3, [pc, #396]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	4a5e      	ldr	r2, [pc, #376]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b78:	4b5c      	ldr	r3, [pc, #368]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	4b58      	ldr	r3, [pc, #352]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	4a57      	ldr	r2, [pc, #348]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b94:	4b55      	ldr	r3, [pc, #340]	@ (8001cec <HAL_SD_MspInit+0x1c4>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001ba0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	484c      	ldr	r0, [pc, #304]	@ (8001cf0 <HAL_SD_MspInit+0x1c8>)
 8001bbe:	f001 f9eb 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4845      	ldr	r0, [pc, #276]	@ (8001cf4 <HAL_SD_MspInit+0x1cc>)
 8001bde:	f001 f9db 	bl	8002f98 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001be2:	4b45      	ldr	r3, [pc, #276]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001be4:	4a45      	ldr	r2, [pc, #276]	@ (8001cfc <HAL_SD_MspInit+0x1d4>)
 8001be6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001be8:	4b43      	ldr	r3, [pc, #268]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001bea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bee:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf0:	4b41      	ldr	r3, [pc, #260]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf6:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001bfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c02:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c04:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c0a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c12:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001c14:	4b38      	ldr	r3, [pc, #224]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c16:	2220      	movs	r2, #32
 8001c18:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1a:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c20:	4b35      	ldr	r3, [pc, #212]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c22:	2204      	movs	r2, #4
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c26:	4b34      	ldr	r3, [pc, #208]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c28:	2203      	movs	r2, #3
 8001c2a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001c2c:	4b32      	ldr	r3, [pc, #200]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c34:	4b30      	ldr	r3, [pc, #192]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c36:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c3a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001c3c:	482e      	ldr	r0, [pc, #184]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c3e:	f000 fcc9 	bl	80025d4 <HAL_DMA_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001c48:	f7ff ff0c 	bl	8001a64 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c52:	4a29      	ldr	r2, [pc, #164]	@ (8001cf8 <HAL_SD_MspInit+0x1d0>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001c58:	4b29      	ldr	r3, [pc, #164]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001d04 <HAL_SD_MspInit+0x1dc>)
 8001c5c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c60:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c64:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c68:	2240      	movs	r2, #64	@ 0x40
 8001c6a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c6c:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c72:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c78:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c80:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c88:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c98:	2204      	movs	r2, #4
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001ca4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001cac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001cb2:	4813      	ldr	r0, [pc, #76]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001cb4:	f000 fc8e 	bl	80025d4 <HAL_DMA_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001cbe:	f7ff fed1 	bl	8001a64 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <HAL_SD_MspInit+0x1d8>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2105      	movs	r1, #5
 8001cd2:	2031      	movs	r0, #49	@ 0x31
 8001cd4:	f000 fc54 	bl	8002580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001cd8:	2031      	movs	r0, #49	@ 0x31
 8001cda:	f000 fc6d 	bl	80025b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3728      	adds	r7, #40	@ 0x28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	20005568 	.word	0x20005568
 8001cfc:	40026458 	.word	0x40026458
 8001d00:	200055c8 	.word	0x200055c8
 8001d04:	400264a0 	.word	0x400264a0

08001d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <HAL_MspInit+0x64>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <HAL_MspInit+0x64>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_MspInit+0x64>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <HAL_MspInit+0x64>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a0e      	ldr	r2, [pc, #56]	@ (8001d6c <HAL_MspInit+0x64>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_MspInit+0x64>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	210f      	movs	r1, #15
 8001d4a:	f06f 0001 	mvn.w	r0, #1
 8001d4e:	f000 fc17 	bl	8002580 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2105      	movs	r1, #5
 8001d56:	2005      	movs	r0, #5
 8001d58:	f000 fc12 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d5c:	2005      	movs	r0, #5
 8001d5e:	f000 fc2b 	bl	80025b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	@ 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <HAL_InitTick+0xd4>)
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	4a2e      	ldr	r2, [pc, #184]	@ (8001e44 <HAL_InitTick+0xd4>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d90:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <HAL_InitTick+0xd4>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d9c:	f107 020c 	add.w	r2, r7, #12
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 feea 	bl	8003b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001dac:	f001 fed4 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 8001db0:	4603      	mov	r3, r0
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db8:	4a23      	ldr	r2, [pc, #140]	@ (8001e48 <HAL_InitTick+0xd8>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0c9b      	lsrs	r3, r3, #18
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dc4:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <HAL_InitTick+0xdc>)
 8001dc6:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <HAL_InitTick+0xe0>)
 8001dc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_InitTick+0xdc>)
 8001dcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <HAL_InitTick+0xdc>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_InitTick+0xdc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_InitTick+0xdc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_InitTick+0xdc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001dea:	4818      	ldr	r0, [pc, #96]	@ (8001e4c <HAL_InitTick+0xdc>)
 8001dec:	f003 f8be 	bl	8004f6c <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11b      	bne.n	8001e36 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001dfe:	4813      	ldr	r0, [pc, #76]	@ (8001e4c <HAL_InitTick+0xdc>)
 8001e00:	f003 f904 	bl	800500c <HAL_TIM_Base_Start_IT>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d111      	bne.n	8001e36 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e12:	2019      	movs	r0, #25
 8001e14:	f000 fbd0 	bl	80025b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	d808      	bhi.n	8001e30 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	2019      	movs	r0, #25
 8001e24:	f000 fbac 	bl	8002580 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e28:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <HAL_InitTick+0xe4>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e002      	b.n	8001e36 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3730      	adds	r7, #48	@ 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	20005628 	.word	0x20005628
 8001e50:	40010000 	.word	0x40010000
 8001e54:	20000020 	.word	0x20000020

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <NMI_Handler+0x4>

08001e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <MemManage_Handler+0x4>

08001e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ea2:	f003 f923 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20005628 	.word	0x20005628

08001eb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <USART3_IRQHandler+0x10>)
 8001eb6:	f003 fdcf 	bl	8005a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200056bc 	.word	0x200056bc

08001ec4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <SDIO_IRQHandler+0x10>)
 8001eca:	f002 f997 	bl	80041fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200054e4 	.word	0x200054e4

08001ed8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <TIM5_IRQHandler+0x10>)
 8001ede:	f003 f905 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20005674 	.word	0x20005674

08001eec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <DMA2_Stream3_IRQHandler+0x10>)
 8001ef2:	f000 fd07 	bl	8002904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20005568 	.word	0x20005568

08001f00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <ETH_IRQHandler+0x10>)
 8001f06:	f000 ff73 	bl	8002df0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20005950 	.word	0x20005950

08001f14 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <ETH_WKUP_IRQHandler+0x10>)
 8001f1a:	f000 ff69 	bl	8002df0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20005950 	.word	0x20005950

08001f28 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001f2c:	4802      	ldr	r0, [pc, #8]	@ (8001f38 <DMA2_Stream6_IRQHandler+0x10>)
 8001f2e:	f000 fce9 	bl	8002904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200055c8 	.word	0x200055c8

08001f3c <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001f40:	4802      	ldr	r0, [pc, #8]	@ (8001f4c <HASH_RNG_IRQHandler+0x10>)
 8001f42:	f001 fe79 	bl	8003c38 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200054d4 	.word	0x200054d4

08001f50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_kill>:

int _kill(int pid, int sig)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <_kill+0x20>)
 8001f6c:	2216      	movs	r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	2000b9f0 	.word	0x2000b9f0

08001f84 <_exit>:

void _exit (int status)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ffe5 	bl	8001f60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f96:	bf00      	nop
 8001f98:	e7fd      	b.n	8001f96 <_exit+0x12>

08001f9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e00a      	b.n	8001fc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fac:	f3af 8000 	nop.w
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	60ba      	str	r2, [r7, #8]
 8001fb8:	b2ca      	uxtb	r2, r1
 8001fba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbf0      	blt.n	8001fac <_read+0x12>
  }

  return len;
 8001fca:	687b      	ldr	r3, [r7, #4]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ffc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_isatty>:

int _isatty(int file)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002014:	2301      	movs	r3, #1
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d205      	bcs.n	8002078 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <_sbrk+0x6c>)
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a06      	ldr	r2, [pc, #24]	@ (80020a0 <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	20020000 	.word	0x20020000
 800209c:	00001000 	.word	0x00001000
 80020a0:	20005670 	.word	0x20005670
 80020a4:	2000b9f8 	.word	0x2000b9f8
 80020a8:	2000b9f0 	.word	0x2000b9f0

080020ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <SystemInit+0x20>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <SystemInit+0x20>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	463b      	mov	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <MX_TIM5_Init+0x94>)
 80020ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002168 <MX_TIM5_Init+0x98>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 599;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <MX_TIM5_Init+0x94>)
 80020f4:	f240 2257 	movw	r2, #599	@ 0x257
 80020f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_TIM5_Init+0x94>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002100:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <MX_TIM5_Init+0x94>)
 8002102:	f04f 32ff 	mov.w	r2, #4294967295
 8002106:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002108:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <MX_TIM5_Init+0x94>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <MX_TIM5_Init+0x94>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002114:	4813      	ldr	r0, [pc, #76]	@ (8002164 <MX_TIM5_Init+0x94>)
 8002116:	f002 ff29 	bl	8004f6c <HAL_TIM_Base_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002120:	f7ff fca0 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	4619      	mov	r1, r3
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <MX_TIM5_Init+0x94>)
 8002132:	f003 f8cb 	bl	80052cc <HAL_TIM_ConfigClockSource>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800213c:	f7ff fc92 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_TIM5_Init+0x94>)
 800214e:	f003 faf3 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002158:	f7ff fc84 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20005674 	.word	0x20005674
 8002168:	40000c00 	.word	0x40000c00

0800216c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0e      	ldr	r2, [pc, #56]	@ (80021b4 <HAL_TIM_Base_MspInit+0x48>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d115      	bne.n	80021aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a0c      	ldr	r2, [pc, #48]	@ (80021b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2105      	movs	r1, #5
 800219e:	2032      	movs	r0, #50	@ 0x32
 80021a0:	f000 f9ee 	bl	8002580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80021a4:	2032      	movs	r0, #50	@ 0x32
 80021a6:	f000 fa07 	bl	80025b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40000c00 	.word	0x40000c00
 80021b8:	40023800 	.word	0x40023800

080021bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <MX_USART3_UART_Init+0x50>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	@ (8002208 <MX_USART3_UART_Init+0x4c>)
 80021f4:	f003 fb30 	bl	8005858 <HAL_UART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021fe:	f7ff fc31 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200056bc 	.word	0x200056bc
 800220c:	40004800 	.word	0x40004800

08002210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <HAL_UART_MspInit+0x94>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d134      	bne.n	800229c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <HAL_UART_MspInit+0x98>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a1b      	ldr	r2, [pc, #108]	@ (80022a8 <HAL_UART_MspInit+0x98>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <HAL_UART_MspInit+0x98>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <HAL_UART_MspInit+0x98>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a14      	ldr	r2, [pc, #80]	@ (80022a8 <HAL_UART_MspInit+0x98>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_UART_MspInit+0x98>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800226a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800227c:	2307      	movs	r3, #7
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4809      	ldr	r0, [pc, #36]	@ (80022ac <HAL_UART_MspInit+0x9c>)
 8002288:	f000 fe86 	bl	8002f98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2105      	movs	r1, #5
 8002290:	2027      	movs	r0, #39	@ 0x27
 8002292:	f000 f975 	bl	8002580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002296:	2027      	movs	r0, #39	@ 0x27
 8002298:	f000 f98e 	bl	80025b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	@ 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40004800 	.word	0x40004800
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020c00 	.word	0x40020c00

080022b0 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart3, pcRxedChar, 1);
 80022bc:	4b09      	ldr	r3, [pc, #36]	@ (80022e4 <HAL_UART_RxCpltCallback+0x34>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	4808      	ldr	r0, [pc, #32]	@ (80022e8 <HAL_UART_RxCpltCallback+0x38>)
 80022c6:	f003 fba2 	bl	8005a0e <HAL_UART_Receive_IT>
	xSemaphoreGiveFromISR(uartConfigSemHandle, &pxHigherPriorityTaskWoken);
 80022ca:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <HAL_UART_RxCpltCallback+0x3c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f107 020c 	add.w	r2, r7, #12
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f009 f831 	bl	800b33c <xQueueGiveFromISR>

}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000001c 	.word	0x2000001c
 80022e8:	200056bc 	.word	0x200056bc
 80022ec:	200054cc 	.word	0x200054cc

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002328 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022f4:	f7ff feda 	bl	80020ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f8:	480c      	ldr	r0, [pc, #48]	@ (800232c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022fa:	490d      	ldr	r1, [pc, #52]	@ (8002330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002300:	e002      	b.n	8002308 <LoopCopyDataInit>

08002302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002306:	3304      	adds	r3, #4

08002308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800230c:	d3f9      	bcc.n	8002302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002310:	4c0a      	ldr	r4, [pc, #40]	@ (800233c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002314:	e001      	b.n	800231a <LoopFillZerobss>

08002316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002318:	3204      	adds	r2, #4

0800231a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800231c:	d3fb      	bcc.n	8002316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800231e:	f00d f8a7 	bl	800f470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7ff fafb 	bl	800191c <main>
  bx  lr    
 8002326:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8002328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002334:	08012fd4 	.word	0x08012fd4
  ldr r2, =_sbss
 8002338:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800233c:	2000b9f8 	.word	0x2000b9f8

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>
	...

08002344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002348:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <HAL_Init+0x40>)
 800234e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_Init+0x40>)
 800235a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a07      	ldr	r2, [pc, #28]	@ (8002384 <HAL_Init+0x40>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236c:	2003      	movs	r0, #3
 800236e:	f000 f8fc 	bl	800256a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002372:	200f      	movs	r0, #15
 8002374:	f7ff fcfc 	bl	8001d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002378:	f7ff fcc6 	bl	8001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	@ (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000024 	.word	0x20000024
 80023ac:	20005704 	.word	0x20005704

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20005704 	.word	0x20005704

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d005      	beq.n	80023ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <HAL_Delay+0x44>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ee:	bf00      	nop
 80023f0:	f7ff ffde 	bl	80023b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d8f7      	bhi.n	80023f0 <HAL_Delay+0x28>
  {
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000024 	.word	0x20000024

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	@ (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff4c 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002592:	f7ff ff61 	bl	8002458 <__NVIC_GetPriorityGrouping>
 8002596:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6978      	ldr	r0, [r7, #20]
 800259e:	f7ff ffb1 	bl	8002504 <NVIC_EncodePriority>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff80 	bl	80024b0 <__NVIC_SetPriority>
}
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff54 	bl	8002474 <__NVIC_EnableIRQ>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff fee6 	bl	80023b0 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e099      	b.n	8002724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002610:	e00f      	b.n	8002632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002612:	f7ff fecd 	bl	80023b0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b05      	cmp	r3, #5
 800261e:	d908      	bls.n	8002632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2203      	movs	r2, #3
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e078      	b.n	8002724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e8      	bne.n	8002612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4b38      	ldr	r3, [pc, #224]	@ (800272c <HAL_DMA_Init+0x158>)
 800264c:	4013      	ands	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800265e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	2b04      	cmp	r3, #4
 800268a:	d107      	bne.n	800269c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	4313      	orrs	r3, r2
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f023 0307 	bic.w	r3, r3, #7
 80026b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d117      	bne.n	80026f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00e      	beq.n	80026f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fb0d 	bl	8002cf8 <DMA_CheckFifoParam>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2240      	movs	r2, #64	@ 0x40
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026f2:	2301      	movs	r3, #1
 80026f4:	e016      	b.n	8002724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fac4 	bl	8002c8c <DMA_CalcBaseAndBitshift>
 8002704:	4603      	mov	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	223f      	movs	r2, #63	@ 0x3f
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	f010803f 	.word	0xf010803f

08002730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_DMA_Start_IT+0x26>
 8002752:	2302      	movs	r3, #2
 8002754:	e040      	b.n	80027d8 <HAL_DMA_Start_IT+0xa8>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d12f      	bne.n	80027ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fa56 	bl	8002c30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002788:	223f      	movs	r2, #63	@ 0x3f
 800278a:	409a      	lsls	r2, r3
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0216 	orr.w	r2, r2, #22
 800279e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0208 	orr.w	r2, r2, #8
 80027b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e005      	b.n	80027d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
 80027d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027ee:	f7ff fddf 	bl	80023b0 <HAL_GetTick>
 80027f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d008      	beq.n	8002812 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2280      	movs	r2, #128	@ 0x80
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e052      	b.n	80028b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0216 	bic.w	r2, r2, #22
 8002820:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002830:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_DMA_Abort+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0208 	bic.w	r2, r2, #8
 8002850:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	e013      	b.n	800288c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002864:	f7ff fda4 	bl	80023b0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b05      	cmp	r3, #5
 8002870:	d90c      	bls.n	800288c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2203      	movs	r2, #3
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e015      	b.n	80028b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e4      	bne.n	8002864 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	223f      	movs	r2, #63	@ 0x3f
 80028a0:	409a      	lsls	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d004      	beq.n	80028de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2280      	movs	r2, #128	@ 0x80
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e00c      	b.n	80028f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2205      	movs	r2, #5
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002910:	4b8e      	ldr	r3, [pc, #568]	@ (8002b4c <HAL_DMA_IRQHandler+0x248>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a8e      	ldr	r2, [pc, #568]	@ (8002b50 <HAL_DMA_IRQHandler+0x24c>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0a9b      	lsrs	r3, r3, #10
 800291c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292e:	2208      	movs	r2, #8
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01a      	beq.n	8002970 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0204 	bic.w	r2, r2, #4
 8002956:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	2208      	movs	r2, #8
 800295e:	409a      	lsls	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	2201      	movs	r2, #1
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d012      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	2201      	movs	r2, #1
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299e:	f043 0202 	orr.w	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029aa:	2204      	movs	r2, #4
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d012      	beq.n	80029dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00b      	beq.n	80029dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	2204      	movs	r2, #4
 80029ca:	409a      	lsls	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d4:	f043 0204 	orr.w	r2, r3, #4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e0:	2210      	movs	r2, #16
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d043      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d03c      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	2210      	movs	r2, #16
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d018      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d024      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
 8002a32:	e01f      	b.n	8002a74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
 8002a44:	e016      	b.n	8002a74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0208 	bic.w	r2, r2, #8
 8002a62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	2220      	movs	r2, #32
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 808f 	beq.w	8002ba4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8087 	beq.w	8002ba4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d136      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0216 	bic.w	r2, r2, #22
 8002abc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002acc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <HAL_DMA_IRQHandler+0x1da>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0208 	bic.w	r2, r2, #8
 8002aec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af2:	223f      	movs	r2, #63	@ 0x3f
 8002af4:	409a      	lsls	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d07e      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
        }
        return;
 8002b1a:	e079      	b.n	8002c10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01d      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10d      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d031      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
 8002b48:	e02c      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x2a0>
 8002b4a:	bf00      	nop
 8002b4c:	20000018 	.word	0x20000018
 8002b50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d023      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
 8002b64:	e01e      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10f      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0210 	bic.w	r2, r2, #16
 8002b82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d032      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d022      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2205      	movs	r2, #5
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d307      	bcc.n	8002bec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f2      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x2cc>
 8002bea:	e000      	b.n	8002bee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c10:	bf00      	nop
    }
  }
}
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b40      	cmp	r3, #64	@ 0x40
 8002c5c:	d108      	bne.n	8002c70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c6e:	e007      	b.n	8002c80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	3b10      	subs	r3, #16
 8002c9c:	4a14      	ldr	r2, [pc, #80]	@ (8002cf0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ca6:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d909      	bls.n	8002cce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	1d1a      	adds	r2, r3, #4
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ccc:	e007      	b.n	8002cde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	aaaaaaab 	.word	0xaaaaaaab
 8002cf4:	08012afc 	.word	0x08012afc

08002cf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d11f      	bne.n	8002d52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d856      	bhi.n	8002dc6 <DMA_CheckFifoParam+0xce>
 8002d18:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <DMA_CheckFifoParam+0x28>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002d43 	.word	0x08002d43
 8002d28:	08002d31 	.word	0x08002d31
 8002d2c:	08002dc7 	.word	0x08002dc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d046      	beq.n	8002dca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d40:	e043      	b.n	8002dca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d4a:	d140      	bne.n	8002dce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d50:	e03d      	b.n	8002dce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d5a:	d121      	bne.n	8002da0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d837      	bhi.n	8002dd2 <DMA_CheckFifoParam+0xda>
 8002d62:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <DMA_CheckFifoParam+0x70>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002d7f 	.word	0x08002d7f
 8002d70:	08002d79 	.word	0x08002d79
 8002d74:	08002d91 	.word	0x08002d91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7c:	e030      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d025      	beq.n	8002dd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8e:	e022      	b.n	8002dd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d98:	d11f      	bne.n	8002dda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d9e:	e01c      	b.n	8002dda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d903      	bls.n	8002dae <DMA_CheckFifoParam+0xb6>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d003      	beq.n	8002db4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dac:	e018      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
      break;
 8002db2:	e015      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc4:	e00b      	b.n	8002dde <DMA_CheckFifoParam+0xe6>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e00a      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e008      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e006      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e004      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e002      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dde:	bf00      	nop
    }
  } 
  
  return status; 
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop

08002df0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfe:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002e18:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <HAL_ETH_IRQHandler+0x158>)
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00e      	beq.n	8002e46 <HAL_ETH_IRQHandler+0x56>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b43      	ldr	r3, [pc, #268]	@ (8002f4c <HAL_ETH_IRQHandler+0x15c>)
 8002e3e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f004 fde5 	bl	8007a10 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00f      	beq.n	8002e70 <HAL_ETH_IRQHandler+0x80>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e62:	461a      	mov	r2, r3
 8002e64:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002e68:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f004 fde0 	bl	8007a30 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d042      	beq.n	8002f00 <HAL_ETH_IRQHandler+0x110>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d03d      	beq.n	8002f00 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8a:	f043 0208 	orr.w	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01a      	beq.n	8002ed4 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <HAL_ETH_IRQHandler+0x160>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002ec4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ec8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	22e0      	movs	r2, #224	@ 0xe0
 8002ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002ed2:	e012      	b.n	8002efa <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ef8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f004 fda8 	bl	8007a50 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f10:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f81a 	bl	8002f54 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_ETH_IRQHandler+0x158>)
 8002f34:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f38:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f814 	bl	8002f68 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40013c00 	.word	0x40013c00
 8002f4c:	00010040 	.word	0x00010040
 8002f50:	007e2000 	.word	0x007e2000

08002f54 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	@ 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	e16b      	b.n	800328c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	f040 815a 	bne.w	8003286 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d005      	beq.n	8002fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d130      	bne.n	800304c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003020:	2201      	movs	r2, #1
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 0201 	and.w	r2, r3, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b03      	cmp	r3, #3
 8003056:	d017      	beq.n	8003088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d123      	bne.n	80030dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	08da      	lsrs	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3208      	adds	r2, #8
 800309c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	220f      	movs	r2, #15
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	08da      	lsrs	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3208      	adds	r2, #8
 80030d6:	69b9      	ldr	r1, [r7, #24]
 80030d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	2203      	movs	r2, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0203 	and.w	r2, r3, #3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80b4 	beq.w	8003286 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b60      	ldr	r3, [pc, #384]	@ (80032a4 <HAL_GPIO_Init+0x30c>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	4a5f      	ldr	r2, [pc, #380]	@ (80032a4 <HAL_GPIO_Init+0x30c>)
 8003128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800312c:	6453      	str	r3, [r2, #68]	@ 0x44
 800312e:	4b5d      	ldr	r3, [pc, #372]	@ (80032a4 <HAL_GPIO_Init+0x30c>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800313a:	4a5b      	ldr	r2, [pc, #364]	@ (80032a8 <HAL_GPIO_Init+0x310>)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	220f      	movs	r2, #15
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_GPIO_Init+0x314>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02b      	beq.n	80031be <HAL_GPIO_Init+0x226>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a51      	ldr	r2, [pc, #324]	@ (80032b0 <HAL_GPIO_Init+0x318>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d025      	beq.n	80031ba <HAL_GPIO_Init+0x222>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a50      	ldr	r2, [pc, #320]	@ (80032b4 <HAL_GPIO_Init+0x31c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01f      	beq.n	80031b6 <HAL_GPIO_Init+0x21e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4f      	ldr	r2, [pc, #316]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d019      	beq.n	80031b2 <HAL_GPIO_Init+0x21a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4e      	ldr	r2, [pc, #312]	@ (80032bc <HAL_GPIO_Init+0x324>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0x216>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4d      	ldr	r2, [pc, #308]	@ (80032c0 <HAL_GPIO_Init+0x328>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00d      	beq.n	80031aa <HAL_GPIO_Init+0x212>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4c      	ldr	r2, [pc, #304]	@ (80032c4 <HAL_GPIO_Init+0x32c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <HAL_GPIO_Init+0x20e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4b      	ldr	r2, [pc, #300]	@ (80032c8 <HAL_GPIO_Init+0x330>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_GPIO_Init+0x20a>
 800319e:	2307      	movs	r3, #7
 80031a0:	e00e      	b.n	80031c0 <HAL_GPIO_Init+0x228>
 80031a2:	2308      	movs	r3, #8
 80031a4:	e00c      	b.n	80031c0 <HAL_GPIO_Init+0x228>
 80031a6:	2306      	movs	r3, #6
 80031a8:	e00a      	b.n	80031c0 <HAL_GPIO_Init+0x228>
 80031aa:	2305      	movs	r3, #5
 80031ac:	e008      	b.n	80031c0 <HAL_GPIO_Init+0x228>
 80031ae:	2304      	movs	r3, #4
 80031b0:	e006      	b.n	80031c0 <HAL_GPIO_Init+0x228>
 80031b2:	2303      	movs	r3, #3
 80031b4:	e004      	b.n	80031c0 <HAL_GPIO_Init+0x228>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e002      	b.n	80031c0 <HAL_GPIO_Init+0x228>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_GPIO_Init+0x228>
 80031be:	2300      	movs	r3, #0
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	f002 0203 	and.w	r2, r2, #3
 80031c6:	0092      	lsls	r2, r2, #2
 80031c8:	4093      	lsls	r3, r2
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031d0:	4935      	ldr	r1, [pc, #212]	@ (80032a8 <HAL_GPIO_Init+0x310>)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	3302      	adds	r3, #2
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031de:	4b3b      	ldr	r3, [pc, #236]	@ (80032cc <HAL_GPIO_Init+0x334>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003202:	4a32      	ldr	r2, [pc, #200]	@ (80032cc <HAL_GPIO_Init+0x334>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003208:	4b30      	ldr	r3, [pc, #192]	@ (80032cc <HAL_GPIO_Init+0x334>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800322c:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <HAL_GPIO_Init+0x334>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003232:	4b26      	ldr	r3, [pc, #152]	@ (80032cc <HAL_GPIO_Init+0x334>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003256:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <HAL_GPIO_Init+0x334>)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800325c:	4b1b      	ldr	r3, [pc, #108]	@ (80032cc <HAL_GPIO_Init+0x334>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003280:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <HAL_GPIO_Init+0x334>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3301      	adds	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	f67f ae90 	bls.w	8002fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3724      	adds	r7, #36	@ 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40013800 	.word	0x40013800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020400 	.word	0x40020400
 80032b4:	40020800 	.word	0x40020800
 80032b8:	40020c00 	.word	0x40020c00
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40021400 	.word	0x40021400
 80032c4:	40021800 	.word	0x40021800
 80032c8:	40021c00 	.word	0x40021c00
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e267      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d075      	beq.n	80033da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032ee:	4b88      	ldr	r3, [pc, #544]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d00c      	beq.n	8003314 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003302:	2b08      	cmp	r3, #8
 8003304:	d112      	bne.n	800332c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003306:	4b82      	ldr	r3, [pc, #520]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003312:	d10b      	bne.n	800332c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	4b7e      	ldr	r3, [pc, #504]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d05b      	beq.n	80033d8 <HAL_RCC_OscConfig+0x108>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d157      	bne.n	80033d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e242      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x74>
 8003336:	4b76      	ldr	r3, [pc, #472]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a75      	ldr	r2, [pc, #468]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e01d      	b.n	8003380 <HAL_RCC_OscConfig+0xb0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x98>
 800334e:	4b70      	ldr	r3, [pc, #448]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6f      	ldr	r2, [pc, #444]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b6d      	ldr	r3, [pc, #436]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6c      	ldr	r2, [pc, #432]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0xb0>
 8003368:	4b69      	ldr	r3, [pc, #420]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a68      	ldr	r2, [pc, #416]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 800336e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b66      	ldr	r3, [pc, #408]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a65      	ldr	r2, [pc, #404]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 800337a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800337e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7ff f812 	bl	80023b0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7ff f80e 	bl	80023b0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	@ 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e207      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0xc0>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fffe 	bl	80023b0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe fffa 	bl	80023b0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	@ 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1f3      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	4b51      	ldr	r3, [pc, #324]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0xe8>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d063      	beq.n	80034ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b47      	ldr	r3, [pc, #284]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d11c      	bne.n	8003438 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fe:	4b44      	ldr	r3, [pc, #272]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	4b41      	ldr	r3, [pc, #260]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_RCC_OscConfig+0x152>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e1c7      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b3b      	ldr	r3, [pc, #236]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4937      	ldr	r1, [pc, #220]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	e03a      	b.n	80034ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <HAL_RCC_OscConfig+0x244>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe ffb3 	bl	80023b0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344e:	f7fe ffaf 	bl	80023b0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e1a8      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b28      	ldr	r3, [pc, #160]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4925      	ldr	r1, [pc, #148]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003482:	4b24      	ldr	r3, [pc, #144]	@ (8003514 <HAL_RCC_OscConfig+0x244>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe ff92 	bl	80023b0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003490:	f7fe ff8e 	bl	80023b0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e187      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d036      	beq.n	8003528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <HAL_RCC_OscConfig+0x248>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe ff72 	bl	80023b0 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe ff6e 	bl	80023b0 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e167      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_RCC_OscConfig+0x240>)
 80034e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x200>
 80034ee:	e01b      	b.n	8003528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f0:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <HAL_RCC_OscConfig+0x248>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fe ff5b 	bl	80023b0 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	e00e      	b.n	800351c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fe:	f7fe ff57 	bl	80023b0 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d907      	bls.n	800351c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e150      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
 8003510:	40023800 	.word	0x40023800
 8003514:	42470000 	.word	0x42470000
 8003518:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351c:	4b88      	ldr	r3, [pc, #544]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 800351e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1ea      	bne.n	80034fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8097 	beq.w	8003664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353a:	4b81      	ldr	r3, [pc, #516]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10f      	bne.n	8003566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	4b7d      	ldr	r3, [pc, #500]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	4a7c      	ldr	r2, [pc, #496]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	@ 0x40
 8003556:	4b7a      	ldr	r3, [pc, #488]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b77      	ldr	r3, [pc, #476]	@ (8003744 <HAL_RCC_OscConfig+0x474>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003572:	4b74      	ldr	r3, [pc, #464]	@ (8003744 <HAL_RCC_OscConfig+0x474>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a73      	ldr	r2, [pc, #460]	@ (8003744 <HAL_RCC_OscConfig+0x474>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800357c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357e:	f7fe ff17 	bl	80023b0 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fe ff13 	bl	80023b0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e10c      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	4b6a      	ldr	r3, [pc, #424]	@ (8003744 <HAL_RCC_OscConfig+0x474>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x2ea>
 80035ac:	4b64      	ldr	r3, [pc, #400]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b0:	4a63      	ldr	r2, [pc, #396]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b8:	e01c      	b.n	80035f4 <HAL_RCC_OscConfig+0x324>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x30c>
 80035c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 0304 	orr.w	r3, r3, #4
 80035cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0x324>
 80035dc:	4b58      	ldr	r3, [pc, #352]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	4a57      	ldr	r2, [pc, #348]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e8:	4b55      	ldr	r3, [pc, #340]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ec:	4a54      	ldr	r2, [pc, #336]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80035ee:	f023 0304 	bic.w	r3, r3, #4
 80035f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fe fed8 	bl	80023b0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	e00a      	b.n	800361a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fe fed4 	bl	80023b0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0cb      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	4b49      	ldr	r3, [pc, #292]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0ee      	beq.n	8003604 <HAL_RCC_OscConfig+0x334>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7fe fec2 	bl	80023b0 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe febe 	bl	80023b0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0b5      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003646:	4b3e      	ldr	r3, [pc, #248]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1ee      	bne.n	8003630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003658:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	4a38      	ldr	r2, [pc, #224]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 800365e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003662:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80a1 	beq.w	80037b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800366e:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	d05c      	beq.n	8003734 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d141      	bne.n	8003706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b31      	ldr	r3, [pc, #196]	@ (8003748 <HAL_RCC_OscConfig+0x478>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe fe92 	bl	80023b0 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fe fe8e 	bl	80023b0 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e087      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	4b27      	ldr	r3, [pc, #156]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	019b      	lsls	r3, r3, #6
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	3b01      	subs	r3, #1
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	061b      	lsls	r3, r3, #24
 80036d2:	491b      	ldr	r1, [pc, #108]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <HAL_RCC_OscConfig+0x478>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe fe67 	bl	80023b0 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fe fe63 	bl	80023b0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e05c      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x416>
 8003704:	e054      	b.n	80037b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b10      	ldr	r3, [pc, #64]	@ (8003748 <HAL_RCC_OscConfig+0x478>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fe50 	bl	80023b0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fe4c 	bl	80023b0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e045      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_RCC_OscConfig+0x470>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x444>
 8003732:	e03d      	b.n	80037b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e038      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
 8003740:	40023800 	.word	0x40023800
 8003744:	40007000 	.word	0x40007000
 8003748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800374c:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x4ec>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d028      	beq.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d121      	bne.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d11a      	bne.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800377c:	4013      	ands	r3, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003784:	4293      	cmp	r3, r2
 8003786:	d111      	bne.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	3b01      	subs	r3, #1
 8003796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d107      	bne.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800

080037c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0cc      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d4:	4b68      	ldr	r3, [pc, #416]	@ (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d90c      	bls.n	80037fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b65      	ldr	r3, [pc, #404]	@ (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b63      	ldr	r3, [pc, #396]	@ (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b8      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003814:	4b59      	ldr	r3, [pc, #356]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a58      	ldr	r2, [pc, #352]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800381e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800382c:	4b53      	ldr	r3, [pc, #332]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a52      	ldr	r2, [pc, #328]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b50      	ldr	r3, [pc, #320]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	494d      	ldr	r1, [pc, #308]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d044      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b47      	ldr	r3, [pc, #284]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d119      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d003      	beq.n	800387e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387a:	2b03      	cmp	r3, #3
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	4b3f      	ldr	r3, [pc, #252]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e06f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b3b      	ldr	r3, [pc, #236]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e067      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389e:	4b37      	ldr	r3, [pc, #220]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4934      	ldr	r1, [pc, #208]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b0:	f7fe fd7e 	bl	80023b0 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fe fd7a 	bl	80023b0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 020c 	and.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1eb      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b25      	ldr	r3, [pc, #148]	@ (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d20c      	bcs.n	8003908 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b20      	ldr	r3, [pc, #128]	@ (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e032      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4916      	ldr	r1, [pc, #88]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003932:	4b12      	ldr	r3, [pc, #72]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	490e      	ldr	r1, [pc, #56]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003946:	f000 f821 	bl	800398c <HAL_RCC_GetSysClockFreq>
 800394a:	4602      	mov	r2, r0
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	490a      	ldr	r1, [pc, #40]	@ (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	5ccb      	ldrb	r3, [r1, r3]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	4a09      	ldr	r2, [pc, #36]	@ (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003962:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <HAL_RCC_ClockConfig+0x1c8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fa02 	bl	8001d70 <HAL_InitTick>

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023c00 	.word	0x40023c00
 800397c:	40023800 	.word	0x40023800
 8003980:	08012ae4 	.word	0x08012ae4
 8003984:	20000018 	.word	0x20000018
 8003988:	20000020 	.word	0x20000020

0800398c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003990:	b090      	sub	sp, #64	@ 0x40
 8003992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a4:	4b59      	ldr	r3, [pc, #356]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x180>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d00d      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x40>
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	f200 80a1 	bhi.w	8003af8 <HAL_RCC_GetSysClockFreq+0x16c>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x34>
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039be:	e09b      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b53      	ldr	r3, [pc, #332]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x184>)
 80039c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039c4:	e09b      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c6:	4b53      	ldr	r3, [pc, #332]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039ca:	e098      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039cc:	4b4f      	ldr	r3, [pc, #316]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x180>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d6:	4b4d      	ldr	r3, [pc, #308]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x180>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d028      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x180>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	2200      	movs	r2, #0
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039f4:	2100      	movs	r1, #0
 80039f6:	4b47      	ldr	r3, [pc, #284]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x188>)
 80039f8:	fb03 f201 	mul.w	r2, r3, r1
 80039fc:	2300      	movs	r3, #0
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	4a43      	ldr	r2, [pc, #268]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a06:	fba0 1202 	umull	r1, r2, r0, r2
 8003a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a12:	4413      	add	r3, r2
 8003a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	2200      	movs	r2, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	61fa      	str	r2, [r7, #28]
 8003a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a26:	f7fd f92f 	bl	8000c88 <__aeabi_uldivmod>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4613      	mov	r3, r2
 8003a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a32:	e053      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a34:	4b35      	ldr	r3, [pc, #212]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	617a      	str	r2, [r7, #20]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a46:	f04f 0b00 	mov.w	fp, #0
 8003a4a:	4652      	mov	r2, sl
 8003a4c:	465b      	mov	r3, fp
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	0159      	lsls	r1, r3, #5
 8003a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a5c:	0150      	lsls	r0, r2, #5
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	ebb2 080a 	subs.w	r8, r2, sl
 8003a66:	eb63 090b 	sbc.w	r9, r3, fp
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a82:	eb63 0509 	sbc.w	r5, r3, r9
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	00eb      	lsls	r3, r5, #3
 8003a90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a94:	00e2      	lsls	r2, r4, #3
 8003a96:	4614      	mov	r4, r2
 8003a98:	461d      	mov	r5, r3
 8003a9a:	eb14 030a 	adds.w	r3, r4, sl
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	eb45 030b 	adc.w	r3, r5, fp
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	028b      	lsls	r3, r1, #10
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003abc:	4621      	mov	r1, r4
 8003abe:	028a      	lsls	r2, r1, #10
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	60fa      	str	r2, [r7, #12]
 8003acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ad0:	f7fd f8da 	bl	8000c88 <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003adc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003aec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003af6:	e002      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003afa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3740      	adds	r7, #64	@ 0x40
 8003b04:	46bd      	mov	sp, r7
 8003b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	00f42400 	.word	0x00f42400
 8003b14:	017d7840 	.word	0x017d7840

08003b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	@ (8003b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000018 	.word	0x20000018

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b34:	f7ff fff0 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	@ (8003b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0a9b      	lsrs	r3, r3, #10
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	@ (8003b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	08012af4 	.word	0x08012af4

08003b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b5c:	f7ff ffdc 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0b5b      	lsrs	r3, r3, #13
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4903      	ldr	r1, [pc, #12]	@ (8003b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	08012af4 	.word	0x08012af4

08003b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b90:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bb4:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_GetClockConfig+0x5c>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bc2:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <HAL_RCC_GetClockConfig+0x60>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0207 	and.w	r2, r3, #7
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40023c00 	.word	0x40023c00

08003be4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e01c      	b.n	8003c30 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	795b      	ldrb	r3, [r3, #5]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd ff46 	bl	8001a98 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0204 	orr.w	r2, r2, #4
 8003c20:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e009      	b.n	8003c76 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2208      	movs	r2, #8
 8003c70:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003c72:	2301      	movs	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f837 	bl	8003cf6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8003c90:	605a      	str	r2, [r3, #4]

    return;
 8003c92:	e022      	b.n	8003cda <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01d      	beq.n	8003cda <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0208 	bic.w	r2, r2, #8
 8003cac:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	795b      	ldrb	r3, [r3, #5]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00b      	beq.n	8003cda <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f803 	bl	8003ce0 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e022      	b.n	8003d62 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fefa 	bl	8001b28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2203      	movs	r2, #3
 8003d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f815 	bl	8003d6c <HAL_SD_InitCard>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e00a      	b.n	8003d62 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b08e      	sub	sp, #56	@ 0x38
 8003d70:	af04      	add	r7, sp, #16
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003d88:	2376      	movs	r3, #118	@ 0x76
 8003d8a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681d      	ldr	r5, [r3, #0]
 8003d90:	466c      	mov	r4, sp
 8003d92:	f107 0314 	add.w	r3, r7, #20
 8003d96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003da4:	4628      	mov	r0, r5
 8003da6:	f002 fdad 	bl	8006904 <SDIO_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e04f      	b.n	8003e5c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003dbc:	4b29      	ldr	r3, [pc, #164]	@ (8003e64 <HAL_SD_InitCard+0xf8>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f002 fde5 	bl	8006996 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003dcc:	4b25      	ldr	r3, [pc, #148]	@ (8003e64 <HAL_SD_InitCard+0xf8>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	f7fe faf8 	bl	80023c8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 ff6b 	bl	8004cb4 <SD_PowerON>
 8003dde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e02e      	b.n	8003e5c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fe8a 	bl	8004b18 <SD_InitCard>
 8003e04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e01b      	b.n	8003e5c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f002 fe44 	bl	8006aba <SDMMC_CmdBlockLength>
 8003e32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00f      	beq.n	8003e5a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e68 <HAL_SD_InitCard+0xfc>)
 8003e40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3728      	adds	r7, #40	@ 0x28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bdb0      	pop	{r4, r5, r7, pc}
 8003e64:	422580a0 	.word	0x422580a0
 8003e68:	004005ff 	.word	0x004005ff

08003e6c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08c      	sub	sp, #48	@ 0x30
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0c0      	b.n	8004016 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 80b9 	bne.w	8004014 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	441a      	add	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d907      	bls.n	8003ec6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0a7      	b.n	8004016 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	4a4c      	ldr	r2, [pc, #304]	@ (8004020 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	4a4b      	ldr	r2, [pc, #300]	@ (8004024 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003ef8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	2200      	movs	r2, #0
 8003f00:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3380      	adds	r3, #128	@ 0x80
 8003f30:	4619      	mov	r1, r3
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	025b      	lsls	r3, r3, #9
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	f7fe fbf9 	bl	8002730 <HAL_DMA_Start_IT>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d017      	beq.n	8003f74 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003f52:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a33      	ldr	r2, [pc, #204]	@ (8004028 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003f5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e050      	b.n	8004016 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003f74:	4b2d      	ldr	r3, [pc, #180]	@ (800402c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d002      	beq.n	8003f88 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	025b      	lsls	r3, r3, #9
 8003f86:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	025b      	lsls	r3, r3, #9
 8003f92:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003f94:	2390      	movs	r3, #144	@ 0x90
 8003f96:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f107 0210 	add.w	r2, r7, #16
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f002 fd57 	bl	8006a62 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d90a      	bls.n	8003fd0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2282      	movs	r2, #130	@ 0x82
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f002 fdbb 	bl	8006b42 <SDMMC_CmdReadMultiBlock>
 8003fcc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003fce:	e009      	b.n	8003fe4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2281      	movs	r2, #129	@ 0x81
 8003fd4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f002 fd8e 	bl	8006afe <SDMMC_CmdReadSingleBlock>
 8003fe2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a0e      	ldr	r2, [pc, #56]	@ (8004028 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e002      	b.n	8004016 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3730      	adds	r7, #48	@ 0x30
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	08004927 	.word	0x08004927
 8004024:	08004999 	.word	0x08004999
 8004028:	004005ff 	.word	0x004005ff
 800402c:	4225858c 	.word	0x4225858c

08004030 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	@ 0x30
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0c5      	b.n	80041e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	f040 80be 	bne.w	80041e2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800406c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	441a      	add	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	429a      	cmp	r2, r3
 8004078:	d907      	bls.n	800408a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0ac      	b.n	80041e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2203      	movs	r2, #3
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	4a4e      	ldr	r2, [pc, #312]	@ (80041ec <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80040b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ba:	4a4d      	ldr	r2, [pc, #308]	@ (80041f0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80040bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	2200      	movs	r2, #0
 80040c4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d002      	beq.n	80040d4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	025b      	lsls	r3, r3, #9
 80040d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d90a      	bls.n	80040f0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	22a0      	movs	r2, #160	@ 0xa0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040e6:	4618      	mov	r0, r3
 80040e8:	f002 fd6f 	bl	8006bca <SDMMC_CmdWriteMultiBlock>
 80040ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80040ee:	e009      	b.n	8004104 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2290      	movs	r2, #144	@ 0x90
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fc:	4618      	mov	r0, r3
 80040fe:	f002 fd42 	bl	8006b86 <SDMMC_CmdWriteSingleBlock>
 8004102:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a39      	ldr	r2, [pc, #228]	@ (80041f4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004110:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004118:	431a      	orrs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e059      	b.n	80041e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004130:	4b31      	ldr	r3, [pc, #196]	@ (80041f8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413a:	2240      	movs	r2, #64	@ 0x40
 800413c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3380      	adds	r3, #128	@ 0x80
 8004166:	461a      	mov	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	025b      	lsls	r3, r3, #9
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	f7fe fadf 	bl	8002730 <HAL_DMA_Start_IT>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01c      	beq.n	80041b2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8004186:	f023 0302 	bic.w	r3, r3, #2
 800418a:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e018      	b.n	80041e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	025b      	lsls	r3, r3, #9
 80041bc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80041be:	2390      	movs	r3, #144	@ 0x90
 80041c0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80041ca:	2301      	movs	r3, #1
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f107 0210 	add.w	r2, r7, #16
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f002 fc42 	bl	8006a62 <SDIO_ConfigData>

      return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3730      	adds	r7, #48	@ 0x30
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	080048fd 	.word	0x080048fd
 80041f0:	08004999 	.word	0x08004999
 80041f4:	004005ff 	.word	0x004005ff
 80041f8:	4225858c 	.word	0x4225858c

080041fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_SD_IRQHandler+0x2e>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fdfc 	bl	8004e20 <SD_Read_IT>
 8004228:	e165      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 808f 	beq.w	8004358 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004242:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8004252:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004256:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d039      	beq.n	80042e6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d104      	bne.n	8004286 <HAL_SD_IRQHandler+0x8a>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d011      	beq.n	80042aa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f002 fcc0 	bl	8006c10 <SDMMC_CmdStopTransfer>
 8004290:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f92f 	bl	8004508 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f240 523a 	movw	r2, #1338	@ 0x53a
 80042b2:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_SD_IRQHandler+0xda>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f003 f9e2 	bl	80076a0 <HAL_SD_RxCpltCallback>
 80042dc:	e10b      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f003 f9d4 	bl	800768c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042e4:	e107      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8102 	beq.w	80044f6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d011      	beq.n	8004320 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f002 fc85 	bl	8006c10 <SDMMC_CmdStopTransfer>
 8004306:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8f4 	bl	8004508 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 80e5 	bne.w	80044f6 <HAL_SD_IRQHandler+0x2fa>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	f040 80df 	bne.w	80044f6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0208 	bic.w	r2, r2, #8
 8004346:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f003 f99b 	bl	800768c <HAL_SD_TxCpltCallback>
}
 8004356:	e0ce      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_SD_IRQHandler+0x17c>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fda6 	bl	8004ec2 <SD_Write_IT>
 8004376:	e0be      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800437e:	f240 233a 	movw	r3, #570	@ 0x23a
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80b6 	beq.w	80044f6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	f043 0202 	orr.w	r2, r3, #2
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	f043 0208 	orr.w	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	f043 0210 	orr.w	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	f043 0208 	orr.w	r2, r3, #8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f240 723a 	movw	r2, #1850	@ 0x73a
 8004414:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8004424:	f023 0302 	bic.w	r3, r3, #2
 8004428:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f002 fbee 	bl	8006c10 <SDMMC_CmdStopTransfer>
 8004434:	4602      	mov	r2, r0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f855 	bl	8004508 <HAL_SD_ErrorCallback>
}
 800445e:	e04a      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d045      	beq.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <HAL_SD_IRQHandler+0x282>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d011      	beq.n	80044a2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	4a1f      	ldr	r2, [pc, #124]	@ (8004500 <HAL_SD_IRQHandler+0x304>)
 8004484:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fa18 	bl	80028c0 <HAL_DMA_Abort_IT>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02f      	beq.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449a:	4618      	mov	r0, r3
 800449c:	f000 face 	bl	8004a3c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80044a0:	e029      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_SD_IRQHandler+0x2ba>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	4a12      	ldr	r2, [pc, #72]	@ (8004504 <HAL_SD_IRQHandler+0x308>)
 80044bc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe f9fc 	bl	80028c0 <HAL_DMA_Abort_IT>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d013      	beq.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fae9 	bl	8004aaa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044d8:	e00d      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f003 f8c2 	bl	8007678 <HAL_SD_AbortCallback>
}
 80044f4:	e7ff      	b.n	80044f6 <HAL_SD_IRQHandler+0x2fa>
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	08004a3d 	.word	0x08004a3d
 8004504:	08004aab 	.word	0x08004aab

08004508 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800452a:	0f9b      	lsrs	r3, r3, #30
 800452c:	b2da      	uxtb	r2, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004536:	0e9b      	lsrs	r3, r3, #26
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	b2da      	uxtb	r2, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004548:	0e1b      	lsrs	r3, r3, #24
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	b2da      	uxtb	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800455a:	0c1b      	lsrs	r3, r3, #16
 800455c:	b2da      	uxtb	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	b2da      	uxtb	r2, r3
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004572:	b2da      	uxtb	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800457c:	0d1b      	lsrs	r3, r3, #20
 800457e:	b29a      	uxth	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	b2da      	uxtb	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800459a:	0bdb      	lsrs	r3, r3, #15
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ac:	0b9b      	lsrs	r3, r3, #14
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045be:	0b5b      	lsrs	r3, r3, #13
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045d0:	0b1b      	lsrs	r3, r3, #12
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2200      	movs	r2, #0
 80045e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d163      	bne.n	80046b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045f0:	009a      	lsls	r2, r3, #2
 80045f2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045f6:	4013      	ands	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80045fc:	0f92      	lsrs	r2, r2, #30
 80045fe:	431a      	orrs	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004608:	0edb      	lsrs	r3, r3, #27
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	b2da      	uxtb	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800461a:	0e1b      	lsrs	r3, r3, #24
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	b2da      	uxtb	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800462c:	0d5b      	lsrs	r3, r3, #21
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	b2da      	uxtb	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800463e:	0c9b      	lsrs	r3, r3, #18
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	b2da      	uxtb	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004650:	0bdb      	lsrs	r3, r3, #15
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	b2da      	uxtb	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	7e1b      	ldrb	r3, [r3, #24]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	3302      	adds	r3, #2
 8004674:	2201      	movs	r2, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800467e:	fb03 f202 	mul.w	r2, r3, r2
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	7a1b      	ldrb	r3, [r3, #8]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80046a0:	0a52      	lsrs	r2, r2, #9
 80046a2:	fb03 f202 	mul.w	r2, r3, r2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80046b2:	e031      	b.n	8004718 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d11d      	bne.n	80046f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c0:	041b      	lsls	r3, r3, #16
 80046c2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	431a      	orrs	r2, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	3301      	adds	r3, #1
 80046d8:	029a      	lsls	r2, r3, #10
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ec:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80046f6:	e00f      	b.n	8004718 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a58      	ldr	r2, [pc, #352]	@ (8004860 <HAL_SD_GetCardCSD+0x344>)
 80046fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e09d      	b.n	8004854 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471c:	0b9b      	lsrs	r3, r3, #14
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	b2da      	uxtb	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800472e:	09db      	lsrs	r3, r3, #7
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004736:	b2da      	uxtb	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004746:	b2da      	uxtb	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004750:	0fdb      	lsrs	r3, r3, #31
 8004752:	b2da      	uxtb	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475c:	0f5b      	lsrs	r3, r3, #29
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	b2da      	uxtb	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476e:	0e9b      	lsrs	r3, r3, #26
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004780:	0d9b      	lsrs	r3, r3, #22
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	b2da      	uxtb	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	0d5b      	lsrs	r3, r3, #21
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ae:	0c1b      	lsrs	r3, r3, #16
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	0bdb      	lsrs	r3, r3, #15
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	0b9b      	lsrs	r3, r3, #14
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ea:	0b5b      	lsrs	r3, r3, #13
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	0b1b      	lsrs	r3, r3, #12
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	b2da      	uxtb	r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004812:	0a9b      	lsrs	r3, r3, #10
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	b2da      	uxtb	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	b2da      	uxtb	r2, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004842:	b2da      	uxtb	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	004005ff 	.word	0x004005ff

08004864 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80048c8:	f107 030c 	add.w	r3, r7, #12
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa7e 	bl	8004dd0 <SD_SendStatus>
 80048d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	0a5b      	lsrs	r3, r3, #9
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80048f2:	693b      	ldr	r3, [r7, #16]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004918:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	2b82      	cmp	r3, #130	@ 0x82
 800493a:	d111      	bne.n	8004960 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f002 f965 	bl	8006c10 <SDMMC_CmdStopTransfer>
 8004946:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	431a      	orrs	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff fdd4 	bl	8004508 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0208 	bic.w	r2, r2, #8
 800496e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004978:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f002 fe89 	bl	80076a0 <HAL_SD_RxCpltCallback>
#endif
}
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fe f936 	bl	8002c18 <HAL_DMA_GetError>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d03e      	beq.n	8004a30 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d002      	beq.n	80049ce <SD_DMAError+0x36>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d12d      	bne.n	8004a2a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <SD_DMAError+0xa0>)
 80049d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80049e4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	f7ff ff62 	bl	80048bc <HAL_SD_GetCardState>
 80049f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d002      	beq.n	8004a06 <SD_DMAError+0x6e>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d10a      	bne.n	8004a1c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f002 f900 	bl	8006c10 <SDMMC_CmdStopTransfer>
 8004a10:	4602      	mov	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a16:	431a      	orrs	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004a2a:	6978      	ldr	r0, [r7, #20]
 8004a2c:	f7ff fd6c 	bl	8004508 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004a30:	bf00      	nop
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	004005ff 	.word	0x004005ff

08004a3c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004a52:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7ff ff31 	bl	80048bc <HAL_SD_GetCardState>
 8004a5a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d002      	beq.n	8004a76 <SD_DMATxAbort+0x3a>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d10a      	bne.n	8004a8c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f002 f8c8 	bl	8006c10 <SDMMC_CmdStopTransfer>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d103      	bne.n	8004a9c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f002 fdef 	bl	8007678 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004a9a:	e002      	b.n	8004aa2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7ff fd33 	bl	8004508 <HAL_SD_ErrorCallback>
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fefa 	bl	80048bc <HAL_SD_GetCardState>
 8004ac8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b06      	cmp	r3, #6
 8004adc:	d002      	beq.n	8004ae4 <SD_DMARxAbort+0x3a>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d10a      	bne.n	8004afa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f002 f891 	bl	8006c10 <SDMMC_CmdStopTransfer>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	431a      	orrs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f002 fdb8 	bl	8007678 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b08:	e002      	b.n	8004b10 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f7ff fcfc 	bl	8004508 <HAL_SD_ErrorCallback>
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b18:	b5b0      	push	{r4, r5, r7, lr}
 8004b1a:	b094      	sub	sp, #80	@ 0x50
 8004b1c:	af04      	add	r7, sp, #16
 8004b1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004b20:	2301      	movs	r3, #1
 8004b22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 ff42 	bl	80069b2 <SDIO_GetPowerState>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b34:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004b38:	e0b8      	b.n	8004cac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d02f      	beq.n	8004ba2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f002 f929 	bl	8006d9e <SDMMC_CmdSendCID>
 8004b4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <SD_InitCard+0x40>
    {
      return errorstate;
 8004b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b56:	e0a9      	b.n	8004cac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 ff6c 	bl	8006a3c <SDIO_GetResponse>
 8004b64:	4602      	mov	r2, r0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2104      	movs	r1, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 ff63 	bl	8006a3c <SDIO_GetResponse>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2108      	movs	r1, #8
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 ff5a 	bl	8006a3c <SDIO_GetResponse>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	210c      	movs	r1, #12
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 ff51 	bl	8006a3c <SDIO_GetResponse>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d00d      	beq.n	8004bc6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f107 020e 	add.w	r2, r7, #14
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f002 f92f 	bl	8006e18 <SDMMC_CmdSetRelAdd>
 8004bba:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <SD_InitCard+0xae>
    {
      return errorstate;
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc4:	e072      	b.n	8004cac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d036      	beq.n	8004c3c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004bce:	89fb      	ldrh	r3, [r7, #14]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f002 f8f9 	bl	8006dda <SDMMC_CmdSendCSD>
 8004be8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf2:	e05b      	b.n	8004cac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 ff1e 	bl	8006a3c <SDIO_GetResponse>
 8004c00:	4602      	mov	r2, r0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2104      	movs	r1, #4
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 ff15 	bl	8006a3c <SDIO_GetResponse>
 8004c12:	4602      	mov	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2108      	movs	r1, #8
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 ff0c 	bl	8006a3c <SDIO_GetResponse>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	210c      	movs	r1, #12
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 ff03 	bl	8006a3c <SDIO_GetResponse>
 8004c36:	4602      	mov	r2, r0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2104      	movs	r1, #4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 fefa 	bl	8006a3c <SDIO_GetResponse>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	0d1a      	lsrs	r2, r3, #20
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004c50:	f107 0310 	add.w	r3, r7, #16
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fc60 	bl	800451c <HAL_SD_GetCardCSD>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c62:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004c66:	e021      	b.n	8004cac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	2200      	movs	r2, #0
 8004c74:	461c      	mov	r4, r3
 8004c76:	4615      	mov	r5, r2
 8004c78:	4622      	mov	r2, r4
 8004c7a:	462b      	mov	r3, r5
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	f001 ffe9 	bl	8006c54 <SDMMC_CmdSelDesel>
 8004c82:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <SD_InitCard+0x176>
  {
    return errorstate;
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8c:	e00e      	b.n	8004cac <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681d      	ldr	r5, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	466c      	mov	r4, sp
 8004c96:	f103 0210 	add.w	r2, r3, #16
 8004c9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f001 fe2d 	bl	8006904 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3740      	adds	r7, #64	@ 0x40
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bdb0      	pop	{r4, r5, r7, pc}

08004cb4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 ffe4 	bl	8006c9a <SDMMC_CmdGoIdleState>
 8004cd2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <SD_PowerON+0x2a>
  {
    return errorstate;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	e072      	b.n	8004dc4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 fff7 	bl	8006cd6 <SDMMC_CmdOperCond>
 8004ce8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 ffcd 	bl	8006c9a <SDMMC_CmdGoIdleState>
 8004d00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	e05b      	b.n	8004dc4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d137      	bne.n	8004d8a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 fff7 	bl	8006d14 <SDMMC_CmdAppCommand>
 8004d26:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d02d      	beq.n	8004d8a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d32:	e047      	b.n	8004dc4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 ffea 	bl	8006d14 <SDMMC_CmdAppCommand>
 8004d40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <SD_PowerON+0x98>
    {
      return errorstate;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	e03b      	b.n	8004dc4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	491e      	ldr	r1, [pc, #120]	@ (8004dcc <SD_PowerON+0x118>)
 8004d52:	4618      	mov	r0, r3
 8004d54:	f002 f800 	bl	8006d58 <SDMMC_CmdAppOperCommand>
 8004d58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d64:	e02e      	b.n	8004dc4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 fe65 	bl	8006a3c <SDIO_GetResponse>
 8004d72:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	0fdb      	lsrs	r3, r3, #31
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <SD_PowerON+0xcc>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <SD_PowerON+0xce>
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]

    count++;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d802      	bhi.n	8004d9a <SD_PowerON+0xe6>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0cc      	beq.n	8004d34 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d902      	bls.n	8004daa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004da4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004da8:	e00c      	b.n	8004dc4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
 8004dba:	e002      	b.n	8004dc2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	c1100000 	.word	0xc1100000

08004dd0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004de0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004de4:	e018      	b.n	8004e18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dee:	041b      	lsls	r3, r3, #16
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f002 f831 	bl	8006e5a <SDMMC_CmdSendStatus>
 8004df8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	e009      	b.n	8004e18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 fe16 	bl	8006a3c <SDIO_GetResponse>
 8004e10:	4602      	mov	r2, r0
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d03f      	beq.n	8004eba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e033      	b.n	8004ea8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fd88 	bl	800695a <SDIO_ReadFIFO>
 8004e4a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	0e1b      	lsrs	r3, r3, #24
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b07      	cmp	r3, #7
 8004eac:	d9c8      	bls.n	8004e40 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d043      	beq.n	8004f64 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e037      	b.n	8004f52 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	021a      	lsls	r2, r3, #8
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3301      	adds	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	041a      	lsls	r2, r3, #16
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	061a      	lsls	r2, r3, #24
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3301      	adds	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f107 0208 	add.w	r2, r7, #8
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 fd14 	bl	8006974 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b07      	cmp	r3, #7
 8004f56:	d9c4      	bls.n	8004ee2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004f64:	bf00      	nop
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e041      	b.n	8005002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fd f8ea 	bl	800216c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fa7e 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e04e      	b.n	80050c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a23      	ldr	r2, [pc, #140]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504e:	d01d      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	@ (80050dc <HAL_TIM_Base_Start_IT+0xd0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a19      	ldr	r2, [pc, #100]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d111      	bne.n	80050b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b06      	cmp	r3, #6
 800509c:	d010      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ae:	e007      	b.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40001800 	.word	0x40001800

080050ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d020      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0202 	mvn.w	r2, #2
 8005120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f999 	bl	800546e <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f98b 	bl	800545a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f99c 	bl	8005482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d020      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01b      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0204 	mvn.w	r2, #4
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f973 	bl	800546e <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f965 	bl	800545a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f976 	bl	8005482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d020      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0208 	mvn.w	r2, #8
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f94d 	bl	800546e <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f93f 	bl	800545a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f950 	bl	8005482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d020      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2208      	movs	r2, #8
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f927 	bl	800546e <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f919 	bl	800545a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f92a 	bl	8005482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0201 	mvn.w	r2, #1
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fc fbf4 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fae4 	bl	8005844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8fb 	bl	8005496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0220 	mvn.w	r2, #32
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fab6 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_TIM_ConfigClockSource+0x1c>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e0b4      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x186>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800530e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005320:	d03e      	beq.n	80053a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005326:	f200 8087 	bhi.w	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532e:	f000 8086 	beq.w	800543e <HAL_TIM_ConfigClockSource+0x172>
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005336:	d87f      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b70      	cmp	r3, #112	@ 0x70
 800533a:	d01a      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0xa6>
 800533c:	2b70      	cmp	r3, #112	@ 0x70
 800533e:	d87b      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b60      	cmp	r3, #96	@ 0x60
 8005342:	d050      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005344:	2b60      	cmp	r3, #96	@ 0x60
 8005346:	d877      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b50      	cmp	r3, #80	@ 0x50
 800534a:	d03c      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0xfa>
 800534c:	2b50      	cmp	r3, #80	@ 0x50
 800534e:	d873      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b40      	cmp	r3, #64	@ 0x40
 8005352:	d058      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x13a>
 8005354:	2b40      	cmp	r3, #64	@ 0x40
 8005356:	d86f      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b30      	cmp	r3, #48	@ 0x30
 800535a:	d064      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x15a>
 800535c:	2b30      	cmp	r3, #48	@ 0x30
 800535e:	d86b      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d060      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x15a>
 8005364:	2b20      	cmp	r3, #32
 8005366:	d867      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05c      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x15a>
 800536c:	2b10      	cmp	r3, #16
 800536e:	d05a      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x15a>
 8005370:	e062      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	f000 f9b9 	bl	80056f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	609a      	str	r2, [r3, #8]
      break;
 800539e:	e04f      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053b0:	f000 f9a2 	bl	80056f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053c2:	609a      	str	r2, [r3, #8]
      break;
 80053c4:	e03c      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d2:	461a      	mov	r2, r3
 80053d4:	f000 f916 	bl	8005604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2150      	movs	r1, #80	@ 0x50
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f96f 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 80053e4:	e02c      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053f2:	461a      	mov	r2, r3
 80053f4:	f000 f935 	bl	8005662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2160      	movs	r1, #96	@ 0x60
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f95f 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8005404:	e01c      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	461a      	mov	r2, r3
 8005414:	f000 f8f6 	bl	8005604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2140      	movs	r1, #64	@ 0x40
 800541e:	4618      	mov	r0, r3
 8005420:	f000 f94f 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8005424:	e00c      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4619      	mov	r1, r3
 8005430:	4610      	mov	r0, r2
 8005432:	f000 f946 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8005436:	e003      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]
      break;
 800543c:	e000      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800543e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a46      	ldr	r2, [pc, #280]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ca:	d00f      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a43      	ldr	r2, [pc, #268]	@ (80055dc <TIM_Base_SetConfig+0x130>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00b      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a42      	ldr	r2, [pc, #264]	@ (80055e0 <TIM_Base_SetConfig+0x134>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a41      	ldr	r2, [pc, #260]	@ (80055e4 <TIM_Base_SetConfig+0x138>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a40      	ldr	r2, [pc, #256]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d108      	bne.n	80054fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a35      	ldr	r2, [pc, #212]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550c:	d027      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a32      	ldr	r2, [pc, #200]	@ (80055dc <TIM_Base_SetConfig+0x130>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d023      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a31      	ldr	r2, [pc, #196]	@ (80055e0 <TIM_Base_SetConfig+0x134>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01f      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a30      	ldr	r2, [pc, #192]	@ (80055e4 <TIM_Base_SetConfig+0x138>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2f      	ldr	r2, [pc, #188]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d017      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2e      	ldr	r2, [pc, #184]	@ (80055ec <TIM_Base_SetConfig+0x140>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2d      	ldr	r2, [pc, #180]	@ (80055f0 <TIM_Base_SetConfig+0x144>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00f      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2c      	ldr	r2, [pc, #176]	@ (80055f4 <TIM_Base_SetConfig+0x148>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2b      	ldr	r2, [pc, #172]	@ (80055f8 <TIM_Base_SetConfig+0x14c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2a      	ldr	r2, [pc, #168]	@ (80055fc <TIM_Base_SetConfig+0x150>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a29      	ldr	r2, [pc, #164]	@ (8005600 <TIM_Base_SetConfig+0x154>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d108      	bne.n	8005570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a10      	ldr	r2, [pc, #64]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_Base_SetConfig+0xf8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a12      	ldr	r2, [pc, #72]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d103      	bne.n	80055ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d105      	bne.n	80055ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]
  }
}
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40000800 	.word	0x40000800
 80055e4:	40000c00 	.word	0x40000c00
 80055e8:	40010400 	.word	0x40010400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800
 80055f8:	40001800 	.word	0x40001800
 80055fc:	40001c00 	.word	0x40001c00
 8005600:	40002000 	.word	0x40002000

08005604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 030a 	bic.w	r3, r3, #10
 8005640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f023 0210 	bic.w	r2, r3, #16
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800568c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800569e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f043 0307 	orr.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800574c:	2302      	movs	r3, #2
 800574e:	e05a      	b.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a21      	ldr	r2, [pc, #132]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579c:	d01d      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a17      	ldr	r2, [pc, #92]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a15      	ldr	r2, [pc, #84]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10c      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40010400 	.word	0x40010400
 8005828:	40014000 	.word	0x40014000
 800582c:	40001800 	.word	0x40001800

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e042      	b.n	80058f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc fcc6 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	@ 0x24
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fdbd 	bl	800641c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	@ 0x28
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b20      	cmp	r3, #32
 8005916:	d175      	bne.n	8005a04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_UART_Transmit+0x2c>
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e06e      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2221      	movs	r2, #33	@ 0x21
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005936:	f7fc fd3b 	bl	80023b0 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005950:	d108      	bne.n	8005964 <HAL_UART_Transmit+0x6c>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	e003      	b.n	800596c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800596c:	e02e      	b.n	80059cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	@ 0x80
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fb1f 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e03a      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	3302      	adds	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e007      	b.n	80059be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1cb      	bne.n	800596e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	2140      	movs	r1, #64	@ 0x40
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 faeb 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e000      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d112      	bne.n	8005a4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_UART_Receive_IT+0x26>
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e00b      	b.n	8005a50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	461a      	mov	r2, r3
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fb12 	bl	800606e <UART_Start_Receive_IT>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	e000      	b.n	8005a50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10f      	bne.n	8005abe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <HAL_UART_IRQHandler+0x66>
 8005aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fbf2 	bl	80062a0 <UART_Receive_IT>
      return;
 8005abc:	e25b      	b.n	8005f76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 80de 	beq.w	8005c84 <HAL_UART_IRQHandler+0x22c>
 8005ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d106      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80d1 	beq.w	8005c84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <HAL_UART_IRQHandler+0xae>
 8005aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	f043 0201 	orr.w	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <HAL_UART_IRQHandler+0xd2>
 8005b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	f043 0202 	orr.w	r2, r3, #2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_UART_IRQHandler+0xf6>
 8005b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b46:	f043 0204 	orr.w	r2, r3, #4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d011      	beq.n	8005b7e <HAL_UART_IRQHandler+0x126>
 8005b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d105      	bne.n	8005b72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f043 0208 	orr.w	r2, r3, #8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 81f2 	beq.w	8005f6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x14e>
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fb7d 	bl	80062a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x17a>
 8005bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d04f      	beq.n	8005c72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fa85 	bl	80060e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b40      	cmp	r3, #64	@ 0x40
 8005be4:	d141      	bne.n	8005c6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3314      	adds	r3, #20
 8005bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1d9      	bne.n	8005be6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d013      	beq.n	8005c62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e38 <HAL_UART_IRQHandler+0x3e0>)
 8005c40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fc fe3a 	bl	80028c0 <HAL_DMA_Abort_IT>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d016      	beq.n	8005c80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	e00e      	b.n	8005c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f994 	bl	8005f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c68:	e00a      	b.n	8005c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f990 	bl	8005f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	e006      	b.n	8005c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f98c 	bl	8005f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c7e:	e175      	b.n	8005f6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	bf00      	nop
    return;
 8005c82:	e173      	b.n	8005f6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	f040 814f 	bne.w	8005f2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8148 	beq.w	8005f2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8141 	beq.w	8005f2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cca:	2b40      	cmp	r3, #64	@ 0x40
 8005ccc:	f040 80b6 	bne.w	8005e3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8145 	beq.w	8005f70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	f080 813e 	bcs.w	8005f70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d06:	f000 8088 	beq.w	8005e1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1d9      	bne.n	8005d0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3314      	adds	r3, #20
 8005d5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3314      	adds	r3, #20
 8005d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e1      	bne.n	8005d56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3314      	adds	r3, #20
 8005db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005db6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005db8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e3      	bne.n	8005d92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dea:	f023 0310 	bic.w	r3, r3, #16
 8005dee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005dfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e3      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fc fce3 	bl	80027e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8b7 	bl	8005fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e36:	e09b      	b.n	8005f70 <HAL_UART_IRQHandler+0x518>
 8005e38:	080061a9 	.word	0x080061a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 808e 	beq.w	8005f74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8089 	beq.w	8005f74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e86:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e3      	bne.n	8005e62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3314      	adds	r3, #20
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f023 0301 	bic.w	r3, r3, #1
 8005eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3314      	adds	r3, #20
 8005eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ebe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e3      	bne.n	8005e9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0310 	bic.w	r3, r3, #16
 8005ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f04:	61fa      	str	r2, [r7, #28]
 8005f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	69b9      	ldr	r1, [r7, #24]
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	617b      	str	r3, [r7, #20]
   return(result);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e3      	bne.n	8005ee0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f83d 	bl	8005fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f2a:	e023      	b.n	8005f74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d009      	beq.n	8005f4c <HAL_UART_IRQHandler+0x4f4>
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f943 	bl	80061d0 <UART_Transmit_IT>
    return;
 8005f4a:	e014      	b.n	8005f76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00e      	beq.n	8005f76 <HAL_UART_IRQHandler+0x51e>
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f983 	bl	8006270 <UART_EndTransmit_IT>
    return;
 8005f6a:	e004      	b.n	8005f76 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f6c:	bf00      	nop
 8005f6e:	e002      	b.n	8005f76 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f74:	bf00      	nop
  }
}
 8005f76:	37e8      	adds	r7, #232	@ 0xe8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fcc:	e03b      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d037      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd6:	f7fc f9eb 	bl	80023b0 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	6a3a      	ldr	r2, [r7, #32]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <UART_WaitOnFlagUntilTimeout+0x30>
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e03a      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d023      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b80      	cmp	r3, #128	@ 0x80
 8006002:	d020      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b40      	cmp	r3, #64	@ 0x40
 8006008:	d01d      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b08      	cmp	r3, #8
 8006016:	d116      	bne.n	8006046 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f857 	bl	80060e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2208      	movs	r2, #8
 8006038:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e00f      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4013      	ands	r3, r2
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	429a      	cmp	r2, r3
 8006062:	d0b4      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	4613      	mov	r3, r2
 800607a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	88fa      	ldrh	r2, [r7, #6]
 8006086:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2222      	movs	r2, #34	@ 0x22
 8006098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695a      	ldr	r2, [r3, #20]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0220 	orr.w	r2, r2, #32
 80060d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b095      	sub	sp, #84	@ 0x54
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	330c      	adds	r3, #12
 8006108:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800610a:	643a      	str	r2, [r7, #64]	@ 0x40
 800610c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e5      	bne.n	80060ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	61fb      	str	r3, [r7, #28]
   return(result);
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800613e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006140:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006156:	2b01      	cmp	r3, #1
 8006158:	d119      	bne.n	800618e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	330c      	adds	r3, #12
 8006160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	60bb      	str	r3, [r7, #8]
   return(result);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f023 0310 	bic.w	r3, r3, #16
 8006170:	647b      	str	r3, [r7, #68]	@ 0x44
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800617a:	61ba      	str	r2, [r7, #24]
 800617c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	613b      	str	r3, [r7, #16]
   return(result);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e5      	bne.n	800615a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800619c:	bf00      	nop
 800619e:	3754      	adds	r7, #84	@ 0x54
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f7ff fee4 	bl	8005f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b21      	cmp	r3, #33	@ 0x21
 80061e2:	d13e      	bne.n	8006262 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ec:	d114      	bne.n	8006218 <UART_Transmit_IT+0x48>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d110      	bne.n	8006218 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]
 8006216:	e008      	b.n	800622a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6211      	str	r1, [r2, #32]
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29b      	uxth	r3, r3
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4619      	mov	r1, r3
 8006238:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10f      	bne.n	800625e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800624c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800625c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006286:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff fe73 	bl	8005f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08c      	sub	sp, #48	@ 0x30
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b22      	cmp	r3, #34	@ 0x22
 80062b2:	f040 80ae 	bne.w	8006412 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062be:	d117      	bne.n	80062f0 <UART_Receive_IT+0x50>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d113      	bne.n	80062f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	b29a      	uxth	r2, r3
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e8:	1c9a      	adds	r2, r3, #2
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ee:	e026      	b.n	800633e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006302:	d007      	beq.n	8006314 <UART_Receive_IT+0x74>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <UART_Receive_IT+0x82>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d106      	bne.n	8006322 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	e008      	b.n	8006334 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800632e:	b2da      	uxtb	r2, r3
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006332:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29b      	uxth	r3, r3
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4619      	mov	r1, r3
 800634c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800634e:	2b00      	cmp	r3, #0
 8006350:	d15d      	bne.n	800640e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0220 	bic.w	r2, r2, #32
 8006360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006370:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006394:	2b01      	cmp	r3, #1
 8006396:	d135      	bne.n	8006404 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	613b      	str	r3, [r7, #16]
   return(result);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f023 0310 	bic.w	r3, r3, #16
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063be:	623a      	str	r2, [r7, #32]
 80063c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	69f9      	ldr	r1, [r7, #28]
 80063c4:	6a3a      	ldr	r2, [r7, #32]
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e5      	bne.n	800639e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d10a      	bne.n	80063f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fdd1 	bl	8005fa4 <HAL_UARTEx_RxEventCallback>
 8006402:	e002      	b.n	800640a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fb ff53 	bl	80022b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	e002      	b.n	8006414 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e000      	b.n	8006414 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006412:	2302      	movs	r3, #2
  }
}
 8006414:	4618      	mov	r0, r3
 8006416:	3730      	adds	r7, #48	@ 0x30
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800641c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006420:	b0c0      	sub	sp, #256	@ 0x100
 8006422:	af00      	add	r7, sp, #0
 8006424:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	68d9      	ldr	r1, [r3, #12]
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	ea40 0301 	orr.w	r3, r0, r1
 8006444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	431a      	orrs	r2, r3
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	431a      	orrs	r2, r3
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006474:	f021 010c 	bic.w	r1, r1, #12
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006482:	430b      	orrs	r3, r1
 8006484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006496:	6999      	ldr	r1, [r3, #24]
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	ea40 0301 	orr.w	r3, r0, r1
 80064a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b8f      	ldr	r3, [pc, #572]	@ (80066e8 <UART_SetConfig+0x2cc>)
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d005      	beq.n	80064bc <UART_SetConfig+0xa0>
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b8d      	ldr	r3, [pc, #564]	@ (80066ec <UART_SetConfig+0x2d0>)
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d104      	bne.n	80064c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064bc:	f7fd fb4c 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 80064c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064c4:	e003      	b.n	80064ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064c6:	f7fd fb33 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 80064ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d8:	f040 810c 	bne.w	80066f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	1891      	adds	r1, r2, r2
 80064f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064f6:	415b      	adcs	r3, r3
 80064f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064fe:	4621      	mov	r1, r4
 8006500:	eb12 0801 	adds.w	r8, r2, r1
 8006504:	4629      	mov	r1, r5
 8006506:	eb43 0901 	adc.w	r9, r3, r1
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800651a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800651e:	4690      	mov	r8, r2
 8006520:	4699      	mov	r9, r3
 8006522:	4623      	mov	r3, r4
 8006524:	eb18 0303 	adds.w	r3, r8, r3
 8006528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800652c:	462b      	mov	r3, r5
 800652e:	eb49 0303 	adc.w	r3, r9, r3
 8006532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006542:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800654a:	460b      	mov	r3, r1
 800654c:	18db      	adds	r3, r3, r3
 800654e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006550:	4613      	mov	r3, r2
 8006552:	eb42 0303 	adc.w	r3, r2, r3
 8006556:	657b      	str	r3, [r7, #84]	@ 0x54
 8006558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800655c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006560:	f7fa fb92 	bl	8000c88 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4b61      	ldr	r3, [pc, #388]	@ (80066f0 <UART_SetConfig+0x2d4>)
 800656a:	fba3 2302 	umull	r2, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	011c      	lsls	r4, r3, #4
 8006572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800657c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006580:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	1891      	adds	r1, r2, r2
 800658a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800658c:	415b      	adcs	r3, r3
 800658e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006590:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006594:	4641      	mov	r1, r8
 8006596:	eb12 0a01 	adds.w	sl, r2, r1
 800659a:	4649      	mov	r1, r9
 800659c:	eb43 0b01 	adc.w	fp, r3, r1
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065b4:	4692      	mov	sl, r2
 80065b6:	469b      	mov	fp, r3
 80065b8:	4643      	mov	r3, r8
 80065ba:	eb1a 0303 	adds.w	r3, sl, r3
 80065be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065c2:	464b      	mov	r3, r9
 80065c4:	eb4b 0303 	adc.w	r3, fp, r3
 80065c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065e0:	460b      	mov	r3, r1
 80065e2:	18db      	adds	r3, r3, r3
 80065e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80065e6:	4613      	mov	r3, r2
 80065e8:	eb42 0303 	adc.w	r3, r2, r3
 80065ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065f6:	f7fa fb47 	bl	8000c88 <__aeabi_uldivmod>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	4b3b      	ldr	r3, [pc, #236]	@ (80066f0 <UART_SetConfig+0x2d4>)
 8006602:	fba3 2301 	umull	r2, r3, r3, r1
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	2264      	movs	r2, #100	@ 0x64
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	1acb      	subs	r3, r1, r3
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006616:	4b36      	ldr	r3, [pc, #216]	@ (80066f0 <UART_SetConfig+0x2d4>)
 8006618:	fba3 2302 	umull	r2, r3, r3, r2
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006624:	441c      	add	r4, r3
 8006626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800662a:	2200      	movs	r2, #0
 800662c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006630:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006634:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006638:	4642      	mov	r2, r8
 800663a:	464b      	mov	r3, r9
 800663c:	1891      	adds	r1, r2, r2
 800663e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006640:	415b      	adcs	r3, r3
 8006642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006648:	4641      	mov	r1, r8
 800664a:	1851      	adds	r1, r2, r1
 800664c:	6339      	str	r1, [r7, #48]	@ 0x30
 800664e:	4649      	mov	r1, r9
 8006650:	414b      	adcs	r3, r1
 8006652:	637b      	str	r3, [r7, #52]	@ 0x34
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006660:	4659      	mov	r1, fp
 8006662:	00cb      	lsls	r3, r1, #3
 8006664:	4651      	mov	r1, sl
 8006666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666a:	4651      	mov	r1, sl
 800666c:	00ca      	lsls	r2, r1, #3
 800666e:	4610      	mov	r0, r2
 8006670:	4619      	mov	r1, r3
 8006672:	4603      	mov	r3, r0
 8006674:	4642      	mov	r2, r8
 8006676:	189b      	adds	r3, r3, r2
 8006678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800667c:	464b      	mov	r3, r9
 800667e:	460a      	mov	r2, r1
 8006680:	eb42 0303 	adc.w	r3, r2, r3
 8006684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006694:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800669c:	460b      	mov	r3, r1
 800669e:	18db      	adds	r3, r3, r3
 80066a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066a2:	4613      	mov	r3, r2
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066b2:	f7fa fae9 	bl	8000c88 <__aeabi_uldivmod>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4b0d      	ldr	r3, [pc, #52]	@ (80066f0 <UART_SetConfig+0x2d4>)
 80066bc:	fba3 1302 	umull	r1, r3, r3, r2
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	2164      	movs	r1, #100	@ 0x64
 80066c4:	fb01 f303 	mul.w	r3, r1, r3
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	3332      	adds	r3, #50	@ 0x32
 80066ce:	4a08      	ldr	r2, [pc, #32]	@ (80066f0 <UART_SetConfig+0x2d4>)
 80066d0:	fba2 2303 	umull	r2, r3, r2, r3
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f003 0207 	and.w	r2, r3, #7
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4422      	add	r2, r4
 80066e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066e4:	e106      	b.n	80068f4 <UART_SetConfig+0x4d8>
 80066e6:	bf00      	nop
 80066e8:	40011000 	.word	0x40011000
 80066ec:	40011400 	.word	0x40011400
 80066f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006702:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006706:	4642      	mov	r2, r8
 8006708:	464b      	mov	r3, r9
 800670a:	1891      	adds	r1, r2, r2
 800670c:	6239      	str	r1, [r7, #32]
 800670e:	415b      	adcs	r3, r3
 8006710:	627b      	str	r3, [r7, #36]	@ 0x24
 8006712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006716:	4641      	mov	r1, r8
 8006718:	1854      	adds	r4, r2, r1
 800671a:	4649      	mov	r1, r9
 800671c:	eb43 0501 	adc.w	r5, r3, r1
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	00eb      	lsls	r3, r5, #3
 800672a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800672e:	00e2      	lsls	r2, r4, #3
 8006730:	4614      	mov	r4, r2
 8006732:	461d      	mov	r5, r3
 8006734:	4643      	mov	r3, r8
 8006736:	18e3      	adds	r3, r4, r3
 8006738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800673c:	464b      	mov	r3, r9
 800673e:	eb45 0303 	adc.w	r3, r5, r3
 8006742:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006752:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006762:	4629      	mov	r1, r5
 8006764:	008b      	lsls	r3, r1, #2
 8006766:	4621      	mov	r1, r4
 8006768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800676c:	4621      	mov	r1, r4
 800676e:	008a      	lsls	r2, r1, #2
 8006770:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006774:	f7fa fa88 	bl	8000c88 <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4b60      	ldr	r3, [pc, #384]	@ (8006900 <UART_SetConfig+0x4e4>)
 800677e:	fba3 2302 	umull	r2, r3, r3, r2
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	011c      	lsls	r4, r3, #4
 8006786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800678a:	2200      	movs	r2, #0
 800678c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006790:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006794:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	1891      	adds	r1, r2, r2
 800679e:	61b9      	str	r1, [r7, #24]
 80067a0:	415b      	adcs	r3, r3
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a8:	4641      	mov	r1, r8
 80067aa:	1851      	adds	r1, r2, r1
 80067ac:	6139      	str	r1, [r7, #16]
 80067ae:	4649      	mov	r1, r9
 80067b0:	414b      	adcs	r3, r1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067c0:	4659      	mov	r1, fp
 80067c2:	00cb      	lsls	r3, r1, #3
 80067c4:	4651      	mov	r1, sl
 80067c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ca:	4651      	mov	r1, sl
 80067cc:	00ca      	lsls	r2, r1, #3
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	4642      	mov	r2, r8
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067dc:	464b      	mov	r3, r9
 80067de:	460a      	mov	r2, r1
 80067e0:	eb42 0303 	adc.w	r3, r2, r3
 80067e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006800:	4649      	mov	r1, r9
 8006802:	008b      	lsls	r3, r1, #2
 8006804:	4641      	mov	r1, r8
 8006806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680a:	4641      	mov	r1, r8
 800680c:	008a      	lsls	r2, r1, #2
 800680e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006812:	f7fa fa39 	bl	8000c88 <__aeabi_uldivmod>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4611      	mov	r1, r2
 800681c:	4b38      	ldr	r3, [pc, #224]	@ (8006900 <UART_SetConfig+0x4e4>)
 800681e:	fba3 2301 	umull	r2, r3, r3, r1
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	2264      	movs	r2, #100	@ 0x64
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	1acb      	subs	r3, r1, r3
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	3332      	adds	r3, #50	@ 0x32
 8006830:	4a33      	ldr	r2, [pc, #204]	@ (8006900 <UART_SetConfig+0x4e4>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800683c:	441c      	add	r4, r3
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006842:	2200      	movs	r2, #0
 8006844:	673b      	str	r3, [r7, #112]	@ 0x70
 8006846:	677a      	str	r2, [r7, #116]	@ 0x74
 8006848:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800684c:	4642      	mov	r2, r8
 800684e:	464b      	mov	r3, r9
 8006850:	1891      	adds	r1, r2, r2
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	415b      	adcs	r3, r3
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800685c:	4641      	mov	r1, r8
 800685e:	1851      	adds	r1, r2, r1
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	4649      	mov	r1, r9
 8006864:	414b      	adcs	r3, r1
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006874:	4659      	mov	r1, fp
 8006876:	00cb      	lsls	r3, r1, #3
 8006878:	4651      	mov	r1, sl
 800687a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800687e:	4651      	mov	r1, sl
 8006880:	00ca      	lsls	r2, r1, #3
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	4603      	mov	r3, r0
 8006888:	4642      	mov	r2, r8
 800688a:	189b      	adds	r3, r3, r2
 800688c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800688e:	464b      	mov	r3, r9
 8006890:	460a      	mov	r2, r1
 8006892:	eb42 0303 	adc.w	r3, r2, r3
 8006896:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80068a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068b0:	4649      	mov	r1, r9
 80068b2:	008b      	lsls	r3, r1, #2
 80068b4:	4641      	mov	r1, r8
 80068b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ba:	4641      	mov	r1, r8
 80068bc:	008a      	lsls	r2, r1, #2
 80068be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068c2:	f7fa f9e1 	bl	8000c88 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <UART_SetConfig+0x4e4>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	2164      	movs	r1, #100	@ 0x64
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	3332      	adds	r3, #50	@ 0x32
 80068de:	4a08      	ldr	r2, [pc, #32]	@ (8006900 <UART_SetConfig+0x4e4>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f003 020f 	and.w	r2, r3, #15
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4422      	add	r2, r4
 80068f2:	609a      	str	r2, [r3, #8]
}
 80068f4:	bf00      	nop
 80068f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068fa:	46bd      	mov	sp, r7
 80068fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006900:	51eb851f 	.word	0x51eb851f

08006904 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006904:	b084      	sub	sp, #16
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	f107 001c 	add.w	r0, r7, #28
 8006912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800691a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800691c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800691e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006922:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006926:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800692a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800692e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800693e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	b004      	add	sp, #16
 8006958:	4770      	bx	lr

0800695a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2203      	movs	r2, #3
 80069a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0303 	and.w	r3, r3, #3
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069ec:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80069f2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80069f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006a08:	f023 030f 	bic.w	r3, r3, #15
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	b2db      	uxtb	r3, r3
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3314      	adds	r3, #20
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	4413      	add	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
}  
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a88:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006a8e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006a94:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0

}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b088      	sub	sp, #32
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006ac8:	2310      	movs	r3, #16
 8006aca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006acc:	2340      	movs	r3, #64	@ 0x40
 8006ace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ad8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ada:	f107 0308 	add.w	r3, r7, #8
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff74 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aea:	2110      	movs	r1, #16
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9d7 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006af2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006af4:	69fb      	ldr	r3, [r7, #28]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3720      	adds	r7, #32
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b088      	sub	sp, #32
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006b0c:	2311      	movs	r3, #17
 8006b0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b10:	2340      	movs	r3, #64	@ 0x40
 8006b12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b1e:	f107 0308 	add.w	r3, r7, #8
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff ff52 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b2e:	2111      	movs	r1, #17
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f9b5 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006b36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b38:	69fb      	ldr	r3, [r7, #28]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b088      	sub	sp, #32
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006b50:	2312      	movs	r3, #18
 8006b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b54:	2340      	movs	r3, #64	@ 0x40
 8006b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b62:	f107 0308 	add.w	r3, r7, #8
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ff30 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b72:	2112      	movs	r1, #18
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f993 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006b7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b088      	sub	sp, #32
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006b94:	2318      	movs	r3, #24
 8006b96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b98:	2340      	movs	r3, #64	@ 0x40
 8006b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ba4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ba6:	f107 0308 	add.w	r3, r7, #8
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff ff0e 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb6:	2118      	movs	r1, #24
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f971 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b088      	sub	sp, #32
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006bd8:	2319      	movs	r3, #25
 8006bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bdc:	2340      	movs	r3, #64	@ 0x40
 8006bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006be8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bea:	f107 0308 	add.w	r3, r7, #8
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff feec 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bfa:	2119      	movs	r1, #25
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f94f 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006c02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c04:	69fb      	ldr	r3, [r7, #28]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006c1c:	230c      	movs	r3, #12
 8006c1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c20:	2340      	movs	r3, #64	@ 0x40
 8006c22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c2e:	f107 0308 	add.w	r3, r7, #8
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff feca 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006c3a:	4a05      	ldr	r2, [pc, #20]	@ (8006c50 <SDMMC_CmdStopTransfer+0x40>)
 8006c3c:	210c      	movs	r1, #12
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f92e 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c46:	69fb      	ldr	r3, [r7, #28]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	05f5e100 	.word	0x05f5e100

08006c54 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	@ 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006c64:	2307      	movs	r3, #7
 8006c66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c68:	2340      	movs	r3, #64	@ 0x40
 8006c6a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c74:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c76:	f107 0310 	add.w	r3, r7, #16
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7ff fea6 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c86:	2107      	movs	r1, #7
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f909 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006c8e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3728      	adds	r7, #40	@ 0x28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b088      	sub	sp, #32
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cb8:	f107 0308 	add.w	r3, r7, #8
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fe85 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fb23 	bl	8007310 <SDMMC_GetCmdError>
 8006cca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006cde:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006ce4:	2308      	movs	r3, #8
 8006ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ce8:	2340      	movs	r3, #64	@ 0x40
 8006cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cf6:	f107 0308 	add.w	r3, r7, #8
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fe66 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fab6 	bl	8007274 <SDMMC_GetCmdResp7>
 8006d08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006d22:	2337      	movs	r3, #55	@ 0x37
 8006d24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d26:	2340      	movs	r3, #64	@ 0x40
 8006d28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d34:	f107 0308 	add.w	r3, r7, #8
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fe47 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d44:	2137      	movs	r1, #55	@ 0x37
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f8aa 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006d4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006d6e:	2329      	movs	r3, #41	@ 0x29
 8006d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d72:	2340      	movs	r3, #64	@ 0x40
 8006d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d80:	f107 0308 	add.w	r3, r7, #8
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fe21 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f9bd 	bl	800710c <SDMMC_GetCmdResp3>
 8006d92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d94:	69fb      	ldr	r3, [r7, #28]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b088      	sub	sp, #32
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006daa:	2302      	movs	r3, #2
 8006dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006dae:	23c0      	movs	r3, #192	@ 0xc0
 8006db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dbc:	f107 0308 	add.w	r3, r7, #8
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff fe03 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f957 	bl	800707c <SDMMC_GetCmdResp2>
 8006dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b088      	sub	sp, #32
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006de8:	2309      	movs	r3, #9
 8006dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006dec:	23c0      	movs	r3, #192	@ 0xc0
 8006dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006df8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fde4 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f938 	bl	800707c <SDMMC_GetCmdResp2>
 8006e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006e26:	2303      	movs	r3, #3
 8006e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e2a:	2340      	movs	r3, #64	@ 0x40
 8006e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e38:	f107 0308 	add.w	r3, r7, #8
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fdc5 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	2103      	movs	r1, #3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f99d 	bl	8007188 <SDMMC_GetCmdResp6>
 8006e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e50:	69fb      	ldr	r3, [r7, #28]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b088      	sub	sp, #32
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006e68:	230d      	movs	r3, #13
 8006e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e6c:	2340      	movs	r3, #64	@ 0x40
 8006e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e7a:	f107 0308 	add.w	r3, r7, #8
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff fda4 	bl	80069ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e8a:	210d      	movs	r1, #13
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f807 	bl	8006ea0 <SDMMC_GetCmdResp1>
 8006e92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e94:	69fb      	ldr	r3, [r7, #28]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006eae:	4b70      	ldr	r3, [pc, #448]	@ (8007070 <SDMMC_GetCmdResp1+0x1d0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a70      	ldr	r2, [pc, #448]	@ (8007074 <SDMMC_GetCmdResp1+0x1d4>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	0a5a      	lsrs	r2, r3, #9
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	1e5a      	subs	r2, r3, #1
 8006ec6:	61fa      	str	r2, [r7, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ecc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ed0:	e0c9      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0ef      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1ea      	bne.n	8006ec2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2204      	movs	r2, #4
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006efe:	2304      	movs	r3, #4
 8006f00:	e0b1      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e0a6      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	22c5      	movs	r2, #197	@ 0xc5
 8006f1c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff fd7f 	bl	8006a22 <SDIO_GetCommandResponse>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d001      	beq.n	8006f32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e099      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006f32:	2100      	movs	r1, #0
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff fd81 	bl	8006a3c <SDIO_GetResponse>
 8006f3a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8007078 <SDMMC_GetCmdResp1+0x1d8>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e08d      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da02      	bge.n	8006f56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f54:	e087      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f60:	2340      	movs	r3, #64	@ 0x40
 8006f62:	e080      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f6e:	2380      	movs	r3, #128	@ 0x80
 8006f70:	e079      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f80:	e071      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f90:	e069      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fa0:	e061      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006fac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fb0:	e059      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006fbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006fc0:	e051      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fd0:	e049      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006fdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006fe0:	e041      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff0:	e039      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ffc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007000:	e031      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800700c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007010:	e029      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800701c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007020:	e021      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800702c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007030:	e019      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800703c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007040:	e011      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800704c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007050:	e009      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800705c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007060:	e001      	b.n	8007066 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007062:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000018 	.word	0x20000018
 8007074:	10624dd3 	.word	0x10624dd3
 8007078:	fdffe008 	.word	0xfdffe008

0800707c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007084:	4b1f      	ldr	r3, [pc, #124]	@ (8007104 <SDMMC_GetCmdResp2+0x88>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1f      	ldr	r2, [pc, #124]	@ (8007108 <SDMMC_GetCmdResp2+0x8c>)
 800708a:	fba2 2303 	umull	r2, r3, r2, r3
 800708e:	0a5b      	lsrs	r3, r3, #9
 8007090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007094:	fb02 f303 	mul.w	r3, r2, r3
 8007098:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1e5a      	subs	r2, r3, #1
 800709e:	60fa      	str	r2, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80070a8:	e026      	b.n	80070f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0ef      	beq.n	800709a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1ea      	bne.n	800709a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2204      	movs	r2, #4
 80070d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070d6:	2304      	movs	r3, #4
 80070d8:	e00e      	b.n	80070f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e003      	b.n	80070f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	22c5      	movs	r2, #197	@ 0xc5
 80070f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000018 	.word	0x20000018
 8007108:	10624dd3 	.word	0x10624dd3

0800710c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007114:	4b1a      	ldr	r3, [pc, #104]	@ (8007180 <SDMMC_GetCmdResp3+0x74>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1a      	ldr	r2, [pc, #104]	@ (8007184 <SDMMC_GetCmdResp3+0x78>)
 800711a:	fba2 2303 	umull	r2, r3, r2, r3
 800711e:	0a5b      	lsrs	r3, r3, #9
 8007120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007124:	fb02 f303 	mul.w	r3, r2, r3
 8007128:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1e5a      	subs	r2, r3, #1
 800712e:	60fa      	str	r2, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007134:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007138:	e01b      	b.n	8007172 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800713e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0ef      	beq.n	800712a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ea      	bne.n	800712a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2204      	movs	r2, #4
 8007164:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007166:	2304      	movs	r3, #4
 8007168:	e003      	b.n	8007172 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	22c5      	movs	r2, #197	@ 0xc5
 800716e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20000018 	.word	0x20000018
 8007184:	10624dd3 	.word	0x10624dd3

08007188 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	460b      	mov	r3, r1
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007196:	4b35      	ldr	r3, [pc, #212]	@ (800726c <SDMMC_GetCmdResp6+0xe4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a35      	ldr	r2, [pc, #212]	@ (8007270 <SDMMC_GetCmdResp6+0xe8>)
 800719c:	fba2 2303 	umull	r2, r3, r2, r3
 80071a0:	0a5b      	lsrs	r3, r3, #9
 80071a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a6:	fb02 f303 	mul.w	r3, r2, r3
 80071aa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	1e5a      	subs	r2, r3, #1
 80071b0:	61fa      	str	r2, [r7, #28]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80071ba:	e052      	b.n	8007262 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0ef      	beq.n	80071ac <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1ea      	bne.n	80071ac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2204      	movs	r2, #4
 80071e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071e8:	2304      	movs	r3, #4
 80071ea:	e03a      	b.n	8007262 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071fe:	2301      	movs	r3, #1
 8007200:	e02f      	b.n	8007262 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fc0d 	bl	8006a22 <SDIO_GetCommandResponse>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	4293      	cmp	r3, r2
 8007210:	d001      	beq.n	8007216 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007212:	2301      	movs	r3, #1
 8007214:	e025      	b.n	8007262 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	22c5      	movs	r2, #197	@ 0xc5
 800721a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800721c:	2100      	movs	r1, #0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fc0c 	bl	8006a3c <SDIO_GetResponse>
 8007224:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	0c1b      	lsrs	r3, r3, #16
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800723a:	2300      	movs	r3, #0
 800723c:	e011      	b.n	8007262 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800724c:	e009      	b.n	8007262 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800725c:	e001      	b.n	8007262 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800725e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000018 	.word	0x20000018
 8007270:	10624dd3 	.word	0x10624dd3

08007274 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800727c:	4b22      	ldr	r3, [pc, #136]	@ (8007308 <SDMMC_GetCmdResp7+0x94>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a22      	ldr	r2, [pc, #136]	@ (800730c <SDMMC_GetCmdResp7+0x98>)
 8007282:	fba2 2303 	umull	r2, r3, r2, r3
 8007286:	0a5b      	lsrs	r3, r3, #9
 8007288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1e5a      	subs	r2, r3, #1
 8007296:	60fa      	str	r2, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800729c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80072a0:	e02c      	b.n	80072fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0ef      	beq.n	8007292 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1ea      	bne.n	8007292 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2204      	movs	r2, #4
 80072cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072ce:	2304      	movs	r3, #4
 80072d0:	e014      	b.n	80072fc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e009      	b.n	80072fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2240      	movs	r2, #64	@ 0x40
 80072f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80072fa:	2300      	movs	r3, #0
  
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	20000018 	.word	0x20000018
 800730c:	10624dd3 	.word	0x10624dd3

08007310 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007318:	4b11      	ldr	r3, [pc, #68]	@ (8007360 <SDMMC_GetCmdError+0x50>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a11      	ldr	r2, [pc, #68]	@ (8007364 <SDMMC_GetCmdError+0x54>)
 800731e:	fba2 2303 	umull	r2, r3, r2, r3
 8007322:	0a5b      	lsrs	r3, r3, #9
 8007324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007328:	fb02 f303 	mul.w	r3, r2, r3
 800732c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	1e5a      	subs	r2, r3, #1
 8007332:	60fa      	str	r2, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007338:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800733c:	e009      	b.n	8007352 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f1      	beq.n	800732e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	22c5      	movs	r2, #197	@ 0xc5
 800734e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000018 	.word	0x20000018
 8007364:	10624dd3 	.word	0x10624dd3

08007368 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FATFS fs;
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800736c:	4904      	ldr	r1, [pc, #16]	@ (8007380 <MX_FATFS_Init+0x18>)
 800736e:	4805      	ldr	r0, [pc, #20]	@ (8007384 <MX_FATFS_Init+0x1c>)
 8007370:	f002 fe98 	bl	800a0a4 <FATFS_LinkDriver>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	4b03      	ldr	r3, [pc, #12]	@ (8007388 <MX_FATFS_Init+0x20>)
 800737a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800737c:	bf00      	nop
 800737e:	bd80      	pop	{r7, pc}
 8007380:	2000570c 	.word	0x2000570c
 8007384:	08012b04 	.word	0x08012b04
 8007388:	20005708 	.word	0x20005708

0800738c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007390:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007392:	4618      	mov	r0, r3
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <mount_fs>:

/* USER CODE BEGIN Application */
FRESULT mount_fs(FATFS *fs, uint8_t opt)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
	FRESULT res;
	DWORD sizeClaster;
	FATFS* pfs = fs;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]
	char *cli_msg;

	switch (opt) {
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d002      	beq.n	80073b8 <mount_fs+0x1c>
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d029      	beq.n	800740a <mount_fs+0x6e>
			}

			sprintf(cli_msg,"Unmount was success\r\n");
			break;
		default:
			break;
 80073b6:	e03e      	b.n	8007436 <mount_fs+0x9a>
			res = f_mount(fs, (TCHAR const*)SDPath, 1);
 80073b8:	2201      	movs	r2, #1
 80073ba:	4921      	ldr	r1, [pc, #132]	@ (8007440 <mount_fs+0xa4>)
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f002 f8e7 	bl	8009590 <f_mount>
 80073c2:	4603      	mov	r3, r0
 80073c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK)
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <mount_fs+0x3c>
				sprintf(cli_msg,"Fail of mount\r\n");
 80073cc:	491d      	ldr	r1, [pc, #116]	@ (8007444 <mount_fs+0xa8>)
 80073ce:	6938      	ldr	r0, [r7, #16]
 80073d0:	f007 fe08 	bl	800efe4 <siprintf>
				return res;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	e02f      	b.n	8007438 <mount_fs+0x9c>
			sprintf(cli_msg,"Mount success\r\n");
 80073d8:	491b      	ldr	r1, [pc, #108]	@ (8007448 <mount_fs+0xac>)
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f007 fe02 	bl	800efe4 <siprintf>
			res = f_getfree((TCHAR const*)SDPath, &sizeClaster, &pfs);
 80073e0:	f107 020c 	add.w	r2, r7, #12
 80073e4:	f107 0308 	add.w	r3, r7, #8
 80073e8:	4619      	mov	r1, r3
 80073ea:	4815      	ldr	r0, [pc, #84]	@ (8007440 <mount_fs+0xa4>)
 80073ec:	f002 fd51 	bl	8009e92 <f_getfree>
 80073f0:	4603      	mov	r3, r0
 80073f2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK)
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d11c      	bne.n	8007434 <mount_fs+0x98>
				sprintf(cli_msg,"free size = %u\r\n", sizeClaster);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	461a      	mov	r2, r3
 80073fe:	4913      	ldr	r1, [pc, #76]	@ (800744c <mount_fs+0xb0>)
 8007400:	6938      	ldr	r0, [r7, #16]
 8007402:	f007 fdef 	bl	800efe4 <siprintf>
				return res;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	e016      	b.n	8007438 <mount_fs+0x9c>
			res = f_mount(NULL, (TCHAR const*)SDPath, 1);
 800740a:	2201      	movs	r2, #1
 800740c:	490c      	ldr	r1, [pc, #48]	@ (8007440 <mount_fs+0xa4>)
 800740e:	2000      	movs	r0, #0
 8007410:	f002 f8be 	bl	8009590 <f_mount>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK)
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <mount_fs+0x8e>
				sprintf(cli_msg,"Fail of unmount\r\n\a");
 800741e:	490c      	ldr	r1, [pc, #48]	@ (8007450 <mount_fs+0xb4>)
 8007420:	6938      	ldr	r0, [r7, #16]
 8007422:	f007 fddf 	bl	800efe4 <siprintf>
				return res;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	e006      	b.n	8007438 <mount_fs+0x9c>
			sprintf(cli_msg,"Unmount was success\r\n");
 800742a:	490a      	ldr	r1, [pc, #40]	@ (8007454 <mount_fs+0xb8>)
 800742c:	6938      	ldr	r0, [r7, #16]
 800742e:	f007 fdd9 	bl	800efe4 <siprintf>
			break;
 8007432:	e000      	b.n	8007436 <mount_fs+0x9a>
			break;
 8007434:	bf00      	nop
	}

	return res;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	2000570c 	.word	0x2000570c
 8007444:	08012820 	.word	0x08012820
 8007448:	08012830 	.word	0x08012830
 800744c:	08012840 	.word	0x08012840
 8007450:	08012854 	.word	0x08012854
 8007454:	08012868 	.word	0x08012868

08007458 <write_fs>:

FRESULT write_fs(uint8_t *name_file, uint8_t *data)
{
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800745e:	af00      	add	r7, sp, #0
 8007460:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007464:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007468:	6018      	str	r0, [r3, #0]
 800746a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800746e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8007472:	6019      	str	r1, [r3, #0]
	FRESULT res;
	char *cli_msg;
    FIL logFile;

    res = f_open(&logFile, (char *)name_file, FA_OPEN_APPEND | FA_WRITE);
 8007474:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007478:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800747c:	f107 0010 	add.w	r0, r7, #16
 8007480:	2232      	movs	r2, #50	@ 0x32
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	f002 f8e8 	bl	8009658 <f_open>
 8007488:	4603      	mov	r3, r0
 800748a:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 800748e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <write_fs+0x54>
    	sprintf(cli_msg,"f_open() failed, res = %u\r\n\0", res);
 8007496:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800749a:	461a      	mov	r2, r3
 800749c:	493c      	ldr	r1, [pc, #240]	@ (8007590 <write_fs+0x138>)
 800749e:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 80074a2:	f007 fd9f 	bl	800efe4 <siprintf>
        return res;
 80074a6:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80074aa:	e06c      	b.n	8007586 <write_fs+0x12e>
    }

    unsigned int bytesWritten;
    res = f_write(&logFile, data, (UINT)strlen(data), &bytesWritten);
 80074ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80074b0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	f7f8 fedb 	bl	8000270 <strlen>
 80074ba:	4604      	mov	r4, r0
 80074bc:	f107 030c 	add.w	r3, r7, #12
 80074c0:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80074c4:	f5a2 7112 	sub.w	r1, r2, #584	@ 0x248
 80074c8:	f107 0010 	add.w	r0, r7, #16
 80074cc:	4622      	mov	r2, r4
 80074ce:	6809      	ldr	r1, [r1, #0]
 80074d0:	f002 fa83 	bl	80099da <f_write>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 80074da:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <write_fs+0xa0>
    	sprintf(cli_msg,"f_write() failed, res = %u\r\n", res);
 80074e2:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80074e6:	461a      	mov	r2, r3
 80074e8:	492a      	ldr	r1, [pc, #168]	@ (8007594 <write_fs+0x13c>)
 80074ea:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 80074ee:	f007 fd79 	bl	800efe4 <siprintf>
        return res;
 80074f2:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80074f6:	e046      	b.n	8007586 <write_fs+0x12e>
    }

    res = f_close(&logFile);
 80074f8:	f107 0310 	add.w	r3, r7, #16
 80074fc:	4618      	mov	r0, r3
 80074fe:	f002 fc99 	bl	8009e34 <f_close>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 8007508:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <write_fs+0xce>
    	sprintf(cli_msg,"f_close() failed, res = %u\r\n", res);
 8007510:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8007514:	461a      	mov	r2, r3
 8007516:	4920      	ldr	r1, [pc, #128]	@ (8007598 <write_fs+0x140>)
 8007518:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 800751c:	f007 fd62 	bl	800efe4 <siprintf>
        return res;
 8007520:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8007524:	e02f      	b.n	8007586 <write_fs+0x12e>
    }

    sprintf(cli_msg,"In file '%s' ",(char *)name_file);
 8007526:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800752a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	491a      	ldr	r1, [pc, #104]	@ (800759c <write_fs+0x144>)
 8007532:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8007536:	f007 fd55 	bl	800efe4 <siprintf>
//    sprintf(cli_msg,"In file '");
//    sprintf(cli_msg,(char *)name);
    sprintf(cli_msg,"' was writhed %u letters\r\n", strlen(data));
 800753a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800753e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8007542:	6818      	ldr	r0, [r3, #0]
 8007544:	f7f8 fe94 	bl	8000270 <strlen>
 8007548:	4603      	mov	r3, r0
 800754a:	461a      	mov	r2, r3
 800754c:	4914      	ldr	r1, [pc, #80]	@ (80075a0 <write_fs+0x148>)
 800754e:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8007552:	f007 fd47 	bl	800efe4 <siprintf>

    cliWrite("In file '%s' ");
 8007556:	4811      	ldr	r0, [pc, #68]	@ (800759c <write_fs+0x144>)
 8007558:	f7f9 ffea 	bl	8001530 <cliWrite>
    cliWrite((char *)name_file);
 800755c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007560:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	f7f9 ffe3 	bl	8001530 <cliWrite>
    cliWrite("' was writhed %u letters\r\n", strlen(data));
 800756a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800756e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	f7f8 fe7c 	bl	8000270 <strlen>
 8007578:	4603      	mov	r3, r0
 800757a:	4619      	mov	r1, r3
 800757c:	4808      	ldr	r0, [pc, #32]	@ (80075a0 <write_fs+0x148>)
 800757e:	f7f9 ffd7 	bl	8001530 <cliWrite>

    return res;
 8007582:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
}
 8007586:	4618      	mov	r0, r3
 8007588:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 800758c:	46bd      	mov	sp, r7
 800758e:	bd90      	pop	{r4, r7, pc}
 8007590:	08012880 	.word	0x08012880
 8007594:	080128a0 	.word	0x080128a0
 8007598:	080128c0 	.word	0x080128c0
 800759c:	080128e0 	.word	0x080128e0
 80075a0:	080128f0 	.word	0x080128f0

080075a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80075ae:	f000 f888 	bl	80076c2 <BSP_SD_IsDetected>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d001      	beq.n	80075bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e005      	b.n	80075c8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80075bc:	4804      	ldr	r0, [pc, #16]	@ (80075d0 <BSP_SD_Init+0x2c>)
 80075be:	f7fc fba4 	bl	8003d0a <HAL_SD_Init>
 80075c2:	4603      	mov	r3, r0
 80075c4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80075c6:	79fb      	ldrb	r3, [r7, #7]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	200054e4 	.word	0x200054e4

080075d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	68f9      	ldr	r1, [r7, #12]
 80075ea:	4806      	ldr	r0, [pc, #24]	@ (8007604 <BSP_SD_ReadBlocks_DMA+0x30>)
 80075ec:	f7fc fc3e 	bl	8003e6c <HAL_SD_ReadBlocks_DMA>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	200054e4 	.word	0x200054e4

08007608 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	68f9      	ldr	r1, [r7, #12]
 800761e:	4806      	ldr	r0, [pc, #24]	@ (8007638 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007620:	f7fc fd06 	bl	8004030 <HAL_SD_WriteBlocks_DMA>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	200054e4 	.word	0x200054e4

0800763c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007640:	4805      	ldr	r0, [pc, #20]	@ (8007658 <BSP_SD_GetCardState+0x1c>)
 8007642:	f7fd f93b 	bl	80048bc <HAL_SD_GetCardState>
 8007646:	4603      	mov	r3, r0
 8007648:	2b04      	cmp	r3, #4
 800764a:	bf14      	ite	ne
 800764c:	2301      	movne	r3, #1
 800764e:	2300      	moveq	r3, #0
 8007650:	b2db      	uxtb	r3, r3
}
 8007652:	4618      	mov	r0, r3
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200054e4 	.word	0x200054e4

0800765c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4803      	ldr	r0, [pc, #12]	@ (8007674 <BSP_SD_GetCardInfo+0x18>)
 8007668:	f7fd f8fc 	bl	8004864 <HAL_SD_GetCardInfo>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200054e4 	.word	0x200054e4

08007678 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007680:	f000 f818 	bl	80076b4 <BSP_SD_AbortCallback>
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007694:	f000 f998 	bl	80079c8 <BSP_SD_WriteCpltCallback>
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80076a8:	f000 f9a0 	bl	80079ec <BSP_SD_ReadCpltCallback>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0

}
 80076b8:	bf00      	nop
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80076c8:	2301      	movs	r3, #1
 80076ca:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	b2db      	uxtb	r3, r3
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80076e4:	f002 fde4 	bl	800a2b0 <osKernelGetTickCount>
 80076e8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80076ea:	e006      	b.n	80076fa <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80076ec:	f7ff ffa6 	bl	800763c <BSP_SD_GetCardState>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e009      	b.n	800770e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80076fa:	f002 fdd9 	bl	800a2b0 <osKernelGetTickCount>
 80076fe:	4602      	mov	r2, r0
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	429a      	cmp	r2, r3
 8007708:	d8f0      	bhi.n	80076ec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800770a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007722:	4b0b      	ldr	r3, [pc, #44]	@ (8007750 <SD_CheckStatus+0x38>)
 8007724:	2201      	movs	r2, #1
 8007726:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007728:	f7ff ff88 	bl	800763c <BSP_SD_GetCardState>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d107      	bne.n	8007742 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007732:	4b07      	ldr	r3, [pc, #28]	@ (8007750 <SD_CheckStatus+0x38>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	b2da      	uxtb	r2, r3
 800773e:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <SD_CheckStatus+0x38>)
 8007740:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007742:	4b03      	ldr	r3, [pc, #12]	@ (8007750 <SD_CheckStatus+0x38>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b2db      	uxtb	r3, r3
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000025 	.word	0x20000025

08007754 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800775e:	4b1c      	ldr	r3, [pc, #112]	@ (80077d0 <SD_initialize+0x7c>)
 8007760:	2201      	movs	r2, #1
 8007762:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8007764:	f002 fd5c 	bl	800a220 <osKernelGetState>
 8007768:	4603      	mov	r3, r0
 800776a:	2b02      	cmp	r3, #2
 800776c:	d129      	bne.n	80077c2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800776e:	f7ff ff19 	bl	80075a4 <BSP_SD_Init>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d107      	bne.n	8007788 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff ffcc 	bl	8007718 <SD_CheckStatus>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	4b12      	ldr	r3, [pc, #72]	@ (80077d0 <SD_initialize+0x7c>)
 8007786:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007788:	4b11      	ldr	r3, [pc, #68]	@ (80077d0 <SD_initialize+0x7c>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b01      	cmp	r3, #1
 8007790:	d017      	beq.n	80077c2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8007792:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <SD_initialize+0x80>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d107      	bne.n	80077aa <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800779a:	2200      	movs	r2, #0
 800779c:	2102      	movs	r1, #2
 800779e:	200a      	movs	r0, #10
 80077a0:	f003 f812 	bl	800a7c8 <osMessageQueueNew>
 80077a4:	4603      	mov	r3, r0
 80077a6:	4a0b      	ldr	r2, [pc, #44]	@ (80077d4 <SD_initialize+0x80>)
 80077a8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80077aa:	4b0a      	ldr	r3, [pc, #40]	@ (80077d4 <SD_initialize+0x80>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d107      	bne.n	80077c2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80077b2:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <SD_initialize+0x7c>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	4b04      	ldr	r3, [pc, #16]	@ (80077d0 <SD_initialize+0x7c>)
 80077c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80077c2:	4b03      	ldr	r3, [pc, #12]	@ (80077d0 <SD_initialize+0x7c>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b2db      	uxtb	r3, r3
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000025 	.word	0x20000025
 80077d4:	20005944 	.word	0x20005944

080077d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff ff97 	bl	8007718 <SD_CheckStatus>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007808:	f247 5030 	movw	r0, #30000	@ 0x7530
 800780c:	f7ff ff66 	bl	80076dc <SD_CheckStatusWithTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	da01      	bge.n	800781a <SD_read+0x26>
  {
    return res;
 8007816:	7ffb      	ldrb	r3, [r7, #31]
 8007818:	e02f      	b.n	800787a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	68b8      	ldr	r0, [r7, #8]
 8007820:	f7ff fed8 	bl	80075d4 <BSP_SD_ReadBlocks_DMA>
 8007824:	4603      	mov	r3, r0
 8007826:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8007828:	7fbb      	ldrb	r3, [r7, #30]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d124      	bne.n	8007878 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800782e:	4b15      	ldr	r3, [pc, #84]	@ (8007884 <SD_read+0x90>)
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	f107 0112 	add.w	r1, r7, #18
 8007836:	f247 5330 	movw	r3, #30000	@ 0x7530
 800783a:	2200      	movs	r2, #0
 800783c:	f003 f898 	bl	800a970 <osMessageQueueGet>
 8007840:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d117      	bne.n	8007878 <SD_read+0x84>
 8007848:	8a7b      	ldrh	r3, [r7, #18]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d114      	bne.n	8007878 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800784e:	f002 fd2f 	bl	800a2b0 <osKernelGetTickCount>
 8007852:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007854:	e007      	b.n	8007866 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007856:	f7ff fef1 	bl	800763c <BSP_SD_GetCardState>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <SD_read+0x72>
              {
                res = RES_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007864:	e008      	b.n	8007878 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007866:	f002 fd23 	bl	800a2b0 <osKernelGetTickCount>
 800786a:	4602      	mov	r2, r0
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007874:	4293      	cmp	r3, r2
 8007876:	d9ee      	bls.n	8007856 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007878:	7ffb      	ldrb	r3, [r7, #31]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20005944 	.word	0x20005944

08007888 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800789c:	f247 5030 	movw	r0, #30000	@ 0x7530
 80078a0:	f7ff ff1c 	bl	80076dc <SD_CheckStatusWithTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da01      	bge.n	80078ae <SD_write+0x26>
  {
    return res;
 80078aa:	7ffb      	ldrb	r3, [r7, #31]
 80078ac:	e02d      	b.n	800790a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	68b8      	ldr	r0, [r7, #8]
 80078b4:	f7ff fea8 	bl	8007608 <BSP_SD_WriteBlocks_DMA>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d124      	bne.n	8007908 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80078be:	4b15      	ldr	r3, [pc, #84]	@ (8007914 <SD_write+0x8c>)
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f107 0112 	add.w	r1, r7, #18
 80078c6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80078ca:	2200      	movs	r2, #0
 80078cc:	f003 f850 	bl	800a970 <osMessageQueueGet>
 80078d0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d117      	bne.n	8007908 <SD_write+0x80>
 80078d8:	8a7b      	ldrh	r3, [r7, #18]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d114      	bne.n	8007908 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80078de:	f002 fce7 	bl	800a2b0 <osKernelGetTickCount>
 80078e2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80078e4:	e007      	b.n	80078f6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80078e6:	f7ff fea9 	bl	800763c <BSP_SD_GetCardState>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <SD_write+0x6e>
          {
            res = RES_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	77fb      	strb	r3, [r7, #31]
            break;
 80078f4:	e008      	b.n	8007908 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80078f6:	f002 fcdb 	bl	800a2b0 <osKernelGetTickCount>
 80078fa:	4602      	mov	r2, r0
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007904:	4293      	cmp	r3, r2
 8007906:	d9ee      	bls.n	80078e6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8007908:	7ffb      	ldrb	r3, [r7, #31]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20005944 	.word	0x20005944

08007918 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08c      	sub	sp, #48	@ 0x30
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	603a      	str	r2, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
 8007924:	460b      	mov	r3, r1
 8007926:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800792e:	4b25      	ldr	r3, [pc, #148]	@ (80079c4 <SD_ioctl+0xac>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <SD_ioctl+0x28>
 800793c:	2303      	movs	r3, #3
 800793e:	e03c      	b.n	80079ba <SD_ioctl+0xa2>

  switch (cmd)
 8007940:	79bb      	ldrb	r3, [r7, #6]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d834      	bhi.n	80079b0 <SD_ioctl+0x98>
 8007946:	a201      	add	r2, pc, #4	@ (adr r2, 800794c <SD_ioctl+0x34>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	0800795d 	.word	0x0800795d
 8007950:	08007965 	.word	0x08007965
 8007954:	0800797d 	.word	0x0800797d
 8007958:	08007997 	.word	0x08007997
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007962:	e028      	b.n	80079b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007964:	f107 030c 	add.w	r3, r7, #12
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fe77 	bl	800765c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800796e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800797a:	e01c      	b.n	80079b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800797c:	f107 030c 	add.w	r3, r7, #12
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fe6b 	bl	800765c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007988:	b29a      	uxth	r2, r3
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007994:	e00f      	b.n	80079b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007996:	f107 030c 	add.w	r3, r7, #12
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff fe5e 	bl	800765c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80079a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a2:	0a5a      	lsrs	r2, r3, #9
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80079ae:	e002      	b.n	80079b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80079b0:	2304      	movs	r3, #4
 80079b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80079b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3730      	adds	r7, #48	@ 0x30
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000025 	.word	0x20000025

080079c8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80079ce:	2302      	movs	r3, #2
 80079d0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80079d2:	4b05      	ldr	r3, [pc, #20]	@ (80079e8 <BSP_SD_WriteCpltCallback+0x20>)
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	1db9      	adds	r1, r7, #6
 80079d8:	2300      	movs	r3, #0
 80079da:	2200      	movs	r2, #0
 80079dc:	f002 ff68 	bl	800a8b0 <osMessageQueuePut>
#endif
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20005944 	.word	0x20005944

080079ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80079f2:	2301      	movs	r3, #1
 80079f4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 80079f6:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <BSP_SD_ReadCpltCallback+0x20>)
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	1db9      	adds	r1, r7, #6
 80079fc:	2300      	movs	r3, #0
 80079fe:	2200      	movs	r2, #0
 8007a00:	f002 ff56 	bl	800a8b0 <osMessageQueuePut>
#endif
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20005944 	.word	0x20005944

08007a10 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007a18:	4b04      	ldr	r3, [pc, #16]	@ (8007a2c <HAL_ETH_RxCpltCallback+0x1c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f002 fe6b 	bl	800a6f8 <osSemaphoreRelease>
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20005948 	.word	0x20005948

08007a30 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007a38:	4b04      	ldr	r3, [pc, #16]	@ (8007a4c <HAL_ETH_TxCpltCallback+0x1c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f002 fe5b 	bl	800a6f8 <osSemaphoreRelease>
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2000594c 	.word	0x2000594c

08007a50 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fb fa8f 	bl	8002f7c <HAL_ETH_GetDMAError>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a64:	2b80      	cmp	r3, #128	@ 0x80
 8007a66:	d104      	bne.n	8007a72 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007a68:	4b04      	ldr	r3, [pc, #16]	@ (8007a7c <HAL_ETH_ErrorCallback+0x2c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f002 fe43 	bl	800a6f8 <osSemaphoreRelease>
  }
}
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20005948 	.word	0x20005948

08007a80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	4a08      	ldr	r2, [pc, #32]	@ (8007ab0 <disk_status+0x30>)
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	79fa      	ldrb	r2, [r7, #7]
 8007a98:	4905      	ldr	r1, [pc, #20]	@ (8007ab0 <disk_status+0x30>)
 8007a9a:	440a      	add	r2, r1
 8007a9c:	7a12      	ldrb	r2, [r2, #8]
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	4798      	blx	r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20005a28 	.word	0x20005a28

08007ab4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8007b00 <disk_initialize+0x4c>)
 8007ac6:	5cd3      	ldrb	r3, [r2, r3]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d114      	bne.n	8007af6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	4a0c      	ldr	r2, [pc, #48]	@ (8007b00 <disk_initialize+0x4c>)
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	79fa      	ldrb	r2, [r7, #7]
 8007ada:	4909      	ldr	r1, [pc, #36]	@ (8007b00 <disk_initialize+0x4c>)
 8007adc:	440a      	add	r2, r1
 8007ade:	7a12      	ldrb	r2, [r2, #8]
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4798      	blx	r3
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d103      	bne.n	8007af6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	4a03      	ldr	r2, [pc, #12]	@ (8007b00 <disk_initialize+0x4c>)
 8007af2:	2101      	movs	r1, #1
 8007af4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20005a28 	.word	0x20005a28

08007b04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007b04:	b590      	push	{r4, r7, lr}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	607a      	str	r2, [r7, #4]
 8007b0e:	603b      	str	r3, [r7, #0]
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	4a0a      	ldr	r2, [pc, #40]	@ (8007b40 <disk_read+0x3c>)
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	689c      	ldr	r4, [r3, #8]
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	4a07      	ldr	r2, [pc, #28]	@ (8007b40 <disk_read+0x3c>)
 8007b24:	4413      	add	r3, r2
 8007b26:	7a18      	ldrb	r0, [r3, #8]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	47a0      	blx	r4
 8007b30:	4603      	mov	r3, r0
 8007b32:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd90      	pop	{r4, r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20005a28 	.word	0x20005a28

08007b44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	4a0a      	ldr	r2, [pc, #40]	@ (8007b80 <disk_write+0x3c>)
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	68dc      	ldr	r4, [r3, #12]
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	4a07      	ldr	r2, [pc, #28]	@ (8007b80 <disk_write+0x3c>)
 8007b64:	4413      	add	r3, r2
 8007b66:	7a18      	ldrb	r0, [r3, #8]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	47a0      	blx	r4
 8007b70:	4603      	mov	r3, r0
 8007b72:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd90      	pop	{r4, r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20005a28 	.word	0x20005a28

08007b84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	603a      	str	r2, [r7, #0]
 8007b8e:	71fb      	strb	r3, [r7, #7]
 8007b90:	460b      	mov	r3, r1
 8007b92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	4a09      	ldr	r2, [pc, #36]	@ (8007bbc <disk_ioctl+0x38>)
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	79fa      	ldrb	r2, [r7, #7]
 8007ba2:	4906      	ldr	r1, [pc, #24]	@ (8007bbc <disk_ioctl+0x38>)
 8007ba4:	440a      	add	r2, r1
 8007ba6:	7a10      	ldrb	r0, [r2, #8]
 8007ba8:	79b9      	ldrb	r1, [r7, #6]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4798      	blx	r3
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73fb      	strb	r3, [r7, #15]
  return res;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20005a28 	.word	0x20005a28

08007bc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007bd0:	89fb      	ldrh	r3, [r7, #14]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	b21a      	sxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b21b      	sxth	r3, r3
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	b21b      	sxth	r3, r3
 8007be0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007be2:	89fb      	ldrh	r3, [r7, #14]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3303      	adds	r3, #3
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	3202      	adds	r2, #2
 8007c08:	7812      	ldrb	r2, [r2, #0]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	3201      	adds	r2, #1
 8007c16:	7812      	ldrb	r2, [r2, #0]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]
	return rv;
 8007c28:	68fb      	ldr	r3, [r7, #12]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	887a      	ldrh	r2, [r7, #2]
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]
 8007c4e:	887b      	ldrh	r3, [r7, #2]
 8007c50:	0a1b      	lsrs	r3, r3, #8
 8007c52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	887a      	ldrh	r2, [r7, #2]
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	701a      	strb	r2, [r3, #0]
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	0a1b      	lsrs	r3, r3, #8
 8007c86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	701a      	strb	r2, [r3, #0]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	0a1b      	lsrs	r3, r3, #8
 8007caa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	701a      	strb	r2, [r3, #0]
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00d      	beq.n	8007cfa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	1c53      	adds	r3, r2, #1
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	6179      	str	r1, [r7, #20]
 8007cea:	7812      	ldrb	r2, [r2, #0]
 8007cec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	607b      	str	r3, [r7, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f1      	bne.n	8007cde <mem_cpy+0x1a>
	}
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007d06:	b480      	push	{r7}
 8007d08:	b087      	sub	sp, #28
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	617a      	str	r2, [r7, #20]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1f3      	bne.n	8007d16 <mem_set+0x10>
}
 8007d2e:	bf00      	nop
 8007d30:	bf00      	nop
 8007d32:	371c      	adds	r7, #28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007d3c:	b480      	push	{r7}
 8007d3e:	b089      	sub	sp, #36	@ 0x24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	61fb      	str	r3, [r7, #28]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	61fa      	str	r2, [r7, #28]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	61ba      	str	r2, [r7, #24]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	1acb      	subs	r3, r1, r3
 8007d68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <mem_cmp+0x40>
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0eb      	beq.n	8007d54 <mem_cmp+0x18>

	return r;
 8007d7c:	697b      	ldr	r3, [r7, #20]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3724      	adds	r7, #36	@ 0x24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007d94:	e002      	b.n	8007d9c <chk_chr+0x12>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	607b      	str	r3, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <chk_chr+0x26>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	461a      	mov	r2, r3
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d1f2      	bne.n	8007d96 <chk_chr+0xc>
	return *str;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	781b      	ldrb	r3, [r3, #0]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <lock_fs+0x22>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f002 f99c 	bl	800a110 <ff_req_grant>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <lock_fs+0x22>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <lock_fs+0x24>
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00d      	beq.n	8007e1a <unlock_fs+0x2e>
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	2b0c      	cmp	r3, #12
 8007e02:	d00a      	beq.n	8007e1a <unlock_fs+0x2e>
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	2b0b      	cmp	r3, #11
 8007e08:	d007      	beq.n	8007e1a <unlock_fs+0x2e>
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	2b0f      	cmp	r3, #15
 8007e0e:	d004      	beq.n	8007e1a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f002 f990 	bl	800a13a <ff_rel_grant>
	}
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60bb      	str	r3, [r7, #8]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e029      	b.n	8007e8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007e38:	4a27      	ldr	r2, [pc, #156]	@ (8007ed8 <chk_lock+0xb4>)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	4413      	add	r3, r2
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d01d      	beq.n	8007e82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e46:	4a24      	ldr	r2, [pc, #144]	@ (8007ed8 <chk_lock+0xb4>)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	4413      	add	r3, r2
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d116      	bne.n	8007e86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007e58:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed8 <chk_lock+0xb4>)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	011b      	lsls	r3, r3, #4
 8007e5e:	4413      	add	r3, r2
 8007e60:	3304      	adds	r3, #4
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d10c      	bne.n	8007e86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ed8 <chk_lock+0xb4>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	4413      	add	r3, r2
 8007e74:	3308      	adds	r3, #8
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d102      	bne.n	8007e86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007e80:	e007      	b.n	8007e92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007e82:	2301      	movs	r3, #1
 8007e84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d9d2      	bls.n	8007e38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d109      	bne.n	8007eac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d102      	bne.n	8007ea4 <chk_lock+0x80>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d101      	bne.n	8007ea8 <chk_lock+0x84>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e010      	b.n	8007eca <chk_lock+0xa6>
 8007ea8:	2312      	movs	r3, #18
 8007eaa:	e00e      	b.n	8007eca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d108      	bne.n	8007ec4 <chk_lock+0xa0>
 8007eb2:	4a09      	ldr	r2, [pc, #36]	@ (8007ed8 <chk_lock+0xb4>)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	4413      	add	r3, r2
 8007eba:	330c      	adds	r3, #12
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec2:	d101      	bne.n	8007ec8 <chk_lock+0xa4>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	e000      	b.n	8007eca <chk_lock+0xa6>
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	20005a08 	.word	0x20005a08

08007edc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	e002      	b.n	8007eee <enq_lock+0x12>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3301      	adds	r3, #1
 8007eec:	607b      	str	r3, [r7, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d806      	bhi.n	8007f02 <enq_lock+0x26>
 8007ef4:	4a09      	ldr	r2, [pc, #36]	@ (8007f1c <enq_lock+0x40>)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	4413      	add	r3, r2
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f2      	bne.n	8007ee8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	bf14      	ite	ne
 8007f08:	2301      	movne	r3, #1
 8007f0a:	2300      	moveq	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	20005a08 	.word	0x20005a08

08007f20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e01f      	b.n	8007f70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007f30:	4a41      	ldr	r2, [pc, #260]	@ (8008038 <inc_lock+0x118>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	4413      	add	r3, r2
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d113      	bne.n	8007f6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007f42:	4a3d      	ldr	r2, [pc, #244]	@ (8008038 <inc_lock+0x118>)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	4413      	add	r3, r2
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d109      	bne.n	8007f6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007f56:	4a38      	ldr	r2, [pc, #224]	@ (8008038 <inc_lock+0x118>)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	4413      	add	r3, r2
 8007f5e:	3308      	adds	r3, #8
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d006      	beq.n	8007f78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d9dc      	bls.n	8007f30 <inc_lock+0x10>
 8007f76:	e000      	b.n	8007f7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007f78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d132      	bne.n	8007fe6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e002      	b.n	8007f8c <inc_lock+0x6c>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d806      	bhi.n	8007fa0 <inc_lock+0x80>
 8007f92:	4a29      	ldr	r2, [pc, #164]	@ (8008038 <inc_lock+0x118>)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	4413      	add	r3, r2
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f2      	bne.n	8007f86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d101      	bne.n	8007faa <inc_lock+0x8a>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e040      	b.n	800802c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	4922      	ldr	r1, [pc, #136]	@ (8008038 <inc_lock+0x118>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	440b      	add	r3, r1
 8007fb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	491e      	ldr	r1, [pc, #120]	@ (8008038 <inc_lock+0x118>)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	491a      	ldr	r1, [pc, #104]	@ (8008038 <inc_lock+0x118>)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	440b      	add	r3, r1
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007fd8:	4a17      	ldr	r2, [pc, #92]	@ (8008038 <inc_lock+0x118>)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	4413      	add	r3, r2
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d009      	beq.n	8008000 <inc_lock+0xe0>
 8007fec:	4a12      	ldr	r2, [pc, #72]	@ (8008038 <inc_lock+0x118>)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	4413      	add	r3, r2
 8007ff4:	330c      	adds	r3, #12
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <inc_lock+0xe0>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e015      	b.n	800802c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d108      	bne.n	8008018 <inc_lock+0xf8>
 8008006:	4a0c      	ldr	r2, [pc, #48]	@ (8008038 <inc_lock+0x118>)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	4413      	add	r3, r2
 800800e:	330c      	adds	r3, #12
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	3301      	adds	r3, #1
 8008014:	b29a      	uxth	r2, r3
 8008016:	e001      	b.n	800801c <inc_lock+0xfc>
 8008018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800801c:	4906      	ldr	r1, [pc, #24]	@ (8008038 <inc_lock+0x118>)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	440b      	add	r3, r1
 8008024:	330c      	adds	r3, #12
 8008026:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3301      	adds	r3, #1
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	20005a08 	.word	0x20005a08

0800803c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3b01      	subs	r3, #1
 8008048:	607b      	str	r3, [r7, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d825      	bhi.n	800809c <dec_lock+0x60>
		n = Files[i].ctr;
 8008050:	4a17      	ldr	r2, [pc, #92]	@ (80080b0 <dec_lock+0x74>)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	011b      	lsls	r3, r3, #4
 8008056:	4413      	add	r3, r2
 8008058:	330c      	adds	r3, #12
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800805e:	89fb      	ldrh	r3, [r7, #14]
 8008060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008064:	d101      	bne.n	800806a <dec_lock+0x2e>
 8008066:	2300      	movs	r3, #0
 8008068:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800806a:	89fb      	ldrh	r3, [r7, #14]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <dec_lock+0x3a>
 8008070:	89fb      	ldrh	r3, [r7, #14]
 8008072:	3b01      	subs	r3, #1
 8008074:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008076:	4a0e      	ldr	r2, [pc, #56]	@ (80080b0 <dec_lock+0x74>)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	4413      	add	r3, r2
 800807e:	330c      	adds	r3, #12
 8008080:	89fa      	ldrh	r2, [r7, #14]
 8008082:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008084:	89fb      	ldrh	r3, [r7, #14]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <dec_lock+0x5a>
 800808a:	4a09      	ldr	r2, [pc, #36]	@ (80080b0 <dec_lock+0x74>)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	4413      	add	r3, r2
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	737b      	strb	r3, [r7, #13]
 800809a:	e001      	b.n	80080a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800809c:	2302      	movs	r3, #2
 800809e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80080a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20005a08 	.word	0x20005a08

080080b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	e010      	b.n	80080e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80080c2:	4a0d      	ldr	r2, [pc, #52]	@ (80080f8 <clear_lock+0x44>)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	011b      	lsls	r3, r3, #4
 80080c8:	4413      	add	r3, r2
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d105      	bne.n	80080de <clear_lock+0x2a>
 80080d2:	4a09      	ldr	r2, [pc, #36]	@ (80080f8 <clear_lock+0x44>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	4413      	add	r3, r2
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3301      	adds	r3, #1
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d9eb      	bls.n	80080c2 <clear_lock+0xe>
	}
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	20005a08 	.word	0x20005a08

080080fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	78db      	ldrb	r3, [r3, #3]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d034      	beq.n	800817a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008114:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	7858      	ldrb	r0, [r3, #1]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008120:	2301      	movs	r3, #1
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	f7ff fd0e 	bl	8007b44 <disk_write>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <sync_window+0x38>
			res = FR_DISK_ERR;
 800812e:	2301      	movs	r3, #1
 8008130:	73fb      	strb	r3, [r7, #15]
 8008132:	e022      	b.n	800817a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	429a      	cmp	r2, r3
 8008148:	d217      	bcs.n	800817a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	789b      	ldrb	r3, [r3, #2]
 800814e:	613b      	str	r3, [r7, #16]
 8008150:	e010      	b.n	8008174 <sync_window+0x78>
					wsect += fs->fsize;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4413      	add	r3, r2
 800815a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7858      	ldrb	r0, [r3, #1]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008166:	2301      	movs	r3, #1
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	f7ff fceb 	bl	8007b44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	3b01      	subs	r3, #1
 8008172:	613b      	str	r3, [r7, #16]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d8eb      	bhi.n	8008152 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d01b      	beq.n	80081d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff ffad 	bl	80080fc <sync_window>
 80081a2:	4603      	mov	r3, r0
 80081a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d113      	bne.n	80081d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	7858      	ldrb	r0, [r3, #1]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081b6:	2301      	movs	r3, #1
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	f7ff fca3 	bl	8007b04 <disk_read>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d004      	beq.n	80081ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80081c4:	f04f 33ff 	mov.w	r3, #4294967295
 80081c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff ff87 	bl	80080fc <sync_window>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d158      	bne.n	80082aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d148      	bne.n	8008292 <sync_fs+0xb2>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	791b      	ldrb	r3, [r3, #4]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d144      	bne.n	8008292 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3334      	adds	r3, #52	@ 0x34
 800820c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008210:	2100      	movs	r1, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fd77 	bl	8007d06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3334      	adds	r3, #52	@ 0x34
 800821c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008220:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff fd06 	bl	8007c36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3334      	adds	r3, #52	@ 0x34
 800822e:	4921      	ldr	r1, [pc, #132]	@ (80082b4 <sync_fs+0xd4>)
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff fd1b 	bl	8007c6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3334      	adds	r3, #52	@ 0x34
 800823a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800823e:	491e      	ldr	r1, [pc, #120]	@ (80082b8 <sync_fs+0xd8>)
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff fd13 	bl	8007c6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3334      	adds	r3, #52	@ 0x34
 800824a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f7ff fd09 	bl	8007c6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3334      	adds	r3, #52	@ 0x34
 800825e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f7ff fcff 	bl	8007c6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	7858      	ldrb	r0, [r3, #1]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008286:	2301      	movs	r3, #1
 8008288:	f7ff fc5c 	bl	8007b44 <disk_write>
			fs->fsi_flag = 0;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2200      	movs	r2, #0
 8008298:	2100      	movs	r1, #0
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fc72 	bl	8007b84 <disk_ioctl>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <sync_fs+0xca>
 80082a6:	2301      	movs	r3, #1
 80082a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	41615252 	.word	0x41615252
 80082b8:	61417272 	.word	0x61417272

080082bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	3b02      	subs	r3, #2
 80082ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	3b02      	subs	r3, #2
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d301      	bcc.n	80082dc <clust2sect+0x20>
 80082d8:	2300      	movs	r3, #0
 80082da:	e008      	b.n	80082ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	895b      	ldrh	r3, [r3, #10]
 80082e0:	461a      	mov	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	fb03 f202 	mul.w	r2, r3, r2
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ec:	4413      	add	r3, r2
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d904      	bls.n	800831a <get_fat+0x20>
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <get_fat+0x26>
		val = 1;	/* Internal error */
 800831a:	2301      	movs	r3, #1
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	e08e      	b.n	800843e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008320:	f04f 33ff 	mov.w	r3, #4294967295
 8008324:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b03      	cmp	r3, #3
 800832c:	d061      	beq.n	80083f2 <get_fat+0xf8>
 800832e:	2b03      	cmp	r3, #3
 8008330:	dc7b      	bgt.n	800842a <get_fat+0x130>
 8008332:	2b01      	cmp	r3, #1
 8008334:	d002      	beq.n	800833c <get_fat+0x42>
 8008336:	2b02      	cmp	r3, #2
 8008338:	d041      	beq.n	80083be <get_fat+0xc4>
 800833a:	e076      	b.n	800842a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	0a5b      	lsrs	r3, r3, #9
 8008352:	4413      	add	r3, r2
 8008354:	4619      	mov	r1, r3
 8008356:	6938      	ldr	r0, [r7, #16]
 8008358:	f7ff ff14 	bl	8008184 <move_window>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d166      	bne.n	8008430 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	60fa      	str	r2, [r7, #12]
 8008368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4413      	add	r3, r2
 8008370:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008374:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	0a5b      	lsrs	r3, r3, #9
 800837e:	4413      	add	r3, r2
 8008380:	4619      	mov	r1, r3
 8008382:	6938      	ldr	r0, [r7, #16]
 8008384:	f7ff fefe 	bl	8008184 <move_window>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d152      	bne.n	8008434 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4413      	add	r3, r2
 8008398:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800839c:	021b      	lsls	r3, r3, #8
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <get_fat+0xba>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	091b      	lsrs	r3, r3, #4
 80083b2:	e002      	b.n	80083ba <get_fat+0xc0>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ba:	617b      	str	r3, [r7, #20]
			break;
 80083bc:	e03f      	b.n	800843e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	0a1b      	lsrs	r3, r3, #8
 80083c6:	4413      	add	r3, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	6938      	ldr	r0, [r7, #16]
 80083cc:	f7ff feda 	bl	8008184 <move_window>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d130      	bne.n	8008438 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80083e4:	4413      	add	r3, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff fbea 	bl	8007bc0 <ld_word>
 80083ec:	4603      	mov	r3, r0
 80083ee:	617b      	str	r3, [r7, #20]
			break;
 80083f0:	e025      	b.n	800843e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	09db      	lsrs	r3, r3, #7
 80083fa:	4413      	add	r3, r2
 80083fc:	4619      	mov	r1, r3
 80083fe:	6938      	ldr	r0, [r7, #16]
 8008400:	f7ff fec0 	bl	8008184 <move_window>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d118      	bne.n	800843c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008418:	4413      	add	r3, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff fbe8 	bl	8007bf0 <ld_dword>
 8008420:	4603      	mov	r3, r0
 8008422:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008426:	617b      	str	r3, [r7, #20]
			break;
 8008428:	e009      	b.n	800843e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800842a:	2301      	movs	r3, #1
 800842c:	617b      	str	r3, [r7, #20]
 800842e:	e006      	b.n	800843e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008430:	bf00      	nop
 8008432:	e004      	b.n	800843e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008434:	bf00      	nop
 8008436:	e002      	b.n	800843e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008438:	bf00      	nop
 800843a:	e000      	b.n	800843e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800843c:	bf00      	nop
		}
	}

	return val;
 800843e:	697b      	ldr	r3, [r7, #20]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008448:	b590      	push	{r4, r7, lr}
 800844a:	b089      	sub	sp, #36	@ 0x24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008454:	2302      	movs	r3, #2
 8008456:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b01      	cmp	r3, #1
 800845c:	f240 80d9 	bls.w	8008612 <put_fat+0x1ca>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	429a      	cmp	r2, r3
 8008468:	f080 80d3 	bcs.w	8008612 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b03      	cmp	r3, #3
 8008472:	f000 8096 	beq.w	80085a2 <put_fat+0x15a>
 8008476:	2b03      	cmp	r3, #3
 8008478:	f300 80cb 	bgt.w	8008612 <put_fat+0x1ca>
 800847c:	2b01      	cmp	r3, #1
 800847e:	d002      	beq.n	8008486 <put_fat+0x3e>
 8008480:	2b02      	cmp	r3, #2
 8008482:	d06e      	beq.n	8008562 <put_fat+0x11a>
 8008484:	e0c5      	b.n	8008612 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	61bb      	str	r3, [r7, #24]
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	085b      	lsrs	r3, r3, #1
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	4413      	add	r3, r2
 8008492:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	0a5b      	lsrs	r3, r3, #9
 800849c:	4413      	add	r3, r2
 800849e:	4619      	mov	r1, r3
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff fe6f 	bl	8008184 <move_window>
 80084a6:	4603      	mov	r3, r0
 80084a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084aa:	7ffb      	ldrb	r3, [r7, #31]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f040 80a9 	bne.w	8008604 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	1c59      	adds	r1, r3, #1
 80084bc:	61b9      	str	r1, [r7, #24]
 80084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c2:	4413      	add	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00d      	beq.n	80084ec <put_fat+0xa4>
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	b25b      	sxtb	r3, r3
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	b25a      	sxtb	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	b25b      	sxtb	r3, r3
 80084e4:	4313      	orrs	r3, r2
 80084e6:	b25b      	sxtb	r3, r3
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	e001      	b.n	80084f0 <put_fat+0xa8>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	0a5b      	lsrs	r3, r3, #9
 8008502:	4413      	add	r3, r2
 8008504:	4619      	mov	r1, r3
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff fe3c 	bl	8008184 <move_window>
 800850c:	4603      	mov	r3, r0
 800850e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008510:	7ffb      	ldrb	r3, [r7, #31]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d178      	bne.n	8008608 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008522:	4413      	add	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <put_fat+0xf0>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	091b      	lsrs	r3, r3, #4
 8008534:	b2db      	uxtb	r3, r3
 8008536:	e00e      	b.n	8008556 <put_fat+0x10e>
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b25b      	sxtb	r3, r3
 800853e:	f023 030f 	bic.w	r3, r3, #15
 8008542:	b25a      	sxtb	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	0a1b      	lsrs	r3, r3, #8
 8008548:	b25b      	sxtb	r3, r3
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	b25b      	sxtb	r3, r3
 8008550:	4313      	orrs	r3, r2
 8008552:	b25b      	sxtb	r3, r3
 8008554:	b2db      	uxtb	r3, r3
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	70da      	strb	r2, [r3, #3]
			break;
 8008560:	e057      	b.n	8008612 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	0a1b      	lsrs	r3, r3, #8
 800856a:	4413      	add	r3, r2
 800856c:	4619      	mov	r1, r3
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7ff fe08 	bl	8008184 <move_window>
 8008574:	4603      	mov	r3, r0
 8008576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008578:	7ffb      	ldrb	r3, [r7, #31]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d146      	bne.n	800860c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800858c:	4413      	add	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	b292      	uxth	r2, r2
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fb4e 	bl	8007c36 <st_word>
			fs->wflag = 1;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2201      	movs	r2, #1
 800859e:	70da      	strb	r2, [r3, #3]
			break;
 80085a0:	e037      	b.n	8008612 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	09db      	lsrs	r3, r3, #7
 80085aa:	4413      	add	r3, r2
 80085ac:	4619      	mov	r1, r3
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fde8 	bl	8008184 <move_window>
 80085b4:	4603      	mov	r3, r0
 80085b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085b8:	7ffb      	ldrb	r3, [r7, #31]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d128      	bne.n	8008610 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80085d2:	4413      	add	r3, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fb0b 	bl	8007bf0 <ld_dword>
 80085da:	4603      	mov	r3, r0
 80085dc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80085e0:	4323      	orrs	r3, r4
 80085e2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80085f2:	4413      	add	r3, r2
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fb38 	bl	8007c6c <st_dword>
			fs->wflag = 1;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	70da      	strb	r2, [r3, #3]
			break;
 8008602:	e006      	b.n	8008612 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008604:	bf00      	nop
 8008606:	e004      	b.n	8008612 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008608:	bf00      	nop
 800860a:	e002      	b.n	8008612 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800860c:	bf00      	nop
 800860e:	e000      	b.n	8008612 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008610:	bf00      	nop
		}
	}
	return res;
 8008612:	7ffb      	ldrb	r3, [r7, #31]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3724      	adds	r7, #36	@ 0x24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd90      	pop	{r4, r7, pc}

0800861c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d904      	bls.n	8008642 <remove_chain+0x26>
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	429a      	cmp	r2, r3
 8008640:	d301      	bcc.n	8008646 <remove_chain+0x2a>
 8008642:	2302      	movs	r3, #2
 8008644:	e04b      	b.n	80086de <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00c      	beq.n	8008666 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800864c:	f04f 32ff 	mov.w	r2, #4294967295
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	69b8      	ldr	r0, [r7, #24]
 8008654:	f7ff fef8 	bl	8008448 <put_fat>
 8008658:	4603      	mov	r3, r0
 800865a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800865c:	7ffb      	ldrb	r3, [r7, #31]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <remove_chain+0x4a>
 8008662:	7ffb      	ldrb	r3, [r7, #31]
 8008664:	e03b      	b.n	80086de <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff fe46 	bl	80082fa <get_fat>
 800866e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d031      	beq.n	80086da <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <remove_chain+0x64>
 800867c:	2302      	movs	r3, #2
 800867e:	e02e      	b.n	80086de <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d101      	bne.n	800868c <remove_chain+0x70>
 8008688:	2301      	movs	r3, #1
 800868a:	e028      	b.n	80086de <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800868c:	2200      	movs	r2, #0
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	69b8      	ldr	r0, [r7, #24]
 8008692:	f7ff fed9 	bl	8008448 <put_fat>
 8008696:	4603      	mov	r3, r0
 8008698:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800869a:	7ffb      	ldrb	r3, [r7, #31]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <remove_chain+0x88>
 80086a0:	7ffb      	ldrb	r3, [r7, #31]
 80086a2:	e01c      	b.n	80086de <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	695a      	ldr	r2, [r3, #20]
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	3b02      	subs	r3, #2
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d20b      	bcs.n	80086ca <remove_chain+0xae>
			fs->free_clst++;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	791b      	ldrb	r3, [r3, #4]
 80086c0:	f043 0301 	orr.w	r3, r3, #1
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d3c6      	bcc.n	8008666 <remove_chain+0x4a>
 80086d8:	e000      	b.n	80086dc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80086da:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3720      	adds	r7, #32
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b088      	sub	sp, #32
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10d      	bne.n	8008718 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <create_chain+0x2c>
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	429a      	cmp	r2, r3
 8008710:	d31b      	bcc.n	800874a <create_chain+0x64>
 8008712:	2301      	movs	r3, #1
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	e018      	b.n	800874a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff fded 	bl	80082fa <get_fat>
 8008720:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d801      	bhi.n	800872c <create_chain+0x46>
 8008728:	2301      	movs	r3, #1
 800872a:	e070      	b.n	800880e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008732:	d101      	bne.n	8008738 <create_chain+0x52>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e06a      	b.n	800880e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	429a      	cmp	r2, r3
 8008740:	d201      	bcs.n	8008746 <create_chain+0x60>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	e063      	b.n	800880e <create_chain+0x128>
		scl = clst;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	3301      	adds	r3, #1
 8008752:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	429a      	cmp	r2, r3
 800875c:	d307      	bcc.n	800876e <create_chain+0x88>
				ncl = 2;
 800875e:	2302      	movs	r3, #2
 8008760:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	429a      	cmp	r2, r3
 8008768:	d901      	bls.n	800876e <create_chain+0x88>
 800876a:	2300      	movs	r3, #0
 800876c:	e04f      	b.n	800880e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800876e:	69f9      	ldr	r1, [r7, #28]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff fdc2 	bl	80082fa <get_fat>
 8008776:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d003      	beq.n	800878c <create_chain+0xa6>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d101      	bne.n	8008790 <create_chain+0xaa>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	e03e      	b.n	800880e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	429a      	cmp	r2, r3
 8008796:	d1da      	bne.n	800874e <create_chain+0x68>
 8008798:	2300      	movs	r3, #0
 800879a:	e038      	b.n	800880e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800879c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800879e:	f04f 32ff 	mov.w	r2, #4294967295
 80087a2:	69f9      	ldr	r1, [r7, #28]
 80087a4:	6938      	ldr	r0, [r7, #16]
 80087a6:	f7ff fe4f 	bl	8008448 <put_fat>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d109      	bne.n	80087c8 <create_chain+0xe2>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d006      	beq.n	80087c8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6938      	ldr	r0, [r7, #16]
 80087c0:	f7ff fe42 	bl	8008448 <put_fat>
 80087c4:	4603      	mov	r3, r0
 80087c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d116      	bne.n	80087fc <create_chain+0x116>
		fs->last_clst = ncl;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	695a      	ldr	r2, [r3, #20]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	3b02      	subs	r3, #2
 80087de:	429a      	cmp	r2, r3
 80087e0:	d804      	bhi.n	80087ec <create_chain+0x106>
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	1e5a      	subs	r2, r3, #1
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	791b      	ldrb	r3, [r3, #4]
 80087f0:	f043 0301 	orr.w	r3, r3, #1
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	711a      	strb	r2, [r3, #4]
 80087fa:	e007      	b.n	800880c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d102      	bne.n	8008808 <create_chain+0x122>
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
 8008806:	e000      	b.n	800880a <create_chain+0x124>
 8008808:	2301      	movs	r3, #1
 800880a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800880c:	69fb      	ldr	r3, [r7, #28]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3720      	adds	r7, #32
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008816:	b480      	push	{r7}
 8008818:	b087      	sub	sp, #28
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882a:	3304      	adds	r3, #4
 800882c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	0a5b      	lsrs	r3, r3, #9
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	8952      	ldrh	r2, [r2, #10]
 8008836:	fbb3 f3f2 	udiv	r3, r3, r2
 800883a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	1d1a      	adds	r2, r3, #4
 8008840:	613a      	str	r2, [r7, #16]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <clmt_clust+0x3a>
 800884c:	2300      	movs	r3, #0
 800884e:	e010      	b.n	8008872 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	429a      	cmp	r2, r3
 8008856:	d307      	bcc.n	8008868 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	3304      	adds	r3, #4
 8008864:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008866:	e7e9      	b.n	800883c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008868:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	4413      	add	r3, r2
}
 8008872:	4618      	mov	r0, r3
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b086      	sub	sp, #24
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008894:	d204      	bcs.n	80088a0 <dir_sdi+0x22>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80088a0:	2302      	movs	r3, #2
 80088a2:	e063      	b.n	800896c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <dir_sdi+0x46>
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d902      	bls.n	80088c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10c      	bne.n	80088e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	095b      	lsrs	r3, r3, #5
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	8912      	ldrh	r2, [r2, #8]
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d301      	bcc.n	80088da <dir_sdi+0x5c>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e048      	b.n	800896c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	61da      	str	r2, [r3, #28]
 80088e2:	e029      	b.n	8008938 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	895b      	ldrh	r3, [r3, #10]
 80088e8:	025b      	lsls	r3, r3, #9
 80088ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80088ec:	e019      	b.n	8008922 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6979      	ldr	r1, [r7, #20]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fd01 	bl	80082fa <get_fat>
 80088f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d101      	bne.n	8008906 <dir_sdi+0x88>
 8008902:	2301      	movs	r3, #1
 8008904:	e032      	b.n	800896c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d904      	bls.n	8008916 <dir_sdi+0x98>
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	429a      	cmp	r2, r3
 8008914:	d301      	bcc.n	800891a <dir_sdi+0x9c>
 8008916:	2302      	movs	r3, #2
 8008918:	e028      	b.n	800896c <dir_sdi+0xee>
			ofs -= csz;
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	429a      	cmp	r2, r3
 8008928:	d2e1      	bcs.n	80088ee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800892a:	6979      	ldr	r1, [r7, #20]
 800892c:	6938      	ldr	r0, [r7, #16]
 800892e:	f7ff fcc5 	bl	80082bc <clust2sect>
 8008932:	4602      	mov	r2, r0
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <dir_sdi+0xcc>
 8008946:	2302      	movs	r3, #2
 8008948:	e010      	b.n	800896c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	69da      	ldr	r2, [r3, #28]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	0a5b      	lsrs	r3, r3, #9
 8008952:	441a      	add	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008964:	441a      	add	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	3320      	adds	r3, #32
 800898a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <dir_next+0x28>
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800899a:	d301      	bcc.n	80089a0 <dir_next+0x2c>
 800899c:	2304      	movs	r3, #4
 800899e:	e0aa      	b.n	8008af6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 8098 	bne.w	8008adc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10b      	bne.n	80089d6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	095b      	lsrs	r3, r3, #5
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	8912      	ldrh	r2, [r2, #8]
 80089c6:	4293      	cmp	r3, r2
 80089c8:	f0c0 8088 	bcc.w	8008adc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	61da      	str	r2, [r3, #28]
 80089d2:	2304      	movs	r3, #4
 80089d4:	e08f      	b.n	8008af6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	0a5b      	lsrs	r3, r3, #9
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	8952      	ldrh	r2, [r2, #10]
 80089de:	3a01      	subs	r2, #1
 80089e0:	4013      	ands	r3, r2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d17a      	bne.n	8008adc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	4619      	mov	r1, r3
 80089ee:	4610      	mov	r0, r2
 80089f0:	f7ff fc83 	bl	80082fa <get_fat>
 80089f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d801      	bhi.n	8008a00 <dir_next+0x8c>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e07a      	b.n	8008af6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d101      	bne.n	8008a0c <dir_next+0x98>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e074      	b.n	8008af6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d358      	bcc.n	8008ac8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	61da      	str	r2, [r3, #28]
 8008a22:	2304      	movs	r3, #4
 8008a24:	e067      	b.n	8008af6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7ff fe59 	bl	80086e6 <create_chain>
 8008a34:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <dir_next+0xcc>
 8008a3c:	2307      	movs	r3, #7
 8008a3e:	e05a      	b.n	8008af6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d101      	bne.n	8008a4a <dir_next+0xd6>
 8008a46:	2302      	movs	r3, #2
 8008a48:	e055      	b.n	8008af6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d101      	bne.n	8008a56 <dir_next+0xe2>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e04f      	b.n	8008af6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff fb50 	bl	80080fc <sync_window>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <dir_next+0xf2>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e047      	b.n	8008af6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3334      	adds	r3, #52	@ 0x34
 8008a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff f948 	bl	8007d06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008a76:	2300      	movs	r3, #0
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	6979      	ldr	r1, [r7, #20]
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff fc1d 	bl	80082bc <clust2sect>
 8008a82:	4602      	mov	r2, r0
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a88:	e012      	b.n	8008ab0 <dir_next+0x13c>
						fs->wflag = 1;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff fb33 	bl	80080fc <sync_window>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <dir_next+0x12c>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e02a      	b.n	8008af6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	613b      	str	r3, [r7, #16]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	895b      	ldrh	r3, [r3, #10]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d3e6      	bcc.n	8008a8a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	1ad2      	subs	r2, r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fbf3 	bl	80082bc <clust2sect>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	441a      	add	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b086      	sub	sp, #24
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008b0e:	2100      	movs	r1, #0
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff feb4 	bl	800887e <dir_sdi>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d12b      	bne.n	8008b78 <dir_alloc+0x7a>
		n = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f7ff fb2a 	bl	8008184 <move_window>
 8008b30:	4603      	mov	r3, r0
 8008b32:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d11d      	bne.n	8008b76 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2be5      	cmp	r3, #229	@ 0xe5
 8008b42:	d004      	beq.n	8008b4e <dir_alloc+0x50>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d107      	bne.n	8008b5e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	3301      	adds	r3, #1
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d102      	bne.n	8008b62 <dir_alloc+0x64>
 8008b5c:	e00c      	b.n	8008b78 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008b62:	2101      	movs	r1, #1
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff05 	bl	8008974 <dir_next>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0d7      	beq.n	8008b24 <dir_alloc+0x26>
 8008b74:	e000      	b.n	8008b78 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008b76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d101      	bne.n	8008b82 <dir_alloc+0x84>
 8008b7e:	2307      	movs	r3, #7
 8008b80:	75fb      	strb	r3, [r7, #23]
	return res;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	331a      	adds	r3, #26
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff f810 	bl	8007bc0 <ld_word>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d109      	bne.n	8008bc0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	3314      	adds	r3, #20
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff f805 	bl	8007bc0 <ld_word>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	331a      	adds	r3, #26
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	b292      	uxth	r2, r2
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff f828 	bl	8007c36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d109      	bne.n	8008c02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f103 0214 	add.w	r2, r3, #20
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	0c1b      	lsrs	r3, r3, #16
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	f7ff f81a 	bl	8007c36 <st_word>
	}
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b086      	sub	sp, #24
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008c18:	2100      	movs	r1, #0
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff fe2f 	bl	800887e <dir_sdi>
 8008c20:	4603      	mov	r3, r0
 8008c22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <dir_find+0x24>
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	e03e      	b.n	8008cac <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6938      	ldr	r0, [r7, #16]
 8008c36:	f7ff faa5 	bl	8008184 <move_window>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d12f      	bne.n	8008ca4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d102      	bne.n	8008c58 <dir_find+0x4e>
 8008c52:	2304      	movs	r3, #4
 8008c54:	75fb      	strb	r3, [r7, #23]
 8008c56:	e028      	b.n	8008caa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	330b      	adds	r3, #11
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	330b      	adds	r3, #11
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10a      	bne.n	8008c90 <dir_find+0x86>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a18      	ldr	r0, [r3, #32]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3324      	adds	r3, #36	@ 0x24
 8008c82:	220b      	movs	r2, #11
 8008c84:	4619      	mov	r1, r3
 8008c86:	f7ff f859 	bl	8007d3c <mem_cmp>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008c90:	2100      	movs	r1, #0
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fe6e 	bl	8008974 <dir_next>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0c5      	beq.n	8008c2e <dir_find+0x24>
 8008ca2:	e002      	b.n	8008caa <dir_find+0xa0>
		if (res != FR_OK) break;
 8008ca4:	bf00      	nop
 8008ca6:	e000      	b.n	8008caa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008ca8:	bf00      	nop

	return res;
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff ff1a 	bl	8008afe <dir_alloc>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d11c      	bne.n	8008d0e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	68b8      	ldr	r0, [r7, #8]
 8008cdc:	f7ff fa52 	bl	8008184 <move_window>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d111      	bne.n	8008d0e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff f807 	bl	8007d06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a18      	ldr	r0, [r3, #32]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3324      	adds	r3, #36	@ 0x24
 8008d00:	220b      	movs	r2, #11
 8008d02:	4619      	mov	r1, r3
 8008d04:	f7fe ffde 	bl	8007cc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3324      	adds	r3, #36	@ 0x24
 8008d2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008d2e:	220b      	movs	r2, #11
 8008d30:	2120      	movs	r1, #32
 8008d32:	68b8      	ldr	r0, [r7, #8]
 8008d34:	f7fe ffe7 	bl	8007d06 <mem_set>
	si = i = 0; ni = 8;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	61fb      	str	r3, [r7, #28]
 8008d40:	2308      	movs	r3, #8
 8008d42:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	1c5a      	adds	r2, r3, #1
 8008d48:	61fa      	str	r2, [r7, #28]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d52:	7efb      	ldrb	r3, [r7, #27]
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d94e      	bls.n	8008df6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008d58:	7efb      	ldrb	r3, [r7, #27]
 8008d5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d5c:	d006      	beq.n	8008d6c <create_name+0x54>
 8008d5e:	7efb      	ldrb	r3, [r7, #27]
 8008d60:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d62:	d110      	bne.n	8008d86 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008d64:	e002      	b.n	8008d6c <create_name+0x54>
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d76:	d0f6      	beq.n	8008d66 <create_name+0x4e>
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d82:	d0f0      	beq.n	8008d66 <create_name+0x4e>
			break;
 8008d84:	e038      	b.n	8008df8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008d86:	7efb      	ldrb	r3, [r7, #27]
 8008d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d8a:	d003      	beq.n	8008d94 <create_name+0x7c>
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d30c      	bcc.n	8008dae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b0b      	cmp	r3, #11
 8008d98:	d002      	beq.n	8008da0 <create_name+0x88>
 8008d9a:	7efb      	ldrb	r3, [r7, #27]
 8008d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d9e:	d001      	beq.n	8008da4 <create_name+0x8c>
 8008da0:	2306      	movs	r3, #6
 8008da2:	e044      	b.n	8008e2e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008da4:	2308      	movs	r3, #8
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	230b      	movs	r3, #11
 8008daa:	617b      	str	r3, [r7, #20]
			continue;
 8008dac:	e022      	b.n	8008df4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008dae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	da04      	bge.n	8008dc0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008db6:	7efb      	ldrb	r3, [r7, #27]
 8008db8:	3b80      	subs	r3, #128	@ 0x80
 8008dba:	4a1f      	ldr	r2, [pc, #124]	@ (8008e38 <create_name+0x120>)
 8008dbc:	5cd3      	ldrb	r3, [r2, r3]
 8008dbe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008dc0:	7efb      	ldrb	r3, [r7, #27]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	481d      	ldr	r0, [pc, #116]	@ (8008e3c <create_name+0x124>)
 8008dc6:	f7fe ffe0 	bl	8007d8a <chk_chr>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <create_name+0xbc>
 8008dd0:	2306      	movs	r3, #6
 8008dd2:	e02c      	b.n	8008e2e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008dd4:	7efb      	ldrb	r3, [r7, #27]
 8008dd6:	2b60      	cmp	r3, #96	@ 0x60
 8008dd8:	d905      	bls.n	8008de6 <create_name+0xce>
 8008dda:	7efb      	ldrb	r3, [r7, #27]
 8008ddc:	2b7a      	cmp	r3, #122	@ 0x7a
 8008dde:	d802      	bhi.n	8008de6 <create_name+0xce>
 8008de0:	7efb      	ldrb	r3, [r7, #27]
 8008de2:	3b20      	subs	r3, #32
 8008de4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	613a      	str	r2, [r7, #16]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	4413      	add	r3, r2
 8008df0:	7efa      	ldrb	r2, [r7, #27]
 8008df2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008df4:	e7a6      	b.n	8008d44 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008df6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	441a      	add	r2, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <create_name+0xf4>
 8008e08:	2306      	movs	r3, #6
 8008e0a:	e010      	b.n	8008e2e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2be5      	cmp	r3, #229	@ 0xe5
 8008e12:	d102      	bne.n	8008e1a <create_name+0x102>
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2205      	movs	r2, #5
 8008e18:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008e1a:	7efb      	ldrb	r3, [r7, #27]
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	d801      	bhi.n	8008e24 <create_name+0x10c>
 8008e20:	2204      	movs	r2, #4
 8008e22:	e000      	b.n	8008e26 <create_name+0x10e>
 8008e24:	2200      	movs	r2, #0
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	330b      	adds	r3, #11
 8008e2a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008e2c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3720      	adds	r7, #32
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	08012b18 	.word	0x08012b18
 8008e3c:	08012970 	.word	0x08012970

08008e40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008e54:	e002      	b.n	8008e5c <follow_path+0x1c>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e62:	d0f8      	beq.n	8008e56 <follow_path+0x16>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e6a:	d0f4      	beq.n	8008e56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b1f      	cmp	r3, #31
 8008e78:	d80a      	bhi.n	8008e90 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2280      	movs	r2, #128	@ 0x80
 8008e7e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008e82:	2100      	movs	r1, #0
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff fcfa 	bl	800887e <dir_sdi>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]
 8008e8e:	e043      	b.n	8008f18 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e90:	463b      	mov	r3, r7
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff ff3f 	bl	8008d18 <create_name>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d134      	bne.n	8008f0e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7ff feb0 	bl	8008c0a <dir_find>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008eb4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d127      	bne.n	8008f12 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008ec2:	7afb      	ldrb	r3, [r7, #11]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d122      	bne.n	8008f12 <follow_path+0xd2>
 8008ecc:	2305      	movs	r3, #5
 8008ece:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008ed0:	e01f      	b.n	8008f12 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d11c      	bne.n	8008f16 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	799b      	ldrb	r3, [r3, #6]
 8008ee0:	f003 0310 	and.w	r3, r3, #16
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d102      	bne.n	8008eee <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ee8:	2305      	movs	r3, #5
 8008eea:	75fb      	strb	r3, [r7, #23]
 8008eec:	e014      	b.n	8008f18 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efc:	4413      	add	r3, r2
 8008efe:	4619      	mov	r1, r3
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f7ff fe43 	bl	8008b8c <ld_clust>
 8008f06:	4602      	mov	r2, r0
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f0c:	e7c0      	b.n	8008e90 <follow_path+0x50>
			if (res != FR_OK) break;
 8008f0e:	bf00      	nop
 8008f10:	e002      	b.n	8008f18 <follow_path+0xd8>
				break;
 8008f12:	bf00      	nop
 8008f14:	e000      	b.n	8008f18 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f16:	bf00      	nop
			}
		}
	}

	return res;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b087      	sub	sp, #28
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d031      	beq.n	8008f9c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	617b      	str	r3, [r7, #20]
 8008f3e:	e002      	b.n	8008f46 <get_ldnumber+0x24>
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	3301      	adds	r3, #1
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b20      	cmp	r3, #32
 8008f4c:	d903      	bls.n	8008f56 <get_ldnumber+0x34>
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f54:	d1f4      	bne.n	8008f40 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f5c:	d11c      	bne.n	8008f98 <get_ldnumber+0x76>
			tp = *path;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	60fa      	str	r2, [r7, #12]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	3b30      	subs	r3, #48	@ 0x30
 8008f6e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b09      	cmp	r3, #9
 8008f74:	d80e      	bhi.n	8008f94 <get_ldnumber+0x72>
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d10a      	bne.n	8008f94 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <get_ldnumber+0x72>
					vol = (int)i;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	617b      	str	r3, [r7, #20]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	e002      	b.n	8008f9e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f98:	2300      	movs	r3, #0
 8008f9a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f9c:	693b      	ldr	r3, [r7, #16]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	70da      	strb	r2, [r3, #3]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff f8dc 	bl	8008184 <move_window>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <check_fs+0x2a>
 8008fd2:	2304      	movs	r3, #4
 8008fd4:	e038      	b.n	8009048 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3334      	adds	r3, #52	@ 0x34
 8008fda:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fdee 	bl	8007bc0 <ld_word>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d001      	beq.n	8008ff4 <check_fs+0x48>
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e029      	b.n	8009048 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ffa:	2be9      	cmp	r3, #233	@ 0xe9
 8008ffc:	d009      	beq.n	8009012 <check_fs+0x66>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009004:	2beb      	cmp	r3, #235	@ 0xeb
 8009006:	d11e      	bne.n	8009046 <check_fs+0x9a>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800900e:	2b90      	cmp	r3, #144	@ 0x90
 8009010:	d119      	bne.n	8009046 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3334      	adds	r3, #52	@ 0x34
 8009016:	3336      	adds	r3, #54	@ 0x36
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fde9 	bl	8007bf0 <ld_dword>
 800901e:	4603      	mov	r3, r0
 8009020:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009024:	4a0a      	ldr	r2, [pc, #40]	@ (8009050 <check_fs+0xa4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d101      	bne.n	800902e <check_fs+0x82>
 800902a:	2300      	movs	r3, #0
 800902c:	e00c      	b.n	8009048 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3334      	adds	r3, #52	@ 0x34
 8009032:	3352      	adds	r3, #82	@ 0x52
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fddb 	bl	8007bf0 <ld_dword>
 800903a:	4603      	mov	r3, r0
 800903c:	4a05      	ldr	r2, [pc, #20]	@ (8009054 <check_fs+0xa8>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d101      	bne.n	8009046 <check_fs+0x9a>
 8009042:	2300      	movs	r3, #0
 8009044:	e000      	b.n	8009048 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009046:	2302      	movs	r3, #2
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	00544146 	.word	0x00544146
 8009054:	33544146 	.word	0x33544146

08009058 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b096      	sub	sp, #88	@ 0x58
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4613      	mov	r3, r2
 8009064:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f7ff ff58 	bl	8008f22 <get_ldnumber>
 8009072:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009076:	2b00      	cmp	r3, #0
 8009078:	da01      	bge.n	800907e <find_volume+0x26>
 800907a:	230b      	movs	r3, #11
 800907c:	e235      	b.n	80094ea <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800907e:	4aa5      	ldr	r2, [pc, #660]	@ (8009314 <find_volume+0x2bc>)
 8009080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009086:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <find_volume+0x3a>
 800908e:	230c      	movs	r3, #12
 8009090:	e22b      	b.n	80094ea <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009092:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009094:	f7fe fe94 	bl	8007dc0 <lock_fs>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <find_volume+0x4a>
 800909e:	230f      	movs	r3, #15
 80090a0:	e223      	b.n	80094ea <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	f023 0301 	bic.w	r3, r3, #1
 80090ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01a      	beq.n	80090ee <find_volume+0x96>
		stat = disk_status(fs->drv);
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	785b      	ldrb	r3, [r3, #1]
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fe fcdf 	bl	8007a80 <disk_status>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80090c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10c      	bne.n	80090ee <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d007      	beq.n	80090ea <find_volume+0x92>
 80090da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80090e6:	230a      	movs	r3, #10
 80090e8:	e1ff      	b.n	80094ea <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80090ea:	2300      	movs	r3, #0
 80090ec:	e1fd      	b.n	80094ea <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80090ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f0:	2200      	movs	r2, #0
 80090f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80090fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fcd7 	bl	8007ab4 <disk_initialize>
 8009106:	4603      	mov	r3, r0
 8009108:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800910c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009118:	2303      	movs	r3, #3
 800911a:	e1e6      	b.n	80094ea <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <find_volume+0xda>
 8009122:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800912e:	230a      	movs	r3, #10
 8009130:	e1db      	b.n	80094ea <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009136:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009138:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800913a:	f7ff ff37 	bl	8008fac <check_fs>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009144:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009148:	2b02      	cmp	r3, #2
 800914a:	d149      	bne.n	80091e0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800914c:	2300      	movs	r3, #0
 800914e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009150:	e01e      	b.n	8009190 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009154:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800915a:	011b      	lsls	r3, r3, #4
 800915c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009160:	4413      	add	r3, r2
 8009162:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	3304      	adds	r3, #4
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d006      	beq.n	800917c <find_volume+0x124>
 800916e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009170:	3308      	adds	r3, #8
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fd3c 	bl	8007bf0 <ld_dword>
 8009178:	4602      	mov	r2, r0
 800917a:	e000      	b.n	800917e <find_volume+0x126>
 800917c:	2200      	movs	r2, #0
 800917e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	3358      	adds	r3, #88	@ 0x58
 8009184:	443b      	add	r3, r7
 8009186:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800918a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918c:	3301      	adds	r3, #1
 800918e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009192:	2b03      	cmp	r3, #3
 8009194:	d9dd      	bls.n	8009152 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009196:	2300      	movs	r3, #0
 8009198:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800919a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <find_volume+0x14e>
 80091a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091a2:	3b01      	subs	r3, #1
 80091a4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80091a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	3358      	adds	r3, #88	@ 0x58
 80091ac:	443b      	add	r3, r7
 80091ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80091b2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80091b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d005      	beq.n	80091c6 <find_volume+0x16e>
 80091ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091be:	f7ff fef5 	bl	8008fac <check_fs>
 80091c2:	4603      	mov	r3, r0
 80091c4:	e000      	b.n	80091c8 <find_volume+0x170>
 80091c6:	2303      	movs	r3, #3
 80091c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80091cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d905      	bls.n	80091e0 <find_volume+0x188>
 80091d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d6:	3301      	adds	r3, #1
 80091d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80091da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d9e2      	bls.n	80091a6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80091e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	d101      	bne.n	80091ec <find_volume+0x194>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e17e      	b.n	80094ea <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80091ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d901      	bls.n	80091f8 <find_volume+0x1a0>
 80091f4:	230d      	movs	r3, #13
 80091f6:	e178      	b.n	80094ea <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fa:	3334      	adds	r3, #52	@ 0x34
 80091fc:	330b      	adds	r3, #11
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fcde 	bl	8007bc0 <ld_word>
 8009204:	4603      	mov	r3, r0
 8009206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800920a:	d001      	beq.n	8009210 <find_volume+0x1b8>
 800920c:	230d      	movs	r3, #13
 800920e:	e16c      	b.n	80094ea <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009212:	3334      	adds	r3, #52	@ 0x34
 8009214:	3316      	adds	r3, #22
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe fcd2 	bl	8007bc0 <ld_word>
 800921c:	4603      	mov	r3, r0
 800921e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d106      	bne.n	8009234 <find_volume+0x1dc>
 8009226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009228:	3334      	adds	r3, #52	@ 0x34
 800922a:	3324      	adds	r3, #36	@ 0x24
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fcdf 	bl	8007bf0 <ld_dword>
 8009232:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009238:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800923a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	789b      	ldrb	r3, [r3, #2]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d005      	beq.n	8009258 <find_volume+0x200>
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	789b      	ldrb	r3, [r3, #2]
 8009250:	2b02      	cmp	r3, #2
 8009252:	d001      	beq.n	8009258 <find_volume+0x200>
 8009254:	230d      	movs	r3, #13
 8009256:	e148      	b.n	80094ea <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	789b      	ldrb	r3, [r3, #2]
 800925c:	461a      	mov	r2, r3
 800925e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009260:	fb02 f303 	mul.w	r3, r2, r3
 8009264:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800926c:	461a      	mov	r2, r3
 800926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009270:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009274:	895b      	ldrh	r3, [r3, #10]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d008      	beq.n	800928c <find_volume+0x234>
 800927a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927c:	895b      	ldrh	r3, [r3, #10]
 800927e:	461a      	mov	r2, r3
 8009280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009282:	895b      	ldrh	r3, [r3, #10]
 8009284:	3b01      	subs	r3, #1
 8009286:	4013      	ands	r3, r2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <find_volume+0x238>
 800928c:	230d      	movs	r3, #13
 800928e:	e12c      	b.n	80094ea <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009292:	3334      	adds	r3, #52	@ 0x34
 8009294:	3311      	adds	r3, #17
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fc92 	bl	8007bc0 <ld_word>
 800929c:	4603      	mov	r3, r0
 800929e:	461a      	mov	r2, r3
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	891b      	ldrh	r3, [r3, #8]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <find_volume+0x25e>
 80092b2:	230d      	movs	r3, #13
 80092b4:	e119      	b.n	80094ea <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	3334      	adds	r3, #52	@ 0x34
 80092ba:	3313      	adds	r3, #19
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe fc7f 	bl	8007bc0 <ld_word>
 80092c2:	4603      	mov	r3, r0
 80092c4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80092c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d106      	bne.n	80092da <find_volume+0x282>
 80092cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ce:	3334      	adds	r3, #52	@ 0x34
 80092d0:	3320      	adds	r3, #32
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fc8c 	bl	8007bf0 <ld_dword>
 80092d8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80092da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092dc:	3334      	adds	r3, #52	@ 0x34
 80092de:	330e      	adds	r3, #14
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fc6d 	bl	8007bc0 <ld_word>
 80092e6:	4603      	mov	r3, r0
 80092e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80092ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <find_volume+0x29c>
 80092f0:	230d      	movs	r3, #13
 80092f2:	e0fa      	b.n	80094ea <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80092f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80092f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092f8:	4413      	add	r3, r2
 80092fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092fc:	8912      	ldrh	r2, [r2, #8]
 80092fe:	0912      	lsrs	r2, r2, #4
 8009300:	b292      	uxth	r2, r2
 8009302:	4413      	add	r3, r2
 8009304:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009306:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930a:	429a      	cmp	r2, r3
 800930c:	d204      	bcs.n	8009318 <find_volume+0x2c0>
 800930e:	230d      	movs	r3, #13
 8009310:	e0eb      	b.n	80094ea <find_volume+0x492>
 8009312:	bf00      	nop
 8009314:	20005a00 	.word	0x20005a00
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009318:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800931a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009320:	8952      	ldrh	r2, [r2, #10]
 8009322:	fbb3 f3f2 	udiv	r3, r3, r2
 8009326:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <find_volume+0x2da>
 800932e:	230d      	movs	r3, #13
 8009330:	e0db      	b.n	80094ea <find_volume+0x492>
		fmt = FS_FAT32;
 8009332:	2303      	movs	r3, #3
 8009334:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800933e:	4293      	cmp	r3, r2
 8009340:	d802      	bhi.n	8009348 <find_volume+0x2f0>
 8009342:	2302      	movs	r3, #2
 8009344:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800934e:	4293      	cmp	r3, r2
 8009350:	d802      	bhi.n	8009358 <find_volume+0x300>
 8009352:	2301      	movs	r3, #1
 8009354:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935a:	1c9a      	adds	r2, r3, #2
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009362:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009364:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009366:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800936a:	441a      	add	r2, r3
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009370:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009374:	441a      	add	r2, r3
 8009376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009378:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800937a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800937e:	2b03      	cmp	r3, #3
 8009380:	d11e      	bne.n	80093c0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009384:	3334      	adds	r3, #52	@ 0x34
 8009386:	332a      	adds	r3, #42	@ 0x2a
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fc19 	bl	8007bc0 <ld_word>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <find_volume+0x340>
 8009394:	230d      	movs	r3, #13
 8009396:	e0a8      	b.n	80094ea <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	891b      	ldrh	r3, [r3, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <find_volume+0x34c>
 80093a0:	230d      	movs	r3, #13
 80093a2:	e0a2      	b.n	80094ea <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80093a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a6:	3334      	adds	r3, #52	@ 0x34
 80093a8:	332c      	adds	r3, #44	@ 0x2c
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fc20 	bl	8007bf0 <ld_dword>
 80093b0:	4602      	mov	r2, r0
 80093b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80093b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80093be:	e01f      	b.n	8009400 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80093c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c2:	891b      	ldrh	r3, [r3, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <find_volume+0x374>
 80093c8:	230d      	movs	r3, #13
 80093ca:	e08e      	b.n	80094ea <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093d2:	441a      	add	r2, r3
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80093d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d103      	bne.n	80093e8 <find_volume+0x390>
 80093e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	e00a      	b.n	80093fe <find_volume+0x3a6>
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	699a      	ldr	r2, [r3, #24]
 80093ec:	4613      	mov	r3, r2
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	4413      	add	r3, r2
 80093f2:	085a      	lsrs	r2, r3, #1
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80093fe:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009406:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800940a:	0a5b      	lsrs	r3, r3, #9
 800940c:	429a      	cmp	r2, r3
 800940e:	d201      	bcs.n	8009414 <find_volume+0x3bc>
 8009410:	230d      	movs	r3, #13
 8009412:	e06a      	b.n	80094ea <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	615a      	str	r2, [r3, #20]
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	695a      	ldr	r2, [r3, #20]
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009426:	2280      	movs	r2, #128	@ 0x80
 8009428:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800942a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800942e:	2b03      	cmp	r3, #3
 8009430:	d149      	bne.n	80094c6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009434:	3334      	adds	r3, #52	@ 0x34
 8009436:	3330      	adds	r3, #48	@ 0x30
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fbc1 	bl	8007bc0 <ld_word>
 800943e:	4603      	mov	r3, r0
 8009440:	2b01      	cmp	r3, #1
 8009442:	d140      	bne.n	80094c6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009446:	3301      	adds	r3, #1
 8009448:	4619      	mov	r1, r3
 800944a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800944c:	f7fe fe9a 	bl	8008184 <move_window>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d137      	bne.n	80094c6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8009456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009458:	2200      	movs	r2, #0
 800945a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	3334      	adds	r3, #52	@ 0x34
 8009460:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009464:	4618      	mov	r0, r3
 8009466:	f7fe fbab 	bl	8007bc0 <ld_word>
 800946a:	4603      	mov	r3, r0
 800946c:	461a      	mov	r2, r3
 800946e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009472:	429a      	cmp	r2, r3
 8009474:	d127      	bne.n	80094c6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009478:	3334      	adds	r3, #52	@ 0x34
 800947a:	4618      	mov	r0, r3
 800947c:	f7fe fbb8 	bl	8007bf0 <ld_dword>
 8009480:	4603      	mov	r3, r0
 8009482:	4a1c      	ldr	r2, [pc, #112]	@ (80094f4 <find_volume+0x49c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d11e      	bne.n	80094c6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	3334      	adds	r3, #52	@ 0x34
 800948c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009490:	4618      	mov	r0, r3
 8009492:	f7fe fbad 	bl	8007bf0 <ld_dword>
 8009496:	4603      	mov	r3, r0
 8009498:	4a17      	ldr	r2, [pc, #92]	@ (80094f8 <find_volume+0x4a0>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d113      	bne.n	80094c6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a0:	3334      	adds	r3, #52	@ 0x34
 80094a2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fba2 	bl	8007bf0 <ld_dword>
 80094ac:	4602      	mov	r2, r0
 80094ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80094b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b4:	3334      	adds	r3, #52	@ 0x34
 80094b6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe fb98 	bl	8007bf0 <ld_dword>
 80094c0:	4602      	mov	r2, r0
 80094c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80094c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80094cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80094ce:	4b0b      	ldr	r3, [pc, #44]	@ (80094fc <find_volume+0x4a4>)
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	3301      	adds	r3, #1
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <find_volume+0x4a4>)
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	4b08      	ldr	r3, [pc, #32]	@ (80094fc <find_volume+0x4a4>)
 80094dc:	881a      	ldrh	r2, [r3, #0]
 80094de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80094e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094e4:	f7fe fde6 	bl	80080b4 <clear_lock>
#endif
	return FR_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3758      	adds	r7, #88	@ 0x58
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	41615252 	.word	0x41615252
 80094f8:	61417272 	.word	0x61417272
 80094fc:	20005a04 	.word	0x20005a04

08009500 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800950a:	2309      	movs	r3, #9
 800950c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d02e      	beq.n	8009572 <validate+0x72>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d02a      	beq.n	8009572 <validate+0x72>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d025      	beq.n	8009572 <validate+0x72>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	889a      	ldrh	r2, [r3, #4]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	88db      	ldrh	r3, [r3, #6]
 8009530:	429a      	cmp	r2, r3
 8009532:	d11e      	bne.n	8009572 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe fc41 	bl	8007dc0 <lock_fs>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d014      	beq.n	800956e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	785b      	ldrb	r3, [r3, #1]
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fa98 	bl	8007a80 <disk_status>
 8009550:	4603      	mov	r3, r0
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d102      	bne.n	8009560 <validate+0x60>
				res = FR_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
 800955e:	e008      	b.n	8009572 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fc40 	bl	8007dec <unlock_fs>
 800956c:	e001      	b.n	8009572 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800956e:	230f      	movs	r3, #15
 8009570:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <validate+0x7e>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	e000      	b.n	8009580 <validate+0x80>
 800957e:	2300      	movs	r3, #0
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	6013      	str	r3, [r2, #0]
	return res;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	4613      	mov	r3, r2
 800959c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095a2:	f107 0310 	add.w	r3, r7, #16
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff fcbb 	bl	8008f22 <get_ldnumber>
 80095ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	da01      	bge.n	80095b8 <f_mount+0x28>
 80095b4:	230b      	movs	r3, #11
 80095b6:	e048      	b.n	800964a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80095b8:	4a26      	ldr	r2, [pc, #152]	@ (8009654 <f_mount+0xc4>)
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00f      	beq.n	80095e8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80095c8:	69b8      	ldr	r0, [r7, #24]
 80095ca:	f7fe fd73 	bl	80080b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 fd90 	bl	800a0f8 <ff_del_syncobj>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <f_mount+0x52>
 80095de:	2302      	movs	r3, #2
 80095e0:	e033      	b.n	800964a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00f      	beq.n	800960e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	330c      	adds	r3, #12
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f000 fd5f 	bl	800a0c2 <ff_cre_syncobj>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <f_mount+0x7e>
 800960a:	2302      	movs	r3, #2
 800960c:	e01d      	b.n	800964a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4910      	ldr	r1, [pc, #64]	@ (8009654 <f_mount+0xc4>)
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <f_mount+0x94>
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d001      	beq.n	8009628 <f_mount+0x98>
 8009624:	2300      	movs	r3, #0
 8009626:	e010      	b.n	800964a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009628:	f107 010c 	add.w	r1, r7, #12
 800962c:	f107 0308 	add.w	r3, r7, #8
 8009630:	2200      	movs	r2, #0
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff fd10 	bl	8009058 <find_volume>
 8009638:	4603      	mov	r3, r0
 800963a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	7dfa      	ldrb	r2, [r7, #23]
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fbd2 	bl	8007dec <unlock_fs>
 8009648:	7dfb      	ldrb	r3, [r7, #23]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20005a00 	.word	0x20005a00

08009658 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b098      	sub	sp, #96	@ 0x60
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <f_open+0x18>
 800966c:	2309      	movs	r3, #9
 800966e:	e1b0      	b.n	80099d2 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009676:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009678:	79fa      	ldrb	r2, [r7, #7]
 800967a:	f107 0110 	add.w	r1, r7, #16
 800967e:	f107 0308 	add.w	r3, r7, #8
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff fce8 	bl	8009058 <find_volume>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800968e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009692:	2b00      	cmp	r3, #0
 8009694:	f040 818d 	bne.w	80099b2 <f_open+0x35a>
		dj.obj.fs = fs;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	f107 0314 	add.w	r3, r7, #20
 80096a2:	4611      	mov	r1, r2
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff fbcb 	bl	8008e40 <follow_path>
 80096aa:	4603      	mov	r3, r0
 80096ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80096b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d118      	bne.n	80096ea <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80096b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096bc:	b25b      	sxtb	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da03      	bge.n	80096ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80096c2:	2306      	movs	r3, #6
 80096c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80096c8:	e00f      	b.n	80096ea <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	bf8c      	ite	hi
 80096d0:	2301      	movhi	r3, #1
 80096d2:	2300      	movls	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	461a      	mov	r2, r3
 80096d8:	f107 0314 	add.w	r3, r7, #20
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fba0 	bl	8007e24 <chk_lock>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	f003 031c 	and.w	r3, r3, #28
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d07f      	beq.n	80097f4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80096f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d017      	beq.n	800972c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80096fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009700:	2b04      	cmp	r3, #4
 8009702:	d10e      	bne.n	8009722 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009704:	f7fe fbea 	bl	8007edc <enq_lock>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d006      	beq.n	800971c <f_open+0xc4>
 800970e:	f107 0314 	add.w	r3, r7, #20
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff face 	bl	8008cb4 <dir_register>
 8009718:	4603      	mov	r3, r0
 800971a:	e000      	b.n	800971e <f_open+0xc6>
 800971c:	2312      	movs	r3, #18
 800971e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	f043 0308 	orr.w	r3, r3, #8
 8009728:	71fb      	strb	r3, [r7, #7]
 800972a:	e010      	b.n	800974e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800972c:	7ebb      	ldrb	r3, [r7, #26]
 800972e:	f003 0311 	and.w	r3, r3, #17
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <f_open+0xe6>
					res = FR_DENIED;
 8009736:	2307      	movs	r3, #7
 8009738:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800973c:	e007      	b.n	800974e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	f003 0304 	and.w	r3, r3, #4
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <f_open+0xf6>
 8009748:	2308      	movs	r3, #8
 800974a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800974e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009752:	2b00      	cmp	r3, #0
 8009754:	d168      	bne.n	8009828 <f_open+0x1d0>
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	f003 0308 	and.w	r3, r3, #8
 800975c:	2b00      	cmp	r3, #0
 800975e:	d063      	beq.n	8009828 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009760:	f7fd fe14 	bl	800738c <get_fattime>
 8009764:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009768:	330e      	adds	r3, #14
 800976a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe fa7d 	bl	8007c6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009774:	3316      	adds	r3, #22
 8009776:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe fa77 	bl	8007c6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800977e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009780:	330b      	adds	r3, #11
 8009782:	2220      	movs	r2, #32
 8009784:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800978a:	4611      	mov	r1, r2
 800978c:	4618      	mov	r0, r3
 800978e:	f7ff f9fd 	bl	8008b8c <ld_clust>
 8009792:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009798:	2200      	movs	r2, #0
 800979a:	4618      	mov	r0, r3
 800979c:	f7ff fa15 	bl	8008bca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80097a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a2:	331c      	adds	r3, #28
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fa60 	bl	8007c6c <st_dword>
					fs->wflag = 1;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2201      	movs	r2, #1
 80097b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80097b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d037      	beq.n	8009828 <f_open+0x1d0>
						dw = fs->winsect;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097bc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80097be:	f107 0314 	add.w	r3, r7, #20
 80097c2:	2200      	movs	r2, #0
 80097c4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe ff28 	bl	800861c <remove_chain>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80097d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d126      	bne.n	8009828 <f_open+0x1d0>
							res = move_window(fs, dw);
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fcd0 	bl	8008184 <move_window>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097ee:	3a01      	subs	r2, #1
 80097f0:	611a      	str	r2, [r3, #16]
 80097f2:	e019      	b.n	8009828 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80097f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d115      	bne.n	8009828 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80097fc:	7ebb      	ldrb	r3, [r7, #26]
 80097fe:	f003 0310 	and.w	r3, r3, #16
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009806:	2304      	movs	r3, #4
 8009808:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800980c:	e00c      	b.n	8009828 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	f003 0302 	and.w	r3, r3, #2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d007      	beq.n	8009828 <f_open+0x1d0>
 8009818:	7ebb      	ldrb	r3, [r7, #26]
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <f_open+0x1d0>
						res = FR_DENIED;
 8009822:	2307      	movs	r3, #7
 8009824:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009828:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800982c:	2b00      	cmp	r3, #0
 800982e:	d126      	bne.n	800987e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	f003 0308 	and.w	r3, r3, #8
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009840:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800984a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009850:	79fb      	ldrb	r3, [r7, #7]
 8009852:	2b01      	cmp	r3, #1
 8009854:	bf8c      	ite	hi
 8009856:	2301      	movhi	r3, #1
 8009858:	2300      	movls	r3, #0
 800985a:	b2db      	uxtb	r3, r3
 800985c:	461a      	mov	r2, r3
 800985e:	f107 0314 	add.w	r3, r7, #20
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fb5b 	bl	8007f20 <inc_lock>
 800986a:	4602      	mov	r2, r0
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d102      	bne.n	800987e <f_open+0x226>
 8009878:	2302      	movs	r3, #2
 800987a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800987e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009882:	2b00      	cmp	r3, #0
 8009884:	f040 8095 	bne.w	80099b2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff f97c 	bl	8008b8c <ld_clust>
 8009894:	4602      	mov	r2, r0
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800989a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989c:	331c      	adds	r3, #28
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe f9a6 	bl	8007bf0 <ld_dword>
 80098a4:	4602      	mov	r2, r0
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	88da      	ldrh	r2, [r3, #6]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	79fa      	ldrb	r2, [r7, #7]
 80098c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3330      	adds	r3, #48	@ 0x30
 80098da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fa10 	bl	8007d06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d060      	beq.n	80099b2 <f_open+0x35a>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d05c      	beq.n	80099b2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	895b      	ldrh	r3, [r3, #10]
 8009904:	025b      	lsls	r3, r3, #9
 8009906:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	657b      	str	r3, [r7, #84]	@ 0x54
 8009914:	e016      	b.n	8009944 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fced 	bl	80082fa <get_fat>
 8009920:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009924:	2b01      	cmp	r3, #1
 8009926:	d802      	bhi.n	800992e <f_open+0x2d6>
 8009928:	2302      	movs	r3, #2
 800992a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800992e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009934:	d102      	bne.n	800993c <f_open+0x2e4>
 8009936:	2301      	movs	r3, #1
 8009938:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800993c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800993e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	657b      	str	r3, [r7, #84]	@ 0x54
 8009944:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009948:	2b00      	cmp	r3, #0
 800994a:	d103      	bne.n	8009954 <f_open+0x2fc>
 800994c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800994e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009950:	429a      	cmp	r2, r3
 8009952:	d8e0      	bhi.n	8009916 <f_open+0x2be>
				}
				fp->clust = clst;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009958:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800995a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800995e:	2b00      	cmp	r3, #0
 8009960:	d127      	bne.n	80099b2 <f_open+0x35a>
 8009962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009968:	2b00      	cmp	r3, #0
 800996a:	d022      	beq.n	80099b2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fca3 	bl	80082bc <clust2sect>
 8009976:	6478      	str	r0, [r7, #68]	@ 0x44
 8009978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800997a:	2b00      	cmp	r3, #0
 800997c:	d103      	bne.n	8009986 <f_open+0x32e>
						res = FR_INT_ERR;
 800997e:	2302      	movs	r3, #2
 8009980:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009984:	e015      	b.n	80099b2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009988:	0a5a      	lsrs	r2, r3, #9
 800998a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800998c:	441a      	add	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	7858      	ldrb	r0, [r3, #1]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a1a      	ldr	r2, [r3, #32]
 80099a0:	2301      	movs	r3, #1
 80099a2:	f7fe f8af 	bl	8007b04 <disk_read>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <f_open+0x35a>
 80099ac:	2301      	movs	r3, #1
 80099ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80099b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <f_open+0x368>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80099c6:	4611      	mov	r1, r2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe fa0f 	bl	8007dec <unlock_fs>
 80099ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3760      	adds	r7, #96	@ 0x60
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b08c      	sub	sp, #48	@ 0x30
 80099de:	af00      	add	r7, sp, #0
 80099e0:	60f8      	str	r0, [r7, #12]
 80099e2:	60b9      	str	r1, [r7, #8]
 80099e4:	607a      	str	r2, [r7, #4]
 80099e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f107 0210 	add.w	r2, r7, #16
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff fd80 	bl	8009500 <validate>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009a06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d107      	bne.n	8009a1e <f_write+0x44>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	7d5b      	ldrb	r3, [r3, #21]
 8009a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009a16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <f_write+0x58>
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009a24:	4611      	mov	r1, r2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe f9e0 	bl	8007dec <unlock_fs>
 8009a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009a30:	e173      	b.n	8009d1a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	7d1b      	ldrb	r3, [r3, #20]
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <f_write+0x72>
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	2107      	movs	r1, #7
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe f9d2 	bl	8007dec <unlock_fs>
 8009a48:	2307      	movs	r3, #7
 8009a4a:	e166      	b.n	8009d1a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	699a      	ldr	r2, [r3, #24]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	441a      	add	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	f080 814b 	bcs.w	8009cf4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	43db      	mvns	r3, r3
 8009a64:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009a66:	e145      	b.n	8009cf4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f040 8101 	bne.w	8009c78 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	0a5b      	lsrs	r3, r3, #9
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	8952      	ldrh	r2, [r2, #10]
 8009a80:	3a01      	subs	r2, #1
 8009a82:	4013      	ands	r3, r2
 8009a84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d14d      	bne.n	8009b28 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10c      	bne.n	8009aae <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d11a      	bne.n	8009ad6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe fe1e 	bl	80086e6 <create_chain>
 8009aaa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009aac:	e013      	b.n	8009ad6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d007      	beq.n	8009ac6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	4619      	mov	r1, r3
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f7fe feaa 	bl	8008816 <clmt_clust>
 8009ac2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009ac4:	e007      	b.n	8009ad6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	4619      	mov	r1, r3
 8009ace:	4610      	mov	r0, r2
 8009ad0:	f7fe fe09 	bl	80086e6 <create_chain>
 8009ad4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8110 	beq.w	8009cfe <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d109      	bne.n	8009af8 <f_write+0x11e>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	755a      	strb	r2, [r3, #21]
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2102      	movs	r1, #2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe f97c 	bl	8007dec <unlock_fs>
 8009af4:	2302      	movs	r3, #2
 8009af6:	e110      	b.n	8009d1a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afe:	d109      	bne.n	8009b14 <f_write+0x13a>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	755a      	strb	r2, [r3, #21]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2101      	movs	r1, #1
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe f96e 	bl	8007dec <unlock_fs>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e102      	b.n	8009d1a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b18:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <f_write+0x14e>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	7d1b      	ldrb	r3, [r3, #20]
 8009b2c:	b25b      	sxtb	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	da1d      	bge.n	8009b6e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	7858      	ldrb	r0, [r3, #1]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a1a      	ldr	r2, [r3, #32]
 8009b40:	2301      	movs	r3, #1
 8009b42:	f7fd ffff 	bl	8007b44 <disk_write>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d009      	beq.n	8009b60 <f_write+0x186>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	755a      	strb	r2, [r3, #21]
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2101      	movs	r1, #1
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe f948 	bl	8007dec <unlock_fs>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e0dc      	b.n	8009d1a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	7d1b      	ldrb	r3, [r3, #20]
 8009b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	69db      	ldr	r3, [r3, #28]
 8009b74:	4619      	mov	r1, r3
 8009b76:	4610      	mov	r0, r2
 8009b78:	f7fe fba0 	bl	80082bc <clust2sect>
 8009b7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d109      	bne.n	8009b98 <f_write+0x1be>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2202      	movs	r2, #2
 8009b88:	755a      	strb	r2, [r3, #21]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2102      	movs	r1, #2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe f92c 	bl	8007dec <unlock_fs>
 8009b94:	2302      	movs	r3, #2
 8009b96:	e0c0      	b.n	8009d1a <f_write+0x340>
			sect += csect;
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	0a5b      	lsrs	r3, r3, #9
 8009ba4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d041      	beq.n	8009c30 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	8952      	ldrh	r2, [r2, #10]
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d905      	bls.n	8009bc6 <f_write+0x1ec>
					cc = fs->csize - csect;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	895b      	ldrh	r3, [r3, #10]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	7858      	ldrb	r0, [r3, #1]
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	69f9      	ldr	r1, [r7, #28]
 8009bd0:	f7fd ffb8 	bl	8007b44 <disk_write>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <f_write+0x214>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	755a      	strb	r2, [r3, #21]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	2101      	movs	r1, #1
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe f901 	bl	8007dec <unlock_fs>
 8009bea:	2301      	movs	r3, #1
 8009bec:	e095      	b.n	8009d1a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6a1a      	ldr	r2, [r3, #32]
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	6a3a      	ldr	r2, [r7, #32]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d915      	bls.n	8009c28 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6a1a      	ldr	r2, [r3, #32]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	025b      	lsls	r3, r3, #9
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c14:	4619      	mov	r1, r3
 8009c16:	f7fe f855 	bl	8007cc4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	7d1b      	ldrb	r3, [r3, #20]
 8009c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	025b      	lsls	r3, r3, #9
 8009c2c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009c2e:	e044      	b.n	8009cba <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d01b      	beq.n	8009c72 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d215      	bcs.n	8009c72 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	7858      	ldrb	r0, [r3, #1]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c50:	2301      	movs	r3, #1
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	f7fd ff56 	bl	8007b04 <disk_read>
 8009c58:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d009      	beq.n	8009c72 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	755a      	strb	r2, [r3, #21]
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	2101      	movs	r1, #1
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe f8bf 	bl	8007dec <unlock_fs>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e053      	b.n	8009d1a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c80:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009c84:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d901      	bls.n	8009c92 <f_write+0x2b8>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca0:	4413      	add	r3, r2
 8009ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca4:	69f9      	ldr	r1, [r7, #28]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe f80c 	bl	8007cc4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	7d1b      	ldrb	r3, [r3, #20]
 8009cb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	4413      	add	r3, r2
 8009cc0:	61fb      	str	r3, [r7, #28]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	699a      	ldr	r2, [r3, #24]
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	441a      	add	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	619a      	str	r2, [r3, #24]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	68da      	ldr	r2, [r3, #12]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	bf38      	it	cc
 8009cda:	461a      	movcc	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	60da      	str	r2, [r3, #12]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce6:	441a      	add	r2, r3
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f47f aeb6 	bne.w	8009a68 <f_write+0x8e>
 8009cfc:	e000      	b.n	8009d00 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009cfe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	7d1b      	ldrb	r3, [r3, #20]
 8009d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe f86a 	bl	8007dec <unlock_fs>
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3730      	adds	r7, #48	@ 0x30
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f107 0208 	add.w	r2, r7, #8
 8009d30:	4611      	mov	r1, r2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7ff fbe4 	bl	8009500 <validate>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d16d      	bne.n	8009e1e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7d1b      	ldrb	r3, [r3, #20]
 8009d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d067      	beq.n	8009e1e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7d1b      	ldrb	r3, [r3, #20]
 8009d52:	b25b      	sxtb	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	da1a      	bge.n	8009d8e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	7858      	ldrb	r0, [r3, #1]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1a      	ldr	r2, [r3, #32]
 8009d66:	2301      	movs	r3, #1
 8009d68:	f7fd feec 	bl	8007b44 <disk_write>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d006      	beq.n	8009d80 <f_sync+0x5e>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2101      	movs	r1, #1
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe f838 	bl	8007dec <unlock_fs>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e055      	b.n	8009e2c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7d1b      	ldrb	r3, [r3, #20]
 8009d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009d8e:	f7fd fafd 	bl	800738c <get_fattime>
 8009d92:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	f7fe f9f1 	bl	8008184 <move_window>
 8009da2:	4603      	mov	r3, r0
 8009da4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d138      	bne.n	8009e1e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	330b      	adds	r3, #11
 8009db6:	781a      	ldrb	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	330b      	adds	r3, #11
 8009dbc:	f042 0220 	orr.w	r2, r2, #32
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	68f9      	ldr	r1, [r7, #12]
 8009dd0:	f7fe fefb 	bl	8008bca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f103 021c 	add.w	r2, r3, #28
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f7fd ff43 	bl	8007c6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3316      	adds	r3, #22
 8009dea:	6939      	ldr	r1, [r7, #16]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fd ff3d 	bl	8007c6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3312      	adds	r3, #18
 8009df6:	2100      	movs	r1, #0
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd ff1c 	bl	8007c36 <st_word>
					fs->wflag = 1;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2201      	movs	r2, #1
 8009e02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe f9ea 	bl	80081e0 <sync_fs>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	7d1b      	ldrb	r3, [r3, #20]
 8009e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	7dfa      	ldrb	r2, [r7, #23]
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fd ffe1 	bl	8007dec <unlock_fs>
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7ff ff70 	bl	8009d22 <f_sync>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d11d      	bne.n	8009e88 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f107 0208 	add.w	r2, r7, #8
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fb53 	bl	8009500 <validate>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d111      	bne.n	8009e88 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe f8e7 	bl	800803c <dec_lock>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d102      	bne.n	8009e7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2100      	movs	r1, #0
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fd ffb2 	bl	8007dec <unlock_fs>
#endif
		}
	}
	return res;
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b092      	sub	sp, #72	@ 0x48
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009e9e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009ea2:	f107 030c 	add.w	r3, r7, #12
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff f8d5 	bl	8009058 <find_volume>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f040 8099 	bne.w	8009ff0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009ebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec6:	695a      	ldr	r2, [r3, #20]
 8009ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	3b02      	subs	r3, #2
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d804      	bhi.n	8009edc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed4:	695a      	ldr	r2, [r3, #20]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	e089      	b.n	8009ff0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d128      	bne.n	8009f3a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eee:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009ef0:	f107 0314 	add.w	r3, r7, #20
 8009ef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe f9ff 	bl	80082fa <get_fat>
 8009efc:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d103      	bne.n	8009f0e <f_getfree+0x7c>
 8009f06:	2301      	movs	r3, #1
 8009f08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009f0c:	e063      	b.n	8009fd6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d103      	bne.n	8009f1c <f_getfree+0x8a>
 8009f14:	2302      	movs	r3, #2
 8009f16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009f1a:	e05c      	b.n	8009fd6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d102      	bne.n	8009f28 <f_getfree+0x96>
 8009f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f24:	3301      	adds	r3, #1
 8009f26:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8009f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d3db      	bcc.n	8009ef0 <f_getfree+0x5e>
 8009f38:	e04d      	b.n	8009fd6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f44:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d113      	bne.n	8009f7c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	f7fe f911 	bl	8008184 <move_window>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009f68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d131      	bne.n	8009fd4 <f_getfree+0x142>
							p = fs->win;
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	3334      	adds	r3, #52	@ 0x34
 8009f74:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009f76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f7a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d10f      	bne.n	8009fa4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f86:	f7fd fe1b 	bl	8007bc0 <ld_word>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d102      	bne.n	8009f96 <f_getfree+0x104>
 8009f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f92:	3301      	adds	r3, #1
 8009f94:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f98:	3302      	adds	r3, #2
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f9e:	3b02      	subs	r3, #2
 8009fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa2:	e010      	b.n	8009fc6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fa6:	f7fd fe23 	bl	8007bf0 <ld_dword>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <f_getfree+0x128>
 8009fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc2:	3b04      	subs	r3, #4
 8009fc4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1bd      	bne.n	8009f4e <f_getfree+0xbc>
 8009fd2:	e000      	b.n	8009fd6 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009fd4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009fda:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009fe0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe4:	791a      	ldrb	r2, [r3, #4]
 8009fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe8:	f042 0201 	orr.w	r2, r2, #1
 8009fec:	b2d2      	uxtb	r2, r2
 8009fee:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fd fef7 	bl	8007dec <unlock_fs>
 8009ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a002:	4618      	mov	r0, r3
 800a004:	3748      	adds	r7, #72	@ 0x48
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	4613      	mov	r3, r2
 800a018:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a01a:	2301      	movs	r3, #1
 800a01c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a022:	4b1f      	ldr	r3, [pc, #124]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a024:	7a5b      	ldrb	r3, [r3, #9]
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d131      	bne.n	800a090 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a02c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a02e:	7a5b      	ldrb	r3, [r3, #9]
 800a030:	b2db      	uxtb	r3, r3
 800a032:	461a      	mov	r2, r3
 800a034:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a036:	2100      	movs	r1, #0
 800a038:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a03a:	4b19      	ldr	r3, [pc, #100]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a03c:	7a5b      	ldrb	r3, [r3, #9]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	4a17      	ldr	r2, [pc, #92]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a04a:	4b15      	ldr	r3, [pc, #84]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a04c:	7a5b      	ldrb	r3, [r3, #9]
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	461a      	mov	r2, r3
 800a052:	4b13      	ldr	r3, [pc, #76]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a054:	4413      	add	r3, r2
 800a056:	79fa      	ldrb	r2, [r7, #7]
 800a058:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a05a:	4b11      	ldr	r3, [pc, #68]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a05c:	7a5b      	ldrb	r3, [r3, #9]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	b2d1      	uxtb	r1, r2
 800a064:	4a0e      	ldr	r2, [pc, #56]	@ (800a0a0 <FATFS_LinkDriverEx+0x94>)
 800a066:	7251      	strb	r1, [r2, #9]
 800a068:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a06a:	7dbb      	ldrb	r3, [r7, #22]
 800a06c:	3330      	adds	r3, #48	@ 0x30
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	3301      	adds	r3, #1
 800a078:	223a      	movs	r2, #58	@ 0x3a
 800a07a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	3302      	adds	r3, #2
 800a080:	222f      	movs	r2, #47	@ 0x2f
 800a082:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	3303      	adds	r3, #3
 800a088:	2200      	movs	r2, #0
 800a08a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a090:	7dfb      	ldrb	r3, [r7, #23]
}
 800a092:	4618      	mov	r0, r3
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	20005a28 	.word	0x20005a28

0800a0a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7ff ffaa 	bl	800a00c <FATFS_LinkDriverEx>
 800a0b8:	4603      	mov	r3, r0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	6039      	str	r1, [r7, #0]
 800a0cc:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	f000 fa35 	bl	800a542 <osSemaphoreNew>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bf14      	ite	ne
 800a0e6:	2301      	movne	r3, #1
 800a0e8:	2300      	moveq	r3, #0
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	60fb      	str	r3, [r7, #12]

    return ret;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fb3d 	bl	800a780 <osSemaphoreDelete>
#endif
    return 1;
 800a106:	2301      	movs	r3, #1
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800a11c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fa97 	bl	800a654 <osSemaphoreAcquire>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800a12c:	2301      	movs	r3, #1
 800a12e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a130:	68fb      	ldr	r3, [r7, #12]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fad8 	bl	800a6f8 <osSemaphoreRelease>
#endif
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <__NVIC_SetPriority>:
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	6039      	str	r1, [r7, #0]
 800a15a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a15c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a160:	2b00      	cmp	r3, #0
 800a162:	db0a      	blt.n	800a17a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	b2da      	uxtb	r2, r3
 800a168:	490c      	ldr	r1, [pc, #48]	@ (800a19c <__NVIC_SetPriority+0x4c>)
 800a16a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a16e:	0112      	lsls	r2, r2, #4
 800a170:	b2d2      	uxtb	r2, r2
 800a172:	440b      	add	r3, r1
 800a174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a178:	e00a      	b.n	800a190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	4908      	ldr	r1, [pc, #32]	@ (800a1a0 <__NVIC_SetPriority+0x50>)
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	3b04      	subs	r3, #4
 800a188:	0112      	lsls	r2, r2, #4
 800a18a:	b2d2      	uxtb	r2, r2
 800a18c:	440b      	add	r3, r1
 800a18e:	761a      	strb	r2, [r3, #24]
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	e000e100 	.word	0xe000e100
 800a1a0:	e000ed00 	.word	0xe000ed00

0800a1a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a1a8:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <SysTick_Handler+0x1c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a1ac:	f002 fc26 	bl	800c9fc <xTaskGetSchedulerState>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d001      	beq.n	800a1ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a1b6:	f003 fb1f 	bl	800d7f8 <xPortSysTickHandler>
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	e000e010 	.word	0xe000e010

0800a1c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	f06f 0004 	mvn.w	r0, #4
 800a1ce:	f7ff ffbf 	bl	800a150 <__NVIC_SetPriority>
#endif
}
 800a1d2:	bf00      	nop
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1de:	f3ef 8305 	mrs	r3, IPSR
 800a1e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a1e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1ea:	f06f 0305 	mvn.w	r3, #5
 800a1ee:	607b      	str	r3, [r7, #4]
 800a1f0:	e00c      	b.n	800a20c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a21c <osKernelInitialize+0x44>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d105      	bne.n	800a206 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a1fa:	4b08      	ldr	r3, [pc, #32]	@ (800a21c <osKernelInitialize+0x44>)
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a200:	2300      	movs	r3, #0
 800a202:	607b      	str	r3, [r7, #4]
 800a204:	e002      	b.n	800a20c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a206:	f04f 33ff 	mov.w	r3, #4294967295
 800a20a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a20c:	687b      	ldr	r3, [r7, #4]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	20005a34 	.word	0x20005a34

0800a220 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800a226:	f002 fbe9 	bl	800c9fc <xTaskGetSchedulerState>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d004      	beq.n	800a23a <osKernelGetState+0x1a>
 800a230:	2b02      	cmp	r3, #2
 800a232:	d105      	bne.n	800a240 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800a234:	2302      	movs	r3, #2
 800a236:	607b      	str	r3, [r7, #4]
      break;
 800a238:	e00c      	b.n	800a254 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800a23a:	2303      	movs	r3, #3
 800a23c:	607b      	str	r3, [r7, #4]
      break;
 800a23e:	e009      	b.n	800a254 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800a240:	4b07      	ldr	r3, [pc, #28]	@ (800a260 <osKernelGetState+0x40>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d102      	bne.n	800a24e <osKernelGetState+0x2e>
        state = osKernelReady;
 800a248:	2301      	movs	r3, #1
 800a24a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800a24c:	e001      	b.n	800a252 <osKernelGetState+0x32>
        state = osKernelInactive;
 800a24e:	2300      	movs	r3, #0
 800a250:	607b      	str	r3, [r7, #4]
      break;
 800a252:	bf00      	nop
  }

  return (state);
 800a254:	687b      	ldr	r3, [r7, #4]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20005a34 	.word	0x20005a34

0800a264 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a26a:	f3ef 8305 	mrs	r3, IPSR
 800a26e:	603b      	str	r3, [r7, #0]
  return(result);
 800a270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a276:	f06f 0305 	mvn.w	r3, #5
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	e010      	b.n	800a2a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a27e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <osKernelStart+0x48>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d109      	bne.n	800a29a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a286:	f7ff ff9d 	bl	800a1c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a28a:	4b08      	ldr	r3, [pc, #32]	@ (800a2ac <osKernelStart+0x48>)
 800a28c:	2202      	movs	r2, #2
 800a28e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a290:	f001 ff22 	bl	800c0d8 <vTaskStartScheduler>
      stat = osOK;
 800a294:	2300      	movs	r3, #0
 800a296:	607b      	str	r3, [r7, #4]
 800a298:	e002      	b.n	800a2a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a29a:	f04f 33ff 	mov.w	r3, #4294967295
 800a29e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2a0:	687b      	ldr	r3, [r7, #4]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20005a34 	.word	0x20005a34

0800a2b0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2b6:	f3ef 8305 	mrs	r3, IPSR
 800a2ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a2bc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d003      	beq.n	800a2ca <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a2c2:	f002 f837 	bl	800c334 <xTaskGetTickCountFromISR>
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	e002      	b.n	800a2d0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a2ca:	f002 f823 	bl	800c314 <xTaskGetTickCount>
 800a2ce:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a2d0:	687b      	ldr	r3, [r7, #4]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b08e      	sub	sp, #56	@ 0x38
 800a2de:	af04      	add	r7, sp, #16
 800a2e0:	60f8      	str	r0, [r7, #12]
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ea:	f3ef 8305 	mrs	r3, IPSR
 800a2ee:	617b      	str	r3, [r7, #20]
  return(result);
 800a2f0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d17f      	bne.n	800a3f6 <osThreadNew+0x11c>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d07c      	beq.n	800a3f6 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a2fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a300:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a302:	2318      	movs	r3, #24
 800a304:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a306:	2300      	movs	r3, #0
 800a308:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
 800a30e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d045      	beq.n	800a3a2 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <osThreadNew+0x4a>
        name = attr->name;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d008      	beq.n	800a34a <osThreadNew+0x70>
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	2b38      	cmp	r3, #56	@ 0x38
 800a33c:	d805      	bhi.n	800a34a <osThreadNew+0x70>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <osThreadNew+0x74>
        return (NULL);
 800a34a:	2300      	movs	r3, #0
 800a34c:	e054      	b.n	800a3f8 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	089b      	lsrs	r3, r3, #2
 800a35c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00e      	beq.n	800a384 <osThreadNew+0xaa>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2bab      	cmp	r3, #171	@ 0xab
 800a36c:	d90a      	bls.n	800a384 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a372:	2b00      	cmp	r3, #0
 800a374:	d006      	beq.n	800a384 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <osThreadNew+0xaa>
        mem = 1;
 800a37e:	2301      	movs	r3, #1
 800a380:	61bb      	str	r3, [r7, #24]
 800a382:	e010      	b.n	800a3a6 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10c      	bne.n	800a3a6 <osThreadNew+0xcc>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d108      	bne.n	800a3a6 <osThreadNew+0xcc>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d104      	bne.n	800a3a6 <osThreadNew+0xcc>
          mem = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	61bb      	str	r3, [r7, #24]
 800a3a0:	e001      	b.n	800a3a6 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d110      	bne.n	800a3ce <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3b4:	9202      	str	r2, [sp, #8]
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6a3a      	ldr	r2, [r7, #32]
 800a3c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f001 fc92 	bl	800bcec <xTaskCreateStatic>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	613b      	str	r3, [r7, #16]
 800a3cc:	e013      	b.n	800a3f6 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d110      	bne.n	800a3f6 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	f107 0310 	add.w	r3, r7, #16
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f001 fce0 	bl	800bdac <xTaskCreate>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d001      	beq.n	800a3f6 <osThreadNew+0x11c>
            hTask = NULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3f6:	693b      	ldr	r3, [r7, #16]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3728      	adds	r7, #40	@ 0x28
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a408:	f3ef 8305 	mrs	r3, IPSR
 800a40c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a40e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <osDelay+0x1c>
    stat = osErrorISR;
 800a414:	f06f 0305 	mvn.w	r3, #5
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	e007      	b.n	800a42c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f001 fe20 	bl	800c06c <vTaskDelay>
    }
  }

  return (stat);
 800a42c:	68fb      	ldr	r3, [r7, #12]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a436:	b580      	push	{r7, lr}
 800a438:	b088      	sub	sp, #32
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a442:	f3ef 8305 	mrs	r3, IPSR
 800a446:	60bb      	str	r3, [r7, #8]
  return(result);
 800a448:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d174      	bne.n	800a538 <osMutexNew+0x102>
    if (attr != NULL) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <osMutexNew+0x26>
      type = attr->attr_bits;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	e001      	b.n	800a460 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <osMutexNew+0x3a>
      rmtx = 1U;
 800a46a:	2301      	movs	r3, #1
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	e001      	b.n	800a474 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	f003 0308 	and.w	r3, r3, #8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d15c      	bne.n	800a538 <osMutexNew+0x102>
      mem = -1;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d015      	beq.n	800a4b6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d006      	beq.n	800a4a0 <osMutexNew+0x6a>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	2b4f      	cmp	r3, #79	@ 0x4f
 800a498:	d902      	bls.n	800a4a0 <osMutexNew+0x6a>
          mem = 1;
 800a49a:	2301      	movs	r3, #1
 800a49c:	613b      	str	r3, [r7, #16]
 800a49e:	e00c      	b.n	800a4ba <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d108      	bne.n	800a4ba <osMutexNew+0x84>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d104      	bne.n	800a4ba <osMutexNew+0x84>
            mem = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	613b      	str	r3, [r7, #16]
 800a4b4:	e001      	b.n	800a4ba <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d112      	bne.n	800a4e6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d007      	beq.n	800a4d6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	2004      	movs	r0, #4
 800a4ce:	f000 fd0c 	bl	800aeea <xQueueCreateMutexStatic>
 800a4d2:	61f8      	str	r0, [r7, #28]
 800a4d4:	e016      	b.n	800a504 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	2001      	movs	r0, #1
 800a4de:	f000 fd04 	bl	800aeea <xQueueCreateMutexStatic>
 800a4e2:	61f8      	str	r0, [r7, #28]
 800a4e4:	e00e      	b.n	800a504 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10b      	bne.n	800a504 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d004      	beq.n	800a4fc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a4f2:	2004      	movs	r0, #4
 800a4f4:	f000 fce1 	bl	800aeba <xQueueCreateMutex>
 800a4f8:	61f8      	str	r0, [r7, #28]
 800a4fa:	e003      	b.n	800a504 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	f000 fcdc 	bl	800aeba <xQueueCreateMutex>
 800a502:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00c      	beq.n	800a524 <osMutexNew+0xee>
        if (attr != NULL) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d003      	beq.n	800a518 <osMutexNew+0xe2>
          name = attr->name;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	e001      	b.n	800a51c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a51c:	68f9      	ldr	r1, [r7, #12]
 800a51e:	69f8      	ldr	r0, [r7, #28]
 800a520:	f001 fb5c 	bl	800bbdc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d006      	beq.n	800a538 <osMutexNew+0x102>
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	f043 0301 	orr.w	r3, r3, #1
 800a536:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a538:	69fb      	ldr	r3, [r7, #28]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3720      	adds	r7, #32
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a542:	b580      	push	{r7, lr}
 800a544:	b08a      	sub	sp, #40	@ 0x28
 800a546:	af02      	add	r7, sp, #8
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a552:	f3ef 8305 	mrs	r3, IPSR
 800a556:	613b      	str	r3, [r7, #16]
  return(result);
 800a558:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d175      	bne.n	800a64a <osSemaphoreNew+0x108>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d072      	beq.n	800a64a <osSemaphoreNew+0x108>
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d86e      	bhi.n	800a64a <osSemaphoreNew+0x108>
    mem = -1;
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295
 800a570:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d015      	beq.n	800a5a4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d006      	beq.n	800a58e <osSemaphoreNew+0x4c>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	2b4f      	cmp	r3, #79	@ 0x4f
 800a586:	d902      	bls.n	800a58e <osSemaphoreNew+0x4c>
        mem = 1;
 800a588:	2301      	movs	r3, #1
 800a58a:	61bb      	str	r3, [r7, #24]
 800a58c:	e00c      	b.n	800a5a8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d108      	bne.n	800a5a8 <osSemaphoreNew+0x66>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d104      	bne.n	800a5a8 <osSemaphoreNew+0x66>
          mem = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61bb      	str	r3, [r7, #24]
 800a5a2:	e001      	b.n	800a5a8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	d04c      	beq.n	800a64a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d128      	bne.n	800a608 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d10a      	bne.n	800a5d2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	2203      	movs	r2, #3
 800a5c2:	9200      	str	r2, [sp, #0]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	f000 fb81 	bl	800acd0 <xQueueGenericCreateStatic>
 800a5ce:	61f8      	str	r0, [r7, #28]
 800a5d0:	e005      	b.n	800a5de <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	f000 fbf7 	bl	800adca <xQueueGenericCreate>
 800a5dc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d022      	beq.n	800a62a <osSemaphoreNew+0xe8>
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d01f      	beq.n	800a62a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	69f8      	ldr	r0, [r7, #28]
 800a5f2:	f000 fd03 	bl	800affc <xQueueGenericSend>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d016      	beq.n	800a62a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a5fc:	69f8      	ldr	r0, [r7, #28]
 800a5fe:	f001 f9a1 	bl	800b944 <vQueueDelete>
            hSemaphore = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	61fb      	str	r3, [r7, #28]
 800a606:	e010      	b.n	800a62a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d108      	bne.n	800a620 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	461a      	mov	r2, r3
 800a614:	68b9      	ldr	r1, [r7, #8]
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 fc82 	bl	800af20 <xQueueCreateCountingSemaphoreStatic>
 800a61c:	61f8      	str	r0, [r7, #28]
 800a61e:	e004      	b.n	800a62a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a620:	68b9      	ldr	r1, [r7, #8]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 fcb5 	bl	800af92 <xQueueCreateCountingSemaphore>
 800a628:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00c      	beq.n	800a64a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <osSemaphoreNew+0xfc>
          name = attr->name;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	e001      	b.n	800a642 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a63e:	2300      	movs	r3, #0
 800a640:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a642:	6979      	ldr	r1, [r7, #20]
 800a644:	69f8      	ldr	r0, [r7, #28]
 800a646:	f001 fac9 	bl	800bbdc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a64a:	69fb      	ldr	r3, [r7, #28]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a662:	2300      	movs	r3, #0
 800a664:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d103      	bne.n	800a674 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a66c:	f06f 0303 	mvn.w	r3, #3
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	e039      	b.n	800a6e8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a674:	f3ef 8305 	mrs	r3, IPSR
 800a678:	60fb      	str	r3, [r7, #12]
  return(result);
 800a67a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d022      	beq.n	800a6c6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a686:	f06f 0303 	mvn.w	r3, #3
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e02c      	b.n	800a6e8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a68e:	2300      	movs	r3, #0
 800a690:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a692:	f107 0308 	add.w	r3, r7, #8
 800a696:	461a      	mov	r2, r3
 800a698:	2100      	movs	r1, #0
 800a69a:	6938      	ldr	r0, [r7, #16]
 800a69c:	f001 f8d0 	bl	800b840 <xQueueReceiveFromISR>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d003      	beq.n	800a6ae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a6a6:	f06f 0302 	mvn.w	r3, #2
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	e01c      	b.n	800a6e8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d019      	beq.n	800a6e8 <osSemaphoreAcquire+0x94>
 800a6b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a6f4 <osSemaphoreAcquire+0xa0>)
 800a6b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	e010      	b.n	800a6e8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6938      	ldr	r0, [r7, #16]
 800a6ca:	f000 ffa9 	bl	800b620 <xQueueSemaphoreTake>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d009      	beq.n	800a6e8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a6da:	f06f 0301 	mvn.w	r3, #1
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	e002      	b.n	800a6e8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a6e2:	f06f 0302 	mvn.w	r3, #2
 800a6e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a6e8:	697b      	ldr	r3, [r7, #20]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	e000ed04 	.word	0xe000ed04

0800a6f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a704:	2300      	movs	r3, #0
 800a706:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d103      	bne.n	800a716 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a70e:	f06f 0303 	mvn.w	r3, #3
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	e02c      	b.n	800a770 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a716:	f3ef 8305 	mrs	r3, IPSR
 800a71a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a71c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d01a      	beq.n	800a758 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a722:	2300      	movs	r3, #0
 800a724:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4619      	mov	r1, r3
 800a72c:	6938      	ldr	r0, [r7, #16]
 800a72e:	f000 fe05 	bl	800b33c <xQueueGiveFromISR>
 800a732:	4603      	mov	r3, r0
 800a734:	2b01      	cmp	r3, #1
 800a736:	d003      	beq.n	800a740 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a738:	f06f 0302 	mvn.w	r3, #2
 800a73c:	617b      	str	r3, [r7, #20]
 800a73e:	e017      	b.n	800a770 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d014      	beq.n	800a770 <osSemaphoreRelease+0x78>
 800a746:	4b0d      	ldr	r3, [pc, #52]	@ (800a77c <osSemaphoreRelease+0x84>)
 800a748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	e00b      	b.n	800a770 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a758:	2300      	movs	r3, #0
 800a75a:	2200      	movs	r2, #0
 800a75c:	2100      	movs	r1, #0
 800a75e:	6938      	ldr	r0, [r7, #16]
 800a760:	f000 fc4c 	bl	800affc <xQueueGenericSend>
 800a764:	4603      	mov	r3, r0
 800a766:	2b01      	cmp	r3, #1
 800a768:	d002      	beq.n	800a770 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a76a:	f06f 0302 	mvn.w	r3, #2
 800a76e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a770:	697b      	ldr	r3, [r7, #20]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	e000ed04 	.word	0xe000ed04

0800a780 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a78c:	f3ef 8305 	mrs	r3, IPSR
 800a790:	60fb      	str	r3, [r7, #12]
  return(result);
 800a792:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a794:	2b00      	cmp	r3, #0
 800a796:	d003      	beq.n	800a7a0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a798:	f06f 0305 	mvn.w	r3, #5
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	e00e      	b.n	800a7be <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d103      	bne.n	800a7ae <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a7a6:	f06f 0303 	mvn.w	r3, #3
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	e007      	b.n	800a7be <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a7ae:	6938      	ldr	r0, [r7, #16]
 800a7b0:	f001 fa3e 	bl	800bc30 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a7b8:	6938      	ldr	r0, [r7, #16]
 800a7ba:	f001 f8c3 	bl	800b944 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a7be:	697b      	ldr	r3, [r7, #20]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b08a      	sub	sp, #40	@ 0x28
 800a7cc:	af02      	add	r7, sp, #8
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7d8:	f3ef 8305 	mrs	r3, IPSR
 800a7dc:	613b      	str	r3, [r7, #16]
  return(result);
 800a7de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d15f      	bne.n	800a8a4 <osMessageQueueNew+0xdc>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d05c      	beq.n	800a8a4 <osMessageQueueNew+0xdc>
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d059      	beq.n	800a8a4 <osMessageQueueNew+0xdc>
    mem = -1;
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d029      	beq.n	800a850 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d012      	beq.n	800a82a <osMessageQueueNew+0x62>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	2b4f      	cmp	r3, #79	@ 0x4f
 800a80a:	d90e      	bls.n	800a82a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00a      	beq.n	800a82a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	695a      	ldr	r2, [r3, #20]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	68b9      	ldr	r1, [r7, #8]
 800a81c:	fb01 f303 	mul.w	r3, r1, r3
 800a820:	429a      	cmp	r2, r3
 800a822:	d302      	bcc.n	800a82a <osMessageQueueNew+0x62>
        mem = 1;
 800a824:	2301      	movs	r3, #1
 800a826:	61bb      	str	r3, [r7, #24]
 800a828:	e014      	b.n	800a854 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d110      	bne.n	800a854 <osMessageQueueNew+0x8c>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10c      	bne.n	800a854 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d108      	bne.n	800a854 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d104      	bne.n	800a854 <osMessageQueueNew+0x8c>
          mem = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	e001      	b.n	800a854 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d10b      	bne.n	800a872 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	691a      	ldr	r2, [r3, #16]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	2100      	movs	r1, #0
 800a864:	9100      	str	r1, [sp, #0]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 fa31 	bl	800acd0 <xQueueGenericCreateStatic>
 800a86e:	61f8      	str	r0, [r7, #28]
 800a870:	e008      	b.n	800a884 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d105      	bne.n	800a884 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a878:	2200      	movs	r2, #0
 800a87a:	68b9      	ldr	r1, [r7, #8]
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 faa4 	bl	800adca <xQueueGenericCreate>
 800a882:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00c      	beq.n	800a8a4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d003      	beq.n	800a898 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	617b      	str	r3, [r7, #20]
 800a896:	e001      	b.n	800a89c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a89c:	6979      	ldr	r1, [r7, #20]
 800a89e:	69f8      	ldr	r0, [r7, #28]
 800a8a0:	f001 f99c 	bl	800bbdc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a8a4:	69fb      	ldr	r3, [r7, #28]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3720      	adds	r7, #32
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8c8:	f3ef 8305 	mrs	r3, IPSR
 800a8cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a8ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d028      	beq.n	800a926 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d005      	beq.n	800a8e6 <osMessageQueuePut+0x36>
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <osMessageQueuePut+0x36>
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d003      	beq.n	800a8ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a8e6:	f06f 0303 	mvn.w	r3, #3
 800a8ea:	61fb      	str	r3, [r7, #28]
 800a8ec:	e038      	b.n	800a960 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a8f2:	f107 0210 	add.w	r2, r7, #16
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	69b8      	ldr	r0, [r7, #24]
 800a8fc:	f000 fc80 	bl	800b200 <xQueueGenericSendFromISR>
 800a900:	4603      	mov	r3, r0
 800a902:	2b01      	cmp	r3, #1
 800a904:	d003      	beq.n	800a90e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a906:	f06f 0302 	mvn.w	r3, #2
 800a90a:	61fb      	str	r3, [r7, #28]
 800a90c:	e028      	b.n	800a960 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d025      	beq.n	800a960 <osMessageQueuePut+0xb0>
 800a914:	4b15      	ldr	r3, [pc, #84]	@ (800a96c <osMessageQueuePut+0xbc>)
 800a916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	e01c      	b.n	800a960 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <osMessageQueuePut+0x82>
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d103      	bne.n	800a93a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a932:	f06f 0303 	mvn.w	r3, #3
 800a936:	61fb      	str	r3, [r7, #28]
 800a938:	e012      	b.n	800a960 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a93a:	2300      	movs	r3, #0
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	69b8      	ldr	r0, [r7, #24]
 800a942:	f000 fb5b 	bl	800affc <xQueueGenericSend>
 800a946:	4603      	mov	r3, r0
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d009      	beq.n	800a960 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a952:	f06f 0301 	mvn.w	r3, #1
 800a956:	61fb      	str	r3, [r7, #28]
 800a958:	e002      	b.n	800a960 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a95a:	f06f 0302 	mvn.w	r3, #2
 800a95e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a960:	69fb      	ldr	r3, [r7, #28]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3720      	adds	r7, #32
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a982:	2300      	movs	r3, #0
 800a984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a986:	f3ef 8305 	mrs	r3, IPSR
 800a98a:	617b      	str	r3, [r7, #20]
  return(result);
 800a98c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d028      	beq.n	800a9e4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d005      	beq.n	800a9a4 <osMessageQueueGet+0x34>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <osMessageQueueGet+0x34>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a9a4:	f06f 0303 	mvn.w	r3, #3
 800a9a8:	61fb      	str	r3, [r7, #28]
 800a9aa:	e037      	b.n	800aa1c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a9b0:	f107 0310 	add.w	r3, r7, #16
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	68b9      	ldr	r1, [r7, #8]
 800a9b8:	69b8      	ldr	r0, [r7, #24]
 800a9ba:	f000 ff41 	bl	800b840 <xQueueReceiveFromISR>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d003      	beq.n	800a9cc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a9c4:	f06f 0302 	mvn.w	r3, #2
 800a9c8:	61fb      	str	r3, [r7, #28]
 800a9ca:	e027      	b.n	800aa1c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d024      	beq.n	800aa1c <osMessageQueueGet+0xac>
 800a9d2:	4b15      	ldr	r3, [pc, #84]	@ (800aa28 <osMessageQueueGet+0xb8>)
 800a9d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	e01b      	b.n	800aa1c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <osMessageQueueGet+0x80>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a9f0:	f06f 0303 	mvn.w	r3, #3
 800a9f4:	61fb      	str	r3, [r7, #28]
 800a9f6:	e011      	b.n	800aa1c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	68b9      	ldr	r1, [r7, #8]
 800a9fc:	69b8      	ldr	r0, [r7, #24]
 800a9fe:	f000 fd2d 	bl	800b45c <xQueueReceive>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d009      	beq.n	800aa1c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aa0e:	f06f 0301 	mvn.w	r3, #1
 800aa12:	61fb      	str	r3, [r7, #28]
 800aa14:	e002      	b.n	800aa1c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aa16:	f06f 0302 	mvn.w	r3, #2
 800aa1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aa1c:	69fb      	ldr	r3, [r7, #28]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3720      	adds	r7, #32
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4a07      	ldr	r2, [pc, #28]	@ (800aa58 <vApplicationGetIdleTaskMemory+0x2c>)
 800aa3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	4a06      	ldr	r2, [pc, #24]	@ (800aa5c <vApplicationGetIdleTaskMemory+0x30>)
 800aa42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa4a:	601a      	str	r2, [r3, #0]
}
 800aa4c:	bf00      	nop
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	20005a38 	.word	0x20005a38
 800aa5c:	20005ae4 	.word	0x20005ae4

0800aa60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a07      	ldr	r2, [pc, #28]	@ (800aa8c <vApplicationGetTimerTaskMemory+0x2c>)
 800aa70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	4a06      	ldr	r2, [pc, #24]	@ (800aa90 <vApplicationGetTimerTaskMemory+0x30>)
 800aa76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800aa7e:	601a      	str	r2, [r3, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	200062e4 	.word	0x200062e4
 800aa90:	20006390 	.word	0x20006390

0800aa94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f103 0208 	add.w	r2, r3, #8
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f103 0208 	add.w	r2, r3, #8
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f103 0208 	add.w	r2, r3, #8
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aae2:	bf00      	nop
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b085      	sub	sp, #20
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	601a      	str	r2, [r3, #0]
}
 800ab2a:	bf00      	nop
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab36:	b480      	push	{r7}
 800ab38:	b085      	sub	sp, #20
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4c:	d103      	bne.n	800ab56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	e00c      	b.n	800ab70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3308      	adds	r3, #8
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	e002      	b.n	800ab64 <vListInsert+0x2e>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d2f6      	bcs.n	800ab5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	601a      	str	r2, [r3, #0]
}
 800ab9c:	bf00      	nop
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	6892      	ldr	r2, [r2, #8]
 800abbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6852      	ldr	r2, [r2, #4]
 800abc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d103      	bne.n	800abdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	689a      	ldr	r2, [r3, #8]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	1e5a      	subs	r2, r3, #1
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10b      	bne.n	800ac28 <xQueueGenericReset+0x2c>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60bb      	str	r3, [r7, #8]
}
 800ac22:	bf00      	nop
 800ac24:	bf00      	nop
 800ac26:	e7fd      	b.n	800ac24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac28:	f002 fd56 	bl	800d6d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac34:	68f9      	ldr	r1, [r7, #12]
 800ac36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac38:	fb01 f303 	mul.w	r3, r1, r3
 800ac3c:	441a      	add	r2, r3
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	68f9      	ldr	r1, [r7, #12]
 800ac5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac5e:	fb01 f303 	mul.w	r3, r1, r3
 800ac62:	441a      	add	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	22ff      	movs	r2, #255	@ 0xff
 800ac6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	22ff      	movs	r2, #255	@ 0xff
 800ac74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d114      	bne.n	800aca8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d01a      	beq.n	800acbc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3310      	adds	r3, #16
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f001 fcf0 	bl	800c670 <xTaskRemoveFromEventList>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d012      	beq.n	800acbc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac96:	4b0d      	ldr	r3, [pc, #52]	@ (800accc <xQueueGenericReset+0xd0>)
 800ac98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	e009      	b.n	800acbc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3310      	adds	r3, #16
 800acac:	4618      	mov	r0, r3
 800acae:	f7ff fef1 	bl	800aa94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3324      	adds	r3, #36	@ 0x24
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff feec 	bl	800aa94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acbc:	f002 fd3e 	bl	800d73c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acc0:	2301      	movs	r3, #1
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	e000ed04 	.word	0xe000ed04

0800acd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08e      	sub	sp, #56	@ 0x38
 800acd4:	af02      	add	r7, sp, #8
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10b      	bne.n	800acfc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800acf6:	bf00      	nop
 800acf8:	bf00      	nop
 800acfa:	e7fd      	b.n	800acf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10b      	bne.n	800ad1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop
 800ad18:	e7fd      	b.n	800ad16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <xQueueGenericCreateStatic+0x56>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <xQueueGenericCreateStatic+0x5a>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <xQueueGenericCreateStatic+0x5c>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10b      	bne.n	800ad48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ad30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	623b      	str	r3, [r7, #32]
}
 800ad42:	bf00      	nop
 800ad44:	bf00      	nop
 800ad46:	e7fd      	b.n	800ad44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d102      	bne.n	800ad54 <xQueueGenericCreateStatic+0x84>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d101      	bne.n	800ad58 <xQueueGenericCreateStatic+0x88>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e000      	b.n	800ad5a <xQueueGenericCreateStatic+0x8a>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10b      	bne.n	800ad76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	61fb      	str	r3, [r7, #28]
}
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
 800ad74:	e7fd      	b.n	800ad72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad76:	2350      	movs	r3, #80	@ 0x50
 800ad78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2b50      	cmp	r3, #80	@ 0x50
 800ad7e:	d00b      	beq.n	800ad98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	61bb      	str	r3, [r7, #24]
}
 800ad92:	bf00      	nop
 800ad94:	bf00      	nop
 800ad96:	e7fd      	b.n	800ad94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ad9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00d      	beq.n	800adc0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ada4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800adb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	4613      	mov	r3, r2
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	68b9      	ldr	r1, [r7, #8]
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f000 f840 	bl	800ae40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3730      	adds	r7, #48	@ 0x30
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b08a      	sub	sp, #40	@ 0x28
 800adce:	af02      	add	r7, sp, #8
 800add0:	60f8      	str	r0, [r7, #12]
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	4613      	mov	r3, r2
 800add6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10b      	bne.n	800adf6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	613b      	str	r3, [r7, #16]
}
 800adf0:	bf00      	nop
 800adf2:	bf00      	nop
 800adf4:	e7fd      	b.n	800adf2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	fb02 f303 	mul.w	r3, r2, r3
 800adfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	3350      	adds	r3, #80	@ 0x50
 800ae04:	4618      	mov	r0, r3
 800ae06:	f002 fd89 	bl	800d91c <pvPortMalloc>
 800ae0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d011      	beq.n	800ae36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	3350      	adds	r3, #80	@ 0x50
 800ae1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae24:	79fa      	ldrb	r2, [r7, #7]
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	68b9      	ldr	r1, [r7, #8]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 f805 	bl	800ae40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae36:	69bb      	ldr	r3, [r7, #24]
	}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3720      	adds	r7, #32
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d103      	bne.n	800ae5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	e002      	b.n	800ae62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae6e:	2101      	movs	r1, #1
 800ae70:	69b8      	ldr	r0, [r7, #24]
 800ae72:	f7ff fec3 	bl	800abfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	78fa      	ldrb	r2, [r7, #3]
 800ae7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae7e:	bf00      	nop
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00e      	beq.n	800aeb2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aea6:	2300      	movs	r3, #0
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2100      	movs	r1, #0
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f8a5 	bl	800affc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aeb2:	bf00      	nop
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b086      	sub	sp, #24
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	4603      	mov	r3, r0
 800aec2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aec4:	2301      	movs	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	2300      	movs	r3, #0
 800aeca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aecc:	79fb      	ldrb	r3, [r7, #7]
 800aece:	461a      	mov	r2, r3
 800aed0:	6939      	ldr	r1, [r7, #16]
 800aed2:	6978      	ldr	r0, [r7, #20]
 800aed4:	f7ff ff79 	bl	800adca <xQueueGenericCreate>
 800aed8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f7ff ffd3 	bl	800ae86 <prvInitialiseMutex>

		return xNewQueue;
 800aee0:	68fb      	ldr	r3, [r7, #12]
	}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b088      	sub	sp, #32
 800aeee:	af02      	add	r7, sp, #8
 800aef0:	4603      	mov	r3, r0
 800aef2:	6039      	str	r1, [r7, #0]
 800aef4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aef6:	2301      	movs	r3, #1
 800aef8:	617b      	str	r3, [r7, #20]
 800aefa:	2300      	movs	r3, #0
 800aefc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2200      	movs	r2, #0
 800af06:	6939      	ldr	r1, [r7, #16]
 800af08:	6978      	ldr	r0, [r7, #20]
 800af0a:	f7ff fee1 	bl	800acd0 <xQueueGenericCreateStatic>
 800af0e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff ffb8 	bl	800ae86 <prvInitialiseMutex>

		return xNewQueue;
 800af16:	68fb      	ldr	r3, [r7, #12]
	}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08a      	sub	sp, #40	@ 0x28
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10b      	bne.n	800af4a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	61bb      	str	r3, [r7, #24]
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop
 800af48:	e7fd      	b.n	800af46 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d90b      	bls.n	800af6a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	617b      	str	r3, [r7, #20]
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	e7fd      	b.n	800af66 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800af6a:	2302      	movs	r3, #2
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	2100      	movs	r1, #0
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff feab 	bl	800acd0 <xQueueGenericCreateStatic>
 800af7a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800af88:	69fb      	ldr	r3, [r7, #28]
	}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3720      	adds	r7, #32
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800af92:	b580      	push	{r7, lr}
 800af94:	b086      	sub	sp, #24
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10b      	bne.n	800afba <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	613b      	str	r3, [r7, #16]
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	e7fd      	b.n	800afb6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d90b      	bls.n	800afda <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	60fb      	str	r3, [r7, #12]
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop
 800afd8:	e7fd      	b.n	800afd6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800afda:	2202      	movs	r2, #2
 800afdc:	2100      	movs	r1, #0
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff fef3 	bl	800adca <xQueueGenericCreate>
 800afe4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aff2:	697b      	ldr	r3, [r7, #20]
	}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b08e      	sub	sp, #56	@ 0x38
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b00a:	2300      	movs	r3, #0
 800b00c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10b      	bne.n	800b030 <xQueueGenericSend+0x34>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b02a:	bf00      	nop
 800b02c:	bf00      	nop
 800b02e:	e7fd      	b.n	800b02c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d103      	bne.n	800b03e <xQueueGenericSend+0x42>
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <xQueueGenericSend+0x46>
 800b03e:	2301      	movs	r3, #1
 800b040:	e000      	b.n	800b044 <xQueueGenericSend+0x48>
 800b042:	2300      	movs	r3, #0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10b      	bne.n	800b060 <xQueueGenericSend+0x64>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
 800b05e:	e7fd      	b.n	800b05c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b02      	cmp	r3, #2
 800b064:	d103      	bne.n	800b06e <xQueueGenericSend+0x72>
 800b066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <xQueueGenericSend+0x76>
 800b06e:	2301      	movs	r3, #1
 800b070:	e000      	b.n	800b074 <xQueueGenericSend+0x78>
 800b072:	2300      	movs	r3, #0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10b      	bne.n	800b090 <xQueueGenericSend+0x94>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	623b      	str	r3, [r7, #32]
}
 800b08a:	bf00      	nop
 800b08c:	bf00      	nop
 800b08e:	e7fd      	b.n	800b08c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b090:	f001 fcb4 	bl	800c9fc <xTaskGetSchedulerState>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d102      	bne.n	800b0a0 <xQueueGenericSend+0xa4>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <xQueueGenericSend+0xa8>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e000      	b.n	800b0a6 <xQueueGenericSend+0xaa>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10b      	bne.n	800b0c2 <xQueueGenericSend+0xc6>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	61fb      	str	r3, [r7, #28]
}
 800b0bc:	bf00      	nop
 800b0be:	bf00      	nop
 800b0c0:	e7fd      	b.n	800b0be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0c2:	f002 fb09 	bl	800d6d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d302      	bcc.n	800b0d8 <xQueueGenericSend+0xdc>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d129      	bne.n	800b12c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0de:	f000 fc6d 	bl	800b9bc <prvCopyDataToQueue>
 800b0e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d010      	beq.n	800b10e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ee:	3324      	adds	r3, #36	@ 0x24
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f001 fabd 	bl	800c670 <xTaskRemoveFromEventList>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d013      	beq.n	800b124 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b0fc:	4b3f      	ldr	r3, [pc, #252]	@ (800b1fc <xQueueGenericSend+0x200>)
 800b0fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	e00a      	b.n	800b124 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b110:	2b00      	cmp	r3, #0
 800b112:	d007      	beq.n	800b124 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b114:	4b39      	ldr	r3, [pc, #228]	@ (800b1fc <xQueueGenericSend+0x200>)
 800b116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b124:	f002 fb0a 	bl	800d73c <vPortExitCritical>
				return pdPASS;
 800b128:	2301      	movs	r3, #1
 800b12a:	e063      	b.n	800b1f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d103      	bne.n	800b13a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b132:	f002 fb03 	bl	800d73c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b136:	2300      	movs	r3, #0
 800b138:	e05c      	b.n	800b1f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d106      	bne.n	800b14e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b140:	f107 0314 	add.w	r3, r7, #20
 800b144:	4618      	mov	r0, r3
 800b146:	f001 faf7 	bl	800c738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b14a:	2301      	movs	r3, #1
 800b14c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b14e:	f002 faf5 	bl	800d73c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b152:	f001 f833 	bl	800c1bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b156:	f002 fabf 	bl	800d6d8 <vPortEnterCritical>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b160:	b25b      	sxtb	r3, r3
 800b162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b166:	d103      	bne.n	800b170 <xQueueGenericSend+0x174>
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b176:	b25b      	sxtb	r3, r3
 800b178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17c:	d103      	bne.n	800b186 <xQueueGenericSend+0x18a>
 800b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b186:	f002 fad9 	bl	800d73c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b18a:	1d3a      	adds	r2, r7, #4
 800b18c:	f107 0314 	add.w	r3, r7, #20
 800b190:	4611      	mov	r1, r2
 800b192:	4618      	mov	r0, r3
 800b194:	f001 fae6 	bl	800c764 <xTaskCheckForTimeOut>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d124      	bne.n	800b1e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b19e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1a0:	f000 fd04 	bl	800bbac <prvIsQueueFull>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d018      	beq.n	800b1dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ac:	3310      	adds	r3, #16
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f001 fa0a 	bl	800c5cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1ba:	f000 fc8f 	bl	800badc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1be:	f001 f80b 	bl	800c1d8 <xTaskResumeAll>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f47f af7c 	bne.w	800b0c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b1fc <xQueueGenericSend+0x200>)
 800b1cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	e772      	b.n	800b0c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1de:	f000 fc7d 	bl	800badc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1e2:	f000 fff9 	bl	800c1d8 <xTaskResumeAll>
 800b1e6:	e76c      	b.n	800b0c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1ea:	f000 fc77 	bl	800badc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1ee:	f000 fff3 	bl	800c1d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3738      	adds	r7, #56	@ 0x38
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	e000ed04 	.word	0xe000ed04

0800b200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b090      	sub	sp, #64	@ 0x40
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10b      	bne.n	800b230 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b22a:	bf00      	nop
 800b22c:	bf00      	nop
 800b22e:	e7fd      	b.n	800b22c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d103      	bne.n	800b23e <xQueueGenericSendFromISR+0x3e>
 800b236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <xQueueGenericSendFromISR+0x42>
 800b23e:	2301      	movs	r3, #1
 800b240:	e000      	b.n	800b244 <xQueueGenericSendFromISR+0x44>
 800b242:	2300      	movs	r3, #0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10b      	bne.n	800b260 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b25a:	bf00      	nop
 800b25c:	bf00      	nop
 800b25e:	e7fd      	b.n	800b25c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2b02      	cmp	r3, #2
 800b264:	d103      	bne.n	800b26e <xQueueGenericSendFromISR+0x6e>
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d101      	bne.n	800b272 <xQueueGenericSendFromISR+0x72>
 800b26e:	2301      	movs	r3, #1
 800b270:	e000      	b.n	800b274 <xQueueGenericSendFromISR+0x74>
 800b272:	2300      	movs	r3, #0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10b      	bne.n	800b290 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	623b      	str	r3, [r7, #32]
}
 800b28a:	bf00      	nop
 800b28c:	bf00      	nop
 800b28e:	e7fd      	b.n	800b28c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b290:	f002 fb02 	bl	800d898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b294:	f3ef 8211 	mrs	r2, BASEPRI
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	61fa      	str	r2, [r7, #28]
 800b2aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d302      	bcc.n	800b2c2 <xQueueGenericSendFromISR+0xc2>
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d12f      	bne.n	800b322 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	68b9      	ldr	r1, [r7, #8]
 800b2d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2d8:	f000 fb70 	bl	800b9bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e4:	d112      	bne.n	800b30c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d016      	beq.n	800b31c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	3324      	adds	r3, #36	@ 0x24
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f001 f9bc 	bl	800c670 <xTaskRemoveFromEventList>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00e      	beq.n	800b31c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00b      	beq.n	800b31c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	e007      	b.n	800b31c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b30c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b310:	3301      	adds	r3, #1
 800b312:	b2db      	uxtb	r3, r3
 800b314:	b25a      	sxtb	r2, r3
 800b316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b31c:	2301      	movs	r3, #1
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b320:	e001      	b.n	800b326 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b322:	2300      	movs	r3, #0
 800b324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b328:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b330:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b334:	4618      	mov	r0, r3
 800b336:	3740      	adds	r7, #64	@ 0x40
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08e      	sub	sp, #56	@ 0x38
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10b      	bne.n	800b368 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	623b      	str	r3, [r7, #32]
}
 800b362:	bf00      	nop
 800b364:	bf00      	nop
 800b366:	e7fd      	b.n	800b364 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00b      	beq.n	800b388 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	61fb      	str	r3, [r7, #28]
}
 800b382:	bf00      	nop
 800b384:	bf00      	nop
 800b386:	e7fd      	b.n	800b384 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d103      	bne.n	800b398 <xQueueGiveFromISR+0x5c>
 800b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <xQueueGiveFromISR+0x60>
 800b398:	2301      	movs	r3, #1
 800b39a:	e000      	b.n	800b39e <xQueueGiveFromISR+0x62>
 800b39c:	2300      	movs	r3, #0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10b      	bne.n	800b3ba <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	61bb      	str	r3, [r7, #24]
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	e7fd      	b.n	800b3b6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3ba:	f002 fa6d 	bl	800d898 <vPortValidateInterruptPriority>
	__asm volatile
 800b3be:	f3ef 8211 	mrs	r2, BASEPRI
 800b3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	617a      	str	r2, [r7, #20]
 800b3d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b3d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d22b      	bcs.n	800b442 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	1c5a      	adds	r2, r3, #1
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b404:	d112      	bne.n	800b42c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d016      	beq.n	800b43c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b410:	3324      	adds	r3, #36	@ 0x24
 800b412:	4618      	mov	r0, r3
 800b414:	f001 f92c 	bl	800c670 <xTaskRemoveFromEventList>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00e      	beq.n	800b43c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00b      	beq.n	800b43c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2201      	movs	r2, #1
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	e007      	b.n	800b43c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b42c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b430:	3301      	adds	r3, #1
 800b432:	b2db      	uxtb	r3, r3
 800b434:	b25a      	sxtb	r2, r3
 800b436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b43c:	2301      	movs	r3, #1
 800b43e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b440:	e001      	b.n	800b446 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b442:	2300      	movs	r3, #0
 800b444:	637b      	str	r3, [r7, #52]	@ 0x34
 800b446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b448:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f383 8811 	msr	BASEPRI, r3
}
 800b450:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b454:	4618      	mov	r0, r3
 800b456:	3738      	adds	r7, #56	@ 0x38
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08c      	sub	sp, #48	@ 0x30
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b468:	2300      	movs	r3, #0
 800b46a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10b      	bne.n	800b48e <xQueueReceive+0x32>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	623b      	str	r3, [r7, #32]
}
 800b488:	bf00      	nop
 800b48a:	bf00      	nop
 800b48c:	e7fd      	b.n	800b48a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d103      	bne.n	800b49c <xQueueReceive+0x40>
 800b494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <xQueueReceive+0x44>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e000      	b.n	800b4a2 <xQueueReceive+0x46>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10b      	bne.n	800b4be <xQueueReceive+0x62>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	61fb      	str	r3, [r7, #28]
}
 800b4b8:	bf00      	nop
 800b4ba:	bf00      	nop
 800b4bc:	e7fd      	b.n	800b4ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4be:	f001 fa9d 	bl	800c9fc <xTaskGetSchedulerState>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <xQueueReceive+0x72>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <xQueueReceive+0x76>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e000      	b.n	800b4d4 <xQueueReceive+0x78>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10b      	bne.n	800b4f0 <xQueueReceive+0x94>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	61bb      	str	r3, [r7, #24]
}
 800b4ea:	bf00      	nop
 800b4ec:	bf00      	nop
 800b4ee:	e7fd      	b.n	800b4ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4f0:	f002 f8f2 	bl	800d6d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01f      	beq.n	800b540 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b500:	68b9      	ldr	r1, [r7, #8]
 800b502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b504:	f000 fac4 	bl	800ba90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50a:	1e5a      	subs	r2, r3, #1
 800b50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00f      	beq.n	800b538 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51a:	3310      	adds	r3, #16
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 f8a7 	bl	800c670 <xTaskRemoveFromEventList>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d007      	beq.n	800b538 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b528:	4b3c      	ldr	r3, [pc, #240]	@ (800b61c <xQueueReceive+0x1c0>)
 800b52a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b538:	f002 f900 	bl	800d73c <vPortExitCritical>
				return pdPASS;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e069      	b.n	800b614 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d103      	bne.n	800b54e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b546:	f002 f8f9 	bl	800d73c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e062      	b.n	800b614 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b550:	2b00      	cmp	r3, #0
 800b552:	d106      	bne.n	800b562 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b554:	f107 0310 	add.w	r3, r7, #16
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 f8ed 	bl	800c738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b55e:	2301      	movs	r3, #1
 800b560:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b562:	f002 f8eb 	bl	800d73c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b566:	f000 fe29 	bl	800c1bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b56a:	f002 f8b5 	bl	800d6d8 <vPortEnterCritical>
 800b56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b574:	b25b      	sxtb	r3, r3
 800b576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57a:	d103      	bne.n	800b584 <xQueueReceive+0x128>
 800b57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b58a:	b25b      	sxtb	r3, r3
 800b58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b590:	d103      	bne.n	800b59a <xQueueReceive+0x13e>
 800b592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b59a:	f002 f8cf 	bl	800d73c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b59e:	1d3a      	adds	r2, r7, #4
 800b5a0:	f107 0310 	add.w	r3, r7, #16
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f001 f8dc 	bl	800c764 <xTaskCheckForTimeOut>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d123      	bne.n	800b5fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5b4:	f000 fae4 	bl	800bb80 <prvIsQueueEmpty>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d017      	beq.n	800b5ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c0:	3324      	adds	r3, #36	@ 0x24
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f001 f800 	bl	800c5cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5ce:	f000 fa85 	bl	800badc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5d2:	f000 fe01 	bl	800c1d8 <xTaskResumeAll>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d189      	bne.n	800b4f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b5dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b61c <xQueueReceive+0x1c0>)
 800b5de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	e780      	b.n	800b4f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b5ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5f0:	f000 fa74 	bl	800badc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5f4:	f000 fdf0 	bl	800c1d8 <xTaskResumeAll>
 800b5f8:	e77a      	b.n	800b4f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5fc:	f000 fa6e 	bl	800badc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b600:	f000 fdea 	bl	800c1d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b606:	f000 fabb 	bl	800bb80 <prvIsQueueEmpty>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f43f af6f 	beq.w	800b4f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b612:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b614:	4618      	mov	r0, r3
 800b616:	3730      	adds	r7, #48	@ 0x30
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	e000ed04 	.word	0xe000ed04

0800b620 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08e      	sub	sp, #56	@ 0x38
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b62a:	2300      	movs	r3, #0
 800b62c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b632:	2300      	movs	r3, #0
 800b634:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10b      	bne.n	800b654 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	623b      	str	r3, [r7, #32]
}
 800b64e:	bf00      	nop
 800b650:	bf00      	nop
 800b652:	e7fd      	b.n	800b650 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00b      	beq.n	800b674 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	61fb      	str	r3, [r7, #28]
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	e7fd      	b.n	800b670 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b674:	f001 f9c2 	bl	800c9fc <xTaskGetSchedulerState>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d102      	bne.n	800b684 <xQueueSemaphoreTake+0x64>
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <xQueueSemaphoreTake+0x68>
 800b684:	2301      	movs	r3, #1
 800b686:	e000      	b.n	800b68a <xQueueSemaphoreTake+0x6a>
 800b688:	2300      	movs	r3, #0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10b      	bne.n	800b6a6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	61bb      	str	r3, [r7, #24]
}
 800b6a0:	bf00      	nop
 800b6a2:	bf00      	nop
 800b6a4:	e7fd      	b.n	800b6a2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6a6:	f002 f817 	bl	800d6d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d024      	beq.n	800b700 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b8:	1e5a      	subs	r2, r3, #1
 800b6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d104      	bne.n	800b6d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b6c6:	f001 fb13 	bl	800ccf0 <pvTaskIncrementMutexHeldCount>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00f      	beq.n	800b6f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6da:	3310      	adds	r3, #16
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 ffc7 	bl	800c670 <xTaskRemoveFromEventList>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d007      	beq.n	800b6f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6e8:	4b54      	ldr	r3, [pc, #336]	@ (800b83c <xQueueSemaphoreTake+0x21c>)
 800b6ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6f8:	f002 f820 	bl	800d73c <vPortExitCritical>
				return pdPASS;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e098      	b.n	800b832 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d112      	bne.n	800b72c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00b      	beq.n	800b724 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	617b      	str	r3, [r7, #20]
}
 800b71e:	bf00      	nop
 800b720:	bf00      	nop
 800b722:	e7fd      	b.n	800b720 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b724:	f002 f80a 	bl	800d73c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b728:	2300      	movs	r3, #0
 800b72a:	e082      	b.n	800b832 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b732:	f107 030c 	add.w	r3, r7, #12
 800b736:	4618      	mov	r0, r3
 800b738:	f000 fffe 	bl	800c738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b740:	f001 fffc 	bl	800d73c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b744:	f000 fd3a 	bl	800c1bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b748:	f001 ffc6 	bl	800d6d8 <vPortEnterCritical>
 800b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b752:	b25b      	sxtb	r3, r3
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d103      	bne.n	800b762 <xQueueSemaphoreTake+0x142>
 800b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d103      	bne.n	800b778 <xQueueSemaphoreTake+0x158>
 800b770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b778:	f001 ffe0 	bl	800d73c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b77c:	463a      	mov	r2, r7
 800b77e:	f107 030c 	add.w	r3, r7, #12
 800b782:	4611      	mov	r1, r2
 800b784:	4618      	mov	r0, r3
 800b786:	f000 ffed 	bl	800c764 <xTaskCheckForTimeOut>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d132      	bne.n	800b7f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b790:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b792:	f000 f9f5 	bl	800bb80 <prvIsQueueEmpty>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d026      	beq.n	800b7ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d109      	bne.n	800b7b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b7a4:	f001 ff98 	bl	800d6d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 f943 	bl	800ca38 <xTaskPriorityInherit>
 800b7b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b7b4:	f001 ffc2 	bl	800d73c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ba:	3324      	adds	r3, #36	@ 0x24
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f000 ff03 	bl	800c5cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7c8:	f000 f988 	bl	800badc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7cc:	f000 fd04 	bl	800c1d8 <xTaskResumeAll>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f47f af67 	bne.w	800b6a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b7d8:	4b18      	ldr	r3, [pc, #96]	@ (800b83c <xQueueSemaphoreTake+0x21c>)
 800b7da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	e75d      	b.n	800b6a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b7ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7ec:	f000 f976 	bl	800badc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7f0:	f000 fcf2 	bl	800c1d8 <xTaskResumeAll>
 800b7f4:	e757      	b.n	800b6a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b7f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7f8:	f000 f970 	bl	800badc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7fc:	f000 fcec 	bl	800c1d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b802:	f000 f9bd 	bl	800bb80 <prvIsQueueEmpty>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f43f af4c 	beq.w	800b6a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00d      	beq.n	800b830 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b814:	f001 ff60 	bl	800d6d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b818:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b81a:	f000 f8b7 	bl	800b98c <prvGetDisinheritPriorityAfterTimeout>
 800b81e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b826:	4618      	mov	r0, r3
 800b828:	f001 f9de 	bl	800cbe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b82c:	f001 ff86 	bl	800d73c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b832:	4618      	mov	r0, r3
 800b834:	3738      	adds	r7, #56	@ 0x38
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	e000ed04 	.word	0xe000ed04

0800b840 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b08e      	sub	sp, #56	@ 0x38
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10b      	bne.n	800b86e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	623b      	str	r3, [r7, #32]
}
 800b868:	bf00      	nop
 800b86a:	bf00      	nop
 800b86c:	e7fd      	b.n	800b86a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d103      	bne.n	800b87c <xQueueReceiveFromISR+0x3c>
 800b874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <xQueueReceiveFromISR+0x40>
 800b87c:	2301      	movs	r3, #1
 800b87e:	e000      	b.n	800b882 <xQueueReceiveFromISR+0x42>
 800b880:	2300      	movs	r3, #0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10b      	bne.n	800b89e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	61fb      	str	r3, [r7, #28]
}
 800b898:	bf00      	nop
 800b89a:	bf00      	nop
 800b89c:	e7fd      	b.n	800b89a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b89e:	f001 fffb 	bl	800d898 <vPortValidateInterruptPriority>
	__asm volatile
 800b8a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	61ba      	str	r2, [r7, #24]
 800b8b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b8ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d02f      	beq.n	800b92a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b8d4:	68b9      	ldr	r1, [r7, #8]
 800b8d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b8d8:	f000 f8da 	bl	800ba90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	1e5a      	subs	r2, r3, #1
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b8e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d112      	bne.n	800b914 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d016      	beq.n	800b924 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f8:	3310      	adds	r3, #16
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f000 feb8 	bl	800c670 <xTaskRemoveFromEventList>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00e      	beq.n	800b924 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00b      	beq.n	800b924 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	e007      	b.n	800b924 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b918:	3301      	adds	r3, #1
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	b25a      	sxtb	r2, r3
 800b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b924:	2301      	movs	r3, #1
 800b926:	637b      	str	r3, [r7, #52]	@ 0x34
 800b928:	e001      	b.n	800b92e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b930:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f383 8811 	msr	BASEPRI, r3
}
 800b938:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3738      	adds	r7, #56	@ 0x38
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10b      	bne.n	800b96e <vQueueDelete+0x2a>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	60bb      	str	r3, [r7, #8]
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	e7fd      	b.n	800b96a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f000 f95e 	bl	800bc30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d102      	bne.n	800b984 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f002 f89a 	bl	800dab8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b984:	bf00      	nop
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d006      	beq.n	800b9aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	e001      	b.n	800b9ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
	}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3714      	adds	r7, #20
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10d      	bne.n	800b9f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d14d      	bne.n	800ba7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f001 f88e 	bl	800cb08 <xTaskPriorityDisinherit>
 800b9ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	609a      	str	r2, [r3, #8]
 800b9f4:	e043      	b.n	800ba7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d119      	bne.n	800ba30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6858      	ldr	r0, [r3, #4]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba04:	461a      	mov	r2, r3
 800ba06:	68b9      	ldr	r1, [r7, #8]
 800ba08:	f003 fd61 	bl	800f4ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba14:	441a      	add	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d32b      	bcc.n	800ba7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	605a      	str	r2, [r3, #4]
 800ba2e:	e026      	b.n	800ba7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	68d8      	ldr	r0, [r3, #12]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba38:	461a      	mov	r2, r3
 800ba3a:	68b9      	ldr	r1, [r7, #8]
 800ba3c:	f003 fd47 	bl	800f4ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba48:	425b      	negs	r3, r3
 800ba4a:	441a      	add	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68da      	ldr	r2, [r3, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d207      	bcs.n	800ba6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	689a      	ldr	r2, [r3, #8]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba64:	425b      	negs	r3, r3
 800ba66:	441a      	add	r2, r3
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d105      	bne.n	800ba7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ba86:	697b      	ldr	r3, [r7, #20]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d018      	beq.n	800bad4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68da      	ldr	r2, [r3, #12]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baaa:	441a      	add	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	68da      	ldr	r2, [r3, #12]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d303      	bcc.n	800bac4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	68d9      	ldr	r1, [r3, #12]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bacc:	461a      	mov	r2, r3
 800bace:	6838      	ldr	r0, [r7, #0]
 800bad0:	f003 fcfd 	bl	800f4ce <memcpy>
	}
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bae4:	f001 fdf8 	bl	800d6d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800baee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800baf0:	e011      	b.n	800bb16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d012      	beq.n	800bb20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	3324      	adds	r3, #36	@ 0x24
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fdb6 	bl	800c670 <xTaskRemoveFromEventList>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb0a:	f000 fe8f 	bl	800c82c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	dce9      	bgt.n	800baf2 <prvUnlockQueue+0x16>
 800bb1e:	e000      	b.n	800bb22 <prvUnlockQueue+0x46>
					break;
 800bb20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	22ff      	movs	r2, #255	@ 0xff
 800bb26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bb2a:	f001 fe07 	bl	800d73c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb2e:	f001 fdd3 	bl	800d6d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb3a:	e011      	b.n	800bb60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d012      	beq.n	800bb6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3310      	adds	r3, #16
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fd91 	bl	800c670 <xTaskRemoveFromEventList>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb54:	f000 fe6a 	bl	800c82c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dce9      	bgt.n	800bb3c <prvUnlockQueue+0x60>
 800bb68:	e000      	b.n	800bb6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	22ff      	movs	r2, #255	@ 0xff
 800bb70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bb74:	f001 fde2 	bl	800d73c <vPortExitCritical>
}
 800bb78:	bf00      	nop
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb88:	f001 fda6 	bl	800d6d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb94:	2301      	movs	r3, #1
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	e001      	b.n	800bb9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb9e:	f001 fdcd 	bl	800d73c <vPortExitCritical>

	return xReturn;
 800bba2:	68fb      	ldr	r3, [r7, #12]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbb4:	f001 fd90 	bl	800d6d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d102      	bne.n	800bbca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	60fb      	str	r3, [r7, #12]
 800bbc8:	e001      	b.n	800bbce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbce:	f001 fdb5 	bl	800d73c <vPortExitCritical>

	return xReturn;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	e014      	b.n	800bc16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bbec:	4a0f      	ldr	r2, [pc, #60]	@ (800bc2c <vQueueAddToRegistry+0x50>)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10b      	bne.n	800bc10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bbf8:	490c      	ldr	r1, [pc, #48]	@ (800bc2c <vQueueAddToRegistry+0x50>)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc02:	4a0a      	ldr	r2, [pc, #40]	@ (800bc2c <vQueueAddToRegistry+0x50>)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	00db      	lsls	r3, r3, #3
 800bc08:	4413      	add	r3, r2
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc0e:	e006      	b.n	800bc1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3301      	adds	r3, #1
 800bc14:	60fb      	str	r3, [r7, #12]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b07      	cmp	r3, #7
 800bc1a:	d9e7      	bls.n	800bbec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc1c:	bf00      	nop
 800bc1e:	bf00      	nop
 800bc20:	3714      	adds	r7, #20
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	20007390 	.word	0x20007390

0800bc30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	e016      	b.n	800bc6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bc3e:	4a10      	ldr	r2, [pc, #64]	@ (800bc80 <vQueueUnregisterQueue+0x50>)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	00db      	lsls	r3, r3, #3
 800bc44:	4413      	add	r3, r2
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d10b      	bne.n	800bc66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bc4e:	4a0c      	ldr	r2, [pc, #48]	@ (800bc80 <vQueueUnregisterQueue+0x50>)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2100      	movs	r1, #0
 800bc54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bc58:	4a09      	ldr	r2, [pc, #36]	@ (800bc80 <vQueueUnregisterQueue+0x50>)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	00db      	lsls	r3, r3, #3
 800bc5e:	4413      	add	r3, r2
 800bc60:	2200      	movs	r2, #0
 800bc62:	605a      	str	r2, [r3, #4]
				break;
 800bc64:	e006      	b.n	800bc74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b07      	cmp	r3, #7
 800bc70:	d9e5      	bls.n	800bc3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bc72:	bf00      	nop
 800bc74:	bf00      	nop
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	20007390 	.word	0x20007390

0800bc84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc94:	f001 fd20 	bl	800d6d8 <vPortEnterCritical>
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc9e:	b25b      	sxtb	r3, r3
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d103      	bne.n	800bcae <vQueueWaitForMessageRestricted+0x2a>
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcb4:	b25b      	sxtb	r3, r3
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d103      	bne.n	800bcc4 <vQueueWaitForMessageRestricted+0x40>
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bcc4:	f001 fd3a 	bl	800d73c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d106      	bne.n	800bcde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	3324      	adds	r3, #36	@ 0x24
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 fc9d 	bl	800c618 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bcde:	6978      	ldr	r0, [r7, #20]
 800bce0:	f7ff fefc 	bl	800badc <prvUnlockQueue>
	}
 800bce4:	bf00      	nop
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08e      	sub	sp, #56	@ 0x38
 800bcf0:	af04      	add	r7, sp, #16
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bcfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10b      	bne.n	800bd18 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	623b      	str	r3, [r7, #32]
}
 800bd12:	bf00      	nop
 800bd14:	bf00      	nop
 800bd16:	e7fd      	b.n	800bd14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10b      	bne.n	800bd36 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	61fb      	str	r3, [r7, #28]
}
 800bd30:	bf00      	nop
 800bd32:	bf00      	nop
 800bd34:	e7fd      	b.n	800bd32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd36:	23ac      	movs	r3, #172	@ 0xac
 800bd38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	2bac      	cmp	r3, #172	@ 0xac
 800bd3e:	d00b      	beq.n	800bd58 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	61bb      	str	r3, [r7, #24]
}
 800bd52:	bf00      	nop
 800bd54:	bf00      	nop
 800bd56:	e7fd      	b.n	800bd54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d01e      	beq.n	800bd9e <xTaskCreateStatic+0xb2>
 800bd60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d01b      	beq.n	800bd9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd72:	2202      	movs	r2, #2
 800bd74:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9303      	str	r3, [sp, #12]
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7e:	9302      	str	r3, [sp, #8]
 800bd80:	f107 0314 	add.w	r3, r7, #20
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	68b9      	ldr	r1, [r7, #8]
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 f851 	bl	800be38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd98:	f000 f8f8 	bl	800bf8c <prvAddNewTaskToReadyList>
 800bd9c:	e001      	b.n	800bda2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bda2:	697b      	ldr	r3, [r7, #20]
	}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3728      	adds	r7, #40	@ 0x28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b08c      	sub	sp, #48	@ 0x30
 800bdb0:	af04      	add	r7, sp, #16
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	603b      	str	r3, [r7, #0]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bdbc:	88fb      	ldrh	r3, [r7, #6]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f001 fdab 	bl	800d91c <pvPortMalloc>
 800bdc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00e      	beq.n	800bdec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bdce:	20ac      	movs	r0, #172	@ 0xac
 800bdd0:	f001 fda4 	bl	800d91c <pvPortMalloc>
 800bdd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d003      	beq.n	800bde4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	631a      	str	r2, [r3, #48]	@ 0x30
 800bde2:	e005      	b.n	800bdf0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bde4:	6978      	ldr	r0, [r7, #20]
 800bde6:	f001 fe67 	bl	800dab8 <vPortFree>
 800bdea:	e001      	b.n	800bdf0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bdec:	2300      	movs	r3, #0
 800bdee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d017      	beq.n	800be26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bdfe:	88fa      	ldrh	r2, [r7, #6]
 800be00:	2300      	movs	r3, #0
 800be02:	9303      	str	r3, [sp, #12]
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	9302      	str	r3, [sp, #8]
 800be08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	68b9      	ldr	r1, [r7, #8]
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 f80f 	bl	800be38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be1a:	69f8      	ldr	r0, [r7, #28]
 800be1c:	f000 f8b6 	bl	800bf8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be20:	2301      	movs	r3, #1
 800be22:	61bb      	str	r3, [r7, #24]
 800be24:	e002      	b.n	800be2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be26:	f04f 33ff 	mov.w	r3, #4294967295
 800be2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be2c:	69bb      	ldr	r3, [r7, #24]
	}
 800be2e:	4618      	mov	r0, r3
 800be30:	3720      	adds	r7, #32
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
	...

0800be38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be48:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	461a      	mov	r2, r3
 800be50:	21a5      	movs	r1, #165	@ 0xa5
 800be52:	f003 f9d9 	bl	800f208 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be60:	3b01      	subs	r3, #1
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	f023 0307 	bic.w	r3, r3, #7
 800be6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00b      	beq.n	800be92 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800be7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
 800be8a:	617b      	str	r3, [r7, #20]
}
 800be8c:	bf00      	nop
 800be8e:	bf00      	nop
 800be90:	e7fd      	b.n	800be8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01f      	beq.n	800bed8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be98:	2300      	movs	r3, #0
 800be9a:	61fb      	str	r3, [r7, #28]
 800be9c:	e012      	b.n	800bec4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	4413      	add	r3, r2
 800bea4:	7819      	ldrb	r1, [r3, #0]
 800bea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	4413      	add	r3, r2
 800beac:	3334      	adds	r3, #52	@ 0x34
 800beae:	460a      	mov	r2, r1
 800beb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	4413      	add	r3, r2
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d006      	beq.n	800becc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	3301      	adds	r3, #1
 800bec2:	61fb      	str	r3, [r7, #28]
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	2b0f      	cmp	r3, #15
 800bec8:	d9e9      	bls.n	800be9e <prvInitialiseNewTask+0x66>
 800beca:	e000      	b.n	800bece <prvInitialiseNewTask+0x96>
			{
				break;
 800becc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed0:	2200      	movs	r2, #0
 800bed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bed6:	e003      	b.n	800bee0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee2:	2b37      	cmp	r3, #55	@ 0x37
 800bee4:	d901      	bls.n	800beea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bee6:	2337      	movs	r3, #55	@ 0x37
 800bee8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800beea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800beee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bef4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	2200      	movs	r2, #0
 800befa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800befc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befe:	3304      	adds	r3, #4
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7fe fde7 	bl	800aad4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf08:	3318      	adds	r3, #24
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe fde2 	bl	800aad4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf24:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800bf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf28:	2200      	movs	r2, #0
 800bf2a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3e:	3358      	adds	r3, #88	@ 0x58
 800bf40:	224c      	movs	r2, #76	@ 0x4c
 800bf42:	2100      	movs	r1, #0
 800bf44:	4618      	mov	r0, r3
 800bf46:	f003 f95f 	bl	800f208 <memset>
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4c:	4a0c      	ldr	r2, [pc, #48]	@ (800bf80 <prvInitialiseNewTask+0x148>)
 800bf4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf52:	4a0c      	ldr	r2, [pc, #48]	@ (800bf84 <prvInitialiseNewTask+0x14c>)
 800bf54:	661a      	str	r2, [r3, #96]	@ 0x60
 800bf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf58:	4a0b      	ldr	r2, [pc, #44]	@ (800bf88 <prvInitialiseNewTask+0x150>)
 800bf5a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	69b8      	ldr	r0, [r7, #24]
 800bf62:	f001 fa87 	bl	800d474 <pxPortInitialiseStack>
 800bf66:	4602      	mov	r2, r0
 800bf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d002      	beq.n	800bf78 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf78:	bf00      	nop
 800bf7a:	3720      	adds	r7, #32
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	2000b8b4 	.word	0x2000b8b4
 800bf84:	2000b91c 	.word	0x2000b91c
 800bf88:	2000b984 	.word	0x2000b984

0800bf8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf94:	f001 fba0 	bl	800d6d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf98:	4b2d      	ldr	r3, [pc, #180]	@ (800c050 <prvAddNewTaskToReadyList+0xc4>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	4a2c      	ldr	r2, [pc, #176]	@ (800c050 <prvAddNewTaskToReadyList+0xc4>)
 800bfa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfa2:	4b2c      	ldr	r3, [pc, #176]	@ (800c054 <prvAddNewTaskToReadyList+0xc8>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d109      	bne.n	800bfbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bfaa:	4a2a      	ldr	r2, [pc, #168]	@ (800c054 <prvAddNewTaskToReadyList+0xc8>)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bfb0:	4b27      	ldr	r3, [pc, #156]	@ (800c050 <prvAddNewTaskToReadyList+0xc4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d110      	bne.n	800bfda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bfb8:	f000 fc5c 	bl	800c874 <prvInitialiseTaskLists>
 800bfbc:	e00d      	b.n	800bfda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bfbe:	4b26      	ldr	r3, [pc, #152]	@ (800c058 <prvAddNewTaskToReadyList+0xcc>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d109      	bne.n	800bfda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bfc6:	4b23      	ldr	r3, [pc, #140]	@ (800c054 <prvAddNewTaskToReadyList+0xc8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d802      	bhi.n	800bfda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bfd4:	4a1f      	ldr	r2, [pc, #124]	@ (800c054 <prvAddNewTaskToReadyList+0xc8>)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bfda:	4b20      	ldr	r3, [pc, #128]	@ (800c05c <prvAddNewTaskToReadyList+0xd0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	4a1e      	ldr	r2, [pc, #120]	@ (800c05c <prvAddNewTaskToReadyList+0xd0>)
 800bfe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bfe4:	4b1d      	ldr	r3, [pc, #116]	@ (800c05c <prvAddNewTaskToReadyList+0xd0>)
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bff0:	4b1b      	ldr	r3, [pc, #108]	@ (800c060 <prvAddNewTaskToReadyList+0xd4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d903      	bls.n	800c000 <prvAddNewTaskToReadyList+0x74>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bffc:	4a18      	ldr	r2, [pc, #96]	@ (800c060 <prvAddNewTaskToReadyList+0xd4>)
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c004:	4613      	mov	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4413      	add	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4a15      	ldr	r2, [pc, #84]	@ (800c064 <prvAddNewTaskToReadyList+0xd8>)
 800c00e:	441a      	add	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3304      	adds	r3, #4
 800c014:	4619      	mov	r1, r3
 800c016:	4610      	mov	r0, r2
 800c018:	f7fe fd69 	bl	800aaee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c01c:	f001 fb8e 	bl	800d73c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c020:	4b0d      	ldr	r3, [pc, #52]	@ (800c058 <prvAddNewTaskToReadyList+0xcc>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00e      	beq.n	800c046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c028:	4b0a      	ldr	r3, [pc, #40]	@ (800c054 <prvAddNewTaskToReadyList+0xc8>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c032:	429a      	cmp	r2, r3
 800c034:	d207      	bcs.n	800c046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c036:	4b0c      	ldr	r3, [pc, #48]	@ (800c068 <prvAddNewTaskToReadyList+0xdc>)
 800c038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c03c:	601a      	str	r2, [r3, #0]
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	200078a4 	.word	0x200078a4
 800c054:	200073d0 	.word	0x200073d0
 800c058:	200078b0 	.word	0x200078b0
 800c05c:	200078c0 	.word	0x200078c0
 800c060:	200078ac 	.word	0x200078ac
 800c064:	200073d4 	.word	0x200073d4
 800c068:	e000ed04 	.word	0xe000ed04

0800c06c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c074:	2300      	movs	r3, #0
 800c076:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d018      	beq.n	800c0b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c07e:	4b14      	ldr	r3, [pc, #80]	@ (800c0d0 <vTaskDelay+0x64>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00b      	beq.n	800c09e <vTaskDelay+0x32>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	60bb      	str	r3, [r7, #8]
}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	e7fd      	b.n	800c09a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c09e:	f000 f88d 	bl	800c1bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fe37 	bl	800cd18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0aa:	f000 f895 	bl	800c1d8 <xTaskResumeAll>
 800c0ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d107      	bne.n	800c0c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c0b6:	4b07      	ldr	r3, [pc, #28]	@ (800c0d4 <vTaskDelay+0x68>)
 800c0b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0bc:	601a      	str	r2, [r3, #0]
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0c6:	bf00      	nop
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	200078cc 	.word	0x200078cc
 800c0d4:	e000ed04 	.word	0xe000ed04

0800c0d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08a      	sub	sp, #40	@ 0x28
 800c0dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0e6:	463a      	mov	r2, r7
 800c0e8:	1d39      	adds	r1, r7, #4
 800c0ea:	f107 0308 	add.w	r3, r7, #8
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fc9c 	bl	800aa2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	9202      	str	r2, [sp, #8]
 800c0fc:	9301      	str	r3, [sp, #4]
 800c0fe:	2300      	movs	r3, #0
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	2300      	movs	r3, #0
 800c104:	460a      	mov	r2, r1
 800c106:	4925      	ldr	r1, [pc, #148]	@ (800c19c <vTaskStartScheduler+0xc4>)
 800c108:	4825      	ldr	r0, [pc, #148]	@ (800c1a0 <vTaskStartScheduler+0xc8>)
 800c10a:	f7ff fdef 	bl	800bcec <xTaskCreateStatic>
 800c10e:	4603      	mov	r3, r0
 800c110:	4a24      	ldr	r2, [pc, #144]	@ (800c1a4 <vTaskStartScheduler+0xcc>)
 800c112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c114:	4b23      	ldr	r3, [pc, #140]	@ (800c1a4 <vTaskStartScheduler+0xcc>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c11c:	2301      	movs	r3, #1
 800c11e:	617b      	str	r3, [r7, #20]
 800c120:	e001      	b.n	800c126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c122:	2300      	movs	r3, #0
 800c124:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d102      	bne.n	800c132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c12c:	f000 fe48 	bl	800cdc0 <xTimerCreateTimerTask>
 800c130:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d11d      	bne.n	800c174 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	613b      	str	r3, [r7, #16]
}
 800c14a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c14c:	4b16      	ldr	r3, [pc, #88]	@ (800c1a8 <vTaskStartScheduler+0xd0>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3358      	adds	r3, #88	@ 0x58
 800c152:	4a16      	ldr	r2, [pc, #88]	@ (800c1ac <vTaskStartScheduler+0xd4>)
 800c154:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c156:	4b16      	ldr	r3, [pc, #88]	@ (800c1b0 <vTaskStartScheduler+0xd8>)
 800c158:	f04f 32ff 	mov.w	r2, #4294967295
 800c15c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c15e:	4b15      	ldr	r3, [pc, #84]	@ (800c1b4 <vTaskStartScheduler+0xdc>)
 800c160:	2201      	movs	r2, #1
 800c162:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c164:	4b14      	ldr	r3, [pc, #80]	@ (800c1b8 <vTaskStartScheduler+0xe0>)
 800c166:	2200      	movs	r2, #0
 800c168:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c16a:	f7f5 faa5 	bl	80016b8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c16e:	f001 fa0f 	bl	800d590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c172:	e00f      	b.n	800c194 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17a:	d10b      	bne.n	800c194 <vTaskStartScheduler+0xbc>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	60fb      	str	r3, [r7, #12]
}
 800c18e:	bf00      	nop
 800c190:	bf00      	nop
 800c192:	e7fd      	b.n	800c190 <vTaskStartScheduler+0xb8>
}
 800c194:	bf00      	nop
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	080129b4 	.word	0x080129b4
 800c1a0:	0800c845 	.word	0x0800c845
 800c1a4:	200078c8 	.word	0x200078c8
 800c1a8:	200073d0 	.word	0x200073d0
 800c1ac:	20000038 	.word	0x20000038
 800c1b0:	200078c4 	.word	0x200078c4
 800c1b4:	200078b0 	.word	0x200078b0
 800c1b8:	200078a8 	.word	0x200078a8

0800c1bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1c0:	4b04      	ldr	r3, [pc, #16]	@ (800c1d4 <vTaskSuspendAll+0x18>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	4a03      	ldr	r2, [pc, #12]	@ (800c1d4 <vTaskSuspendAll+0x18>)
 800c1c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c1ca:	bf00      	nop
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr
 800c1d4:	200078cc 	.word	0x200078cc

0800c1d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c1e6:	4b42      	ldr	r3, [pc, #264]	@ (800c2f0 <xTaskResumeAll+0x118>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10b      	bne.n	800c206 <xTaskResumeAll+0x2e>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	603b      	str	r3, [r7, #0]
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c206:	f001 fa67 	bl	800d6d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c20a:	4b39      	ldr	r3, [pc, #228]	@ (800c2f0 <xTaskResumeAll+0x118>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3b01      	subs	r3, #1
 800c210:	4a37      	ldr	r2, [pc, #220]	@ (800c2f0 <xTaskResumeAll+0x118>)
 800c212:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c214:	4b36      	ldr	r3, [pc, #216]	@ (800c2f0 <xTaskResumeAll+0x118>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d162      	bne.n	800c2e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c21c:	4b35      	ldr	r3, [pc, #212]	@ (800c2f4 <xTaskResumeAll+0x11c>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d05e      	beq.n	800c2e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c224:	e02f      	b.n	800c286 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c226:	4b34      	ldr	r3, [pc, #208]	@ (800c2f8 <xTaskResumeAll+0x120>)
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3318      	adds	r3, #24
 800c232:	4618      	mov	r0, r3
 800c234:	f7fe fcb8 	bl	800aba8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	3304      	adds	r3, #4
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fe fcb3 	bl	800aba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c246:	4b2d      	ldr	r3, [pc, #180]	@ (800c2fc <xTaskResumeAll+0x124>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d903      	bls.n	800c256 <xTaskResumeAll+0x7e>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c252:	4a2a      	ldr	r2, [pc, #168]	@ (800c2fc <xTaskResumeAll+0x124>)
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4a27      	ldr	r2, [pc, #156]	@ (800c300 <xTaskResumeAll+0x128>)
 800c264:	441a      	add	r2, r3
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3304      	adds	r3, #4
 800c26a:	4619      	mov	r1, r3
 800c26c:	4610      	mov	r0, r2
 800c26e:	f7fe fc3e 	bl	800aaee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c276:	4b23      	ldr	r3, [pc, #140]	@ (800c304 <xTaskResumeAll+0x12c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d302      	bcc.n	800c286 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c280:	4b21      	ldr	r3, [pc, #132]	@ (800c308 <xTaskResumeAll+0x130>)
 800c282:	2201      	movs	r2, #1
 800c284:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c286:	4b1c      	ldr	r3, [pc, #112]	@ (800c2f8 <xTaskResumeAll+0x120>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1cb      	bne.n	800c226 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c294:	f000 fb92 	bl	800c9bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c298:	4b1c      	ldr	r3, [pc, #112]	@ (800c30c <xTaskResumeAll+0x134>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d010      	beq.n	800c2c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2a4:	f000 f858 	bl	800c358 <xTaskIncrementTick>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c2ae:	4b16      	ldr	r3, [pc, #88]	@ (800c308 <xTaskResumeAll+0x130>)
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1f1      	bne.n	800c2a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c2c0:	4b12      	ldr	r3, [pc, #72]	@ (800c30c <xTaskResumeAll+0x134>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2c6:	4b10      	ldr	r3, [pc, #64]	@ (800c308 <xTaskResumeAll+0x130>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d009      	beq.n	800c2e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c310 <xTaskResumeAll+0x138>)
 800c2d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2d8:	601a      	str	r2, [r3, #0]
 800c2da:	f3bf 8f4f 	dsb	sy
 800c2de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2e2:	f001 fa2b 	bl	800d73c <vPortExitCritical>

	return xAlreadyYielded;
 800c2e6:	68bb      	ldr	r3, [r7, #8]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	200078cc 	.word	0x200078cc
 800c2f4:	200078a4 	.word	0x200078a4
 800c2f8:	20007864 	.word	0x20007864
 800c2fc:	200078ac 	.word	0x200078ac
 800c300:	200073d4 	.word	0x200073d4
 800c304:	200073d0 	.word	0x200073d0
 800c308:	200078b8 	.word	0x200078b8
 800c30c:	200078b4 	.word	0x200078b4
 800c310:	e000ed04 	.word	0xe000ed04

0800c314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c31a:	4b05      	ldr	r3, [pc, #20]	@ (800c330 <xTaskGetTickCount+0x1c>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c320:	687b      	ldr	r3, [r7, #4]
}
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	200078a8 	.word	0x200078a8

0800c334 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c33a:	f001 faad 	bl	800d898 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c33e:	2300      	movs	r3, #0
 800c340:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c342:	4b04      	ldr	r3, [pc, #16]	@ (800c354 <xTaskGetTickCountFromISR+0x20>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c348:	683b      	ldr	r3, [r7, #0]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	200078a8 	.word	0x200078a8

0800c358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c35e:	2300      	movs	r3, #0
 800c360:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c362:	4b4f      	ldr	r3, [pc, #316]	@ (800c4a0 <xTaskIncrementTick+0x148>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	f040 8090 	bne.w	800c48c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c36c:	4b4d      	ldr	r3, [pc, #308]	@ (800c4a4 <xTaskIncrementTick+0x14c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	3301      	adds	r3, #1
 800c372:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c374:	4a4b      	ldr	r2, [pc, #300]	@ (800c4a4 <xTaskIncrementTick+0x14c>)
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d121      	bne.n	800c3c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c380:	4b49      	ldr	r3, [pc, #292]	@ (800c4a8 <xTaskIncrementTick+0x150>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00b      	beq.n	800c3a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	603b      	str	r3, [r7, #0]
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	e7fd      	b.n	800c39e <xTaskIncrementTick+0x46>
 800c3a2:	4b41      	ldr	r3, [pc, #260]	@ (800c4a8 <xTaskIncrementTick+0x150>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	60fb      	str	r3, [r7, #12]
 800c3a8:	4b40      	ldr	r3, [pc, #256]	@ (800c4ac <xTaskIncrementTick+0x154>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a3e      	ldr	r2, [pc, #248]	@ (800c4a8 <xTaskIncrementTick+0x150>)
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	4a3e      	ldr	r2, [pc, #248]	@ (800c4ac <xTaskIncrementTick+0x154>)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	4b3e      	ldr	r3, [pc, #248]	@ (800c4b0 <xTaskIncrementTick+0x158>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	4a3c      	ldr	r2, [pc, #240]	@ (800c4b0 <xTaskIncrementTick+0x158>)
 800c3be:	6013      	str	r3, [r2, #0]
 800c3c0:	f000 fafc 	bl	800c9bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3c4:	4b3b      	ldr	r3, [pc, #236]	@ (800c4b4 <xTaskIncrementTick+0x15c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d349      	bcc.n	800c462 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3ce:	4b36      	ldr	r3, [pc, #216]	@ (800c4a8 <xTaskIncrementTick+0x150>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d104      	bne.n	800c3e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3d8:	4b36      	ldr	r3, [pc, #216]	@ (800c4b4 <xTaskIncrementTick+0x15c>)
 800c3da:	f04f 32ff 	mov.w	r2, #4294967295
 800c3de:	601a      	str	r2, [r3, #0]
					break;
 800c3e0:	e03f      	b.n	800c462 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e2:	4b31      	ldr	r3, [pc, #196]	@ (800c4a8 <xTaskIncrementTick+0x150>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d203      	bcs.n	800c402 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c3fa:	4a2e      	ldr	r2, [pc, #184]	@ (800c4b4 <xTaskIncrementTick+0x15c>)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c400:	e02f      	b.n	800c462 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	3304      	adds	r3, #4
 800c406:	4618      	mov	r0, r3
 800c408:	f7fe fbce 	bl	800aba8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	3318      	adds	r3, #24
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fe fbc5 	bl	800aba8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c422:	4b25      	ldr	r3, [pc, #148]	@ (800c4b8 <xTaskIncrementTick+0x160>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	429a      	cmp	r2, r3
 800c428:	d903      	bls.n	800c432 <xTaskIncrementTick+0xda>
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c42e:	4a22      	ldr	r2, [pc, #136]	@ (800c4b8 <xTaskIncrementTick+0x160>)
 800c430:	6013      	str	r3, [r2, #0]
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c436:	4613      	mov	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4a1f      	ldr	r2, [pc, #124]	@ (800c4bc <xTaskIncrementTick+0x164>)
 800c440:	441a      	add	r2, r3
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	3304      	adds	r3, #4
 800c446:	4619      	mov	r1, r3
 800c448:	4610      	mov	r0, r2
 800c44a:	f7fe fb50 	bl	800aaee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c452:	4b1b      	ldr	r3, [pc, #108]	@ (800c4c0 <xTaskIncrementTick+0x168>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c458:	429a      	cmp	r2, r3
 800c45a:	d3b8      	bcc.n	800c3ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c45c:	2301      	movs	r3, #1
 800c45e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c460:	e7b5      	b.n	800c3ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c462:	4b17      	ldr	r3, [pc, #92]	@ (800c4c0 <xTaskIncrementTick+0x168>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c468:	4914      	ldr	r1, [pc, #80]	@ (800c4bc <xTaskIncrementTick+0x164>)
 800c46a:	4613      	mov	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	440b      	add	r3, r1
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d901      	bls.n	800c47e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c47a:	2301      	movs	r3, #1
 800c47c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c47e:	4b11      	ldr	r3, [pc, #68]	@ (800c4c4 <xTaskIncrementTick+0x16c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d007      	beq.n	800c496 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c486:	2301      	movs	r3, #1
 800c488:	617b      	str	r3, [r7, #20]
 800c48a:	e004      	b.n	800c496 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c48c:	4b0e      	ldr	r3, [pc, #56]	@ (800c4c8 <xTaskIncrementTick+0x170>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3301      	adds	r3, #1
 800c492:	4a0d      	ldr	r2, [pc, #52]	@ (800c4c8 <xTaskIncrementTick+0x170>)
 800c494:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c496:	697b      	ldr	r3, [r7, #20]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	200078cc 	.word	0x200078cc
 800c4a4:	200078a8 	.word	0x200078a8
 800c4a8:	2000785c 	.word	0x2000785c
 800c4ac:	20007860 	.word	0x20007860
 800c4b0:	200078bc 	.word	0x200078bc
 800c4b4:	200078c4 	.word	0x200078c4
 800c4b8:	200078ac 	.word	0x200078ac
 800c4bc:	200073d4 	.word	0x200073d4
 800c4c0:	200073d0 	.word	0x200073d0
 800c4c4:	200078b8 	.word	0x200078b8
 800c4c8:	200078b4 	.word	0x200078b4

0800c4cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4d2:	4b36      	ldr	r3, [pc, #216]	@ (800c5ac <vTaskSwitchContext+0xe0>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4da:	4b35      	ldr	r3, [pc, #212]	@ (800c5b0 <vTaskSwitchContext+0xe4>)
 800c4dc:	2201      	movs	r2, #1
 800c4de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4e0:	e060      	b.n	800c5a4 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800c4e2:	4b33      	ldr	r3, [pc, #204]	@ (800c5b0 <vTaskSwitchContext+0xe4>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c4e8:	f7f5 f8ed 	bl	80016c6 <getRunTimeCounterValue>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	4a31      	ldr	r2, [pc, #196]	@ (800c5b4 <vTaskSwitchContext+0xe8>)
 800c4f0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c4f2:	4b30      	ldr	r3, [pc, #192]	@ (800c5b4 <vTaskSwitchContext+0xe8>)
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	4b30      	ldr	r3, [pc, #192]	@ (800c5b8 <vTaskSwitchContext+0xec>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d909      	bls.n	800c512 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c4fe:	4b2f      	ldr	r3, [pc, #188]	@ (800c5bc <vTaskSwitchContext+0xf0>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c504:	4a2b      	ldr	r2, [pc, #172]	@ (800c5b4 <vTaskSwitchContext+0xe8>)
 800c506:	6810      	ldr	r0, [r2, #0]
 800c508:	4a2b      	ldr	r2, [pc, #172]	@ (800c5b8 <vTaskSwitchContext+0xec>)
 800c50a:	6812      	ldr	r2, [r2, #0]
 800c50c:	1a82      	subs	r2, r0, r2
 800c50e:	440a      	add	r2, r1
 800c510:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c512:	4b28      	ldr	r3, [pc, #160]	@ (800c5b4 <vTaskSwitchContext+0xe8>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a28      	ldr	r2, [pc, #160]	@ (800c5b8 <vTaskSwitchContext+0xec>)
 800c518:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c51a:	4b29      	ldr	r3, [pc, #164]	@ (800c5c0 <vTaskSwitchContext+0xf4>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	e011      	b.n	800c546 <vTaskSwitchContext+0x7a>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10b      	bne.n	800c540 <vTaskSwitchContext+0x74>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	607b      	str	r3, [r7, #4]
}
 800c53a:	bf00      	nop
 800c53c:	bf00      	nop
 800c53e:	e7fd      	b.n	800c53c <vTaskSwitchContext+0x70>
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	3b01      	subs	r3, #1
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	491f      	ldr	r1, [pc, #124]	@ (800c5c4 <vTaskSwitchContext+0xf8>)
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	4613      	mov	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	440b      	add	r3, r1
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0e3      	beq.n	800c522 <vTaskSwitchContext+0x56>
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4a17      	ldr	r2, [pc, #92]	@ (800c5c4 <vTaskSwitchContext+0xf8>)
 800c566:	4413      	add	r3, r2
 800c568:	60bb      	str	r3, [r7, #8]
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	605a      	str	r2, [r3, #4]
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	3308      	adds	r3, #8
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d104      	bne.n	800c58a <vTaskSwitchContext+0xbe>
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	605a      	str	r2, [r3, #4]
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	4a0a      	ldr	r2, [pc, #40]	@ (800c5bc <vTaskSwitchContext+0xf0>)
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	4a0a      	ldr	r2, [pc, #40]	@ (800c5c0 <vTaskSwitchContext+0xf4>)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c59a:	4b08      	ldr	r3, [pc, #32]	@ (800c5bc <vTaskSwitchContext+0xf0>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3358      	adds	r3, #88	@ 0x58
 800c5a0:	4a09      	ldr	r2, [pc, #36]	@ (800c5c8 <vTaskSwitchContext+0xfc>)
 800c5a2:	6013      	str	r3, [r2, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	200078cc 	.word	0x200078cc
 800c5b0:	200078b8 	.word	0x200078b8
 800c5b4:	200078d4 	.word	0x200078d4
 800c5b8:	200078d0 	.word	0x200078d0
 800c5bc:	200073d0 	.word	0x200073d0
 800c5c0:	200078ac 	.word	0x200078ac
 800c5c4:	200073d4 	.word	0x200073d4
 800c5c8:	20000038 	.word	0x20000038

0800c5cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10b      	bne.n	800c5f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	60fb      	str	r3, [r7, #12]
}
 800c5ee:	bf00      	nop
 800c5f0:	bf00      	nop
 800c5f2:	e7fd      	b.n	800c5f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5f4:	4b07      	ldr	r3, [pc, #28]	@ (800c614 <vTaskPlaceOnEventList+0x48>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	3318      	adds	r3, #24
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7fe fa9a 	bl	800ab36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c602:	2101      	movs	r1, #1
 800c604:	6838      	ldr	r0, [r7, #0]
 800c606:	f000 fb87 	bl	800cd18 <prvAddCurrentTaskToDelayedList>
}
 800c60a:	bf00      	nop
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	200073d0 	.word	0x200073d0

0800c618 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b086      	sub	sp, #24
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10b      	bne.n	800c642 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	617b      	str	r3, [r7, #20]
}
 800c63c:	bf00      	nop
 800c63e:	bf00      	nop
 800c640:	e7fd      	b.n	800c63e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c642:	4b0a      	ldr	r3, [pc, #40]	@ (800c66c <vTaskPlaceOnEventListRestricted+0x54>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3318      	adds	r3, #24
 800c648:	4619      	mov	r1, r3
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7fe fa4f 	bl	800aaee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c656:	f04f 33ff 	mov.w	r3, #4294967295
 800c65a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c65c:	6879      	ldr	r1, [r7, #4]
 800c65e:	68b8      	ldr	r0, [r7, #8]
 800c660:	f000 fb5a 	bl	800cd18 <prvAddCurrentTaskToDelayedList>
	}
 800c664:	bf00      	nop
 800c666:	3718      	adds	r7, #24
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	200073d0 	.word	0x200073d0

0800c670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10b      	bne.n	800c69e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68a:	f383 8811 	msr	BASEPRI, r3
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	60fb      	str	r3, [r7, #12]
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	e7fd      	b.n	800c69a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	3318      	adds	r3, #24
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe fa80 	bl	800aba8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6a8:	4b1d      	ldr	r3, [pc, #116]	@ (800c720 <xTaskRemoveFromEventList+0xb0>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d11d      	bne.n	800c6ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fe fa77 	bl	800aba8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6be:	4b19      	ldr	r3, [pc, #100]	@ (800c724 <xTaskRemoveFromEventList+0xb4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d903      	bls.n	800c6ce <xTaskRemoveFromEventList+0x5e>
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ca:	4a16      	ldr	r2, [pc, #88]	@ (800c724 <xTaskRemoveFromEventList+0xb4>)
 800c6cc:	6013      	str	r3, [r2, #0]
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4a13      	ldr	r2, [pc, #76]	@ (800c728 <xTaskRemoveFromEventList+0xb8>)
 800c6dc:	441a      	add	r2, r3
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	f7fe fa02 	bl	800aaee <vListInsertEnd>
 800c6ea:	e005      	b.n	800c6f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	3318      	adds	r3, #24
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	480e      	ldr	r0, [pc, #56]	@ (800c72c <xTaskRemoveFromEventList+0xbc>)
 800c6f4:	f7fe f9fb 	bl	800aaee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c730 <xTaskRemoveFromEventList+0xc0>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c702:	429a      	cmp	r2, r3
 800c704:	d905      	bls.n	800c712 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c706:	2301      	movs	r3, #1
 800c708:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c70a:	4b0a      	ldr	r3, [pc, #40]	@ (800c734 <xTaskRemoveFromEventList+0xc4>)
 800c70c:	2201      	movs	r2, #1
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	e001      	b.n	800c716 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c712:	2300      	movs	r3, #0
 800c714:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c716:	697b      	ldr	r3, [r7, #20]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3718      	adds	r7, #24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	200078cc 	.word	0x200078cc
 800c724:	200078ac 	.word	0x200078ac
 800c728:	200073d4 	.word	0x200073d4
 800c72c:	20007864 	.word	0x20007864
 800c730:	200073d0 	.word	0x200073d0
 800c734:	200078b8 	.word	0x200078b8

0800c738 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c740:	4b06      	ldr	r3, [pc, #24]	@ (800c75c <vTaskInternalSetTimeOutState+0x24>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c748:	4b05      	ldr	r3, [pc, #20]	@ (800c760 <vTaskInternalSetTimeOutState+0x28>)
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	605a      	str	r2, [r3, #4]
}
 800c750:	bf00      	nop
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	200078bc 	.word	0x200078bc
 800c760:	200078a8 	.word	0x200078a8

0800c764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10b      	bne.n	800c78c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	613b      	str	r3, [r7, #16]
}
 800c786:	bf00      	nop
 800c788:	bf00      	nop
 800c78a:	e7fd      	b.n	800c788 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10b      	bne.n	800c7aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	60fb      	str	r3, [r7, #12]
}
 800c7a4:	bf00      	nop
 800c7a6:	bf00      	nop
 800c7a8:	e7fd      	b.n	800c7a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c7aa:	f000 ff95 	bl	800d6d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7ae:	4b1d      	ldr	r3, [pc, #116]	@ (800c824 <xTaskCheckForTimeOut+0xc0>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c6:	d102      	bne.n	800c7ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	61fb      	str	r3, [r7, #28]
 800c7cc:	e023      	b.n	800c816 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	4b15      	ldr	r3, [pc, #84]	@ (800c828 <xTaskCheckForTimeOut+0xc4>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d007      	beq.n	800c7ea <xTaskCheckForTimeOut+0x86>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d302      	bcc.n	800c7ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	61fb      	str	r3, [r7, #28]
 800c7e8:	e015      	b.n	800c816 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d20b      	bcs.n	800c80c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	1ad2      	subs	r2, r2, r3
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff ff99 	bl	800c738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c806:	2300      	movs	r3, #0
 800c808:	61fb      	str	r3, [r7, #28]
 800c80a:	e004      	b.n	800c816 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	2200      	movs	r2, #0
 800c810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c812:	2301      	movs	r3, #1
 800c814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c816:	f000 ff91 	bl	800d73c <vPortExitCritical>

	return xReturn;
 800c81a:	69fb      	ldr	r3, [r7, #28]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3720      	adds	r7, #32
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	200078a8 	.word	0x200078a8
 800c828:	200078bc 	.word	0x200078bc

0800c82c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c830:	4b03      	ldr	r3, [pc, #12]	@ (800c840 <vTaskMissedYield+0x14>)
 800c832:	2201      	movs	r2, #1
 800c834:	601a      	str	r2, [r3, #0]
}
 800c836:	bf00      	nop
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	200078b8 	.word	0x200078b8

0800c844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c84c:	f000 f852 	bl	800c8f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c850:	4b06      	ldr	r3, [pc, #24]	@ (800c86c <prvIdleTask+0x28>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b01      	cmp	r3, #1
 800c856:	d9f9      	bls.n	800c84c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c858:	4b05      	ldr	r3, [pc, #20]	@ (800c870 <prvIdleTask+0x2c>)
 800c85a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c85e:	601a      	str	r2, [r3, #0]
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c868:	e7f0      	b.n	800c84c <prvIdleTask+0x8>
 800c86a:	bf00      	nop
 800c86c:	200073d4 	.word	0x200073d4
 800c870:	e000ed04 	.word	0xe000ed04

0800c874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c87a:	2300      	movs	r3, #0
 800c87c:	607b      	str	r3, [r7, #4]
 800c87e:	e00c      	b.n	800c89a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	4613      	mov	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	4a12      	ldr	r2, [pc, #72]	@ (800c8d4 <prvInitialiseTaskLists+0x60>)
 800c88c:	4413      	add	r3, r2
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe f900 	bl	800aa94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3301      	adds	r3, #1
 800c898:	607b      	str	r3, [r7, #4]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b37      	cmp	r3, #55	@ 0x37
 800c89e:	d9ef      	bls.n	800c880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8a0:	480d      	ldr	r0, [pc, #52]	@ (800c8d8 <prvInitialiseTaskLists+0x64>)
 800c8a2:	f7fe f8f7 	bl	800aa94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8a6:	480d      	ldr	r0, [pc, #52]	@ (800c8dc <prvInitialiseTaskLists+0x68>)
 800c8a8:	f7fe f8f4 	bl	800aa94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8ac:	480c      	ldr	r0, [pc, #48]	@ (800c8e0 <prvInitialiseTaskLists+0x6c>)
 800c8ae:	f7fe f8f1 	bl	800aa94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8b2:	480c      	ldr	r0, [pc, #48]	@ (800c8e4 <prvInitialiseTaskLists+0x70>)
 800c8b4:	f7fe f8ee 	bl	800aa94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8b8:	480b      	ldr	r0, [pc, #44]	@ (800c8e8 <prvInitialiseTaskLists+0x74>)
 800c8ba:	f7fe f8eb 	bl	800aa94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8be:	4b0b      	ldr	r3, [pc, #44]	@ (800c8ec <prvInitialiseTaskLists+0x78>)
 800c8c0:	4a05      	ldr	r2, [pc, #20]	@ (800c8d8 <prvInitialiseTaskLists+0x64>)
 800c8c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f0 <prvInitialiseTaskLists+0x7c>)
 800c8c6:	4a05      	ldr	r2, [pc, #20]	@ (800c8dc <prvInitialiseTaskLists+0x68>)
 800c8c8:	601a      	str	r2, [r3, #0]
}
 800c8ca:	bf00      	nop
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	200073d4 	.word	0x200073d4
 800c8d8:	20007834 	.word	0x20007834
 800c8dc:	20007848 	.word	0x20007848
 800c8e0:	20007864 	.word	0x20007864
 800c8e4:	20007878 	.word	0x20007878
 800c8e8:	20007890 	.word	0x20007890
 800c8ec:	2000785c 	.word	0x2000785c
 800c8f0:	20007860 	.word	0x20007860

0800c8f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8fa:	e019      	b.n	800c930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c8fc:	f000 feec 	bl	800d6d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c900:	4b10      	ldr	r3, [pc, #64]	@ (800c944 <prvCheckTasksWaitingTermination+0x50>)
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3304      	adds	r3, #4
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fe f94b 	bl	800aba8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c912:	4b0d      	ldr	r3, [pc, #52]	@ (800c948 <prvCheckTasksWaitingTermination+0x54>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3b01      	subs	r3, #1
 800c918:	4a0b      	ldr	r2, [pc, #44]	@ (800c948 <prvCheckTasksWaitingTermination+0x54>)
 800c91a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c91c:	4b0b      	ldr	r3, [pc, #44]	@ (800c94c <prvCheckTasksWaitingTermination+0x58>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3b01      	subs	r3, #1
 800c922:	4a0a      	ldr	r2, [pc, #40]	@ (800c94c <prvCheckTasksWaitingTermination+0x58>)
 800c924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c926:	f000 ff09 	bl	800d73c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f810 	bl	800c950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c930:	4b06      	ldr	r3, [pc, #24]	@ (800c94c <prvCheckTasksWaitingTermination+0x58>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e1      	bne.n	800c8fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c938:	bf00      	nop
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	20007878 	.word	0x20007878
 800c948:	200078a4 	.word	0x200078a4
 800c94c:	2000788c 	.word	0x2000788c

0800c950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3358      	adds	r3, #88	@ 0x58
 800c95c:	4618      	mov	r0, r3
 800c95e:	f002 fcd1 	bl	800f304 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d108      	bne.n	800c97e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c970:	4618      	mov	r0, r3
 800c972:	f001 f8a1 	bl	800dab8 <vPortFree>
				vPortFree( pxTCB );
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 f89e 	bl	800dab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c97c:	e019      	b.n	800c9b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c984:	2b01      	cmp	r3, #1
 800c986:	d103      	bne.n	800c990 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f001 f895 	bl	800dab8 <vPortFree>
	}
 800c98e:	e010      	b.n	800c9b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c996:	2b02      	cmp	r3, #2
 800c998:	d00b      	beq.n	800c9b2 <prvDeleteTCB+0x62>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	60fb      	str	r3, [r7, #12]
}
 800c9ac:	bf00      	nop
 800c9ae:	bf00      	nop
 800c9b0:	e7fd      	b.n	800c9ae <prvDeleteTCB+0x5e>
	}
 800c9b2:	bf00      	nop
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9f4 <prvResetNextTaskUnblockTime+0x38>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d104      	bne.n	800c9d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9d4:	e008      	b.n	800c9e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9d6:	4b07      	ldr	r3, [pc, #28]	@ (800c9f4 <prvResetNextTaskUnblockTime+0x38>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	4a04      	ldr	r2, [pc, #16]	@ (800c9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c9e6:	6013      	str	r3, [r2, #0]
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	2000785c 	.word	0x2000785c
 800c9f8:	200078c4 	.word	0x200078c4

0800c9fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca02:	4b0b      	ldr	r3, [pc, #44]	@ (800ca30 <xTaskGetSchedulerState+0x34>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	607b      	str	r3, [r7, #4]
 800ca0e:	e008      	b.n	800ca22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca10:	4b08      	ldr	r3, [pc, #32]	@ (800ca34 <xTaskGetSchedulerState+0x38>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d102      	bne.n	800ca1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca18:	2302      	movs	r3, #2
 800ca1a:	607b      	str	r3, [r7, #4]
 800ca1c:	e001      	b.n	800ca22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca22:	687b      	ldr	r3, [r7, #4]
	}
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	200078b0 	.word	0x200078b0
 800ca34:	200078cc 	.word	0x200078cc

0800ca38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ca44:	2300      	movs	r3, #0
 800ca46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d051      	beq.n	800caf2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca52:	4b2a      	ldr	r3, [pc, #168]	@ (800cafc <xTaskPriorityInherit+0xc4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d241      	bcs.n	800cae0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	db06      	blt.n	800ca72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca64:	4b25      	ldr	r3, [pc, #148]	@ (800cafc <xTaskPriorityInherit+0xc4>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	6959      	ldr	r1, [r3, #20]
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4a1f      	ldr	r2, [pc, #124]	@ (800cb00 <xTaskPriorityInherit+0xc8>)
 800ca84:	4413      	add	r3, r2
 800ca86:	4299      	cmp	r1, r3
 800ca88:	d122      	bne.n	800cad0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fe f88a 	bl	800aba8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ca94:	4b19      	ldr	r3, [pc, #100]	@ (800cafc <xTaskPriorityInherit+0xc4>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caa2:	4b18      	ldr	r3, [pc, #96]	@ (800cb04 <xTaskPriorityInherit+0xcc>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d903      	bls.n	800cab2 <xTaskPriorityInherit+0x7a>
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caae:	4a15      	ldr	r2, [pc, #84]	@ (800cb04 <xTaskPriorityInherit+0xcc>)
 800cab0:	6013      	str	r3, [r2, #0]
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cab6:	4613      	mov	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4a10      	ldr	r2, [pc, #64]	@ (800cb00 <xTaskPriorityInherit+0xc8>)
 800cac0:	441a      	add	r2, r3
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	3304      	adds	r3, #4
 800cac6:	4619      	mov	r1, r3
 800cac8:	4610      	mov	r0, r2
 800caca:	f7fe f810 	bl	800aaee <vListInsertEnd>
 800cace:	e004      	b.n	800cada <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cad0:	4b0a      	ldr	r3, [pc, #40]	@ (800cafc <xTaskPriorityInherit+0xc4>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cada:	2301      	movs	r3, #1
 800cadc:	60fb      	str	r3, [r7, #12]
 800cade:	e008      	b.n	800caf2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cae4:	4b05      	ldr	r3, [pc, #20]	@ (800cafc <xTaskPriorityInherit+0xc4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caea:	429a      	cmp	r2, r3
 800caec:	d201      	bcs.n	800caf2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800caee:	2301      	movs	r3, #1
 800caf0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800caf2:	68fb      	ldr	r3, [r7, #12]
	}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	200073d0 	.word	0x200073d0
 800cb00:	200073d4 	.word	0x200073d4
 800cb04:	200078ac 	.word	0x200078ac

0800cb08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d058      	beq.n	800cbd0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb1e:	4b2f      	ldr	r3, [pc, #188]	@ (800cbdc <xTaskPriorityDisinherit+0xd4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	693a      	ldr	r2, [r7, #16]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d00b      	beq.n	800cb40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	60fb      	str	r3, [r7, #12]
}
 800cb3a:	bf00      	nop
 800cb3c:	bf00      	nop
 800cb3e:	e7fd      	b.n	800cb3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10b      	bne.n	800cb60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cb48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	60bb      	str	r3, [r7, #8]
}
 800cb5a:	bf00      	nop
 800cb5c:	bf00      	nop
 800cb5e:	e7fd      	b.n	800cb5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb64:	1e5a      	subs	r2, r3, #1
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d02c      	beq.n	800cbd0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d128      	bne.n	800cbd0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	3304      	adds	r3, #4
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe f810 	bl	800aba8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cba0:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe0 <xTaskPriorityDisinherit+0xd8>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d903      	bls.n	800cbb0 <xTaskPriorityDisinherit+0xa8>
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbac:	4a0c      	ldr	r2, [pc, #48]	@ (800cbe0 <xTaskPriorityDisinherit+0xd8>)
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4a09      	ldr	r2, [pc, #36]	@ (800cbe4 <xTaskPriorityDisinherit+0xdc>)
 800cbbe:	441a      	add	r2, r3
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	4610      	mov	r0, r2
 800cbc8:	f7fd ff91 	bl	800aaee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbd0:	697b      	ldr	r3, [r7, #20]
	}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3718      	adds	r7, #24
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	200073d0 	.word	0x200073d0
 800cbe0:	200078ac 	.word	0x200078ac
 800cbe4:	200073d4 	.word	0x200073d4

0800cbe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b088      	sub	sp, #32
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d06c      	beq.n	800ccda <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10b      	bne.n	800cc20 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	60fb      	str	r3, [r7, #12]
}
 800cc1a:	bf00      	nop
 800cc1c:	bf00      	nop
 800cc1e:	e7fd      	b.n	800cc1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d902      	bls.n	800cc30 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	61fb      	str	r3, [r7, #28]
 800cc2e:	e002      	b.n	800cc36 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc3a:	69fa      	ldr	r2, [r7, #28]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d04c      	beq.n	800ccda <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc44:	697a      	ldr	r2, [r7, #20]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d147      	bne.n	800ccda <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cc4a:	4b26      	ldr	r3, [pc, #152]	@ (800cce4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	69ba      	ldr	r2, [r7, #24]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d10b      	bne.n	800cc6c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	60bb      	str	r3, [r7, #8]
}
 800cc66:	bf00      	nop
 800cc68:	bf00      	nop
 800cc6a:	e7fd      	b.n	800cc68 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	69fa      	ldr	r2, [r7, #28]
 800cc76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	db04      	blt.n	800cc8a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	6959      	ldr	r1, [r3, #20]
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	4613      	mov	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	4a13      	ldr	r2, [pc, #76]	@ (800cce8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cc9a:	4413      	add	r3, r2
 800cc9c:	4299      	cmp	r1, r3
 800cc9e:	d11c      	bne.n	800ccda <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	3304      	adds	r3, #4
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fd ff7f 	bl	800aba8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccae:	4b0f      	ldr	r3, [pc, #60]	@ (800ccec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d903      	bls.n	800ccbe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccba:	4a0c      	ldr	r2, [pc, #48]	@ (800ccec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4a07      	ldr	r2, [pc, #28]	@ (800cce8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cccc:	441a      	add	r2, r3
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	f7fd ff0a 	bl	800aaee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccda:	bf00      	nop
 800ccdc:	3720      	adds	r7, #32
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	200073d0 	.word	0x200073d0
 800cce8:	200073d4 	.word	0x200073d4
 800ccec:	200078ac 	.word	0x200078ac

0800ccf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ccf0:	b480      	push	{r7}
 800ccf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ccf4:	4b07      	ldr	r3, [pc, #28]	@ (800cd14 <pvTaskIncrementMutexHeldCount+0x24>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ccfc:	4b05      	ldr	r3, [pc, #20]	@ (800cd14 <pvTaskIncrementMutexHeldCount+0x24>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd02:	3201      	adds	r2, #1
 800cd04:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cd06:	4b03      	ldr	r3, [pc, #12]	@ (800cd14 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd08:	681b      	ldr	r3, [r3, #0]
	}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	200073d0 	.word	0x200073d0

0800cd18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd22:	4b21      	ldr	r3, [pc, #132]	@ (800cda8 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd28:	4b20      	ldr	r3, [pc, #128]	@ (800cdac <prvAddCurrentTaskToDelayedList+0x94>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fd ff3a 	bl	800aba8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3a:	d10a      	bne.n	800cd52 <prvAddCurrentTaskToDelayedList+0x3a>
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d007      	beq.n	800cd52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd42:	4b1a      	ldr	r3, [pc, #104]	@ (800cdac <prvAddCurrentTaskToDelayedList+0x94>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	3304      	adds	r3, #4
 800cd48:	4619      	mov	r1, r3
 800cd4a:	4819      	ldr	r0, [pc, #100]	@ (800cdb0 <prvAddCurrentTaskToDelayedList+0x98>)
 800cd4c:	f7fd fecf 	bl	800aaee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd50:	e026      	b.n	800cda0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4413      	add	r3, r2
 800cd58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd5a:	4b14      	ldr	r3, [pc, #80]	@ (800cdac <prvAddCurrentTaskToDelayedList+0x94>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd62:	68ba      	ldr	r2, [r7, #8]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d209      	bcs.n	800cd7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd6a:	4b12      	ldr	r3, [pc, #72]	@ (800cdb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	4b0f      	ldr	r3, [pc, #60]	@ (800cdac <prvAddCurrentTaskToDelayedList+0x94>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3304      	adds	r3, #4
 800cd74:	4619      	mov	r1, r3
 800cd76:	4610      	mov	r0, r2
 800cd78:	f7fd fedd 	bl	800ab36 <vListInsert>
}
 800cd7c:	e010      	b.n	800cda0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd7e:	4b0e      	ldr	r3, [pc, #56]	@ (800cdb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	4b0a      	ldr	r3, [pc, #40]	@ (800cdac <prvAddCurrentTaskToDelayedList+0x94>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	f7fd fed3 	bl	800ab36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd90:	4b0a      	ldr	r3, [pc, #40]	@ (800cdbc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d202      	bcs.n	800cda0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd9a:	4a08      	ldr	r2, [pc, #32]	@ (800cdbc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	6013      	str	r3, [r2, #0]
}
 800cda0:	bf00      	nop
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	200078a8 	.word	0x200078a8
 800cdac:	200073d0 	.word	0x200073d0
 800cdb0:	20007890 	.word	0x20007890
 800cdb4:	20007860 	.word	0x20007860
 800cdb8:	2000785c 	.word	0x2000785c
 800cdbc:	200078c4 	.word	0x200078c4

0800cdc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08a      	sub	sp, #40	@ 0x28
 800cdc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cdca:	f000 fb13 	bl	800d3f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cdce:	4b1d      	ldr	r3, [pc, #116]	@ (800ce44 <xTimerCreateTimerTask+0x84>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d021      	beq.n	800ce1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cdde:	1d3a      	adds	r2, r7, #4
 800cde0:	f107 0108 	add.w	r1, r7, #8
 800cde4:	f107 030c 	add.w	r3, r7, #12
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fd fe39 	bl	800aa60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	9202      	str	r2, [sp, #8]
 800cdf6:	9301      	str	r3, [sp, #4]
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	9300      	str	r3, [sp, #0]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	460a      	mov	r2, r1
 800ce00:	4911      	ldr	r1, [pc, #68]	@ (800ce48 <xTimerCreateTimerTask+0x88>)
 800ce02:	4812      	ldr	r0, [pc, #72]	@ (800ce4c <xTimerCreateTimerTask+0x8c>)
 800ce04:	f7fe ff72 	bl	800bcec <xTaskCreateStatic>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	4a11      	ldr	r2, [pc, #68]	@ (800ce50 <xTimerCreateTimerTask+0x90>)
 800ce0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce0e:	4b10      	ldr	r3, [pc, #64]	@ (800ce50 <xTimerCreateTimerTask+0x90>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d001      	beq.n	800ce1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce16:	2301      	movs	r3, #1
 800ce18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d10b      	bne.n	800ce38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	613b      	str	r3, [r7, #16]
}
 800ce32:	bf00      	nop
 800ce34:	bf00      	nop
 800ce36:	e7fd      	b.n	800ce34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce38:	697b      	ldr	r3, [r7, #20]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3718      	adds	r7, #24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	20007908 	.word	0x20007908
 800ce48:	080129e4 	.word	0x080129e4
 800ce4c:	0800cf8d 	.word	0x0800cf8d
 800ce50:	2000790c 	.word	0x2000790c

0800ce54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b08a      	sub	sp, #40	@ 0x28
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce62:	2300      	movs	r3, #0
 800ce64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10b      	bne.n	800ce84 <xTimerGenericCommand+0x30>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	623b      	str	r3, [r7, #32]
}
 800ce7e:	bf00      	nop
 800ce80:	bf00      	nop
 800ce82:	e7fd      	b.n	800ce80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce84:	4b19      	ldr	r3, [pc, #100]	@ (800ceec <xTimerGenericCommand+0x98>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d02a      	beq.n	800cee2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2b05      	cmp	r3, #5
 800ce9c:	dc18      	bgt.n	800ced0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce9e:	f7ff fdad 	bl	800c9fc <xTaskGetSchedulerState>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d109      	bne.n	800cebc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cea8:	4b10      	ldr	r3, [pc, #64]	@ (800ceec <xTimerGenericCommand+0x98>)
 800ceaa:	6818      	ldr	r0, [r3, #0]
 800ceac:	f107 0110 	add.w	r1, r7, #16
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb4:	f7fe f8a2 	bl	800affc <xQueueGenericSend>
 800ceb8:	6278      	str	r0, [r7, #36]	@ 0x24
 800ceba:	e012      	b.n	800cee2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cebc:	4b0b      	ldr	r3, [pc, #44]	@ (800ceec <xTimerGenericCommand+0x98>)
 800cebe:	6818      	ldr	r0, [r3, #0]
 800cec0:	f107 0110 	add.w	r1, r7, #16
 800cec4:	2300      	movs	r3, #0
 800cec6:	2200      	movs	r2, #0
 800cec8:	f7fe f898 	bl	800affc <xQueueGenericSend>
 800cecc:	6278      	str	r0, [r7, #36]	@ 0x24
 800cece:	e008      	b.n	800cee2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ced0:	4b06      	ldr	r3, [pc, #24]	@ (800ceec <xTimerGenericCommand+0x98>)
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	f107 0110 	add.w	r1, r7, #16
 800ced8:	2300      	movs	r3, #0
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	f7fe f990 	bl	800b200 <xQueueGenericSendFromISR>
 800cee0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3728      	adds	r7, #40	@ 0x28
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20007908 	.word	0x20007908

0800cef0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cefa:	4b23      	ldr	r3, [pc, #140]	@ (800cf88 <prvProcessExpiredTimer+0x98>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	3304      	adds	r3, #4
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fd fe4d 	bl	800aba8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf14:	f003 0304 	and.w	r3, r3, #4
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d023      	beq.n	800cf64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	699a      	ldr	r2, [r3, #24]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	18d1      	adds	r1, r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	683a      	ldr	r2, [r7, #0]
 800cf28:	6978      	ldr	r0, [r7, #20]
 800cf2a:	f000 f8d5 	bl	800d0d8 <prvInsertTimerInActiveList>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d020      	beq.n	800cf76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf34:	2300      	movs	r3, #0
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	2300      	movs	r3, #0
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	6978      	ldr	r0, [r7, #20]
 800cf40:	f7ff ff88 	bl	800ce54 <xTimerGenericCommand>
 800cf44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d114      	bne.n	800cf76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	60fb      	str	r3, [r7, #12]
}
 800cf5e:	bf00      	nop
 800cf60:	bf00      	nop
 800cf62:	e7fd      	b.n	800cf60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf6a:	f023 0301 	bic.w	r3, r3, #1
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	4798      	blx	r3
}
 800cf7e:	bf00      	nop
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	20007900 	.word	0x20007900

0800cf8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf94:	f107 0308 	add.w	r3, r7, #8
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 f859 	bl	800d050 <prvGetNextExpireTime>
 800cf9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f000 f805 	bl	800cfb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cfaa:	f000 f8d7 	bl	800d15c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfae:	bf00      	nop
 800cfb0:	e7f0      	b.n	800cf94 <prvTimerTask+0x8>
	...

0800cfb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cfbe:	f7ff f8fd 	bl	800c1bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfc2:	f107 0308 	add.w	r3, r7, #8
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 f866 	bl	800d098 <prvSampleTimeNow>
 800cfcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d130      	bne.n	800d036 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10a      	bne.n	800cff0 <prvProcessTimerOrBlockTask+0x3c>
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d806      	bhi.n	800cff0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cfe2:	f7ff f8f9 	bl	800c1d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cfe6:	68f9      	ldr	r1, [r7, #12]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7ff ff81 	bl	800cef0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cfee:	e024      	b.n	800d03a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d008      	beq.n	800d008 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cff6:	4b13      	ldr	r3, [pc, #76]	@ (800d044 <prvProcessTimerOrBlockTask+0x90>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <prvProcessTimerOrBlockTask+0x50>
 800d000:	2301      	movs	r3, #1
 800d002:	e000      	b.n	800d006 <prvProcessTimerOrBlockTask+0x52>
 800d004:	2300      	movs	r3, #0
 800d006:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d008:	4b0f      	ldr	r3, [pc, #60]	@ (800d048 <prvProcessTimerOrBlockTask+0x94>)
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	4619      	mov	r1, r3
 800d016:	f7fe fe35 	bl	800bc84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d01a:	f7ff f8dd 	bl	800c1d8 <xTaskResumeAll>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10a      	bne.n	800d03a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d024:	4b09      	ldr	r3, [pc, #36]	@ (800d04c <prvProcessTimerOrBlockTask+0x98>)
 800d026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	f3bf 8f6f 	isb	sy
}
 800d034:	e001      	b.n	800d03a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d036:	f7ff f8cf 	bl	800c1d8 <xTaskResumeAll>
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20007904 	.word	0x20007904
 800d048:	20007908 	.word	0x20007908
 800d04c:	e000ed04 	.word	0xe000ed04

0800d050 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d058:	4b0e      	ldr	r3, [pc, #56]	@ (800d094 <prvGetNextExpireTime+0x44>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d101      	bne.n	800d066 <prvGetNextExpireTime+0x16>
 800d062:	2201      	movs	r2, #1
 800d064:	e000      	b.n	800d068 <prvGetNextExpireTime+0x18>
 800d066:	2200      	movs	r2, #0
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d105      	bne.n	800d080 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d074:	4b07      	ldr	r3, [pc, #28]	@ (800d094 <prvGetNextExpireTime+0x44>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	60fb      	str	r3, [r7, #12]
 800d07e:	e001      	b.n	800d084 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d080:	2300      	movs	r3, #0
 800d082:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d084:	68fb      	ldr	r3, [r7, #12]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	20007900 	.word	0x20007900

0800d098 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0a0:	f7ff f938 	bl	800c314 <xTaskGetTickCount>
 800d0a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d0d4 <prvSampleTimeNow+0x3c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d205      	bcs.n	800d0bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0b0:	f000 f93a 	bl	800d328 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	601a      	str	r2, [r3, #0]
 800d0ba:	e002      	b.n	800d0c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0c2:	4a04      	ldr	r2, [pc, #16]	@ (800d0d4 <prvSampleTimeNow+0x3c>)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20007910 	.word	0x20007910

0800d0d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
 800d0e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	68ba      	ldr	r2, [r7, #8]
 800d0ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d0f6:	68ba      	ldr	r2, [r7, #8]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d812      	bhi.n	800d124 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	1ad2      	subs	r2, r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	699b      	ldr	r3, [r3, #24]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d302      	bcc.n	800d112 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d10c:	2301      	movs	r3, #1
 800d10e:	617b      	str	r3, [r7, #20]
 800d110:	e01b      	b.n	800d14a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d112:	4b10      	ldr	r3, [pc, #64]	@ (800d154 <prvInsertTimerInActiveList+0x7c>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3304      	adds	r3, #4
 800d11a:	4619      	mov	r1, r3
 800d11c:	4610      	mov	r0, r2
 800d11e:	f7fd fd0a 	bl	800ab36 <vListInsert>
 800d122:	e012      	b.n	800d14a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d206      	bcs.n	800d13a <prvInsertTimerInActiveList+0x62>
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	429a      	cmp	r2, r3
 800d132:	d302      	bcc.n	800d13a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d134:	2301      	movs	r3, #1
 800d136:	617b      	str	r3, [r7, #20]
 800d138:	e007      	b.n	800d14a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d13a:	4b07      	ldr	r3, [pc, #28]	@ (800d158 <prvInsertTimerInActiveList+0x80>)
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3304      	adds	r3, #4
 800d142:	4619      	mov	r1, r3
 800d144:	4610      	mov	r0, r2
 800d146:	f7fd fcf6 	bl	800ab36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d14a:	697b      	ldr	r3, [r7, #20]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	20007904 	.word	0x20007904
 800d158:	20007900 	.word	0x20007900

0800d15c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08e      	sub	sp, #56	@ 0x38
 800d160:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d162:	e0ce      	b.n	800d302 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	da19      	bge.n	800d19e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d16a:	1d3b      	adds	r3, r7, #4
 800d16c:	3304      	adds	r3, #4
 800d16e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10b      	bne.n	800d18e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	61fb      	str	r3, [r7, #28]
}
 800d188:	bf00      	nop
 800d18a:	bf00      	nop
 800d18c:	e7fd      	b.n	800d18a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d194:	6850      	ldr	r0, [r2, #4]
 800d196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d198:	6892      	ldr	r2, [r2, #8]
 800d19a:	4611      	mov	r1, r2
 800d19c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f2c0 80ae 	blt.w	800d302 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d004      	beq.n	800d1bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fd fcf6 	bl	800aba8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1bc:	463b      	mov	r3, r7
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7ff ff6a 	bl	800d098 <prvSampleTimeNow>
 800d1c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b09      	cmp	r3, #9
 800d1ca:	f200 8097 	bhi.w	800d2fc <prvProcessReceivedCommands+0x1a0>
 800d1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d1d4 <prvProcessReceivedCommands+0x78>)
 800d1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d4:	0800d1fd 	.word	0x0800d1fd
 800d1d8:	0800d1fd 	.word	0x0800d1fd
 800d1dc:	0800d1fd 	.word	0x0800d1fd
 800d1e0:	0800d273 	.word	0x0800d273
 800d1e4:	0800d287 	.word	0x0800d287
 800d1e8:	0800d2d3 	.word	0x0800d2d3
 800d1ec:	0800d1fd 	.word	0x0800d1fd
 800d1f0:	0800d1fd 	.word	0x0800d1fd
 800d1f4:	0800d273 	.word	0x0800d273
 800d1f8:	0800d287 	.word	0x0800d287
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d202:	f043 0301 	orr.w	r3, r3, #1
 800d206:	b2da      	uxtb	r2, r3
 800d208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d212:	699b      	ldr	r3, [r3, #24]
 800d214:	18d1      	adds	r1, r2, r3
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d21a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d21c:	f7ff ff5c 	bl	800d0d8 <prvInsertTimerInActiveList>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d06c      	beq.n	800d300 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d22c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d234:	f003 0304 	and.w	r3, r3, #4
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d061      	beq.n	800d300 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	441a      	add	r2, r3
 800d244:	2300      	movs	r3, #0
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	2300      	movs	r3, #0
 800d24a:	2100      	movs	r1, #0
 800d24c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d24e:	f7ff fe01 	bl	800ce54 <xTimerGenericCommand>
 800d252:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d152      	bne.n	800d300 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	61bb      	str	r3, [r7, #24]
}
 800d26c:	bf00      	nop
 800d26e:	bf00      	nop
 800d270:	e7fd      	b.n	800d26e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d278:	f023 0301 	bic.w	r3, r3, #1
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d280:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d284:	e03d      	b.n	800d302 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d28c:	f043 0301 	orr.w	r3, r3, #1
 800d290:	b2da      	uxtb	r2, r3
 800d292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a0:	699b      	ldr	r3, [r3, #24]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10b      	bne.n	800d2be <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2aa:	f383 8811 	msr	BASEPRI, r3
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	617b      	str	r3, [r7, #20]
}
 800d2b8:	bf00      	nop
 800d2ba:	bf00      	nop
 800d2bc:	e7fd      	b.n	800d2ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c0:	699a      	ldr	r2, [r3, #24]
 800d2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c4:	18d1      	adds	r1, r2, r3
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2cc:	f7ff ff04 	bl	800d0d8 <prvInsertTimerInActiveList>
					break;
 800d2d0:	e017      	b.n	800d302 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2d8:	f003 0302 	and.w	r3, r3, #2
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d103      	bne.n	800d2e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d2e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2e2:	f000 fbe9 	bl	800dab8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d2e6:	e00c      	b.n	800d302 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2ee:	f023 0301 	bic.w	r3, r3, #1
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d2fa:	e002      	b.n	800d302 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d2fc:	bf00      	nop
 800d2fe:	e000      	b.n	800d302 <prvProcessReceivedCommands+0x1a6>
					break;
 800d300:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d302:	4b08      	ldr	r3, [pc, #32]	@ (800d324 <prvProcessReceivedCommands+0x1c8>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	1d39      	adds	r1, r7, #4
 800d308:	2200      	movs	r2, #0
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fe f8a6 	bl	800b45c <xQueueReceive>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	f47f af26 	bne.w	800d164 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d318:	bf00      	nop
 800d31a:	bf00      	nop
 800d31c:	3730      	adds	r7, #48	@ 0x30
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20007908 	.word	0x20007908

0800d328 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b088      	sub	sp, #32
 800d32c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d32e:	e049      	b.n	800d3c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d330:	4b2e      	ldr	r3, [pc, #184]	@ (800d3ec <prvSwitchTimerLists+0xc4>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d33a:	4b2c      	ldr	r3, [pc, #176]	@ (800d3ec <prvSwitchTimerLists+0xc4>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3304      	adds	r3, #4
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fd fc2d 	bl	800aba8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d35c:	f003 0304 	and.w	r3, r3, #4
 800d360:	2b00      	cmp	r3, #0
 800d362:	d02f      	beq.n	800d3c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	699b      	ldr	r3, [r3, #24]
 800d368:	693a      	ldr	r2, [r7, #16]
 800d36a:	4413      	add	r3, r2
 800d36c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	429a      	cmp	r2, r3
 800d374:	d90e      	bls.n	800d394 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d382:	4b1a      	ldr	r3, [pc, #104]	@ (800d3ec <prvSwitchTimerLists+0xc4>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3304      	adds	r3, #4
 800d38a:	4619      	mov	r1, r3
 800d38c:	4610      	mov	r0, r2
 800d38e:	f7fd fbd2 	bl	800ab36 <vListInsert>
 800d392:	e017      	b.n	800d3c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d394:	2300      	movs	r3, #0
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	2300      	movs	r3, #0
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	2100      	movs	r1, #0
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f7ff fd58 	bl	800ce54 <xTimerGenericCommand>
 800d3a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10b      	bne.n	800d3c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	603b      	str	r3, [r7, #0]
}
 800d3be:	bf00      	nop
 800d3c0:	bf00      	nop
 800d3c2:	e7fd      	b.n	800d3c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3c4:	4b09      	ldr	r3, [pc, #36]	@ (800d3ec <prvSwitchTimerLists+0xc4>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1b0      	bne.n	800d330 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d3ce:	4b07      	ldr	r3, [pc, #28]	@ (800d3ec <prvSwitchTimerLists+0xc4>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d3d4:	4b06      	ldr	r3, [pc, #24]	@ (800d3f0 <prvSwitchTimerLists+0xc8>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a04      	ldr	r2, [pc, #16]	@ (800d3ec <prvSwitchTimerLists+0xc4>)
 800d3da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d3dc:	4a04      	ldr	r2, [pc, #16]	@ (800d3f0 <prvSwitchTimerLists+0xc8>)
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	6013      	str	r3, [r2, #0]
}
 800d3e2:	bf00      	nop
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	20007900 	.word	0x20007900
 800d3f0:	20007904 	.word	0x20007904

0800d3f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d3fa:	f000 f96d 	bl	800d6d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d3fe:	4b15      	ldr	r3, [pc, #84]	@ (800d454 <prvCheckForValidListAndQueue+0x60>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d120      	bne.n	800d448 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d406:	4814      	ldr	r0, [pc, #80]	@ (800d458 <prvCheckForValidListAndQueue+0x64>)
 800d408:	f7fd fb44 	bl	800aa94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d40c:	4813      	ldr	r0, [pc, #76]	@ (800d45c <prvCheckForValidListAndQueue+0x68>)
 800d40e:	f7fd fb41 	bl	800aa94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d412:	4b13      	ldr	r3, [pc, #76]	@ (800d460 <prvCheckForValidListAndQueue+0x6c>)
 800d414:	4a10      	ldr	r2, [pc, #64]	@ (800d458 <prvCheckForValidListAndQueue+0x64>)
 800d416:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d418:	4b12      	ldr	r3, [pc, #72]	@ (800d464 <prvCheckForValidListAndQueue+0x70>)
 800d41a:	4a10      	ldr	r2, [pc, #64]	@ (800d45c <prvCheckForValidListAndQueue+0x68>)
 800d41c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d41e:	2300      	movs	r3, #0
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	4b11      	ldr	r3, [pc, #68]	@ (800d468 <prvCheckForValidListAndQueue+0x74>)
 800d424:	4a11      	ldr	r2, [pc, #68]	@ (800d46c <prvCheckForValidListAndQueue+0x78>)
 800d426:	2110      	movs	r1, #16
 800d428:	200a      	movs	r0, #10
 800d42a:	f7fd fc51 	bl	800acd0 <xQueueGenericCreateStatic>
 800d42e:	4603      	mov	r3, r0
 800d430:	4a08      	ldr	r2, [pc, #32]	@ (800d454 <prvCheckForValidListAndQueue+0x60>)
 800d432:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d434:	4b07      	ldr	r3, [pc, #28]	@ (800d454 <prvCheckForValidListAndQueue+0x60>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d005      	beq.n	800d448 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d43c:	4b05      	ldr	r3, [pc, #20]	@ (800d454 <prvCheckForValidListAndQueue+0x60>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	490b      	ldr	r1, [pc, #44]	@ (800d470 <prvCheckForValidListAndQueue+0x7c>)
 800d442:	4618      	mov	r0, r3
 800d444:	f7fe fbca 	bl	800bbdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d448:	f000 f978 	bl	800d73c <vPortExitCritical>
}
 800d44c:	bf00      	nop
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	20007908 	.word	0x20007908
 800d458:	200078d8 	.word	0x200078d8
 800d45c:	200078ec 	.word	0x200078ec
 800d460:	20007900 	.word	0x20007900
 800d464:	20007904 	.word	0x20007904
 800d468:	200079b4 	.word	0x200079b4
 800d46c:	20007914 	.word	0x20007914
 800d470:	080129ec 	.word	0x080129ec

0800d474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	3b04      	subs	r3, #4
 800d484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	3b04      	subs	r3, #4
 800d492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	f023 0201 	bic.w	r2, r3, #1
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	3b04      	subs	r3, #4
 800d4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800d4d8 <pxPortInitialiseStack+0x64>)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3b14      	subs	r3, #20
 800d4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	3b04      	subs	r3, #4
 800d4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f06f 0202 	mvn.w	r2, #2
 800d4c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3b20      	subs	r3, #32
 800d4c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3714      	adds	r7, #20
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr
 800d4d8:	0800d4dd 	.word	0x0800d4dd

0800d4dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4e6:	4b13      	ldr	r3, [pc, #76]	@ (800d534 <prvTaskExitError+0x58>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d00b      	beq.n	800d508 <prvTaskExitError+0x2c>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	60fb      	str	r3, [r7, #12]
}
 800d502:	bf00      	nop
 800d504:	bf00      	nop
 800d506:	e7fd      	b.n	800d504 <prvTaskExitError+0x28>
	__asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	60bb      	str	r3, [r7, #8]
}
 800d51a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d51c:	bf00      	nop
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d0fc      	beq.n	800d51e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d524:	bf00      	nop
 800d526:	bf00      	nop
 800d528:	3714      	adds	r7, #20
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	20000028 	.word	0x20000028
	...

0800d540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d540:	4b07      	ldr	r3, [pc, #28]	@ (800d560 <pxCurrentTCBConst2>)
 800d542:	6819      	ldr	r1, [r3, #0]
 800d544:	6808      	ldr	r0, [r1, #0]
 800d546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54a:	f380 8809 	msr	PSP, r0
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f04f 0000 	mov.w	r0, #0
 800d556:	f380 8811 	msr	BASEPRI, r0
 800d55a:	4770      	bx	lr
 800d55c:	f3af 8000 	nop.w

0800d560 <pxCurrentTCBConst2>:
 800d560:	200073d0 	.word	0x200073d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop

0800d568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d568:	4808      	ldr	r0, [pc, #32]	@ (800d58c <prvPortStartFirstTask+0x24>)
 800d56a:	6800      	ldr	r0, [r0, #0]
 800d56c:	6800      	ldr	r0, [r0, #0]
 800d56e:	f380 8808 	msr	MSP, r0
 800d572:	f04f 0000 	mov.w	r0, #0
 800d576:	f380 8814 	msr	CONTROL, r0
 800d57a:	b662      	cpsie	i
 800d57c:	b661      	cpsie	f
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	df00      	svc	0
 800d588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d58a:	bf00      	nop
 800d58c:	e000ed08 	.word	0xe000ed08

0800d590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d596:	4b47      	ldr	r3, [pc, #284]	@ (800d6b4 <xPortStartScheduler+0x124>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a47      	ldr	r2, [pc, #284]	@ (800d6b8 <xPortStartScheduler+0x128>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d10b      	bne.n	800d5b8 <xPortStartScheduler+0x28>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	613b      	str	r3, [r7, #16]
}
 800d5b2:	bf00      	nop
 800d5b4:	bf00      	nop
 800d5b6:	e7fd      	b.n	800d5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5b8:	4b3e      	ldr	r3, [pc, #248]	@ (800d6b4 <xPortStartScheduler+0x124>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a3f      	ldr	r2, [pc, #252]	@ (800d6bc <xPortStartScheduler+0x12c>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d10b      	bne.n	800d5da <xPortStartScheduler+0x4a>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	60fb      	str	r3, [r7, #12]
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop
 800d5d8:	e7fd      	b.n	800d5d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5da:	4b39      	ldr	r3, [pc, #228]	@ (800d6c0 <xPortStartScheduler+0x130>)
 800d5dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	22ff      	movs	r2, #255	@ 0xff
 800d5ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5f4:	78fb      	ldrb	r3, [r7, #3]
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	4b31      	ldr	r3, [pc, #196]	@ (800d6c4 <xPortStartScheduler+0x134>)
 800d600:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d602:	4b31      	ldr	r3, [pc, #196]	@ (800d6c8 <xPortStartScheduler+0x138>)
 800d604:	2207      	movs	r2, #7
 800d606:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d608:	e009      	b.n	800d61e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d60a:	4b2f      	ldr	r3, [pc, #188]	@ (800d6c8 <xPortStartScheduler+0x138>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3b01      	subs	r3, #1
 800d610:	4a2d      	ldr	r2, [pc, #180]	@ (800d6c8 <xPortStartScheduler+0x138>)
 800d612:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d614:	78fb      	ldrb	r3, [r7, #3]
 800d616:	b2db      	uxtb	r3, r3
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d61e:	78fb      	ldrb	r3, [r7, #3]
 800d620:	b2db      	uxtb	r3, r3
 800d622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d626:	2b80      	cmp	r3, #128	@ 0x80
 800d628:	d0ef      	beq.n	800d60a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d62a:	4b27      	ldr	r3, [pc, #156]	@ (800d6c8 <xPortStartScheduler+0x138>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f1c3 0307 	rsb	r3, r3, #7
 800d632:	2b04      	cmp	r3, #4
 800d634:	d00b      	beq.n	800d64e <xPortStartScheduler+0xbe>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	60bb      	str	r3, [r7, #8]
}
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
 800d64c:	e7fd      	b.n	800d64a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d64e:	4b1e      	ldr	r3, [pc, #120]	@ (800d6c8 <xPortStartScheduler+0x138>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	021b      	lsls	r3, r3, #8
 800d654:	4a1c      	ldr	r2, [pc, #112]	@ (800d6c8 <xPortStartScheduler+0x138>)
 800d656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d658:	4b1b      	ldr	r3, [pc, #108]	@ (800d6c8 <xPortStartScheduler+0x138>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d660:	4a19      	ldr	r2, [pc, #100]	@ (800d6c8 <xPortStartScheduler+0x138>)
 800d662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	b2da      	uxtb	r2, r3
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d66c:	4b17      	ldr	r3, [pc, #92]	@ (800d6cc <xPortStartScheduler+0x13c>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a16      	ldr	r2, [pc, #88]	@ (800d6cc <xPortStartScheduler+0x13c>)
 800d672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d678:	4b14      	ldr	r3, [pc, #80]	@ (800d6cc <xPortStartScheduler+0x13c>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a13      	ldr	r2, [pc, #76]	@ (800d6cc <xPortStartScheduler+0x13c>)
 800d67e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d684:	f000 f8da 	bl	800d83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d688:	4b11      	ldr	r3, [pc, #68]	@ (800d6d0 <xPortStartScheduler+0x140>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d68e:	f000 f8f9 	bl	800d884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d692:	4b10      	ldr	r3, [pc, #64]	@ (800d6d4 <xPortStartScheduler+0x144>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a0f      	ldr	r2, [pc, #60]	@ (800d6d4 <xPortStartScheduler+0x144>)
 800d698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d69c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d69e:	f7ff ff63 	bl	800d568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6a2:	f7fe ff13 	bl	800c4cc <vTaskSwitchContext>
	prvTaskExitError();
 800d6a6:	f7ff ff19 	bl	800d4dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	e000ed00 	.word	0xe000ed00
 800d6b8:	410fc271 	.word	0x410fc271
 800d6bc:	410fc270 	.word	0x410fc270
 800d6c0:	e000e400 	.word	0xe000e400
 800d6c4:	20007a04 	.word	0x20007a04
 800d6c8:	20007a08 	.word	0x20007a08
 800d6cc:	e000ed20 	.word	0xe000ed20
 800d6d0:	20000028 	.word	0x20000028
 800d6d4:	e000ef34 	.word	0xe000ef34

0800d6d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	607b      	str	r3, [r7, #4]
}
 800d6f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d6f2:	4b10      	ldr	r3, [pc, #64]	@ (800d734 <vPortEnterCritical+0x5c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	4a0e      	ldr	r2, [pc, #56]	@ (800d734 <vPortEnterCritical+0x5c>)
 800d6fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d6fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d734 <vPortEnterCritical+0x5c>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b01      	cmp	r3, #1
 800d702:	d110      	bne.n	800d726 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d704:	4b0c      	ldr	r3, [pc, #48]	@ (800d738 <vPortEnterCritical+0x60>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00b      	beq.n	800d726 <vPortEnterCritical+0x4e>
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	603b      	str	r3, [r7, #0]
}
 800d720:	bf00      	nop
 800d722:	bf00      	nop
 800d724:	e7fd      	b.n	800d722 <vPortEnterCritical+0x4a>
	}
}
 800d726:	bf00      	nop
 800d728:	370c      	adds	r7, #12
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop
 800d734:	20000028 	.word	0x20000028
 800d738:	e000ed04 	.word	0xe000ed04

0800d73c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d742:	4b12      	ldr	r3, [pc, #72]	@ (800d78c <vPortExitCritical+0x50>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10b      	bne.n	800d762 <vPortExitCritical+0x26>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	607b      	str	r3, [r7, #4]
}
 800d75c:	bf00      	nop
 800d75e:	bf00      	nop
 800d760:	e7fd      	b.n	800d75e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d762:	4b0a      	ldr	r3, [pc, #40]	@ (800d78c <vPortExitCritical+0x50>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	3b01      	subs	r3, #1
 800d768:	4a08      	ldr	r2, [pc, #32]	@ (800d78c <vPortExitCritical+0x50>)
 800d76a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d76c:	4b07      	ldr	r3, [pc, #28]	@ (800d78c <vPortExitCritical+0x50>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d105      	bne.n	800d780 <vPortExitCritical+0x44>
 800d774:	2300      	movs	r3, #0
 800d776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	f383 8811 	msr	BASEPRI, r3
}
 800d77e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr
 800d78c:	20000028 	.word	0x20000028

0800d790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d790:	f3ef 8009 	mrs	r0, PSP
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	4b15      	ldr	r3, [pc, #84]	@ (800d7f0 <pxCurrentTCBConst>)
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	f01e 0f10 	tst.w	lr, #16
 800d7a0:	bf08      	it	eq
 800d7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7aa:	6010      	str	r0, [r2, #0]
 800d7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d7b4:	f380 8811 	msr	BASEPRI, r0
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f7fe fe84 	bl	800c4cc <vTaskSwitchContext>
 800d7c4:	f04f 0000 	mov.w	r0, #0
 800d7c8:	f380 8811 	msr	BASEPRI, r0
 800d7cc:	bc09      	pop	{r0, r3}
 800d7ce:	6819      	ldr	r1, [r3, #0]
 800d7d0:	6808      	ldr	r0, [r1, #0]
 800d7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d6:	f01e 0f10 	tst.w	lr, #16
 800d7da:	bf08      	it	eq
 800d7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d7e0:	f380 8809 	msr	PSP, r0
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	f3af 8000 	nop.w

0800d7f0 <pxCurrentTCBConst>:
 800d7f0:	200073d0 	.word	0x200073d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop

0800d7f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	607b      	str	r3, [r7, #4]
}
 800d810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d812:	f7fe fda1 	bl	800c358 <xTaskIncrementTick>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d003      	beq.n	800d824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d81c:	4b06      	ldr	r3, [pc, #24]	@ (800d838 <xPortSysTickHandler+0x40>)
 800d81e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	2300      	movs	r3, #0
 800d826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	f383 8811 	msr	BASEPRI, r3
}
 800d82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	e000ed04 	.word	0xe000ed04

0800d83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d83c:	b480      	push	{r7}
 800d83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d840:	4b0b      	ldr	r3, [pc, #44]	@ (800d870 <vPortSetupTimerInterrupt+0x34>)
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d846:	4b0b      	ldr	r3, [pc, #44]	@ (800d874 <vPortSetupTimerInterrupt+0x38>)
 800d848:	2200      	movs	r2, #0
 800d84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d84c:	4b0a      	ldr	r3, [pc, #40]	@ (800d878 <vPortSetupTimerInterrupt+0x3c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a0a      	ldr	r2, [pc, #40]	@ (800d87c <vPortSetupTimerInterrupt+0x40>)
 800d852:	fba2 2303 	umull	r2, r3, r2, r3
 800d856:	099b      	lsrs	r3, r3, #6
 800d858:	4a09      	ldr	r2, [pc, #36]	@ (800d880 <vPortSetupTimerInterrupt+0x44>)
 800d85a:	3b01      	subs	r3, #1
 800d85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d85e:	4b04      	ldr	r3, [pc, #16]	@ (800d870 <vPortSetupTimerInterrupt+0x34>)
 800d860:	2207      	movs	r2, #7
 800d862:	601a      	str	r2, [r3, #0]
}
 800d864:	bf00      	nop
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	e000e010 	.word	0xe000e010
 800d874:	e000e018 	.word	0xe000e018
 800d878:	20000018 	.word	0x20000018
 800d87c:	10624dd3 	.word	0x10624dd3
 800d880:	e000e014 	.word	0xe000e014

0800d884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d884:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d894 <vPortEnableVFP+0x10>
 800d888:	6801      	ldr	r1, [r0, #0]
 800d88a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d88e:	6001      	str	r1, [r0, #0]
 800d890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d892:	bf00      	nop
 800d894:	e000ed88 	.word	0xe000ed88

0800d898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d89e:	f3ef 8305 	mrs	r3, IPSR
 800d8a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b0f      	cmp	r3, #15
 800d8a8:	d915      	bls.n	800d8d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8aa:	4a18      	ldr	r2, [pc, #96]	@ (800d90c <vPortValidateInterruptPriority+0x74>)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8b4:	4b16      	ldr	r3, [pc, #88]	@ (800d910 <vPortValidateInterruptPriority+0x78>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	7afa      	ldrb	r2, [r7, #11]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d20b      	bcs.n	800d8d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	607b      	str	r3, [r7, #4]
}
 800d8d0:	bf00      	nop
 800d8d2:	bf00      	nop
 800d8d4:	e7fd      	b.n	800d8d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d914 <vPortValidateInterruptPriority+0x7c>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d8de:	4b0e      	ldr	r3, [pc, #56]	@ (800d918 <vPortValidateInterruptPriority+0x80>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d90b      	bls.n	800d8fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	603b      	str	r3, [r7, #0]
}
 800d8f8:	bf00      	nop
 800d8fa:	bf00      	nop
 800d8fc:	e7fd      	b.n	800d8fa <vPortValidateInterruptPriority+0x62>
	}
 800d8fe:	bf00      	nop
 800d900:	3714      	adds	r7, #20
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	e000e3f0 	.word	0xe000e3f0
 800d910:	20007a04 	.word	0x20007a04
 800d914:	e000ed0c 	.word	0xe000ed0c
 800d918:	20007a08 	.word	0x20007a08

0800d91c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08a      	sub	sp, #40	@ 0x28
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d924:	2300      	movs	r3, #0
 800d926:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d928:	f7fe fc48 	bl	800c1bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d92c:	4b5c      	ldr	r3, [pc, #368]	@ (800daa0 <pvPortMalloc+0x184>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d934:	f000 f924 	bl	800db80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d938:	4b5a      	ldr	r3, [pc, #360]	@ (800daa4 <pvPortMalloc+0x188>)
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4013      	ands	r3, r2
 800d940:	2b00      	cmp	r3, #0
 800d942:	f040 8095 	bne.w	800da70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01e      	beq.n	800d98a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d94c:	2208      	movs	r2, #8
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4413      	add	r3, r2
 800d952:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f003 0307 	and.w	r3, r3, #7
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d015      	beq.n	800d98a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f023 0307 	bic.w	r3, r3, #7
 800d964:	3308      	adds	r3, #8
 800d966:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f003 0307 	and.w	r3, r3, #7
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00b      	beq.n	800d98a <pvPortMalloc+0x6e>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	617b      	str	r3, [r7, #20]
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop
 800d988:	e7fd      	b.n	800d986 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d06f      	beq.n	800da70 <pvPortMalloc+0x154>
 800d990:	4b45      	ldr	r3, [pc, #276]	@ (800daa8 <pvPortMalloc+0x18c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	429a      	cmp	r2, r3
 800d998:	d86a      	bhi.n	800da70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d99a:	4b44      	ldr	r3, [pc, #272]	@ (800daac <pvPortMalloc+0x190>)
 800d99c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d99e:	4b43      	ldr	r3, [pc, #268]	@ (800daac <pvPortMalloc+0x190>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9a4:	e004      	b.n	800d9b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d903      	bls.n	800d9c2 <pvPortMalloc+0xa6>
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1f1      	bne.n	800d9a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9c2:	4b37      	ldr	r3, [pc, #220]	@ (800daa0 <pvPortMalloc+0x184>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d051      	beq.n	800da70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9cc:	6a3b      	ldr	r3, [r7, #32]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2208      	movs	r2, #8
 800d9d2:	4413      	add	r3, r2
 800d9d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	6a3b      	ldr	r3, [r7, #32]
 800d9dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e0:	685a      	ldr	r2, [r3, #4]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	1ad2      	subs	r2, r2, r3
 800d9e6:	2308      	movs	r3, #8
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d920      	bls.n	800da30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	f003 0307 	and.w	r3, r3, #7
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00b      	beq.n	800da18 <pvPortMalloc+0xfc>
	__asm volatile
 800da00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	613b      	str	r3, [r7, #16]
}
 800da12:	bf00      	nop
 800da14:	bf00      	nop
 800da16:	e7fd      	b.n	800da14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	1ad2      	subs	r2, r2, r3
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da2a:	69b8      	ldr	r0, [r7, #24]
 800da2c:	f000 f90a 	bl	800dc44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da30:	4b1d      	ldr	r3, [pc, #116]	@ (800daa8 <pvPortMalloc+0x18c>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	4a1b      	ldr	r2, [pc, #108]	@ (800daa8 <pvPortMalloc+0x18c>)
 800da3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da3e:	4b1a      	ldr	r3, [pc, #104]	@ (800daa8 <pvPortMalloc+0x18c>)
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	4b1b      	ldr	r3, [pc, #108]	@ (800dab0 <pvPortMalloc+0x194>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	429a      	cmp	r2, r3
 800da48:	d203      	bcs.n	800da52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da4a:	4b17      	ldr	r3, [pc, #92]	@ (800daa8 <pvPortMalloc+0x18c>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a18      	ldr	r2, [pc, #96]	@ (800dab0 <pvPortMalloc+0x194>)
 800da50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da54:	685a      	ldr	r2, [r3, #4]
 800da56:	4b13      	ldr	r3, [pc, #76]	@ (800daa4 <pvPortMalloc+0x188>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	431a      	orrs	r2, r3
 800da5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da62:	2200      	movs	r2, #0
 800da64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da66:	4b13      	ldr	r3, [pc, #76]	@ (800dab4 <pvPortMalloc+0x198>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	3301      	adds	r3, #1
 800da6c:	4a11      	ldr	r2, [pc, #68]	@ (800dab4 <pvPortMalloc+0x198>)
 800da6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da70:	f7fe fbb2 	bl	800c1d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	f003 0307 	and.w	r3, r3, #7
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00b      	beq.n	800da96 <pvPortMalloc+0x17a>
	__asm volatile
 800da7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	60fb      	str	r3, [r7, #12]
}
 800da90:	bf00      	nop
 800da92:	bf00      	nop
 800da94:	e7fd      	b.n	800da92 <pvPortMalloc+0x176>
	return pvReturn;
 800da96:	69fb      	ldr	r3, [r7, #28]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3728      	adds	r7, #40	@ 0x28
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	2000b894 	.word	0x2000b894
 800daa4:	2000b8a8 	.word	0x2000b8a8
 800daa8:	2000b898 	.word	0x2000b898
 800daac:	2000b88c 	.word	0x2000b88c
 800dab0:	2000b89c 	.word	0x2000b89c
 800dab4:	2000b8a0 	.word	0x2000b8a0

0800dab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d04f      	beq.n	800db6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800daca:	2308      	movs	r3, #8
 800dacc:	425b      	negs	r3, r3
 800dace:	697a      	ldr	r2, [r7, #20]
 800dad0:	4413      	add	r3, r2
 800dad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	4b25      	ldr	r3, [pc, #148]	@ (800db74 <vPortFree+0xbc>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4013      	ands	r3, r2
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10b      	bne.n	800dafe <vPortFree+0x46>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	60fb      	str	r3, [r7, #12]
}
 800daf8:	bf00      	nop
 800dafa:	bf00      	nop
 800dafc:	e7fd      	b.n	800dafa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00b      	beq.n	800db1e <vPortFree+0x66>
	__asm volatile
 800db06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db0a:	f383 8811 	msr	BASEPRI, r3
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f3bf 8f4f 	dsb	sy
 800db16:	60bb      	str	r3, [r7, #8]
}
 800db18:	bf00      	nop
 800db1a:	bf00      	nop
 800db1c:	e7fd      	b.n	800db1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	4b14      	ldr	r3, [pc, #80]	@ (800db74 <vPortFree+0xbc>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4013      	ands	r3, r2
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d01e      	beq.n	800db6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d11a      	bne.n	800db6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	685a      	ldr	r2, [r3, #4]
 800db38:	4b0e      	ldr	r3, [pc, #56]	@ (800db74 <vPortFree+0xbc>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	43db      	mvns	r3, r3
 800db3e:	401a      	ands	r2, r3
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db44:	f7fe fb3a 	bl	800c1bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	4b0a      	ldr	r3, [pc, #40]	@ (800db78 <vPortFree+0xc0>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4413      	add	r3, r2
 800db52:	4a09      	ldr	r2, [pc, #36]	@ (800db78 <vPortFree+0xc0>)
 800db54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db56:	6938      	ldr	r0, [r7, #16]
 800db58:	f000 f874 	bl	800dc44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db5c:	4b07      	ldr	r3, [pc, #28]	@ (800db7c <vPortFree+0xc4>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3301      	adds	r3, #1
 800db62:	4a06      	ldr	r2, [pc, #24]	@ (800db7c <vPortFree+0xc4>)
 800db64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db66:	f7fe fb37 	bl	800c1d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db6a:	bf00      	nop
 800db6c:	3718      	adds	r7, #24
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	2000b8a8 	.word	0x2000b8a8
 800db78:	2000b898 	.word	0x2000b898
 800db7c:	2000b8a4 	.word	0x2000b8a4

0800db80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db86:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800db8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db8c:	4b27      	ldr	r3, [pc, #156]	@ (800dc2c <prvHeapInit+0xac>)
 800db8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f003 0307 	and.w	r3, r3, #7
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00c      	beq.n	800dbb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	3307      	adds	r3, #7
 800db9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f023 0307 	bic.w	r3, r3, #7
 800dba6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	4a1f      	ldr	r2, [pc, #124]	@ (800dc2c <prvHeapInit+0xac>)
 800dbb0:	4413      	add	r3, r2
 800dbb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbb8:	4a1d      	ldr	r2, [pc, #116]	@ (800dc30 <prvHeapInit+0xb0>)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbbe:	4b1c      	ldr	r3, [pc, #112]	@ (800dc30 <prvHeapInit+0xb0>)
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	4413      	add	r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbcc:	2208      	movs	r2, #8
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	1a9b      	subs	r3, r3, r2
 800dbd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f023 0307 	bic.w	r3, r3, #7
 800dbda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	4a15      	ldr	r2, [pc, #84]	@ (800dc34 <prvHeapInit+0xb4>)
 800dbe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbe2:	4b14      	ldr	r3, [pc, #80]	@ (800dc34 <prvHeapInit+0xb4>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbea:	4b12      	ldr	r3, [pc, #72]	@ (800dc34 <prvHeapInit+0xb4>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	1ad2      	subs	r2, r2, r3
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc00:	4b0c      	ldr	r3, [pc, #48]	@ (800dc34 <prvHeapInit+0xb4>)
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	4a0a      	ldr	r2, [pc, #40]	@ (800dc38 <prvHeapInit+0xb8>)
 800dc0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	4a09      	ldr	r2, [pc, #36]	@ (800dc3c <prvHeapInit+0xbc>)
 800dc16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc18:	4b09      	ldr	r3, [pc, #36]	@ (800dc40 <prvHeapInit+0xc0>)
 800dc1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dc1e:	601a      	str	r2, [r3, #0]
}
 800dc20:	bf00      	nop
 800dc22:	3714      	adds	r7, #20
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr
 800dc2c:	20007a0c 	.word	0x20007a0c
 800dc30:	2000b88c 	.word	0x2000b88c
 800dc34:	2000b894 	.word	0x2000b894
 800dc38:	2000b89c 	.word	0x2000b89c
 800dc3c:	2000b898 	.word	0x2000b898
 800dc40:	2000b8a8 	.word	0x2000b8a8

0800dc44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc4c:	4b28      	ldr	r3, [pc, #160]	@ (800dcf0 <prvInsertBlockIntoFreeList+0xac>)
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	e002      	b.n	800dc58 <prvInsertBlockIntoFreeList+0x14>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60fb      	str	r3, [r7, #12]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d8f7      	bhi.n	800dc52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d108      	bne.n	800dc86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	685a      	ldr	r2, [r3, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	441a      	add	r2, r3
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	68ba      	ldr	r2, [r7, #8]
 800dc90:	441a      	add	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d118      	bne.n	800dccc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	4b15      	ldr	r3, [pc, #84]	@ (800dcf4 <prvInsertBlockIntoFreeList+0xb0>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d00d      	beq.n	800dcc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685a      	ldr	r2, [r3, #4]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	441a      	add	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	601a      	str	r2, [r3, #0]
 800dcc0:	e008      	b.n	800dcd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcc2:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf4 <prvInsertBlockIntoFreeList+0xb0>)
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	601a      	str	r2, [r3, #0]
 800dcca:	e003      	b.n	800dcd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d002      	beq.n	800dce2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dce2:	bf00      	nop
 800dce4:	3714      	adds	r7, #20
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	2000b88c 	.word	0x2000b88c
 800dcf4:	2000b894 	.word	0x2000b894

0800dcf8 <abort>:
 800dcf8:	b508      	push	{r3, lr}
 800dcfa:	2006      	movs	r0, #6
 800dcfc:	f001 fae6 	bl	800f2cc <raise>
 800dd00:	2001      	movs	r0, #1
 800dd02:	f7f4 f93f 	bl	8001f84 <_exit>

0800dd06 <atoi>:
 800dd06:	220a      	movs	r2, #10
 800dd08:	2100      	movs	r1, #0
 800dd0a:	f000 b961 	b.w	800dfd0 <strtol>
	...

0800dd10 <malloc>:
 800dd10:	4b02      	ldr	r3, [pc, #8]	@ (800dd1c <malloc+0xc>)
 800dd12:	4601      	mov	r1, r0
 800dd14:	6818      	ldr	r0, [r3, #0]
 800dd16:	f000 b825 	b.w	800dd64 <_malloc_r>
 800dd1a:	bf00      	nop
 800dd1c:	20000038 	.word	0x20000038

0800dd20 <sbrk_aligned>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	4e0f      	ldr	r6, [pc, #60]	@ (800dd60 <sbrk_aligned+0x40>)
 800dd24:	460c      	mov	r4, r1
 800dd26:	6831      	ldr	r1, [r6, #0]
 800dd28:	4605      	mov	r5, r0
 800dd2a:	b911      	cbnz	r1, 800dd32 <sbrk_aligned+0x12>
 800dd2c:	f001 fb78 	bl	800f420 <_sbrk_r>
 800dd30:	6030      	str	r0, [r6, #0]
 800dd32:	4621      	mov	r1, r4
 800dd34:	4628      	mov	r0, r5
 800dd36:	f001 fb73 	bl	800f420 <_sbrk_r>
 800dd3a:	1c43      	adds	r3, r0, #1
 800dd3c:	d103      	bne.n	800dd46 <sbrk_aligned+0x26>
 800dd3e:	f04f 34ff 	mov.w	r4, #4294967295
 800dd42:	4620      	mov	r0, r4
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
 800dd46:	1cc4      	adds	r4, r0, #3
 800dd48:	f024 0403 	bic.w	r4, r4, #3
 800dd4c:	42a0      	cmp	r0, r4
 800dd4e:	d0f8      	beq.n	800dd42 <sbrk_aligned+0x22>
 800dd50:	1a21      	subs	r1, r4, r0
 800dd52:	4628      	mov	r0, r5
 800dd54:	f001 fb64 	bl	800f420 <_sbrk_r>
 800dd58:	3001      	adds	r0, #1
 800dd5a:	d1f2      	bne.n	800dd42 <sbrk_aligned+0x22>
 800dd5c:	e7ef      	b.n	800dd3e <sbrk_aligned+0x1e>
 800dd5e:	bf00      	nop
 800dd60:	2000b8ac 	.word	0x2000b8ac

0800dd64 <_malloc_r>:
 800dd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd68:	1ccd      	adds	r5, r1, #3
 800dd6a:	f025 0503 	bic.w	r5, r5, #3
 800dd6e:	3508      	adds	r5, #8
 800dd70:	2d0c      	cmp	r5, #12
 800dd72:	bf38      	it	cc
 800dd74:	250c      	movcc	r5, #12
 800dd76:	2d00      	cmp	r5, #0
 800dd78:	4606      	mov	r6, r0
 800dd7a:	db01      	blt.n	800dd80 <_malloc_r+0x1c>
 800dd7c:	42a9      	cmp	r1, r5
 800dd7e:	d904      	bls.n	800dd8a <_malloc_r+0x26>
 800dd80:	230c      	movs	r3, #12
 800dd82:	6033      	str	r3, [r6, #0]
 800dd84:	2000      	movs	r0, #0
 800dd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de60 <_malloc_r+0xfc>
 800dd8e:	f000 f869 	bl	800de64 <__malloc_lock>
 800dd92:	f8d8 3000 	ldr.w	r3, [r8]
 800dd96:	461c      	mov	r4, r3
 800dd98:	bb44      	cbnz	r4, 800ddec <_malloc_r+0x88>
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	f7ff ffbf 	bl	800dd20 <sbrk_aligned>
 800dda2:	1c43      	adds	r3, r0, #1
 800dda4:	4604      	mov	r4, r0
 800dda6:	d158      	bne.n	800de5a <_malloc_r+0xf6>
 800dda8:	f8d8 4000 	ldr.w	r4, [r8]
 800ddac:	4627      	mov	r7, r4
 800ddae:	2f00      	cmp	r7, #0
 800ddb0:	d143      	bne.n	800de3a <_malloc_r+0xd6>
 800ddb2:	2c00      	cmp	r4, #0
 800ddb4:	d04b      	beq.n	800de4e <_malloc_r+0xea>
 800ddb6:	6823      	ldr	r3, [r4, #0]
 800ddb8:	4639      	mov	r1, r7
 800ddba:	4630      	mov	r0, r6
 800ddbc:	eb04 0903 	add.w	r9, r4, r3
 800ddc0:	f001 fb2e 	bl	800f420 <_sbrk_r>
 800ddc4:	4581      	cmp	r9, r0
 800ddc6:	d142      	bne.n	800de4e <_malloc_r+0xea>
 800ddc8:	6821      	ldr	r1, [r4, #0]
 800ddca:	1a6d      	subs	r5, r5, r1
 800ddcc:	4629      	mov	r1, r5
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f7ff ffa6 	bl	800dd20 <sbrk_aligned>
 800ddd4:	3001      	adds	r0, #1
 800ddd6:	d03a      	beq.n	800de4e <_malloc_r+0xea>
 800ddd8:	6823      	ldr	r3, [r4, #0]
 800ddda:	442b      	add	r3, r5
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	f8d8 3000 	ldr.w	r3, [r8]
 800dde2:	685a      	ldr	r2, [r3, #4]
 800dde4:	bb62      	cbnz	r2, 800de40 <_malloc_r+0xdc>
 800dde6:	f8c8 7000 	str.w	r7, [r8]
 800ddea:	e00f      	b.n	800de0c <_malloc_r+0xa8>
 800ddec:	6822      	ldr	r2, [r4, #0]
 800ddee:	1b52      	subs	r2, r2, r5
 800ddf0:	d420      	bmi.n	800de34 <_malloc_r+0xd0>
 800ddf2:	2a0b      	cmp	r2, #11
 800ddf4:	d917      	bls.n	800de26 <_malloc_r+0xc2>
 800ddf6:	1961      	adds	r1, r4, r5
 800ddf8:	42a3      	cmp	r3, r4
 800ddfa:	6025      	str	r5, [r4, #0]
 800ddfc:	bf18      	it	ne
 800ddfe:	6059      	strne	r1, [r3, #4]
 800de00:	6863      	ldr	r3, [r4, #4]
 800de02:	bf08      	it	eq
 800de04:	f8c8 1000 	streq.w	r1, [r8]
 800de08:	5162      	str	r2, [r4, r5]
 800de0a:	604b      	str	r3, [r1, #4]
 800de0c:	4630      	mov	r0, r6
 800de0e:	f000 f82f 	bl	800de70 <__malloc_unlock>
 800de12:	f104 000b 	add.w	r0, r4, #11
 800de16:	1d23      	adds	r3, r4, #4
 800de18:	f020 0007 	bic.w	r0, r0, #7
 800de1c:	1ac2      	subs	r2, r0, r3
 800de1e:	bf1c      	itt	ne
 800de20:	1a1b      	subne	r3, r3, r0
 800de22:	50a3      	strne	r3, [r4, r2]
 800de24:	e7af      	b.n	800dd86 <_malloc_r+0x22>
 800de26:	6862      	ldr	r2, [r4, #4]
 800de28:	42a3      	cmp	r3, r4
 800de2a:	bf0c      	ite	eq
 800de2c:	f8c8 2000 	streq.w	r2, [r8]
 800de30:	605a      	strne	r2, [r3, #4]
 800de32:	e7eb      	b.n	800de0c <_malloc_r+0xa8>
 800de34:	4623      	mov	r3, r4
 800de36:	6864      	ldr	r4, [r4, #4]
 800de38:	e7ae      	b.n	800dd98 <_malloc_r+0x34>
 800de3a:	463c      	mov	r4, r7
 800de3c:	687f      	ldr	r7, [r7, #4]
 800de3e:	e7b6      	b.n	800ddae <_malloc_r+0x4a>
 800de40:	461a      	mov	r2, r3
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	42a3      	cmp	r3, r4
 800de46:	d1fb      	bne.n	800de40 <_malloc_r+0xdc>
 800de48:	2300      	movs	r3, #0
 800de4a:	6053      	str	r3, [r2, #4]
 800de4c:	e7de      	b.n	800de0c <_malloc_r+0xa8>
 800de4e:	230c      	movs	r3, #12
 800de50:	6033      	str	r3, [r6, #0]
 800de52:	4630      	mov	r0, r6
 800de54:	f000 f80c 	bl	800de70 <__malloc_unlock>
 800de58:	e794      	b.n	800dd84 <_malloc_r+0x20>
 800de5a:	6005      	str	r5, [r0, #0]
 800de5c:	e7d6      	b.n	800de0c <_malloc_r+0xa8>
 800de5e:	bf00      	nop
 800de60:	2000b8b0 	.word	0x2000b8b0

0800de64 <__malloc_lock>:
 800de64:	4801      	ldr	r0, [pc, #4]	@ (800de6c <__malloc_lock+0x8>)
 800de66:	f001 bb28 	b.w	800f4ba <__retarget_lock_acquire_recursive>
 800de6a:	bf00      	nop
 800de6c:	2000b9f4 	.word	0x2000b9f4

0800de70 <__malloc_unlock>:
 800de70:	4801      	ldr	r0, [pc, #4]	@ (800de78 <__malloc_unlock+0x8>)
 800de72:	f001 bb23 	b.w	800f4bc <__retarget_lock_release_recursive>
 800de76:	bf00      	nop
 800de78:	2000b9f4 	.word	0x2000b9f4

0800de7c <_realloc_r>:
 800de7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de80:	4680      	mov	r8, r0
 800de82:	4615      	mov	r5, r2
 800de84:	460c      	mov	r4, r1
 800de86:	b921      	cbnz	r1, 800de92 <_realloc_r+0x16>
 800de88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de8c:	4611      	mov	r1, r2
 800de8e:	f7ff bf69 	b.w	800dd64 <_malloc_r>
 800de92:	b92a      	cbnz	r2, 800dea0 <_realloc_r+0x24>
 800de94:	f002 f99c 	bl	80101d0 <_free_r>
 800de98:	2400      	movs	r4, #0
 800de9a:	4620      	mov	r0, r4
 800de9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea0:	f002 fe92 	bl	8010bc8 <_malloc_usable_size_r>
 800dea4:	4285      	cmp	r5, r0
 800dea6:	4606      	mov	r6, r0
 800dea8:	d802      	bhi.n	800deb0 <_realloc_r+0x34>
 800deaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800deae:	d8f4      	bhi.n	800de9a <_realloc_r+0x1e>
 800deb0:	4629      	mov	r1, r5
 800deb2:	4640      	mov	r0, r8
 800deb4:	f7ff ff56 	bl	800dd64 <_malloc_r>
 800deb8:	4607      	mov	r7, r0
 800deba:	2800      	cmp	r0, #0
 800debc:	d0ec      	beq.n	800de98 <_realloc_r+0x1c>
 800debe:	42b5      	cmp	r5, r6
 800dec0:	462a      	mov	r2, r5
 800dec2:	4621      	mov	r1, r4
 800dec4:	bf28      	it	cs
 800dec6:	4632      	movcs	r2, r6
 800dec8:	f001 fb01 	bl	800f4ce <memcpy>
 800decc:	4621      	mov	r1, r4
 800dece:	4640      	mov	r0, r8
 800ded0:	f002 f97e 	bl	80101d0 <_free_r>
 800ded4:	463c      	mov	r4, r7
 800ded6:	e7e0      	b.n	800de9a <_realloc_r+0x1e>

0800ded8 <_strtol_l.constprop.0>:
 800ded8:	2b24      	cmp	r3, #36	@ 0x24
 800deda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dede:	4686      	mov	lr, r0
 800dee0:	4690      	mov	r8, r2
 800dee2:	d801      	bhi.n	800dee8 <_strtol_l.constprop.0+0x10>
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d106      	bne.n	800def6 <_strtol_l.constprop.0+0x1e>
 800dee8:	f001 fabc 	bl	800f464 <__errno>
 800deec:	2316      	movs	r3, #22
 800deee:	6003      	str	r3, [r0, #0]
 800def0:	2000      	movs	r0, #0
 800def2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def6:	4834      	ldr	r0, [pc, #208]	@ (800dfc8 <_strtol_l.constprop.0+0xf0>)
 800def8:	460d      	mov	r5, r1
 800defa:	462a      	mov	r2, r5
 800defc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df00:	5d06      	ldrb	r6, [r0, r4]
 800df02:	f016 0608 	ands.w	r6, r6, #8
 800df06:	d1f8      	bne.n	800defa <_strtol_l.constprop.0+0x22>
 800df08:	2c2d      	cmp	r4, #45	@ 0x2d
 800df0a:	d12d      	bne.n	800df68 <_strtol_l.constprop.0+0x90>
 800df0c:	782c      	ldrb	r4, [r5, #0]
 800df0e:	2601      	movs	r6, #1
 800df10:	1c95      	adds	r5, r2, #2
 800df12:	f033 0210 	bics.w	r2, r3, #16
 800df16:	d109      	bne.n	800df2c <_strtol_l.constprop.0+0x54>
 800df18:	2c30      	cmp	r4, #48	@ 0x30
 800df1a:	d12a      	bne.n	800df72 <_strtol_l.constprop.0+0x9a>
 800df1c:	782a      	ldrb	r2, [r5, #0]
 800df1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df22:	2a58      	cmp	r2, #88	@ 0x58
 800df24:	d125      	bne.n	800df72 <_strtol_l.constprop.0+0x9a>
 800df26:	786c      	ldrb	r4, [r5, #1]
 800df28:	2310      	movs	r3, #16
 800df2a:	3502      	adds	r5, #2
 800df2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800df30:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df34:	2200      	movs	r2, #0
 800df36:	fbbc f9f3 	udiv	r9, ip, r3
 800df3a:	4610      	mov	r0, r2
 800df3c:	fb03 ca19 	mls	sl, r3, r9, ip
 800df40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800df44:	2f09      	cmp	r7, #9
 800df46:	d81b      	bhi.n	800df80 <_strtol_l.constprop.0+0xa8>
 800df48:	463c      	mov	r4, r7
 800df4a:	42a3      	cmp	r3, r4
 800df4c:	dd27      	ble.n	800df9e <_strtol_l.constprop.0+0xc6>
 800df4e:	1c57      	adds	r7, r2, #1
 800df50:	d007      	beq.n	800df62 <_strtol_l.constprop.0+0x8a>
 800df52:	4581      	cmp	r9, r0
 800df54:	d320      	bcc.n	800df98 <_strtol_l.constprop.0+0xc0>
 800df56:	d101      	bne.n	800df5c <_strtol_l.constprop.0+0x84>
 800df58:	45a2      	cmp	sl, r4
 800df5a:	db1d      	blt.n	800df98 <_strtol_l.constprop.0+0xc0>
 800df5c:	fb00 4003 	mla	r0, r0, r3, r4
 800df60:	2201      	movs	r2, #1
 800df62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df66:	e7eb      	b.n	800df40 <_strtol_l.constprop.0+0x68>
 800df68:	2c2b      	cmp	r4, #43	@ 0x2b
 800df6a:	bf04      	itt	eq
 800df6c:	782c      	ldrbeq	r4, [r5, #0]
 800df6e:	1c95      	addeq	r5, r2, #2
 800df70:	e7cf      	b.n	800df12 <_strtol_l.constprop.0+0x3a>
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1da      	bne.n	800df2c <_strtol_l.constprop.0+0x54>
 800df76:	2c30      	cmp	r4, #48	@ 0x30
 800df78:	bf0c      	ite	eq
 800df7a:	2308      	moveq	r3, #8
 800df7c:	230a      	movne	r3, #10
 800df7e:	e7d5      	b.n	800df2c <_strtol_l.constprop.0+0x54>
 800df80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800df84:	2f19      	cmp	r7, #25
 800df86:	d801      	bhi.n	800df8c <_strtol_l.constprop.0+0xb4>
 800df88:	3c37      	subs	r4, #55	@ 0x37
 800df8a:	e7de      	b.n	800df4a <_strtol_l.constprop.0+0x72>
 800df8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800df90:	2f19      	cmp	r7, #25
 800df92:	d804      	bhi.n	800df9e <_strtol_l.constprop.0+0xc6>
 800df94:	3c57      	subs	r4, #87	@ 0x57
 800df96:	e7d8      	b.n	800df4a <_strtol_l.constprop.0+0x72>
 800df98:	f04f 32ff 	mov.w	r2, #4294967295
 800df9c:	e7e1      	b.n	800df62 <_strtol_l.constprop.0+0x8a>
 800df9e:	1c53      	adds	r3, r2, #1
 800dfa0:	d108      	bne.n	800dfb4 <_strtol_l.constprop.0+0xdc>
 800dfa2:	2322      	movs	r3, #34	@ 0x22
 800dfa4:	f8ce 3000 	str.w	r3, [lr]
 800dfa8:	4660      	mov	r0, ip
 800dfaa:	f1b8 0f00 	cmp.w	r8, #0
 800dfae:	d0a0      	beq.n	800def2 <_strtol_l.constprop.0+0x1a>
 800dfb0:	1e69      	subs	r1, r5, #1
 800dfb2:	e006      	b.n	800dfc2 <_strtol_l.constprop.0+0xea>
 800dfb4:	b106      	cbz	r6, 800dfb8 <_strtol_l.constprop.0+0xe0>
 800dfb6:	4240      	negs	r0, r0
 800dfb8:	f1b8 0f00 	cmp.w	r8, #0
 800dfbc:	d099      	beq.n	800def2 <_strtol_l.constprop.0+0x1a>
 800dfbe:	2a00      	cmp	r2, #0
 800dfc0:	d1f6      	bne.n	800dfb0 <_strtol_l.constprop.0+0xd8>
 800dfc2:	f8c8 1000 	str.w	r1, [r8]
 800dfc6:	e794      	b.n	800def2 <_strtol_l.constprop.0+0x1a>
 800dfc8:	08012b99 	.word	0x08012b99

0800dfcc <_strtol_r>:
 800dfcc:	f7ff bf84 	b.w	800ded8 <_strtol_l.constprop.0>

0800dfd0 <strtol>:
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	460a      	mov	r2, r1
 800dfd4:	4601      	mov	r1, r0
 800dfd6:	4802      	ldr	r0, [pc, #8]	@ (800dfe0 <strtol+0x10>)
 800dfd8:	6800      	ldr	r0, [r0, #0]
 800dfda:	f7ff bf7d 	b.w	800ded8 <_strtol_l.constprop.0>
 800dfde:	bf00      	nop
 800dfe0:	20000038 	.word	0x20000038

0800dfe4 <__cvt>:
 800dfe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfe8:	ec57 6b10 	vmov	r6, r7, d0
 800dfec:	2f00      	cmp	r7, #0
 800dfee:	460c      	mov	r4, r1
 800dff0:	4619      	mov	r1, r3
 800dff2:	463b      	mov	r3, r7
 800dff4:	bfbb      	ittet	lt
 800dff6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dffa:	461f      	movlt	r7, r3
 800dffc:	2300      	movge	r3, #0
 800dffe:	232d      	movlt	r3, #45	@ 0x2d
 800e000:	700b      	strb	r3, [r1, #0]
 800e002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e004:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e008:	4691      	mov	r9, r2
 800e00a:	f023 0820 	bic.w	r8, r3, #32
 800e00e:	bfbc      	itt	lt
 800e010:	4632      	movlt	r2, r6
 800e012:	4616      	movlt	r6, r2
 800e014:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e018:	d005      	beq.n	800e026 <__cvt+0x42>
 800e01a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e01e:	d100      	bne.n	800e022 <__cvt+0x3e>
 800e020:	3401      	adds	r4, #1
 800e022:	2102      	movs	r1, #2
 800e024:	e000      	b.n	800e028 <__cvt+0x44>
 800e026:	2103      	movs	r1, #3
 800e028:	ab03      	add	r3, sp, #12
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	ab02      	add	r3, sp, #8
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	ec47 6b10 	vmov	d0, r6, r7
 800e034:	4653      	mov	r3, sl
 800e036:	4622      	mov	r2, r4
 800e038:	f001 fb06 	bl	800f648 <_dtoa_r>
 800e03c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e040:	4605      	mov	r5, r0
 800e042:	d119      	bne.n	800e078 <__cvt+0x94>
 800e044:	f019 0f01 	tst.w	r9, #1
 800e048:	d00e      	beq.n	800e068 <__cvt+0x84>
 800e04a:	eb00 0904 	add.w	r9, r0, r4
 800e04e:	2200      	movs	r2, #0
 800e050:	2300      	movs	r3, #0
 800e052:	4630      	mov	r0, r6
 800e054:	4639      	mov	r1, r7
 800e056:	f7f2 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800e05a:	b108      	cbz	r0, 800e060 <__cvt+0x7c>
 800e05c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e060:	2230      	movs	r2, #48	@ 0x30
 800e062:	9b03      	ldr	r3, [sp, #12]
 800e064:	454b      	cmp	r3, r9
 800e066:	d31e      	bcc.n	800e0a6 <__cvt+0xc2>
 800e068:	9b03      	ldr	r3, [sp, #12]
 800e06a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e06c:	1b5b      	subs	r3, r3, r5
 800e06e:	4628      	mov	r0, r5
 800e070:	6013      	str	r3, [r2, #0]
 800e072:	b004      	add	sp, #16
 800e074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e078:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e07c:	eb00 0904 	add.w	r9, r0, r4
 800e080:	d1e5      	bne.n	800e04e <__cvt+0x6a>
 800e082:	7803      	ldrb	r3, [r0, #0]
 800e084:	2b30      	cmp	r3, #48	@ 0x30
 800e086:	d10a      	bne.n	800e09e <__cvt+0xba>
 800e088:	2200      	movs	r2, #0
 800e08a:	2300      	movs	r3, #0
 800e08c:	4630      	mov	r0, r6
 800e08e:	4639      	mov	r1, r7
 800e090:	f7f2 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e094:	b918      	cbnz	r0, 800e09e <__cvt+0xba>
 800e096:	f1c4 0401 	rsb	r4, r4, #1
 800e09a:	f8ca 4000 	str.w	r4, [sl]
 800e09e:	f8da 3000 	ldr.w	r3, [sl]
 800e0a2:	4499      	add	r9, r3
 800e0a4:	e7d3      	b.n	800e04e <__cvt+0x6a>
 800e0a6:	1c59      	adds	r1, r3, #1
 800e0a8:	9103      	str	r1, [sp, #12]
 800e0aa:	701a      	strb	r2, [r3, #0]
 800e0ac:	e7d9      	b.n	800e062 <__cvt+0x7e>

0800e0ae <__exponent>:
 800e0ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0b0:	2900      	cmp	r1, #0
 800e0b2:	bfba      	itte	lt
 800e0b4:	4249      	neglt	r1, r1
 800e0b6:	232d      	movlt	r3, #45	@ 0x2d
 800e0b8:	232b      	movge	r3, #43	@ 0x2b
 800e0ba:	2909      	cmp	r1, #9
 800e0bc:	7002      	strb	r2, [r0, #0]
 800e0be:	7043      	strb	r3, [r0, #1]
 800e0c0:	dd29      	ble.n	800e116 <__exponent+0x68>
 800e0c2:	f10d 0307 	add.w	r3, sp, #7
 800e0c6:	461d      	mov	r5, r3
 800e0c8:	270a      	movs	r7, #10
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	fbb1 f6f7 	udiv	r6, r1, r7
 800e0d0:	fb07 1416 	mls	r4, r7, r6, r1
 800e0d4:	3430      	adds	r4, #48	@ 0x30
 800e0d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e0da:	460c      	mov	r4, r1
 800e0dc:	2c63      	cmp	r4, #99	@ 0x63
 800e0de:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	dcf1      	bgt.n	800e0ca <__exponent+0x1c>
 800e0e6:	3130      	adds	r1, #48	@ 0x30
 800e0e8:	1e94      	subs	r4, r2, #2
 800e0ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e0ee:	1c41      	adds	r1, r0, #1
 800e0f0:	4623      	mov	r3, r4
 800e0f2:	42ab      	cmp	r3, r5
 800e0f4:	d30a      	bcc.n	800e10c <__exponent+0x5e>
 800e0f6:	f10d 0309 	add.w	r3, sp, #9
 800e0fa:	1a9b      	subs	r3, r3, r2
 800e0fc:	42ac      	cmp	r4, r5
 800e0fe:	bf88      	it	hi
 800e100:	2300      	movhi	r3, #0
 800e102:	3302      	adds	r3, #2
 800e104:	4403      	add	r3, r0
 800e106:	1a18      	subs	r0, r3, r0
 800e108:	b003      	add	sp, #12
 800e10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e10c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e110:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e114:	e7ed      	b.n	800e0f2 <__exponent+0x44>
 800e116:	2330      	movs	r3, #48	@ 0x30
 800e118:	3130      	adds	r1, #48	@ 0x30
 800e11a:	7083      	strb	r3, [r0, #2]
 800e11c:	70c1      	strb	r1, [r0, #3]
 800e11e:	1d03      	adds	r3, r0, #4
 800e120:	e7f1      	b.n	800e106 <__exponent+0x58>
	...

0800e124 <_printf_float>:
 800e124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e128:	b08d      	sub	sp, #52	@ 0x34
 800e12a:	460c      	mov	r4, r1
 800e12c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e130:	4616      	mov	r6, r2
 800e132:	461f      	mov	r7, r3
 800e134:	4605      	mov	r5, r0
 800e136:	f001 f8d1 	bl	800f2dc <_localeconv_r>
 800e13a:	6803      	ldr	r3, [r0, #0]
 800e13c:	9304      	str	r3, [sp, #16]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7f2 f896 	bl	8000270 <strlen>
 800e144:	2300      	movs	r3, #0
 800e146:	930a      	str	r3, [sp, #40]	@ 0x28
 800e148:	f8d8 3000 	ldr.w	r3, [r8]
 800e14c:	9005      	str	r0, [sp, #20]
 800e14e:	3307      	adds	r3, #7
 800e150:	f023 0307 	bic.w	r3, r3, #7
 800e154:	f103 0208 	add.w	r2, r3, #8
 800e158:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e15c:	f8d4 b000 	ldr.w	fp, [r4]
 800e160:	f8c8 2000 	str.w	r2, [r8]
 800e164:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e168:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e16c:	9307      	str	r3, [sp, #28]
 800e16e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e172:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e17a:	4b9c      	ldr	r3, [pc, #624]	@ (800e3ec <_printf_float+0x2c8>)
 800e17c:	f04f 32ff 	mov.w	r2, #4294967295
 800e180:	f7f2 fcd4 	bl	8000b2c <__aeabi_dcmpun>
 800e184:	bb70      	cbnz	r0, 800e1e4 <_printf_float+0xc0>
 800e186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e18a:	4b98      	ldr	r3, [pc, #608]	@ (800e3ec <_printf_float+0x2c8>)
 800e18c:	f04f 32ff 	mov.w	r2, #4294967295
 800e190:	f7f2 fcae 	bl	8000af0 <__aeabi_dcmple>
 800e194:	bb30      	cbnz	r0, 800e1e4 <_printf_float+0xc0>
 800e196:	2200      	movs	r2, #0
 800e198:	2300      	movs	r3, #0
 800e19a:	4640      	mov	r0, r8
 800e19c:	4649      	mov	r1, r9
 800e19e:	f7f2 fc9d 	bl	8000adc <__aeabi_dcmplt>
 800e1a2:	b110      	cbz	r0, 800e1aa <_printf_float+0x86>
 800e1a4:	232d      	movs	r3, #45	@ 0x2d
 800e1a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1aa:	4a91      	ldr	r2, [pc, #580]	@ (800e3f0 <_printf_float+0x2cc>)
 800e1ac:	4b91      	ldr	r3, [pc, #580]	@ (800e3f4 <_printf_float+0x2d0>)
 800e1ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e1b2:	bf94      	ite	ls
 800e1b4:	4690      	movls	r8, r2
 800e1b6:	4698      	movhi	r8, r3
 800e1b8:	2303      	movs	r3, #3
 800e1ba:	6123      	str	r3, [r4, #16]
 800e1bc:	f02b 0304 	bic.w	r3, fp, #4
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	f04f 0900 	mov.w	r9, #0
 800e1c6:	9700      	str	r7, [sp, #0]
 800e1c8:	4633      	mov	r3, r6
 800e1ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f000 f9d2 	bl	800e578 <_printf_common>
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	f040 808d 	bne.w	800e2f4 <_printf_float+0x1d0>
 800e1da:	f04f 30ff 	mov.w	r0, #4294967295
 800e1de:	b00d      	add	sp, #52	@ 0x34
 800e1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e4:	4642      	mov	r2, r8
 800e1e6:	464b      	mov	r3, r9
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	4649      	mov	r1, r9
 800e1ec:	f7f2 fc9e 	bl	8000b2c <__aeabi_dcmpun>
 800e1f0:	b140      	cbz	r0, 800e204 <_printf_float+0xe0>
 800e1f2:	464b      	mov	r3, r9
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	bfbc      	itt	lt
 800e1f8:	232d      	movlt	r3, #45	@ 0x2d
 800e1fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e1fe:	4a7e      	ldr	r2, [pc, #504]	@ (800e3f8 <_printf_float+0x2d4>)
 800e200:	4b7e      	ldr	r3, [pc, #504]	@ (800e3fc <_printf_float+0x2d8>)
 800e202:	e7d4      	b.n	800e1ae <_printf_float+0x8a>
 800e204:	6863      	ldr	r3, [r4, #4]
 800e206:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e20a:	9206      	str	r2, [sp, #24]
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	d13b      	bne.n	800e288 <_printf_float+0x164>
 800e210:	2306      	movs	r3, #6
 800e212:	6063      	str	r3, [r4, #4]
 800e214:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e218:	2300      	movs	r3, #0
 800e21a:	6022      	str	r2, [r4, #0]
 800e21c:	9303      	str	r3, [sp, #12]
 800e21e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e220:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e224:	ab09      	add	r3, sp, #36	@ 0x24
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	6861      	ldr	r1, [r4, #4]
 800e22a:	ec49 8b10 	vmov	d0, r8, r9
 800e22e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e232:	4628      	mov	r0, r5
 800e234:	f7ff fed6 	bl	800dfe4 <__cvt>
 800e238:	9b06      	ldr	r3, [sp, #24]
 800e23a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e23c:	2b47      	cmp	r3, #71	@ 0x47
 800e23e:	4680      	mov	r8, r0
 800e240:	d129      	bne.n	800e296 <_printf_float+0x172>
 800e242:	1cc8      	adds	r0, r1, #3
 800e244:	db02      	blt.n	800e24c <_printf_float+0x128>
 800e246:	6863      	ldr	r3, [r4, #4]
 800e248:	4299      	cmp	r1, r3
 800e24a:	dd41      	ble.n	800e2d0 <_printf_float+0x1ac>
 800e24c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e250:	fa5f fa8a 	uxtb.w	sl, sl
 800e254:	3901      	subs	r1, #1
 800e256:	4652      	mov	r2, sl
 800e258:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e25c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e25e:	f7ff ff26 	bl	800e0ae <__exponent>
 800e262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e264:	1813      	adds	r3, r2, r0
 800e266:	2a01      	cmp	r2, #1
 800e268:	4681      	mov	r9, r0
 800e26a:	6123      	str	r3, [r4, #16]
 800e26c:	dc02      	bgt.n	800e274 <_printf_float+0x150>
 800e26e:	6822      	ldr	r2, [r4, #0]
 800e270:	07d2      	lsls	r2, r2, #31
 800e272:	d501      	bpl.n	800e278 <_printf_float+0x154>
 800e274:	3301      	adds	r3, #1
 800e276:	6123      	str	r3, [r4, #16]
 800e278:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0a2      	beq.n	800e1c6 <_printf_float+0xa2>
 800e280:	232d      	movs	r3, #45	@ 0x2d
 800e282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e286:	e79e      	b.n	800e1c6 <_printf_float+0xa2>
 800e288:	9a06      	ldr	r2, [sp, #24]
 800e28a:	2a47      	cmp	r2, #71	@ 0x47
 800e28c:	d1c2      	bne.n	800e214 <_printf_float+0xf0>
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1c0      	bne.n	800e214 <_printf_float+0xf0>
 800e292:	2301      	movs	r3, #1
 800e294:	e7bd      	b.n	800e212 <_printf_float+0xee>
 800e296:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e29a:	d9db      	bls.n	800e254 <_printf_float+0x130>
 800e29c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e2a0:	d118      	bne.n	800e2d4 <_printf_float+0x1b0>
 800e2a2:	2900      	cmp	r1, #0
 800e2a4:	6863      	ldr	r3, [r4, #4]
 800e2a6:	dd0b      	ble.n	800e2c0 <_printf_float+0x19c>
 800e2a8:	6121      	str	r1, [r4, #16]
 800e2aa:	b913      	cbnz	r3, 800e2b2 <_printf_float+0x18e>
 800e2ac:	6822      	ldr	r2, [r4, #0]
 800e2ae:	07d0      	lsls	r0, r2, #31
 800e2b0:	d502      	bpl.n	800e2b8 <_printf_float+0x194>
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	440b      	add	r3, r1
 800e2b6:	6123      	str	r3, [r4, #16]
 800e2b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e2ba:	f04f 0900 	mov.w	r9, #0
 800e2be:	e7db      	b.n	800e278 <_printf_float+0x154>
 800e2c0:	b913      	cbnz	r3, 800e2c8 <_printf_float+0x1a4>
 800e2c2:	6822      	ldr	r2, [r4, #0]
 800e2c4:	07d2      	lsls	r2, r2, #31
 800e2c6:	d501      	bpl.n	800e2cc <_printf_float+0x1a8>
 800e2c8:	3302      	adds	r3, #2
 800e2ca:	e7f4      	b.n	800e2b6 <_printf_float+0x192>
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e7f2      	b.n	800e2b6 <_printf_float+0x192>
 800e2d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2d6:	4299      	cmp	r1, r3
 800e2d8:	db05      	blt.n	800e2e6 <_printf_float+0x1c2>
 800e2da:	6823      	ldr	r3, [r4, #0]
 800e2dc:	6121      	str	r1, [r4, #16]
 800e2de:	07d8      	lsls	r0, r3, #31
 800e2e0:	d5ea      	bpl.n	800e2b8 <_printf_float+0x194>
 800e2e2:	1c4b      	adds	r3, r1, #1
 800e2e4:	e7e7      	b.n	800e2b6 <_printf_float+0x192>
 800e2e6:	2900      	cmp	r1, #0
 800e2e8:	bfd4      	ite	le
 800e2ea:	f1c1 0202 	rsble	r2, r1, #2
 800e2ee:	2201      	movgt	r2, #1
 800e2f0:	4413      	add	r3, r2
 800e2f2:	e7e0      	b.n	800e2b6 <_printf_float+0x192>
 800e2f4:	6823      	ldr	r3, [r4, #0]
 800e2f6:	055a      	lsls	r2, r3, #21
 800e2f8:	d407      	bmi.n	800e30a <_printf_float+0x1e6>
 800e2fa:	6923      	ldr	r3, [r4, #16]
 800e2fc:	4642      	mov	r2, r8
 800e2fe:	4631      	mov	r1, r6
 800e300:	4628      	mov	r0, r5
 800e302:	47b8      	blx	r7
 800e304:	3001      	adds	r0, #1
 800e306:	d12b      	bne.n	800e360 <_printf_float+0x23c>
 800e308:	e767      	b.n	800e1da <_printf_float+0xb6>
 800e30a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e30e:	f240 80dd 	bls.w	800e4cc <_printf_float+0x3a8>
 800e312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e316:	2200      	movs	r2, #0
 800e318:	2300      	movs	r3, #0
 800e31a:	f7f2 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d033      	beq.n	800e38a <_printf_float+0x266>
 800e322:	4a37      	ldr	r2, [pc, #220]	@ (800e400 <_printf_float+0x2dc>)
 800e324:	2301      	movs	r3, #1
 800e326:	4631      	mov	r1, r6
 800e328:	4628      	mov	r0, r5
 800e32a:	47b8      	blx	r7
 800e32c:	3001      	adds	r0, #1
 800e32e:	f43f af54 	beq.w	800e1da <_printf_float+0xb6>
 800e332:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e336:	4543      	cmp	r3, r8
 800e338:	db02      	blt.n	800e340 <_printf_float+0x21c>
 800e33a:	6823      	ldr	r3, [r4, #0]
 800e33c:	07d8      	lsls	r0, r3, #31
 800e33e:	d50f      	bpl.n	800e360 <_printf_float+0x23c>
 800e340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e344:	4631      	mov	r1, r6
 800e346:	4628      	mov	r0, r5
 800e348:	47b8      	blx	r7
 800e34a:	3001      	adds	r0, #1
 800e34c:	f43f af45 	beq.w	800e1da <_printf_float+0xb6>
 800e350:	f04f 0900 	mov.w	r9, #0
 800e354:	f108 38ff 	add.w	r8, r8, #4294967295
 800e358:	f104 0a1a 	add.w	sl, r4, #26
 800e35c:	45c8      	cmp	r8, r9
 800e35e:	dc09      	bgt.n	800e374 <_printf_float+0x250>
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	079b      	lsls	r3, r3, #30
 800e364:	f100 8103 	bmi.w	800e56e <_printf_float+0x44a>
 800e368:	68e0      	ldr	r0, [r4, #12]
 800e36a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e36c:	4298      	cmp	r0, r3
 800e36e:	bfb8      	it	lt
 800e370:	4618      	movlt	r0, r3
 800e372:	e734      	b.n	800e1de <_printf_float+0xba>
 800e374:	2301      	movs	r3, #1
 800e376:	4652      	mov	r2, sl
 800e378:	4631      	mov	r1, r6
 800e37a:	4628      	mov	r0, r5
 800e37c:	47b8      	blx	r7
 800e37e:	3001      	adds	r0, #1
 800e380:	f43f af2b 	beq.w	800e1da <_printf_float+0xb6>
 800e384:	f109 0901 	add.w	r9, r9, #1
 800e388:	e7e8      	b.n	800e35c <_printf_float+0x238>
 800e38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	dc39      	bgt.n	800e404 <_printf_float+0x2e0>
 800e390:	4a1b      	ldr	r2, [pc, #108]	@ (800e400 <_printf_float+0x2dc>)
 800e392:	2301      	movs	r3, #1
 800e394:	4631      	mov	r1, r6
 800e396:	4628      	mov	r0, r5
 800e398:	47b8      	blx	r7
 800e39a:	3001      	adds	r0, #1
 800e39c:	f43f af1d 	beq.w	800e1da <_printf_float+0xb6>
 800e3a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e3a4:	ea59 0303 	orrs.w	r3, r9, r3
 800e3a8:	d102      	bne.n	800e3b0 <_printf_float+0x28c>
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	07d9      	lsls	r1, r3, #31
 800e3ae:	d5d7      	bpl.n	800e360 <_printf_float+0x23c>
 800e3b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3b4:	4631      	mov	r1, r6
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	47b8      	blx	r7
 800e3ba:	3001      	adds	r0, #1
 800e3bc:	f43f af0d 	beq.w	800e1da <_printf_float+0xb6>
 800e3c0:	f04f 0a00 	mov.w	sl, #0
 800e3c4:	f104 0b1a 	add.w	fp, r4, #26
 800e3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ca:	425b      	negs	r3, r3
 800e3cc:	4553      	cmp	r3, sl
 800e3ce:	dc01      	bgt.n	800e3d4 <_printf_float+0x2b0>
 800e3d0:	464b      	mov	r3, r9
 800e3d2:	e793      	b.n	800e2fc <_printf_float+0x1d8>
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	465a      	mov	r2, fp
 800e3d8:	4631      	mov	r1, r6
 800e3da:	4628      	mov	r0, r5
 800e3dc:	47b8      	blx	r7
 800e3de:	3001      	adds	r0, #1
 800e3e0:	f43f aefb 	beq.w	800e1da <_printf_float+0xb6>
 800e3e4:	f10a 0a01 	add.w	sl, sl, #1
 800e3e8:	e7ee      	b.n	800e3c8 <_printf_float+0x2a4>
 800e3ea:	bf00      	nop
 800e3ec:	7fefffff 	.word	0x7fefffff
 800e3f0:	08012c99 	.word	0x08012c99
 800e3f4:	08012c9d 	.word	0x08012c9d
 800e3f8:	08012ca1 	.word	0x08012ca1
 800e3fc:	08012ca5 	.word	0x08012ca5
 800e400:	08012ca9 	.word	0x08012ca9
 800e404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e406:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e40a:	4553      	cmp	r3, sl
 800e40c:	bfa8      	it	ge
 800e40e:	4653      	movge	r3, sl
 800e410:	2b00      	cmp	r3, #0
 800e412:	4699      	mov	r9, r3
 800e414:	dc36      	bgt.n	800e484 <_printf_float+0x360>
 800e416:	f04f 0b00 	mov.w	fp, #0
 800e41a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e41e:	f104 021a 	add.w	r2, r4, #26
 800e422:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e424:	9306      	str	r3, [sp, #24]
 800e426:	eba3 0309 	sub.w	r3, r3, r9
 800e42a:	455b      	cmp	r3, fp
 800e42c:	dc31      	bgt.n	800e492 <_printf_float+0x36e>
 800e42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e430:	459a      	cmp	sl, r3
 800e432:	dc3a      	bgt.n	800e4aa <_printf_float+0x386>
 800e434:	6823      	ldr	r3, [r4, #0]
 800e436:	07da      	lsls	r2, r3, #31
 800e438:	d437      	bmi.n	800e4aa <_printf_float+0x386>
 800e43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e43c:	ebaa 0903 	sub.w	r9, sl, r3
 800e440:	9b06      	ldr	r3, [sp, #24]
 800e442:	ebaa 0303 	sub.w	r3, sl, r3
 800e446:	4599      	cmp	r9, r3
 800e448:	bfa8      	it	ge
 800e44a:	4699      	movge	r9, r3
 800e44c:	f1b9 0f00 	cmp.w	r9, #0
 800e450:	dc33      	bgt.n	800e4ba <_printf_float+0x396>
 800e452:	f04f 0800 	mov.w	r8, #0
 800e456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e45a:	f104 0b1a 	add.w	fp, r4, #26
 800e45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e460:	ebaa 0303 	sub.w	r3, sl, r3
 800e464:	eba3 0309 	sub.w	r3, r3, r9
 800e468:	4543      	cmp	r3, r8
 800e46a:	f77f af79 	ble.w	800e360 <_printf_float+0x23c>
 800e46e:	2301      	movs	r3, #1
 800e470:	465a      	mov	r2, fp
 800e472:	4631      	mov	r1, r6
 800e474:	4628      	mov	r0, r5
 800e476:	47b8      	blx	r7
 800e478:	3001      	adds	r0, #1
 800e47a:	f43f aeae 	beq.w	800e1da <_printf_float+0xb6>
 800e47e:	f108 0801 	add.w	r8, r8, #1
 800e482:	e7ec      	b.n	800e45e <_printf_float+0x33a>
 800e484:	4642      	mov	r2, r8
 800e486:	4631      	mov	r1, r6
 800e488:	4628      	mov	r0, r5
 800e48a:	47b8      	blx	r7
 800e48c:	3001      	adds	r0, #1
 800e48e:	d1c2      	bne.n	800e416 <_printf_float+0x2f2>
 800e490:	e6a3      	b.n	800e1da <_printf_float+0xb6>
 800e492:	2301      	movs	r3, #1
 800e494:	4631      	mov	r1, r6
 800e496:	4628      	mov	r0, r5
 800e498:	9206      	str	r2, [sp, #24]
 800e49a:	47b8      	blx	r7
 800e49c:	3001      	adds	r0, #1
 800e49e:	f43f ae9c 	beq.w	800e1da <_printf_float+0xb6>
 800e4a2:	9a06      	ldr	r2, [sp, #24]
 800e4a4:	f10b 0b01 	add.w	fp, fp, #1
 800e4a8:	e7bb      	b.n	800e422 <_printf_float+0x2fe>
 800e4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4ae:	4631      	mov	r1, r6
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	47b8      	blx	r7
 800e4b4:	3001      	adds	r0, #1
 800e4b6:	d1c0      	bne.n	800e43a <_printf_float+0x316>
 800e4b8:	e68f      	b.n	800e1da <_printf_float+0xb6>
 800e4ba:	9a06      	ldr	r2, [sp, #24]
 800e4bc:	464b      	mov	r3, r9
 800e4be:	4442      	add	r2, r8
 800e4c0:	4631      	mov	r1, r6
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	47b8      	blx	r7
 800e4c6:	3001      	adds	r0, #1
 800e4c8:	d1c3      	bne.n	800e452 <_printf_float+0x32e>
 800e4ca:	e686      	b.n	800e1da <_printf_float+0xb6>
 800e4cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4d0:	f1ba 0f01 	cmp.w	sl, #1
 800e4d4:	dc01      	bgt.n	800e4da <_printf_float+0x3b6>
 800e4d6:	07db      	lsls	r3, r3, #31
 800e4d8:	d536      	bpl.n	800e548 <_printf_float+0x424>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	4642      	mov	r2, r8
 800e4de:	4631      	mov	r1, r6
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	47b8      	blx	r7
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	f43f ae78 	beq.w	800e1da <_printf_float+0xb6>
 800e4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	47b8      	blx	r7
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	f43f ae70 	beq.w	800e1da <_printf_float+0xb6>
 800e4fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e4fe:	2200      	movs	r2, #0
 800e500:	2300      	movs	r3, #0
 800e502:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e506:	f7f2 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800e50a:	b9c0      	cbnz	r0, 800e53e <_printf_float+0x41a>
 800e50c:	4653      	mov	r3, sl
 800e50e:	f108 0201 	add.w	r2, r8, #1
 800e512:	4631      	mov	r1, r6
 800e514:	4628      	mov	r0, r5
 800e516:	47b8      	blx	r7
 800e518:	3001      	adds	r0, #1
 800e51a:	d10c      	bne.n	800e536 <_printf_float+0x412>
 800e51c:	e65d      	b.n	800e1da <_printf_float+0xb6>
 800e51e:	2301      	movs	r3, #1
 800e520:	465a      	mov	r2, fp
 800e522:	4631      	mov	r1, r6
 800e524:	4628      	mov	r0, r5
 800e526:	47b8      	blx	r7
 800e528:	3001      	adds	r0, #1
 800e52a:	f43f ae56 	beq.w	800e1da <_printf_float+0xb6>
 800e52e:	f108 0801 	add.w	r8, r8, #1
 800e532:	45d0      	cmp	r8, sl
 800e534:	dbf3      	blt.n	800e51e <_printf_float+0x3fa>
 800e536:	464b      	mov	r3, r9
 800e538:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e53c:	e6df      	b.n	800e2fe <_printf_float+0x1da>
 800e53e:	f04f 0800 	mov.w	r8, #0
 800e542:	f104 0b1a 	add.w	fp, r4, #26
 800e546:	e7f4      	b.n	800e532 <_printf_float+0x40e>
 800e548:	2301      	movs	r3, #1
 800e54a:	4642      	mov	r2, r8
 800e54c:	e7e1      	b.n	800e512 <_printf_float+0x3ee>
 800e54e:	2301      	movs	r3, #1
 800e550:	464a      	mov	r2, r9
 800e552:	4631      	mov	r1, r6
 800e554:	4628      	mov	r0, r5
 800e556:	47b8      	blx	r7
 800e558:	3001      	adds	r0, #1
 800e55a:	f43f ae3e 	beq.w	800e1da <_printf_float+0xb6>
 800e55e:	f108 0801 	add.w	r8, r8, #1
 800e562:	68e3      	ldr	r3, [r4, #12]
 800e564:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e566:	1a5b      	subs	r3, r3, r1
 800e568:	4543      	cmp	r3, r8
 800e56a:	dcf0      	bgt.n	800e54e <_printf_float+0x42a>
 800e56c:	e6fc      	b.n	800e368 <_printf_float+0x244>
 800e56e:	f04f 0800 	mov.w	r8, #0
 800e572:	f104 0919 	add.w	r9, r4, #25
 800e576:	e7f4      	b.n	800e562 <_printf_float+0x43e>

0800e578 <_printf_common>:
 800e578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e57c:	4616      	mov	r6, r2
 800e57e:	4698      	mov	r8, r3
 800e580:	688a      	ldr	r2, [r1, #8]
 800e582:	690b      	ldr	r3, [r1, #16]
 800e584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e588:	4293      	cmp	r3, r2
 800e58a:	bfb8      	it	lt
 800e58c:	4613      	movlt	r3, r2
 800e58e:	6033      	str	r3, [r6, #0]
 800e590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e594:	4607      	mov	r7, r0
 800e596:	460c      	mov	r4, r1
 800e598:	b10a      	cbz	r2, 800e59e <_printf_common+0x26>
 800e59a:	3301      	adds	r3, #1
 800e59c:	6033      	str	r3, [r6, #0]
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	0699      	lsls	r1, r3, #26
 800e5a2:	bf42      	ittt	mi
 800e5a4:	6833      	ldrmi	r3, [r6, #0]
 800e5a6:	3302      	addmi	r3, #2
 800e5a8:	6033      	strmi	r3, [r6, #0]
 800e5aa:	6825      	ldr	r5, [r4, #0]
 800e5ac:	f015 0506 	ands.w	r5, r5, #6
 800e5b0:	d106      	bne.n	800e5c0 <_printf_common+0x48>
 800e5b2:	f104 0a19 	add.w	sl, r4, #25
 800e5b6:	68e3      	ldr	r3, [r4, #12]
 800e5b8:	6832      	ldr	r2, [r6, #0]
 800e5ba:	1a9b      	subs	r3, r3, r2
 800e5bc:	42ab      	cmp	r3, r5
 800e5be:	dc26      	bgt.n	800e60e <_printf_common+0x96>
 800e5c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5c4:	6822      	ldr	r2, [r4, #0]
 800e5c6:	3b00      	subs	r3, #0
 800e5c8:	bf18      	it	ne
 800e5ca:	2301      	movne	r3, #1
 800e5cc:	0692      	lsls	r2, r2, #26
 800e5ce:	d42b      	bmi.n	800e628 <_printf_common+0xb0>
 800e5d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5d4:	4641      	mov	r1, r8
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	47c8      	blx	r9
 800e5da:	3001      	adds	r0, #1
 800e5dc:	d01e      	beq.n	800e61c <_printf_common+0xa4>
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	6922      	ldr	r2, [r4, #16]
 800e5e2:	f003 0306 	and.w	r3, r3, #6
 800e5e6:	2b04      	cmp	r3, #4
 800e5e8:	bf02      	ittt	eq
 800e5ea:	68e5      	ldreq	r5, [r4, #12]
 800e5ec:	6833      	ldreq	r3, [r6, #0]
 800e5ee:	1aed      	subeq	r5, r5, r3
 800e5f0:	68a3      	ldr	r3, [r4, #8]
 800e5f2:	bf0c      	ite	eq
 800e5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5f8:	2500      	movne	r5, #0
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	bfc4      	itt	gt
 800e5fe:	1a9b      	subgt	r3, r3, r2
 800e600:	18ed      	addgt	r5, r5, r3
 800e602:	2600      	movs	r6, #0
 800e604:	341a      	adds	r4, #26
 800e606:	42b5      	cmp	r5, r6
 800e608:	d11a      	bne.n	800e640 <_printf_common+0xc8>
 800e60a:	2000      	movs	r0, #0
 800e60c:	e008      	b.n	800e620 <_printf_common+0xa8>
 800e60e:	2301      	movs	r3, #1
 800e610:	4652      	mov	r2, sl
 800e612:	4641      	mov	r1, r8
 800e614:	4638      	mov	r0, r7
 800e616:	47c8      	blx	r9
 800e618:	3001      	adds	r0, #1
 800e61a:	d103      	bne.n	800e624 <_printf_common+0xac>
 800e61c:	f04f 30ff 	mov.w	r0, #4294967295
 800e620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e624:	3501      	adds	r5, #1
 800e626:	e7c6      	b.n	800e5b6 <_printf_common+0x3e>
 800e628:	18e1      	adds	r1, r4, r3
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	2030      	movs	r0, #48	@ 0x30
 800e62e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e632:	4422      	add	r2, r4
 800e634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e63c:	3302      	adds	r3, #2
 800e63e:	e7c7      	b.n	800e5d0 <_printf_common+0x58>
 800e640:	2301      	movs	r3, #1
 800e642:	4622      	mov	r2, r4
 800e644:	4641      	mov	r1, r8
 800e646:	4638      	mov	r0, r7
 800e648:	47c8      	blx	r9
 800e64a:	3001      	adds	r0, #1
 800e64c:	d0e6      	beq.n	800e61c <_printf_common+0xa4>
 800e64e:	3601      	adds	r6, #1
 800e650:	e7d9      	b.n	800e606 <_printf_common+0x8e>
	...

0800e654 <_printf_i>:
 800e654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e658:	7e0f      	ldrb	r7, [r1, #24]
 800e65a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e65c:	2f78      	cmp	r7, #120	@ 0x78
 800e65e:	4691      	mov	r9, r2
 800e660:	4680      	mov	r8, r0
 800e662:	460c      	mov	r4, r1
 800e664:	469a      	mov	sl, r3
 800e666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e66a:	d807      	bhi.n	800e67c <_printf_i+0x28>
 800e66c:	2f62      	cmp	r7, #98	@ 0x62
 800e66e:	d80a      	bhi.n	800e686 <_printf_i+0x32>
 800e670:	2f00      	cmp	r7, #0
 800e672:	f000 80d2 	beq.w	800e81a <_printf_i+0x1c6>
 800e676:	2f58      	cmp	r7, #88	@ 0x58
 800e678:	f000 80b9 	beq.w	800e7ee <_printf_i+0x19a>
 800e67c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e684:	e03a      	b.n	800e6fc <_printf_i+0xa8>
 800e686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e68a:	2b15      	cmp	r3, #21
 800e68c:	d8f6      	bhi.n	800e67c <_printf_i+0x28>
 800e68e:	a101      	add	r1, pc, #4	@ (adr r1, 800e694 <_printf_i+0x40>)
 800e690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e694:	0800e6ed 	.word	0x0800e6ed
 800e698:	0800e701 	.word	0x0800e701
 800e69c:	0800e67d 	.word	0x0800e67d
 800e6a0:	0800e67d 	.word	0x0800e67d
 800e6a4:	0800e67d 	.word	0x0800e67d
 800e6a8:	0800e67d 	.word	0x0800e67d
 800e6ac:	0800e701 	.word	0x0800e701
 800e6b0:	0800e67d 	.word	0x0800e67d
 800e6b4:	0800e67d 	.word	0x0800e67d
 800e6b8:	0800e67d 	.word	0x0800e67d
 800e6bc:	0800e67d 	.word	0x0800e67d
 800e6c0:	0800e801 	.word	0x0800e801
 800e6c4:	0800e72b 	.word	0x0800e72b
 800e6c8:	0800e7bb 	.word	0x0800e7bb
 800e6cc:	0800e67d 	.word	0x0800e67d
 800e6d0:	0800e67d 	.word	0x0800e67d
 800e6d4:	0800e823 	.word	0x0800e823
 800e6d8:	0800e67d 	.word	0x0800e67d
 800e6dc:	0800e72b 	.word	0x0800e72b
 800e6e0:	0800e67d 	.word	0x0800e67d
 800e6e4:	0800e67d 	.word	0x0800e67d
 800e6e8:	0800e7c3 	.word	0x0800e7c3
 800e6ec:	6833      	ldr	r3, [r6, #0]
 800e6ee:	1d1a      	adds	r2, r3, #4
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	6032      	str	r2, [r6, #0]
 800e6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	e09d      	b.n	800e83c <_printf_i+0x1e8>
 800e700:	6833      	ldr	r3, [r6, #0]
 800e702:	6820      	ldr	r0, [r4, #0]
 800e704:	1d19      	adds	r1, r3, #4
 800e706:	6031      	str	r1, [r6, #0]
 800e708:	0606      	lsls	r6, r0, #24
 800e70a:	d501      	bpl.n	800e710 <_printf_i+0xbc>
 800e70c:	681d      	ldr	r5, [r3, #0]
 800e70e:	e003      	b.n	800e718 <_printf_i+0xc4>
 800e710:	0645      	lsls	r5, r0, #25
 800e712:	d5fb      	bpl.n	800e70c <_printf_i+0xb8>
 800e714:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e718:	2d00      	cmp	r5, #0
 800e71a:	da03      	bge.n	800e724 <_printf_i+0xd0>
 800e71c:	232d      	movs	r3, #45	@ 0x2d
 800e71e:	426d      	negs	r5, r5
 800e720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e724:	4859      	ldr	r0, [pc, #356]	@ (800e88c <_printf_i+0x238>)
 800e726:	230a      	movs	r3, #10
 800e728:	e011      	b.n	800e74e <_printf_i+0xfa>
 800e72a:	6821      	ldr	r1, [r4, #0]
 800e72c:	6833      	ldr	r3, [r6, #0]
 800e72e:	0608      	lsls	r0, r1, #24
 800e730:	f853 5b04 	ldr.w	r5, [r3], #4
 800e734:	d402      	bmi.n	800e73c <_printf_i+0xe8>
 800e736:	0649      	lsls	r1, r1, #25
 800e738:	bf48      	it	mi
 800e73a:	b2ad      	uxthmi	r5, r5
 800e73c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e73e:	4853      	ldr	r0, [pc, #332]	@ (800e88c <_printf_i+0x238>)
 800e740:	6033      	str	r3, [r6, #0]
 800e742:	bf14      	ite	ne
 800e744:	230a      	movne	r3, #10
 800e746:	2308      	moveq	r3, #8
 800e748:	2100      	movs	r1, #0
 800e74a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e74e:	6866      	ldr	r6, [r4, #4]
 800e750:	60a6      	str	r6, [r4, #8]
 800e752:	2e00      	cmp	r6, #0
 800e754:	bfa2      	ittt	ge
 800e756:	6821      	ldrge	r1, [r4, #0]
 800e758:	f021 0104 	bicge.w	r1, r1, #4
 800e75c:	6021      	strge	r1, [r4, #0]
 800e75e:	b90d      	cbnz	r5, 800e764 <_printf_i+0x110>
 800e760:	2e00      	cmp	r6, #0
 800e762:	d04b      	beq.n	800e7fc <_printf_i+0x1a8>
 800e764:	4616      	mov	r6, r2
 800e766:	fbb5 f1f3 	udiv	r1, r5, r3
 800e76a:	fb03 5711 	mls	r7, r3, r1, r5
 800e76e:	5dc7      	ldrb	r7, [r0, r7]
 800e770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e774:	462f      	mov	r7, r5
 800e776:	42bb      	cmp	r3, r7
 800e778:	460d      	mov	r5, r1
 800e77a:	d9f4      	bls.n	800e766 <_printf_i+0x112>
 800e77c:	2b08      	cmp	r3, #8
 800e77e:	d10b      	bne.n	800e798 <_printf_i+0x144>
 800e780:	6823      	ldr	r3, [r4, #0]
 800e782:	07df      	lsls	r7, r3, #31
 800e784:	d508      	bpl.n	800e798 <_printf_i+0x144>
 800e786:	6923      	ldr	r3, [r4, #16]
 800e788:	6861      	ldr	r1, [r4, #4]
 800e78a:	4299      	cmp	r1, r3
 800e78c:	bfde      	ittt	le
 800e78e:	2330      	movle	r3, #48	@ 0x30
 800e790:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e794:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e798:	1b92      	subs	r2, r2, r6
 800e79a:	6122      	str	r2, [r4, #16]
 800e79c:	f8cd a000 	str.w	sl, [sp]
 800e7a0:	464b      	mov	r3, r9
 800e7a2:	aa03      	add	r2, sp, #12
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	f7ff fee6 	bl	800e578 <_printf_common>
 800e7ac:	3001      	adds	r0, #1
 800e7ae:	d14a      	bne.n	800e846 <_printf_i+0x1f2>
 800e7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b4:	b004      	add	sp, #16
 800e7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	f043 0320 	orr.w	r3, r3, #32
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	4833      	ldr	r0, [pc, #204]	@ (800e890 <_printf_i+0x23c>)
 800e7c4:	2778      	movs	r7, #120	@ 0x78
 800e7c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	6831      	ldr	r1, [r6, #0]
 800e7ce:	061f      	lsls	r7, r3, #24
 800e7d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7d4:	d402      	bmi.n	800e7dc <_printf_i+0x188>
 800e7d6:	065f      	lsls	r7, r3, #25
 800e7d8:	bf48      	it	mi
 800e7da:	b2ad      	uxthmi	r5, r5
 800e7dc:	6031      	str	r1, [r6, #0]
 800e7de:	07d9      	lsls	r1, r3, #31
 800e7e0:	bf44      	itt	mi
 800e7e2:	f043 0320 	orrmi.w	r3, r3, #32
 800e7e6:	6023      	strmi	r3, [r4, #0]
 800e7e8:	b11d      	cbz	r5, 800e7f2 <_printf_i+0x19e>
 800e7ea:	2310      	movs	r3, #16
 800e7ec:	e7ac      	b.n	800e748 <_printf_i+0xf4>
 800e7ee:	4827      	ldr	r0, [pc, #156]	@ (800e88c <_printf_i+0x238>)
 800e7f0:	e7e9      	b.n	800e7c6 <_printf_i+0x172>
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	f023 0320 	bic.w	r3, r3, #32
 800e7f8:	6023      	str	r3, [r4, #0]
 800e7fa:	e7f6      	b.n	800e7ea <_printf_i+0x196>
 800e7fc:	4616      	mov	r6, r2
 800e7fe:	e7bd      	b.n	800e77c <_printf_i+0x128>
 800e800:	6833      	ldr	r3, [r6, #0]
 800e802:	6825      	ldr	r5, [r4, #0]
 800e804:	6961      	ldr	r1, [r4, #20]
 800e806:	1d18      	adds	r0, r3, #4
 800e808:	6030      	str	r0, [r6, #0]
 800e80a:	062e      	lsls	r6, r5, #24
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	d501      	bpl.n	800e814 <_printf_i+0x1c0>
 800e810:	6019      	str	r1, [r3, #0]
 800e812:	e002      	b.n	800e81a <_printf_i+0x1c6>
 800e814:	0668      	lsls	r0, r5, #25
 800e816:	d5fb      	bpl.n	800e810 <_printf_i+0x1bc>
 800e818:	8019      	strh	r1, [r3, #0]
 800e81a:	2300      	movs	r3, #0
 800e81c:	6123      	str	r3, [r4, #16]
 800e81e:	4616      	mov	r6, r2
 800e820:	e7bc      	b.n	800e79c <_printf_i+0x148>
 800e822:	6833      	ldr	r3, [r6, #0]
 800e824:	1d1a      	adds	r2, r3, #4
 800e826:	6032      	str	r2, [r6, #0]
 800e828:	681e      	ldr	r6, [r3, #0]
 800e82a:	6862      	ldr	r2, [r4, #4]
 800e82c:	2100      	movs	r1, #0
 800e82e:	4630      	mov	r0, r6
 800e830:	f7f1 fcce 	bl	80001d0 <memchr>
 800e834:	b108      	cbz	r0, 800e83a <_printf_i+0x1e6>
 800e836:	1b80      	subs	r0, r0, r6
 800e838:	6060      	str	r0, [r4, #4]
 800e83a:	6863      	ldr	r3, [r4, #4]
 800e83c:	6123      	str	r3, [r4, #16]
 800e83e:	2300      	movs	r3, #0
 800e840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e844:	e7aa      	b.n	800e79c <_printf_i+0x148>
 800e846:	6923      	ldr	r3, [r4, #16]
 800e848:	4632      	mov	r2, r6
 800e84a:	4649      	mov	r1, r9
 800e84c:	4640      	mov	r0, r8
 800e84e:	47d0      	blx	sl
 800e850:	3001      	adds	r0, #1
 800e852:	d0ad      	beq.n	800e7b0 <_printf_i+0x15c>
 800e854:	6823      	ldr	r3, [r4, #0]
 800e856:	079b      	lsls	r3, r3, #30
 800e858:	d413      	bmi.n	800e882 <_printf_i+0x22e>
 800e85a:	68e0      	ldr	r0, [r4, #12]
 800e85c:	9b03      	ldr	r3, [sp, #12]
 800e85e:	4298      	cmp	r0, r3
 800e860:	bfb8      	it	lt
 800e862:	4618      	movlt	r0, r3
 800e864:	e7a6      	b.n	800e7b4 <_printf_i+0x160>
 800e866:	2301      	movs	r3, #1
 800e868:	4632      	mov	r2, r6
 800e86a:	4649      	mov	r1, r9
 800e86c:	4640      	mov	r0, r8
 800e86e:	47d0      	blx	sl
 800e870:	3001      	adds	r0, #1
 800e872:	d09d      	beq.n	800e7b0 <_printf_i+0x15c>
 800e874:	3501      	adds	r5, #1
 800e876:	68e3      	ldr	r3, [r4, #12]
 800e878:	9903      	ldr	r1, [sp, #12]
 800e87a:	1a5b      	subs	r3, r3, r1
 800e87c:	42ab      	cmp	r3, r5
 800e87e:	dcf2      	bgt.n	800e866 <_printf_i+0x212>
 800e880:	e7eb      	b.n	800e85a <_printf_i+0x206>
 800e882:	2500      	movs	r5, #0
 800e884:	f104 0619 	add.w	r6, r4, #25
 800e888:	e7f5      	b.n	800e876 <_printf_i+0x222>
 800e88a:	bf00      	nop
 800e88c:	08012cab 	.word	0x08012cab
 800e890:	08012cbc 	.word	0x08012cbc

0800e894 <_scanf_float>:
 800e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e898:	b087      	sub	sp, #28
 800e89a:	4617      	mov	r7, r2
 800e89c:	9303      	str	r3, [sp, #12]
 800e89e:	688b      	ldr	r3, [r1, #8]
 800e8a0:	1e5a      	subs	r2, r3, #1
 800e8a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e8a6:	bf81      	itttt	hi
 800e8a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e8ac:	eb03 0b05 	addhi.w	fp, r3, r5
 800e8b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e8b4:	608b      	strhi	r3, [r1, #8]
 800e8b6:	680b      	ldr	r3, [r1, #0]
 800e8b8:	460a      	mov	r2, r1
 800e8ba:	f04f 0500 	mov.w	r5, #0
 800e8be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e8c2:	f842 3b1c 	str.w	r3, [r2], #28
 800e8c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e8ca:	4680      	mov	r8, r0
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	bf98      	it	ls
 800e8d0:	f04f 0b00 	movls.w	fp, #0
 800e8d4:	9201      	str	r2, [sp, #4]
 800e8d6:	4616      	mov	r6, r2
 800e8d8:	46aa      	mov	sl, r5
 800e8da:	46a9      	mov	r9, r5
 800e8dc:	9502      	str	r5, [sp, #8]
 800e8de:	68a2      	ldr	r2, [r4, #8]
 800e8e0:	b152      	cbz	r2, 800e8f8 <_scanf_float+0x64>
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	2b4e      	cmp	r3, #78	@ 0x4e
 800e8e8:	d864      	bhi.n	800e9b4 <_scanf_float+0x120>
 800e8ea:	2b40      	cmp	r3, #64	@ 0x40
 800e8ec:	d83c      	bhi.n	800e968 <_scanf_float+0xd4>
 800e8ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e8f2:	b2c8      	uxtb	r0, r1
 800e8f4:	280e      	cmp	r0, #14
 800e8f6:	d93a      	bls.n	800e96e <_scanf_float+0xda>
 800e8f8:	f1b9 0f00 	cmp.w	r9, #0
 800e8fc:	d003      	beq.n	800e906 <_scanf_float+0x72>
 800e8fe:	6823      	ldr	r3, [r4, #0]
 800e900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e90a:	f1ba 0f01 	cmp.w	sl, #1
 800e90e:	f200 8117 	bhi.w	800eb40 <_scanf_float+0x2ac>
 800e912:	9b01      	ldr	r3, [sp, #4]
 800e914:	429e      	cmp	r6, r3
 800e916:	f200 8108 	bhi.w	800eb2a <_scanf_float+0x296>
 800e91a:	2001      	movs	r0, #1
 800e91c:	b007      	add	sp, #28
 800e91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e922:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e926:	2a0d      	cmp	r2, #13
 800e928:	d8e6      	bhi.n	800e8f8 <_scanf_float+0x64>
 800e92a:	a101      	add	r1, pc, #4	@ (adr r1, 800e930 <_scanf_float+0x9c>)
 800e92c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e930:	0800ea77 	.word	0x0800ea77
 800e934:	0800e8f9 	.word	0x0800e8f9
 800e938:	0800e8f9 	.word	0x0800e8f9
 800e93c:	0800e8f9 	.word	0x0800e8f9
 800e940:	0800ead7 	.word	0x0800ead7
 800e944:	0800eaaf 	.word	0x0800eaaf
 800e948:	0800e8f9 	.word	0x0800e8f9
 800e94c:	0800e8f9 	.word	0x0800e8f9
 800e950:	0800ea85 	.word	0x0800ea85
 800e954:	0800e8f9 	.word	0x0800e8f9
 800e958:	0800e8f9 	.word	0x0800e8f9
 800e95c:	0800e8f9 	.word	0x0800e8f9
 800e960:	0800e8f9 	.word	0x0800e8f9
 800e964:	0800ea3d 	.word	0x0800ea3d
 800e968:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e96c:	e7db      	b.n	800e926 <_scanf_float+0x92>
 800e96e:	290e      	cmp	r1, #14
 800e970:	d8c2      	bhi.n	800e8f8 <_scanf_float+0x64>
 800e972:	a001      	add	r0, pc, #4	@ (adr r0, 800e978 <_scanf_float+0xe4>)
 800e974:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e978:	0800ea2d 	.word	0x0800ea2d
 800e97c:	0800e8f9 	.word	0x0800e8f9
 800e980:	0800ea2d 	.word	0x0800ea2d
 800e984:	0800eac3 	.word	0x0800eac3
 800e988:	0800e8f9 	.word	0x0800e8f9
 800e98c:	0800e9d5 	.word	0x0800e9d5
 800e990:	0800ea13 	.word	0x0800ea13
 800e994:	0800ea13 	.word	0x0800ea13
 800e998:	0800ea13 	.word	0x0800ea13
 800e99c:	0800ea13 	.word	0x0800ea13
 800e9a0:	0800ea13 	.word	0x0800ea13
 800e9a4:	0800ea13 	.word	0x0800ea13
 800e9a8:	0800ea13 	.word	0x0800ea13
 800e9ac:	0800ea13 	.word	0x0800ea13
 800e9b0:	0800ea13 	.word	0x0800ea13
 800e9b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800e9b6:	d809      	bhi.n	800e9cc <_scanf_float+0x138>
 800e9b8:	2b60      	cmp	r3, #96	@ 0x60
 800e9ba:	d8b2      	bhi.n	800e922 <_scanf_float+0x8e>
 800e9bc:	2b54      	cmp	r3, #84	@ 0x54
 800e9be:	d07b      	beq.n	800eab8 <_scanf_float+0x224>
 800e9c0:	2b59      	cmp	r3, #89	@ 0x59
 800e9c2:	d199      	bne.n	800e8f8 <_scanf_float+0x64>
 800e9c4:	2d07      	cmp	r5, #7
 800e9c6:	d197      	bne.n	800e8f8 <_scanf_float+0x64>
 800e9c8:	2508      	movs	r5, #8
 800e9ca:	e02c      	b.n	800ea26 <_scanf_float+0x192>
 800e9cc:	2b74      	cmp	r3, #116	@ 0x74
 800e9ce:	d073      	beq.n	800eab8 <_scanf_float+0x224>
 800e9d0:	2b79      	cmp	r3, #121	@ 0x79
 800e9d2:	e7f6      	b.n	800e9c2 <_scanf_float+0x12e>
 800e9d4:	6821      	ldr	r1, [r4, #0]
 800e9d6:	05c8      	lsls	r0, r1, #23
 800e9d8:	d51b      	bpl.n	800ea12 <_scanf_float+0x17e>
 800e9da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e9de:	6021      	str	r1, [r4, #0]
 800e9e0:	f109 0901 	add.w	r9, r9, #1
 800e9e4:	f1bb 0f00 	cmp.w	fp, #0
 800e9e8:	d003      	beq.n	800e9f2 <_scanf_float+0x15e>
 800e9ea:	3201      	adds	r2, #1
 800e9ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9f0:	60a2      	str	r2, [r4, #8]
 800e9f2:	68a3      	ldr	r3, [r4, #8]
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	60a3      	str	r3, [r4, #8]
 800e9f8:	6923      	ldr	r3, [r4, #16]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	6123      	str	r3, [r4, #16]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	3b01      	subs	r3, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	607b      	str	r3, [r7, #4]
 800ea06:	f340 8087 	ble.w	800eb18 <_scanf_float+0x284>
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	603b      	str	r3, [r7, #0]
 800ea10:	e765      	b.n	800e8de <_scanf_float+0x4a>
 800ea12:	eb1a 0105 	adds.w	r1, sl, r5
 800ea16:	f47f af6f 	bne.w	800e8f8 <_scanf_float+0x64>
 800ea1a:	6822      	ldr	r2, [r4, #0]
 800ea1c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ea20:	6022      	str	r2, [r4, #0]
 800ea22:	460d      	mov	r5, r1
 800ea24:	468a      	mov	sl, r1
 800ea26:	f806 3b01 	strb.w	r3, [r6], #1
 800ea2a:	e7e2      	b.n	800e9f2 <_scanf_float+0x15e>
 800ea2c:	6822      	ldr	r2, [r4, #0]
 800ea2e:	0610      	lsls	r0, r2, #24
 800ea30:	f57f af62 	bpl.w	800e8f8 <_scanf_float+0x64>
 800ea34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ea38:	6022      	str	r2, [r4, #0]
 800ea3a:	e7f4      	b.n	800ea26 <_scanf_float+0x192>
 800ea3c:	f1ba 0f00 	cmp.w	sl, #0
 800ea40:	d10e      	bne.n	800ea60 <_scanf_float+0x1cc>
 800ea42:	f1b9 0f00 	cmp.w	r9, #0
 800ea46:	d10e      	bne.n	800ea66 <_scanf_float+0x1d2>
 800ea48:	6822      	ldr	r2, [r4, #0]
 800ea4a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ea4e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ea52:	d108      	bne.n	800ea66 <_scanf_float+0x1d2>
 800ea54:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea58:	6022      	str	r2, [r4, #0]
 800ea5a:	f04f 0a01 	mov.w	sl, #1
 800ea5e:	e7e2      	b.n	800ea26 <_scanf_float+0x192>
 800ea60:	f1ba 0f02 	cmp.w	sl, #2
 800ea64:	d055      	beq.n	800eb12 <_scanf_float+0x27e>
 800ea66:	2d01      	cmp	r5, #1
 800ea68:	d002      	beq.n	800ea70 <_scanf_float+0x1dc>
 800ea6a:	2d04      	cmp	r5, #4
 800ea6c:	f47f af44 	bne.w	800e8f8 <_scanf_float+0x64>
 800ea70:	3501      	adds	r5, #1
 800ea72:	b2ed      	uxtb	r5, r5
 800ea74:	e7d7      	b.n	800ea26 <_scanf_float+0x192>
 800ea76:	f1ba 0f01 	cmp.w	sl, #1
 800ea7a:	f47f af3d 	bne.w	800e8f8 <_scanf_float+0x64>
 800ea7e:	f04f 0a02 	mov.w	sl, #2
 800ea82:	e7d0      	b.n	800ea26 <_scanf_float+0x192>
 800ea84:	b97d      	cbnz	r5, 800eaa6 <_scanf_float+0x212>
 800ea86:	f1b9 0f00 	cmp.w	r9, #0
 800ea8a:	f47f af38 	bne.w	800e8fe <_scanf_float+0x6a>
 800ea8e:	6822      	ldr	r2, [r4, #0]
 800ea90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ea94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ea98:	f040 8108 	bne.w	800ecac <_scanf_float+0x418>
 800ea9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eaa0:	6022      	str	r2, [r4, #0]
 800eaa2:	2501      	movs	r5, #1
 800eaa4:	e7bf      	b.n	800ea26 <_scanf_float+0x192>
 800eaa6:	2d03      	cmp	r5, #3
 800eaa8:	d0e2      	beq.n	800ea70 <_scanf_float+0x1dc>
 800eaaa:	2d05      	cmp	r5, #5
 800eaac:	e7de      	b.n	800ea6c <_scanf_float+0x1d8>
 800eaae:	2d02      	cmp	r5, #2
 800eab0:	f47f af22 	bne.w	800e8f8 <_scanf_float+0x64>
 800eab4:	2503      	movs	r5, #3
 800eab6:	e7b6      	b.n	800ea26 <_scanf_float+0x192>
 800eab8:	2d06      	cmp	r5, #6
 800eaba:	f47f af1d 	bne.w	800e8f8 <_scanf_float+0x64>
 800eabe:	2507      	movs	r5, #7
 800eac0:	e7b1      	b.n	800ea26 <_scanf_float+0x192>
 800eac2:	6822      	ldr	r2, [r4, #0]
 800eac4:	0591      	lsls	r1, r2, #22
 800eac6:	f57f af17 	bpl.w	800e8f8 <_scanf_float+0x64>
 800eaca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800eace:	6022      	str	r2, [r4, #0]
 800ead0:	f8cd 9008 	str.w	r9, [sp, #8]
 800ead4:	e7a7      	b.n	800ea26 <_scanf_float+0x192>
 800ead6:	6822      	ldr	r2, [r4, #0]
 800ead8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800eadc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800eae0:	d006      	beq.n	800eaf0 <_scanf_float+0x25c>
 800eae2:	0550      	lsls	r0, r2, #21
 800eae4:	f57f af08 	bpl.w	800e8f8 <_scanf_float+0x64>
 800eae8:	f1b9 0f00 	cmp.w	r9, #0
 800eaec:	f000 80de 	beq.w	800ecac <_scanf_float+0x418>
 800eaf0:	0591      	lsls	r1, r2, #22
 800eaf2:	bf58      	it	pl
 800eaf4:	9902      	ldrpl	r1, [sp, #8]
 800eaf6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eafa:	bf58      	it	pl
 800eafc:	eba9 0101 	subpl.w	r1, r9, r1
 800eb00:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800eb04:	bf58      	it	pl
 800eb06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eb0a:	6022      	str	r2, [r4, #0]
 800eb0c:	f04f 0900 	mov.w	r9, #0
 800eb10:	e789      	b.n	800ea26 <_scanf_float+0x192>
 800eb12:	f04f 0a03 	mov.w	sl, #3
 800eb16:	e786      	b.n	800ea26 <_scanf_float+0x192>
 800eb18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	4640      	mov	r0, r8
 800eb20:	4798      	blx	r3
 800eb22:	2800      	cmp	r0, #0
 800eb24:	f43f aedb 	beq.w	800e8de <_scanf_float+0x4a>
 800eb28:	e6e6      	b.n	800e8f8 <_scanf_float+0x64>
 800eb2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb32:	463a      	mov	r2, r7
 800eb34:	4640      	mov	r0, r8
 800eb36:	4798      	blx	r3
 800eb38:	6923      	ldr	r3, [r4, #16]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	6123      	str	r3, [r4, #16]
 800eb3e:	e6e8      	b.n	800e912 <_scanf_float+0x7e>
 800eb40:	1e6b      	subs	r3, r5, #1
 800eb42:	2b06      	cmp	r3, #6
 800eb44:	d824      	bhi.n	800eb90 <_scanf_float+0x2fc>
 800eb46:	2d02      	cmp	r5, #2
 800eb48:	d836      	bhi.n	800ebb8 <_scanf_float+0x324>
 800eb4a:	9b01      	ldr	r3, [sp, #4]
 800eb4c:	429e      	cmp	r6, r3
 800eb4e:	f67f aee4 	bls.w	800e91a <_scanf_float+0x86>
 800eb52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb5a:	463a      	mov	r2, r7
 800eb5c:	4640      	mov	r0, r8
 800eb5e:	4798      	blx	r3
 800eb60:	6923      	ldr	r3, [r4, #16]
 800eb62:	3b01      	subs	r3, #1
 800eb64:	6123      	str	r3, [r4, #16]
 800eb66:	e7f0      	b.n	800eb4a <_scanf_float+0x2b6>
 800eb68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb6c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eb70:	463a      	mov	r2, r7
 800eb72:	4640      	mov	r0, r8
 800eb74:	4798      	blx	r3
 800eb76:	6923      	ldr	r3, [r4, #16]
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	6123      	str	r3, [r4, #16]
 800eb7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb80:	fa5f fa8a 	uxtb.w	sl, sl
 800eb84:	f1ba 0f02 	cmp.w	sl, #2
 800eb88:	d1ee      	bne.n	800eb68 <_scanf_float+0x2d4>
 800eb8a:	3d03      	subs	r5, #3
 800eb8c:	b2ed      	uxtb	r5, r5
 800eb8e:	1b76      	subs	r6, r6, r5
 800eb90:	6823      	ldr	r3, [r4, #0]
 800eb92:	05da      	lsls	r2, r3, #23
 800eb94:	d530      	bpl.n	800ebf8 <_scanf_float+0x364>
 800eb96:	055b      	lsls	r3, r3, #21
 800eb98:	d511      	bpl.n	800ebbe <_scanf_float+0x32a>
 800eb9a:	9b01      	ldr	r3, [sp, #4]
 800eb9c:	429e      	cmp	r6, r3
 800eb9e:	f67f aebc 	bls.w	800e91a <_scanf_float+0x86>
 800eba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebaa:	463a      	mov	r2, r7
 800ebac:	4640      	mov	r0, r8
 800ebae:	4798      	blx	r3
 800ebb0:	6923      	ldr	r3, [r4, #16]
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	6123      	str	r3, [r4, #16]
 800ebb6:	e7f0      	b.n	800eb9a <_scanf_float+0x306>
 800ebb8:	46aa      	mov	sl, r5
 800ebba:	46b3      	mov	fp, r6
 800ebbc:	e7de      	b.n	800eb7c <_scanf_float+0x2e8>
 800ebbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ebc2:	6923      	ldr	r3, [r4, #16]
 800ebc4:	2965      	cmp	r1, #101	@ 0x65
 800ebc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ebca:	f106 35ff 	add.w	r5, r6, #4294967295
 800ebce:	6123      	str	r3, [r4, #16]
 800ebd0:	d00c      	beq.n	800ebec <_scanf_float+0x358>
 800ebd2:	2945      	cmp	r1, #69	@ 0x45
 800ebd4:	d00a      	beq.n	800ebec <_scanf_float+0x358>
 800ebd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebda:	463a      	mov	r2, r7
 800ebdc:	4640      	mov	r0, r8
 800ebde:	4798      	blx	r3
 800ebe0:	6923      	ldr	r3, [r4, #16]
 800ebe2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	1eb5      	subs	r5, r6, #2
 800ebea:	6123      	str	r3, [r4, #16]
 800ebec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebf0:	463a      	mov	r2, r7
 800ebf2:	4640      	mov	r0, r8
 800ebf4:	4798      	blx	r3
 800ebf6:	462e      	mov	r6, r5
 800ebf8:	6822      	ldr	r2, [r4, #0]
 800ebfa:	f012 0210 	ands.w	r2, r2, #16
 800ebfe:	d001      	beq.n	800ec04 <_scanf_float+0x370>
 800ec00:	2000      	movs	r0, #0
 800ec02:	e68b      	b.n	800e91c <_scanf_float+0x88>
 800ec04:	7032      	strb	r2, [r6, #0]
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ec0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec10:	d11c      	bne.n	800ec4c <_scanf_float+0x3b8>
 800ec12:	9b02      	ldr	r3, [sp, #8]
 800ec14:	454b      	cmp	r3, r9
 800ec16:	eba3 0209 	sub.w	r2, r3, r9
 800ec1a:	d123      	bne.n	800ec64 <_scanf_float+0x3d0>
 800ec1c:	9901      	ldr	r1, [sp, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	4640      	mov	r0, r8
 800ec22:	f002 fddd 	bl	80117e0 <_strtod_r>
 800ec26:	9b03      	ldr	r3, [sp, #12]
 800ec28:	6821      	ldr	r1, [r4, #0]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f011 0f02 	tst.w	r1, #2
 800ec30:	ec57 6b10 	vmov	r6, r7, d0
 800ec34:	f103 0204 	add.w	r2, r3, #4
 800ec38:	d01f      	beq.n	800ec7a <_scanf_float+0x3e6>
 800ec3a:	9903      	ldr	r1, [sp, #12]
 800ec3c:	600a      	str	r2, [r1, #0]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	e9c3 6700 	strd	r6, r7, [r3]
 800ec44:	68e3      	ldr	r3, [r4, #12]
 800ec46:	3301      	adds	r3, #1
 800ec48:	60e3      	str	r3, [r4, #12]
 800ec4a:	e7d9      	b.n	800ec00 <_scanf_float+0x36c>
 800ec4c:	9b04      	ldr	r3, [sp, #16]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d0e4      	beq.n	800ec1c <_scanf_float+0x388>
 800ec52:	9905      	ldr	r1, [sp, #20]
 800ec54:	230a      	movs	r3, #10
 800ec56:	3101      	adds	r1, #1
 800ec58:	4640      	mov	r0, r8
 800ec5a:	f7ff f9b7 	bl	800dfcc <_strtol_r>
 800ec5e:	9b04      	ldr	r3, [sp, #16]
 800ec60:	9e05      	ldr	r6, [sp, #20]
 800ec62:	1ac2      	subs	r2, r0, r3
 800ec64:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ec68:	429e      	cmp	r6, r3
 800ec6a:	bf28      	it	cs
 800ec6c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ec70:	4910      	ldr	r1, [pc, #64]	@ (800ecb4 <_scanf_float+0x420>)
 800ec72:	4630      	mov	r0, r6
 800ec74:	f000 f9b6 	bl	800efe4 <siprintf>
 800ec78:	e7d0      	b.n	800ec1c <_scanf_float+0x388>
 800ec7a:	f011 0f04 	tst.w	r1, #4
 800ec7e:	9903      	ldr	r1, [sp, #12]
 800ec80:	600a      	str	r2, [r1, #0]
 800ec82:	d1dc      	bne.n	800ec3e <_scanf_float+0x3aa>
 800ec84:	681d      	ldr	r5, [r3, #0]
 800ec86:	4632      	mov	r2, r6
 800ec88:	463b      	mov	r3, r7
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	4639      	mov	r1, r7
 800ec8e:	f7f1 ff4d 	bl	8000b2c <__aeabi_dcmpun>
 800ec92:	b128      	cbz	r0, 800eca0 <_scanf_float+0x40c>
 800ec94:	4808      	ldr	r0, [pc, #32]	@ (800ecb8 <_scanf_float+0x424>)
 800ec96:	f000 fc29 	bl	800f4ec <nanf>
 800ec9a:	ed85 0a00 	vstr	s0, [r5]
 800ec9e:	e7d1      	b.n	800ec44 <_scanf_float+0x3b0>
 800eca0:	4630      	mov	r0, r6
 800eca2:	4639      	mov	r1, r7
 800eca4:	f7f1 ffa0 	bl	8000be8 <__aeabi_d2f>
 800eca8:	6028      	str	r0, [r5, #0]
 800ecaa:	e7cb      	b.n	800ec44 <_scanf_float+0x3b0>
 800ecac:	f04f 0900 	mov.w	r9, #0
 800ecb0:	e629      	b.n	800e906 <_scanf_float+0x72>
 800ecb2:	bf00      	nop
 800ecb4:	08012ccd 	.word	0x08012ccd
 800ecb8:	08012d0d 	.word	0x08012d0d

0800ecbc <__sflush_r>:
 800ecbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ecc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc4:	0716      	lsls	r6, r2, #28
 800ecc6:	4605      	mov	r5, r0
 800ecc8:	460c      	mov	r4, r1
 800ecca:	d454      	bmi.n	800ed76 <__sflush_r+0xba>
 800eccc:	684b      	ldr	r3, [r1, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	dc02      	bgt.n	800ecd8 <__sflush_r+0x1c>
 800ecd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	dd48      	ble.n	800ed6a <__sflush_r+0xae>
 800ecd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ecda:	2e00      	cmp	r6, #0
 800ecdc:	d045      	beq.n	800ed6a <__sflush_r+0xae>
 800ecde:	2300      	movs	r3, #0
 800ece0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ece4:	682f      	ldr	r7, [r5, #0]
 800ece6:	6a21      	ldr	r1, [r4, #32]
 800ece8:	602b      	str	r3, [r5, #0]
 800ecea:	d030      	beq.n	800ed4e <__sflush_r+0x92>
 800ecec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ecee:	89a3      	ldrh	r3, [r4, #12]
 800ecf0:	0759      	lsls	r1, r3, #29
 800ecf2:	d505      	bpl.n	800ed00 <__sflush_r+0x44>
 800ecf4:	6863      	ldr	r3, [r4, #4]
 800ecf6:	1ad2      	subs	r2, r2, r3
 800ecf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ecfa:	b10b      	cbz	r3, 800ed00 <__sflush_r+0x44>
 800ecfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ecfe:	1ad2      	subs	r2, r2, r3
 800ed00:	2300      	movs	r3, #0
 800ed02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed04:	6a21      	ldr	r1, [r4, #32]
 800ed06:	4628      	mov	r0, r5
 800ed08:	47b0      	blx	r6
 800ed0a:	1c43      	adds	r3, r0, #1
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	d106      	bne.n	800ed1e <__sflush_r+0x62>
 800ed10:	6829      	ldr	r1, [r5, #0]
 800ed12:	291d      	cmp	r1, #29
 800ed14:	d82b      	bhi.n	800ed6e <__sflush_r+0xb2>
 800ed16:	4a2a      	ldr	r2, [pc, #168]	@ (800edc0 <__sflush_r+0x104>)
 800ed18:	410a      	asrs	r2, r1
 800ed1a:	07d6      	lsls	r6, r2, #31
 800ed1c:	d427      	bmi.n	800ed6e <__sflush_r+0xb2>
 800ed1e:	2200      	movs	r2, #0
 800ed20:	6062      	str	r2, [r4, #4]
 800ed22:	04d9      	lsls	r1, r3, #19
 800ed24:	6922      	ldr	r2, [r4, #16]
 800ed26:	6022      	str	r2, [r4, #0]
 800ed28:	d504      	bpl.n	800ed34 <__sflush_r+0x78>
 800ed2a:	1c42      	adds	r2, r0, #1
 800ed2c:	d101      	bne.n	800ed32 <__sflush_r+0x76>
 800ed2e:	682b      	ldr	r3, [r5, #0]
 800ed30:	b903      	cbnz	r3, 800ed34 <__sflush_r+0x78>
 800ed32:	6560      	str	r0, [r4, #84]	@ 0x54
 800ed34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed36:	602f      	str	r7, [r5, #0]
 800ed38:	b1b9      	cbz	r1, 800ed6a <__sflush_r+0xae>
 800ed3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed3e:	4299      	cmp	r1, r3
 800ed40:	d002      	beq.n	800ed48 <__sflush_r+0x8c>
 800ed42:	4628      	mov	r0, r5
 800ed44:	f001 fa44 	bl	80101d0 <_free_r>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed4c:	e00d      	b.n	800ed6a <__sflush_r+0xae>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	4628      	mov	r0, r5
 800ed52:	47b0      	blx	r6
 800ed54:	4602      	mov	r2, r0
 800ed56:	1c50      	adds	r0, r2, #1
 800ed58:	d1c9      	bne.n	800ecee <__sflush_r+0x32>
 800ed5a:	682b      	ldr	r3, [r5, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d0c6      	beq.n	800ecee <__sflush_r+0x32>
 800ed60:	2b1d      	cmp	r3, #29
 800ed62:	d001      	beq.n	800ed68 <__sflush_r+0xac>
 800ed64:	2b16      	cmp	r3, #22
 800ed66:	d11e      	bne.n	800eda6 <__sflush_r+0xea>
 800ed68:	602f      	str	r7, [r5, #0]
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	e022      	b.n	800edb4 <__sflush_r+0xf8>
 800ed6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed72:	b21b      	sxth	r3, r3
 800ed74:	e01b      	b.n	800edae <__sflush_r+0xf2>
 800ed76:	690f      	ldr	r7, [r1, #16]
 800ed78:	2f00      	cmp	r7, #0
 800ed7a:	d0f6      	beq.n	800ed6a <__sflush_r+0xae>
 800ed7c:	0793      	lsls	r3, r2, #30
 800ed7e:	680e      	ldr	r6, [r1, #0]
 800ed80:	bf08      	it	eq
 800ed82:	694b      	ldreq	r3, [r1, #20]
 800ed84:	600f      	str	r7, [r1, #0]
 800ed86:	bf18      	it	ne
 800ed88:	2300      	movne	r3, #0
 800ed8a:	eba6 0807 	sub.w	r8, r6, r7
 800ed8e:	608b      	str	r3, [r1, #8]
 800ed90:	f1b8 0f00 	cmp.w	r8, #0
 800ed94:	dde9      	ble.n	800ed6a <__sflush_r+0xae>
 800ed96:	6a21      	ldr	r1, [r4, #32]
 800ed98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ed9a:	4643      	mov	r3, r8
 800ed9c:	463a      	mov	r2, r7
 800ed9e:	4628      	mov	r0, r5
 800eda0:	47b0      	blx	r6
 800eda2:	2800      	cmp	r0, #0
 800eda4:	dc08      	bgt.n	800edb8 <__sflush_r+0xfc>
 800eda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edae:	81a3      	strh	r3, [r4, #12]
 800edb0:	f04f 30ff 	mov.w	r0, #4294967295
 800edb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb8:	4407      	add	r7, r0
 800edba:	eba8 0800 	sub.w	r8, r8, r0
 800edbe:	e7e7      	b.n	800ed90 <__sflush_r+0xd4>
 800edc0:	dfbffffe 	.word	0xdfbffffe

0800edc4 <_fflush_r>:
 800edc4:	b538      	push	{r3, r4, r5, lr}
 800edc6:	690b      	ldr	r3, [r1, #16]
 800edc8:	4605      	mov	r5, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	b913      	cbnz	r3, 800edd4 <_fflush_r+0x10>
 800edce:	2500      	movs	r5, #0
 800edd0:	4628      	mov	r0, r5
 800edd2:	bd38      	pop	{r3, r4, r5, pc}
 800edd4:	b118      	cbz	r0, 800edde <_fflush_r+0x1a>
 800edd6:	6a03      	ldr	r3, [r0, #32]
 800edd8:	b90b      	cbnz	r3, 800edde <_fflush_r+0x1a>
 800edda:	f000 f8bb 	bl	800ef54 <__sinit>
 800edde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d0f3      	beq.n	800edce <_fflush_r+0xa>
 800ede6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ede8:	07d0      	lsls	r0, r2, #31
 800edea:	d404      	bmi.n	800edf6 <_fflush_r+0x32>
 800edec:	0599      	lsls	r1, r3, #22
 800edee:	d402      	bmi.n	800edf6 <_fflush_r+0x32>
 800edf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edf2:	f000 fb62 	bl	800f4ba <__retarget_lock_acquire_recursive>
 800edf6:	4628      	mov	r0, r5
 800edf8:	4621      	mov	r1, r4
 800edfa:	f7ff ff5f 	bl	800ecbc <__sflush_r>
 800edfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee00:	07da      	lsls	r2, r3, #31
 800ee02:	4605      	mov	r5, r0
 800ee04:	d4e4      	bmi.n	800edd0 <_fflush_r+0xc>
 800ee06:	89a3      	ldrh	r3, [r4, #12]
 800ee08:	059b      	lsls	r3, r3, #22
 800ee0a:	d4e1      	bmi.n	800edd0 <_fflush_r+0xc>
 800ee0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee0e:	f000 fb55 	bl	800f4bc <__retarget_lock_release_recursive>
 800ee12:	e7dd      	b.n	800edd0 <_fflush_r+0xc>

0800ee14 <fflush>:
 800ee14:	4601      	mov	r1, r0
 800ee16:	b920      	cbnz	r0, 800ee22 <fflush+0xe>
 800ee18:	4a04      	ldr	r2, [pc, #16]	@ (800ee2c <fflush+0x18>)
 800ee1a:	4905      	ldr	r1, [pc, #20]	@ (800ee30 <fflush+0x1c>)
 800ee1c:	4805      	ldr	r0, [pc, #20]	@ (800ee34 <fflush+0x20>)
 800ee1e:	f000 b8b1 	b.w	800ef84 <_fwalk_sglue>
 800ee22:	4b05      	ldr	r3, [pc, #20]	@ (800ee38 <fflush+0x24>)
 800ee24:	6818      	ldr	r0, [r3, #0]
 800ee26:	f7ff bfcd 	b.w	800edc4 <_fflush_r>
 800ee2a:	bf00      	nop
 800ee2c:	2000002c 	.word	0x2000002c
 800ee30:	0800edc5 	.word	0x0800edc5
 800ee34:	2000003c 	.word	0x2000003c
 800ee38:	20000038 	.word	0x20000038

0800ee3c <std>:
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	b510      	push	{r4, lr}
 800ee40:	4604      	mov	r4, r0
 800ee42:	e9c0 3300 	strd	r3, r3, [r0]
 800ee46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee4a:	6083      	str	r3, [r0, #8]
 800ee4c:	8181      	strh	r1, [r0, #12]
 800ee4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ee50:	81c2      	strh	r2, [r0, #14]
 800ee52:	6183      	str	r3, [r0, #24]
 800ee54:	4619      	mov	r1, r3
 800ee56:	2208      	movs	r2, #8
 800ee58:	305c      	adds	r0, #92	@ 0x5c
 800ee5a:	f000 f9d5 	bl	800f208 <memset>
 800ee5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee94 <std+0x58>)
 800ee60:	6263      	str	r3, [r4, #36]	@ 0x24
 800ee62:	4b0d      	ldr	r3, [pc, #52]	@ (800ee98 <std+0x5c>)
 800ee64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ee66:	4b0d      	ldr	r3, [pc, #52]	@ (800ee9c <std+0x60>)
 800ee68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ee6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eea0 <std+0x64>)
 800ee6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ee6e:	4b0d      	ldr	r3, [pc, #52]	@ (800eea4 <std+0x68>)
 800ee70:	6224      	str	r4, [r4, #32]
 800ee72:	429c      	cmp	r4, r3
 800ee74:	d006      	beq.n	800ee84 <std+0x48>
 800ee76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ee7a:	4294      	cmp	r4, r2
 800ee7c:	d002      	beq.n	800ee84 <std+0x48>
 800ee7e:	33d0      	adds	r3, #208	@ 0xd0
 800ee80:	429c      	cmp	r4, r3
 800ee82:	d105      	bne.n	800ee90 <std+0x54>
 800ee84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee8c:	f000 bb14 	b.w	800f4b8 <__retarget_lock_init_recursive>
 800ee90:	bd10      	pop	{r4, pc}
 800ee92:	bf00      	nop
 800ee94:	0800f025 	.word	0x0800f025
 800ee98:	0800f047 	.word	0x0800f047
 800ee9c:	0800f07f 	.word	0x0800f07f
 800eea0:	0800f0a3 	.word	0x0800f0a3
 800eea4:	2000b8b4 	.word	0x2000b8b4

0800eea8 <stdio_exit_handler>:
 800eea8:	4a02      	ldr	r2, [pc, #8]	@ (800eeb4 <stdio_exit_handler+0xc>)
 800eeaa:	4903      	ldr	r1, [pc, #12]	@ (800eeb8 <stdio_exit_handler+0x10>)
 800eeac:	4803      	ldr	r0, [pc, #12]	@ (800eebc <stdio_exit_handler+0x14>)
 800eeae:	f000 b869 	b.w	800ef84 <_fwalk_sglue>
 800eeb2:	bf00      	nop
 800eeb4:	2000002c 	.word	0x2000002c
 800eeb8:	0800edc5 	.word	0x0800edc5
 800eebc:	2000003c 	.word	0x2000003c

0800eec0 <cleanup_stdio>:
 800eec0:	6841      	ldr	r1, [r0, #4]
 800eec2:	4b0c      	ldr	r3, [pc, #48]	@ (800eef4 <cleanup_stdio+0x34>)
 800eec4:	4299      	cmp	r1, r3
 800eec6:	b510      	push	{r4, lr}
 800eec8:	4604      	mov	r4, r0
 800eeca:	d001      	beq.n	800eed0 <cleanup_stdio+0x10>
 800eecc:	f7ff ff7a 	bl	800edc4 <_fflush_r>
 800eed0:	68a1      	ldr	r1, [r4, #8]
 800eed2:	4b09      	ldr	r3, [pc, #36]	@ (800eef8 <cleanup_stdio+0x38>)
 800eed4:	4299      	cmp	r1, r3
 800eed6:	d002      	beq.n	800eede <cleanup_stdio+0x1e>
 800eed8:	4620      	mov	r0, r4
 800eeda:	f7ff ff73 	bl	800edc4 <_fflush_r>
 800eede:	68e1      	ldr	r1, [r4, #12]
 800eee0:	4b06      	ldr	r3, [pc, #24]	@ (800eefc <cleanup_stdio+0x3c>)
 800eee2:	4299      	cmp	r1, r3
 800eee4:	d004      	beq.n	800eef0 <cleanup_stdio+0x30>
 800eee6:	4620      	mov	r0, r4
 800eee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeec:	f7ff bf6a 	b.w	800edc4 <_fflush_r>
 800eef0:	bd10      	pop	{r4, pc}
 800eef2:	bf00      	nop
 800eef4:	2000b8b4 	.word	0x2000b8b4
 800eef8:	2000b91c 	.word	0x2000b91c
 800eefc:	2000b984 	.word	0x2000b984

0800ef00 <global_stdio_init.part.0>:
 800ef00:	b510      	push	{r4, lr}
 800ef02:	4b0b      	ldr	r3, [pc, #44]	@ (800ef30 <global_stdio_init.part.0+0x30>)
 800ef04:	4c0b      	ldr	r4, [pc, #44]	@ (800ef34 <global_stdio_init.part.0+0x34>)
 800ef06:	4a0c      	ldr	r2, [pc, #48]	@ (800ef38 <global_stdio_init.part.0+0x38>)
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	2104      	movs	r1, #4
 800ef10:	f7ff ff94 	bl	800ee3c <std>
 800ef14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ef18:	2201      	movs	r2, #1
 800ef1a:	2109      	movs	r1, #9
 800ef1c:	f7ff ff8e 	bl	800ee3c <std>
 800ef20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ef24:	2202      	movs	r2, #2
 800ef26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef2a:	2112      	movs	r1, #18
 800ef2c:	f7ff bf86 	b.w	800ee3c <std>
 800ef30:	2000b9ec 	.word	0x2000b9ec
 800ef34:	2000b8b4 	.word	0x2000b8b4
 800ef38:	0800eea9 	.word	0x0800eea9

0800ef3c <__sfp_lock_acquire>:
 800ef3c:	4801      	ldr	r0, [pc, #4]	@ (800ef44 <__sfp_lock_acquire+0x8>)
 800ef3e:	f000 babc 	b.w	800f4ba <__retarget_lock_acquire_recursive>
 800ef42:	bf00      	nop
 800ef44:	2000b9f5 	.word	0x2000b9f5

0800ef48 <__sfp_lock_release>:
 800ef48:	4801      	ldr	r0, [pc, #4]	@ (800ef50 <__sfp_lock_release+0x8>)
 800ef4a:	f000 bab7 	b.w	800f4bc <__retarget_lock_release_recursive>
 800ef4e:	bf00      	nop
 800ef50:	2000b9f5 	.word	0x2000b9f5

0800ef54 <__sinit>:
 800ef54:	b510      	push	{r4, lr}
 800ef56:	4604      	mov	r4, r0
 800ef58:	f7ff fff0 	bl	800ef3c <__sfp_lock_acquire>
 800ef5c:	6a23      	ldr	r3, [r4, #32]
 800ef5e:	b11b      	cbz	r3, 800ef68 <__sinit+0x14>
 800ef60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef64:	f7ff bff0 	b.w	800ef48 <__sfp_lock_release>
 800ef68:	4b04      	ldr	r3, [pc, #16]	@ (800ef7c <__sinit+0x28>)
 800ef6a:	6223      	str	r3, [r4, #32]
 800ef6c:	4b04      	ldr	r3, [pc, #16]	@ (800ef80 <__sinit+0x2c>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d1f5      	bne.n	800ef60 <__sinit+0xc>
 800ef74:	f7ff ffc4 	bl	800ef00 <global_stdio_init.part.0>
 800ef78:	e7f2      	b.n	800ef60 <__sinit+0xc>
 800ef7a:	bf00      	nop
 800ef7c:	0800eec1 	.word	0x0800eec1
 800ef80:	2000b9ec 	.word	0x2000b9ec

0800ef84 <_fwalk_sglue>:
 800ef84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef88:	4607      	mov	r7, r0
 800ef8a:	4688      	mov	r8, r1
 800ef8c:	4614      	mov	r4, r2
 800ef8e:	2600      	movs	r6, #0
 800ef90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef94:	f1b9 0901 	subs.w	r9, r9, #1
 800ef98:	d505      	bpl.n	800efa6 <_fwalk_sglue+0x22>
 800ef9a:	6824      	ldr	r4, [r4, #0]
 800ef9c:	2c00      	cmp	r4, #0
 800ef9e:	d1f7      	bne.n	800ef90 <_fwalk_sglue+0xc>
 800efa0:	4630      	mov	r0, r6
 800efa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efa6:	89ab      	ldrh	r3, [r5, #12]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d907      	bls.n	800efbc <_fwalk_sglue+0x38>
 800efac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efb0:	3301      	adds	r3, #1
 800efb2:	d003      	beq.n	800efbc <_fwalk_sglue+0x38>
 800efb4:	4629      	mov	r1, r5
 800efb6:	4638      	mov	r0, r7
 800efb8:	47c0      	blx	r8
 800efba:	4306      	orrs	r6, r0
 800efbc:	3568      	adds	r5, #104	@ 0x68
 800efbe:	e7e9      	b.n	800ef94 <_fwalk_sglue+0x10>

0800efc0 <iprintf>:
 800efc0:	b40f      	push	{r0, r1, r2, r3}
 800efc2:	b507      	push	{r0, r1, r2, lr}
 800efc4:	4906      	ldr	r1, [pc, #24]	@ (800efe0 <iprintf+0x20>)
 800efc6:	ab04      	add	r3, sp, #16
 800efc8:	6808      	ldr	r0, [r1, #0]
 800efca:	f853 2b04 	ldr.w	r2, [r3], #4
 800efce:	6881      	ldr	r1, [r0, #8]
 800efd0:	9301      	str	r3, [sp, #4]
 800efd2:	f002 fd8d 	bl	8011af0 <_vfiprintf_r>
 800efd6:	b003      	add	sp, #12
 800efd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800efdc:	b004      	add	sp, #16
 800efde:	4770      	bx	lr
 800efe0:	20000038 	.word	0x20000038

0800efe4 <siprintf>:
 800efe4:	b40e      	push	{r1, r2, r3}
 800efe6:	b500      	push	{lr}
 800efe8:	b09c      	sub	sp, #112	@ 0x70
 800efea:	ab1d      	add	r3, sp, #116	@ 0x74
 800efec:	9002      	str	r0, [sp, #8]
 800efee:	9006      	str	r0, [sp, #24]
 800eff0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eff4:	4809      	ldr	r0, [pc, #36]	@ (800f01c <siprintf+0x38>)
 800eff6:	9107      	str	r1, [sp, #28]
 800eff8:	9104      	str	r1, [sp, #16]
 800effa:	4909      	ldr	r1, [pc, #36]	@ (800f020 <siprintf+0x3c>)
 800effc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f000:	9105      	str	r1, [sp, #20]
 800f002:	6800      	ldr	r0, [r0, #0]
 800f004:	9301      	str	r3, [sp, #4]
 800f006:	a902      	add	r1, sp, #8
 800f008:	f002 fc4c 	bl	80118a4 <_svfiprintf_r>
 800f00c:	9b02      	ldr	r3, [sp, #8]
 800f00e:	2200      	movs	r2, #0
 800f010:	701a      	strb	r2, [r3, #0]
 800f012:	b01c      	add	sp, #112	@ 0x70
 800f014:	f85d eb04 	ldr.w	lr, [sp], #4
 800f018:	b003      	add	sp, #12
 800f01a:	4770      	bx	lr
 800f01c:	20000038 	.word	0x20000038
 800f020:	ffff0208 	.word	0xffff0208

0800f024 <__sread>:
 800f024:	b510      	push	{r4, lr}
 800f026:	460c      	mov	r4, r1
 800f028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f02c:	f000 f9d2 	bl	800f3d4 <_read_r>
 800f030:	2800      	cmp	r0, #0
 800f032:	bfab      	itete	ge
 800f034:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f036:	89a3      	ldrhlt	r3, [r4, #12]
 800f038:	181b      	addge	r3, r3, r0
 800f03a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f03e:	bfac      	ite	ge
 800f040:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f042:	81a3      	strhlt	r3, [r4, #12]
 800f044:	bd10      	pop	{r4, pc}

0800f046 <__swrite>:
 800f046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f04a:	461f      	mov	r7, r3
 800f04c:	898b      	ldrh	r3, [r1, #12]
 800f04e:	05db      	lsls	r3, r3, #23
 800f050:	4605      	mov	r5, r0
 800f052:	460c      	mov	r4, r1
 800f054:	4616      	mov	r6, r2
 800f056:	d505      	bpl.n	800f064 <__swrite+0x1e>
 800f058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f05c:	2302      	movs	r3, #2
 800f05e:	2200      	movs	r2, #0
 800f060:	f000 f9a6 	bl	800f3b0 <_lseek_r>
 800f064:	89a3      	ldrh	r3, [r4, #12]
 800f066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f06a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f06e:	81a3      	strh	r3, [r4, #12]
 800f070:	4632      	mov	r2, r6
 800f072:	463b      	mov	r3, r7
 800f074:	4628      	mov	r0, r5
 800f076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f07a:	f000 b9e1 	b.w	800f440 <_write_r>

0800f07e <__sseek>:
 800f07e:	b510      	push	{r4, lr}
 800f080:	460c      	mov	r4, r1
 800f082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f086:	f000 f993 	bl	800f3b0 <_lseek_r>
 800f08a:	1c43      	adds	r3, r0, #1
 800f08c:	89a3      	ldrh	r3, [r4, #12]
 800f08e:	bf15      	itete	ne
 800f090:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f092:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f096:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f09a:	81a3      	strheq	r3, [r4, #12]
 800f09c:	bf18      	it	ne
 800f09e:	81a3      	strhne	r3, [r4, #12]
 800f0a0:	bd10      	pop	{r4, pc}

0800f0a2 <__sclose>:
 800f0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a6:	f000 b91d 	b.w	800f2e4 <_close_r>

0800f0aa <__swbuf_r>:
 800f0aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ac:	460e      	mov	r6, r1
 800f0ae:	4614      	mov	r4, r2
 800f0b0:	4605      	mov	r5, r0
 800f0b2:	b118      	cbz	r0, 800f0bc <__swbuf_r+0x12>
 800f0b4:	6a03      	ldr	r3, [r0, #32]
 800f0b6:	b90b      	cbnz	r3, 800f0bc <__swbuf_r+0x12>
 800f0b8:	f7ff ff4c 	bl	800ef54 <__sinit>
 800f0bc:	69a3      	ldr	r3, [r4, #24]
 800f0be:	60a3      	str	r3, [r4, #8]
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	071a      	lsls	r2, r3, #28
 800f0c4:	d501      	bpl.n	800f0ca <__swbuf_r+0x20>
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	b943      	cbnz	r3, 800f0dc <__swbuf_r+0x32>
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f000 f82b 	bl	800f128 <__swsetup_r>
 800f0d2:	b118      	cbz	r0, 800f0dc <__swbuf_r+0x32>
 800f0d4:	f04f 37ff 	mov.w	r7, #4294967295
 800f0d8:	4638      	mov	r0, r7
 800f0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0dc:	6823      	ldr	r3, [r4, #0]
 800f0de:	6922      	ldr	r2, [r4, #16]
 800f0e0:	1a98      	subs	r0, r3, r2
 800f0e2:	6963      	ldr	r3, [r4, #20]
 800f0e4:	b2f6      	uxtb	r6, r6
 800f0e6:	4283      	cmp	r3, r0
 800f0e8:	4637      	mov	r7, r6
 800f0ea:	dc05      	bgt.n	800f0f8 <__swbuf_r+0x4e>
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f7ff fe68 	bl	800edc4 <_fflush_r>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d1ed      	bne.n	800f0d4 <__swbuf_r+0x2a>
 800f0f8:	68a3      	ldr	r3, [r4, #8]
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	60a3      	str	r3, [r4, #8]
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	1c5a      	adds	r2, r3, #1
 800f102:	6022      	str	r2, [r4, #0]
 800f104:	701e      	strb	r6, [r3, #0]
 800f106:	6962      	ldr	r2, [r4, #20]
 800f108:	1c43      	adds	r3, r0, #1
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d004      	beq.n	800f118 <__swbuf_r+0x6e>
 800f10e:	89a3      	ldrh	r3, [r4, #12]
 800f110:	07db      	lsls	r3, r3, #31
 800f112:	d5e1      	bpl.n	800f0d8 <__swbuf_r+0x2e>
 800f114:	2e0a      	cmp	r6, #10
 800f116:	d1df      	bne.n	800f0d8 <__swbuf_r+0x2e>
 800f118:	4621      	mov	r1, r4
 800f11a:	4628      	mov	r0, r5
 800f11c:	f7ff fe52 	bl	800edc4 <_fflush_r>
 800f120:	2800      	cmp	r0, #0
 800f122:	d0d9      	beq.n	800f0d8 <__swbuf_r+0x2e>
 800f124:	e7d6      	b.n	800f0d4 <__swbuf_r+0x2a>
	...

0800f128 <__swsetup_r>:
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	4b29      	ldr	r3, [pc, #164]	@ (800f1d0 <__swsetup_r+0xa8>)
 800f12c:	4605      	mov	r5, r0
 800f12e:	6818      	ldr	r0, [r3, #0]
 800f130:	460c      	mov	r4, r1
 800f132:	b118      	cbz	r0, 800f13c <__swsetup_r+0x14>
 800f134:	6a03      	ldr	r3, [r0, #32]
 800f136:	b90b      	cbnz	r3, 800f13c <__swsetup_r+0x14>
 800f138:	f7ff ff0c 	bl	800ef54 <__sinit>
 800f13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f140:	0719      	lsls	r1, r3, #28
 800f142:	d422      	bmi.n	800f18a <__swsetup_r+0x62>
 800f144:	06da      	lsls	r2, r3, #27
 800f146:	d407      	bmi.n	800f158 <__swsetup_r+0x30>
 800f148:	2209      	movs	r2, #9
 800f14a:	602a      	str	r2, [r5, #0]
 800f14c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f150:	81a3      	strh	r3, [r4, #12]
 800f152:	f04f 30ff 	mov.w	r0, #4294967295
 800f156:	e033      	b.n	800f1c0 <__swsetup_r+0x98>
 800f158:	0758      	lsls	r0, r3, #29
 800f15a:	d512      	bpl.n	800f182 <__swsetup_r+0x5a>
 800f15c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f15e:	b141      	cbz	r1, 800f172 <__swsetup_r+0x4a>
 800f160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f164:	4299      	cmp	r1, r3
 800f166:	d002      	beq.n	800f16e <__swsetup_r+0x46>
 800f168:	4628      	mov	r0, r5
 800f16a:	f001 f831 	bl	80101d0 <_free_r>
 800f16e:	2300      	movs	r3, #0
 800f170:	6363      	str	r3, [r4, #52]	@ 0x34
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f178:	81a3      	strh	r3, [r4, #12]
 800f17a:	2300      	movs	r3, #0
 800f17c:	6063      	str	r3, [r4, #4]
 800f17e:	6923      	ldr	r3, [r4, #16]
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	89a3      	ldrh	r3, [r4, #12]
 800f184:	f043 0308 	orr.w	r3, r3, #8
 800f188:	81a3      	strh	r3, [r4, #12]
 800f18a:	6923      	ldr	r3, [r4, #16]
 800f18c:	b94b      	cbnz	r3, 800f1a2 <__swsetup_r+0x7a>
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f198:	d003      	beq.n	800f1a2 <__swsetup_r+0x7a>
 800f19a:	4621      	mov	r1, r4
 800f19c:	4628      	mov	r0, r5
 800f19e:	f002 fdf7 	bl	8011d90 <__smakebuf_r>
 800f1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a6:	f013 0201 	ands.w	r2, r3, #1
 800f1aa:	d00a      	beq.n	800f1c2 <__swsetup_r+0x9a>
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	60a2      	str	r2, [r4, #8]
 800f1b0:	6962      	ldr	r2, [r4, #20]
 800f1b2:	4252      	negs	r2, r2
 800f1b4:	61a2      	str	r2, [r4, #24]
 800f1b6:	6922      	ldr	r2, [r4, #16]
 800f1b8:	b942      	cbnz	r2, 800f1cc <__swsetup_r+0xa4>
 800f1ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1be:	d1c5      	bne.n	800f14c <__swsetup_r+0x24>
 800f1c0:	bd38      	pop	{r3, r4, r5, pc}
 800f1c2:	0799      	lsls	r1, r3, #30
 800f1c4:	bf58      	it	pl
 800f1c6:	6962      	ldrpl	r2, [r4, #20]
 800f1c8:	60a2      	str	r2, [r4, #8]
 800f1ca:	e7f4      	b.n	800f1b6 <__swsetup_r+0x8e>
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	e7f7      	b.n	800f1c0 <__swsetup_r+0x98>
 800f1d0:	20000038 	.word	0x20000038

0800f1d4 <memmove>:
 800f1d4:	4288      	cmp	r0, r1
 800f1d6:	b510      	push	{r4, lr}
 800f1d8:	eb01 0402 	add.w	r4, r1, r2
 800f1dc:	d902      	bls.n	800f1e4 <memmove+0x10>
 800f1de:	4284      	cmp	r4, r0
 800f1e0:	4623      	mov	r3, r4
 800f1e2:	d807      	bhi.n	800f1f4 <memmove+0x20>
 800f1e4:	1e43      	subs	r3, r0, #1
 800f1e6:	42a1      	cmp	r1, r4
 800f1e8:	d008      	beq.n	800f1fc <memmove+0x28>
 800f1ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1f2:	e7f8      	b.n	800f1e6 <memmove+0x12>
 800f1f4:	4402      	add	r2, r0
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	428a      	cmp	r2, r1
 800f1fa:	d100      	bne.n	800f1fe <memmove+0x2a>
 800f1fc:	bd10      	pop	{r4, pc}
 800f1fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f206:	e7f7      	b.n	800f1f8 <memmove+0x24>

0800f208 <memset>:
 800f208:	4402      	add	r2, r0
 800f20a:	4603      	mov	r3, r0
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d100      	bne.n	800f212 <memset+0xa>
 800f210:	4770      	bx	lr
 800f212:	f803 1b01 	strb.w	r1, [r3], #1
 800f216:	e7f9      	b.n	800f20c <memset+0x4>

0800f218 <strchr>:
 800f218:	b2c9      	uxtb	r1, r1
 800f21a:	4603      	mov	r3, r0
 800f21c:	4618      	mov	r0, r3
 800f21e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f222:	b112      	cbz	r2, 800f22a <strchr+0x12>
 800f224:	428a      	cmp	r2, r1
 800f226:	d1f9      	bne.n	800f21c <strchr+0x4>
 800f228:	4770      	bx	lr
 800f22a:	2900      	cmp	r1, #0
 800f22c:	bf18      	it	ne
 800f22e:	2000      	movne	r0, #0
 800f230:	4770      	bx	lr

0800f232 <strncmp>:
 800f232:	b510      	push	{r4, lr}
 800f234:	b16a      	cbz	r2, 800f252 <strncmp+0x20>
 800f236:	3901      	subs	r1, #1
 800f238:	1884      	adds	r4, r0, r2
 800f23a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f23e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f242:	429a      	cmp	r2, r3
 800f244:	d103      	bne.n	800f24e <strncmp+0x1c>
 800f246:	42a0      	cmp	r0, r4
 800f248:	d001      	beq.n	800f24e <strncmp+0x1c>
 800f24a:	2a00      	cmp	r2, #0
 800f24c:	d1f5      	bne.n	800f23a <strncmp+0x8>
 800f24e:	1ad0      	subs	r0, r2, r3
 800f250:	bd10      	pop	{r4, pc}
 800f252:	4610      	mov	r0, r2
 800f254:	e7fc      	b.n	800f250 <strncmp+0x1e>

0800f256 <strncpy>:
 800f256:	b510      	push	{r4, lr}
 800f258:	3901      	subs	r1, #1
 800f25a:	4603      	mov	r3, r0
 800f25c:	b132      	cbz	r2, 800f26c <strncpy+0x16>
 800f25e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f262:	f803 4b01 	strb.w	r4, [r3], #1
 800f266:	3a01      	subs	r2, #1
 800f268:	2c00      	cmp	r4, #0
 800f26a:	d1f7      	bne.n	800f25c <strncpy+0x6>
 800f26c:	441a      	add	r2, r3
 800f26e:	2100      	movs	r1, #0
 800f270:	4293      	cmp	r3, r2
 800f272:	d100      	bne.n	800f276 <strncpy+0x20>
 800f274:	bd10      	pop	{r4, pc}
 800f276:	f803 1b01 	strb.w	r1, [r3], #1
 800f27a:	e7f9      	b.n	800f270 <strncpy+0x1a>

0800f27c <_raise_r>:
 800f27c:	291f      	cmp	r1, #31
 800f27e:	b538      	push	{r3, r4, r5, lr}
 800f280:	4605      	mov	r5, r0
 800f282:	460c      	mov	r4, r1
 800f284:	d904      	bls.n	800f290 <_raise_r+0x14>
 800f286:	2316      	movs	r3, #22
 800f288:	6003      	str	r3, [r0, #0]
 800f28a:	f04f 30ff 	mov.w	r0, #4294967295
 800f28e:	bd38      	pop	{r3, r4, r5, pc}
 800f290:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f292:	b112      	cbz	r2, 800f29a <_raise_r+0x1e>
 800f294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f298:	b94b      	cbnz	r3, 800f2ae <_raise_r+0x32>
 800f29a:	4628      	mov	r0, r5
 800f29c:	f000 f8be 	bl	800f41c <_getpid_r>
 800f2a0:	4622      	mov	r2, r4
 800f2a2:	4601      	mov	r1, r0
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2aa:	f000 b8a5 	b.w	800f3f8 <_kill_r>
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d00a      	beq.n	800f2c8 <_raise_r+0x4c>
 800f2b2:	1c59      	adds	r1, r3, #1
 800f2b4:	d103      	bne.n	800f2be <_raise_r+0x42>
 800f2b6:	2316      	movs	r3, #22
 800f2b8:	6003      	str	r3, [r0, #0]
 800f2ba:	2001      	movs	r0, #1
 800f2bc:	e7e7      	b.n	800f28e <_raise_r+0x12>
 800f2be:	2100      	movs	r1, #0
 800f2c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	4798      	blx	r3
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	e7e0      	b.n	800f28e <_raise_r+0x12>

0800f2cc <raise>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	@ (800f2d8 <raise+0xc>)
 800f2ce:	4601      	mov	r1, r0
 800f2d0:	6818      	ldr	r0, [r3, #0]
 800f2d2:	f7ff bfd3 	b.w	800f27c <_raise_r>
 800f2d6:	bf00      	nop
 800f2d8:	20000038 	.word	0x20000038

0800f2dc <_localeconv_r>:
 800f2dc:	4800      	ldr	r0, [pc, #0]	@ (800f2e0 <_localeconv_r+0x4>)
 800f2de:	4770      	bx	lr
 800f2e0:	20000178 	.word	0x20000178

0800f2e4 <_close_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d06      	ldr	r5, [pc, #24]	@ (800f300 <_close_r+0x1c>)
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	602b      	str	r3, [r5, #0]
 800f2f0:	f7f2 fe70 	bl	8001fd4 <_close>
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	d102      	bne.n	800f2fe <_close_r+0x1a>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	b103      	cbz	r3, 800f2fe <_close_r+0x1a>
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	bd38      	pop	{r3, r4, r5, pc}
 800f300:	2000b9f0 	.word	0x2000b9f0

0800f304 <_reclaim_reent>:
 800f304:	4b29      	ldr	r3, [pc, #164]	@ (800f3ac <_reclaim_reent+0xa8>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4283      	cmp	r3, r0
 800f30a:	b570      	push	{r4, r5, r6, lr}
 800f30c:	4604      	mov	r4, r0
 800f30e:	d04b      	beq.n	800f3a8 <_reclaim_reent+0xa4>
 800f310:	69c3      	ldr	r3, [r0, #28]
 800f312:	b1ab      	cbz	r3, 800f340 <_reclaim_reent+0x3c>
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	b16b      	cbz	r3, 800f334 <_reclaim_reent+0x30>
 800f318:	2500      	movs	r5, #0
 800f31a:	69e3      	ldr	r3, [r4, #28]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	5959      	ldr	r1, [r3, r5]
 800f320:	2900      	cmp	r1, #0
 800f322:	d13b      	bne.n	800f39c <_reclaim_reent+0x98>
 800f324:	3504      	adds	r5, #4
 800f326:	2d80      	cmp	r5, #128	@ 0x80
 800f328:	d1f7      	bne.n	800f31a <_reclaim_reent+0x16>
 800f32a:	69e3      	ldr	r3, [r4, #28]
 800f32c:	4620      	mov	r0, r4
 800f32e:	68d9      	ldr	r1, [r3, #12]
 800f330:	f000 ff4e 	bl	80101d0 <_free_r>
 800f334:	69e3      	ldr	r3, [r4, #28]
 800f336:	6819      	ldr	r1, [r3, #0]
 800f338:	b111      	cbz	r1, 800f340 <_reclaim_reent+0x3c>
 800f33a:	4620      	mov	r0, r4
 800f33c:	f000 ff48 	bl	80101d0 <_free_r>
 800f340:	6961      	ldr	r1, [r4, #20]
 800f342:	b111      	cbz	r1, 800f34a <_reclaim_reent+0x46>
 800f344:	4620      	mov	r0, r4
 800f346:	f000 ff43 	bl	80101d0 <_free_r>
 800f34a:	69e1      	ldr	r1, [r4, #28]
 800f34c:	b111      	cbz	r1, 800f354 <_reclaim_reent+0x50>
 800f34e:	4620      	mov	r0, r4
 800f350:	f000 ff3e 	bl	80101d0 <_free_r>
 800f354:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f356:	b111      	cbz	r1, 800f35e <_reclaim_reent+0x5a>
 800f358:	4620      	mov	r0, r4
 800f35a:	f000 ff39 	bl	80101d0 <_free_r>
 800f35e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f360:	b111      	cbz	r1, 800f368 <_reclaim_reent+0x64>
 800f362:	4620      	mov	r0, r4
 800f364:	f000 ff34 	bl	80101d0 <_free_r>
 800f368:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f36a:	b111      	cbz	r1, 800f372 <_reclaim_reent+0x6e>
 800f36c:	4620      	mov	r0, r4
 800f36e:	f000 ff2f 	bl	80101d0 <_free_r>
 800f372:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f374:	b111      	cbz	r1, 800f37c <_reclaim_reent+0x78>
 800f376:	4620      	mov	r0, r4
 800f378:	f000 ff2a 	bl	80101d0 <_free_r>
 800f37c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f37e:	b111      	cbz	r1, 800f386 <_reclaim_reent+0x82>
 800f380:	4620      	mov	r0, r4
 800f382:	f000 ff25 	bl	80101d0 <_free_r>
 800f386:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f388:	b111      	cbz	r1, 800f390 <_reclaim_reent+0x8c>
 800f38a:	4620      	mov	r0, r4
 800f38c:	f000 ff20 	bl	80101d0 <_free_r>
 800f390:	6a23      	ldr	r3, [r4, #32]
 800f392:	b14b      	cbz	r3, 800f3a8 <_reclaim_reent+0xa4>
 800f394:	4620      	mov	r0, r4
 800f396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f39a:	4718      	bx	r3
 800f39c:	680e      	ldr	r6, [r1, #0]
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f000 ff16 	bl	80101d0 <_free_r>
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	e7bb      	b.n	800f320 <_reclaim_reent+0x1c>
 800f3a8:	bd70      	pop	{r4, r5, r6, pc}
 800f3aa:	bf00      	nop
 800f3ac:	20000038 	.word	0x20000038

0800f3b0 <_lseek_r>:
 800f3b0:	b538      	push	{r3, r4, r5, lr}
 800f3b2:	4d07      	ldr	r5, [pc, #28]	@ (800f3d0 <_lseek_r+0x20>)
 800f3b4:	4604      	mov	r4, r0
 800f3b6:	4608      	mov	r0, r1
 800f3b8:	4611      	mov	r1, r2
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	602a      	str	r2, [r5, #0]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	f7f2 fe2f 	bl	8002022 <_lseek>
 800f3c4:	1c43      	adds	r3, r0, #1
 800f3c6:	d102      	bne.n	800f3ce <_lseek_r+0x1e>
 800f3c8:	682b      	ldr	r3, [r5, #0]
 800f3ca:	b103      	cbz	r3, 800f3ce <_lseek_r+0x1e>
 800f3cc:	6023      	str	r3, [r4, #0]
 800f3ce:	bd38      	pop	{r3, r4, r5, pc}
 800f3d0:	2000b9f0 	.word	0x2000b9f0

0800f3d4 <_read_r>:
 800f3d4:	b538      	push	{r3, r4, r5, lr}
 800f3d6:	4d07      	ldr	r5, [pc, #28]	@ (800f3f4 <_read_r+0x20>)
 800f3d8:	4604      	mov	r4, r0
 800f3da:	4608      	mov	r0, r1
 800f3dc:	4611      	mov	r1, r2
 800f3de:	2200      	movs	r2, #0
 800f3e0:	602a      	str	r2, [r5, #0]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	f7f2 fdd9 	bl	8001f9a <_read>
 800f3e8:	1c43      	adds	r3, r0, #1
 800f3ea:	d102      	bne.n	800f3f2 <_read_r+0x1e>
 800f3ec:	682b      	ldr	r3, [r5, #0]
 800f3ee:	b103      	cbz	r3, 800f3f2 <_read_r+0x1e>
 800f3f0:	6023      	str	r3, [r4, #0]
 800f3f2:	bd38      	pop	{r3, r4, r5, pc}
 800f3f4:	2000b9f0 	.word	0x2000b9f0

0800f3f8 <_kill_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	4d07      	ldr	r5, [pc, #28]	@ (800f418 <_kill_r+0x20>)
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	4604      	mov	r4, r0
 800f400:	4608      	mov	r0, r1
 800f402:	4611      	mov	r1, r2
 800f404:	602b      	str	r3, [r5, #0]
 800f406:	f7f2 fdab 	bl	8001f60 <_kill>
 800f40a:	1c43      	adds	r3, r0, #1
 800f40c:	d102      	bne.n	800f414 <_kill_r+0x1c>
 800f40e:	682b      	ldr	r3, [r5, #0]
 800f410:	b103      	cbz	r3, 800f414 <_kill_r+0x1c>
 800f412:	6023      	str	r3, [r4, #0]
 800f414:	bd38      	pop	{r3, r4, r5, pc}
 800f416:	bf00      	nop
 800f418:	2000b9f0 	.word	0x2000b9f0

0800f41c <_getpid_r>:
 800f41c:	f7f2 bd98 	b.w	8001f50 <_getpid>

0800f420 <_sbrk_r>:
 800f420:	b538      	push	{r3, r4, r5, lr}
 800f422:	4d06      	ldr	r5, [pc, #24]	@ (800f43c <_sbrk_r+0x1c>)
 800f424:	2300      	movs	r3, #0
 800f426:	4604      	mov	r4, r0
 800f428:	4608      	mov	r0, r1
 800f42a:	602b      	str	r3, [r5, #0]
 800f42c:	f7f2 fe06 	bl	800203c <_sbrk>
 800f430:	1c43      	adds	r3, r0, #1
 800f432:	d102      	bne.n	800f43a <_sbrk_r+0x1a>
 800f434:	682b      	ldr	r3, [r5, #0]
 800f436:	b103      	cbz	r3, 800f43a <_sbrk_r+0x1a>
 800f438:	6023      	str	r3, [r4, #0]
 800f43a:	bd38      	pop	{r3, r4, r5, pc}
 800f43c:	2000b9f0 	.word	0x2000b9f0

0800f440 <_write_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	4d07      	ldr	r5, [pc, #28]	@ (800f460 <_write_r+0x20>)
 800f444:	4604      	mov	r4, r0
 800f446:	4608      	mov	r0, r1
 800f448:	4611      	mov	r1, r2
 800f44a:	2200      	movs	r2, #0
 800f44c:	602a      	str	r2, [r5, #0]
 800f44e:	461a      	mov	r2, r3
 800f450:	f7f1 ff7a 	bl	8001348 <_write>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d102      	bne.n	800f45e <_write_r+0x1e>
 800f458:	682b      	ldr	r3, [r5, #0]
 800f45a:	b103      	cbz	r3, 800f45e <_write_r+0x1e>
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	bd38      	pop	{r3, r4, r5, pc}
 800f460:	2000b9f0 	.word	0x2000b9f0

0800f464 <__errno>:
 800f464:	4b01      	ldr	r3, [pc, #4]	@ (800f46c <__errno+0x8>)
 800f466:	6818      	ldr	r0, [r3, #0]
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	20000038 	.word	0x20000038

0800f470 <__libc_init_array>:
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	4d0d      	ldr	r5, [pc, #52]	@ (800f4a8 <__libc_init_array+0x38>)
 800f474:	4c0d      	ldr	r4, [pc, #52]	@ (800f4ac <__libc_init_array+0x3c>)
 800f476:	1b64      	subs	r4, r4, r5
 800f478:	10a4      	asrs	r4, r4, #2
 800f47a:	2600      	movs	r6, #0
 800f47c:	42a6      	cmp	r6, r4
 800f47e:	d109      	bne.n	800f494 <__libc_init_array+0x24>
 800f480:	4d0b      	ldr	r5, [pc, #44]	@ (800f4b0 <__libc_init_array+0x40>)
 800f482:	4c0c      	ldr	r4, [pc, #48]	@ (800f4b4 <__libc_init_array+0x44>)
 800f484:	f003 f858 	bl	8012538 <_init>
 800f488:	1b64      	subs	r4, r4, r5
 800f48a:	10a4      	asrs	r4, r4, #2
 800f48c:	2600      	movs	r6, #0
 800f48e:	42a6      	cmp	r6, r4
 800f490:	d105      	bne.n	800f49e <__libc_init_array+0x2e>
 800f492:	bd70      	pop	{r4, r5, r6, pc}
 800f494:	f855 3b04 	ldr.w	r3, [r5], #4
 800f498:	4798      	blx	r3
 800f49a:	3601      	adds	r6, #1
 800f49c:	e7ee      	b.n	800f47c <__libc_init_array+0xc>
 800f49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4a2:	4798      	blx	r3
 800f4a4:	3601      	adds	r6, #1
 800f4a6:	e7f2      	b.n	800f48e <__libc_init_array+0x1e>
 800f4a8:	08012fcc 	.word	0x08012fcc
 800f4ac:	08012fcc 	.word	0x08012fcc
 800f4b0:	08012fcc 	.word	0x08012fcc
 800f4b4:	08012fd0 	.word	0x08012fd0

0800f4b8 <__retarget_lock_init_recursive>:
 800f4b8:	4770      	bx	lr

0800f4ba <__retarget_lock_acquire_recursive>:
 800f4ba:	4770      	bx	lr

0800f4bc <__retarget_lock_release_recursive>:
 800f4bc:	4770      	bx	lr

0800f4be <strcpy>:
 800f4be:	4603      	mov	r3, r0
 800f4c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4c4:	f803 2b01 	strb.w	r2, [r3], #1
 800f4c8:	2a00      	cmp	r2, #0
 800f4ca:	d1f9      	bne.n	800f4c0 <strcpy+0x2>
 800f4cc:	4770      	bx	lr

0800f4ce <memcpy>:
 800f4ce:	440a      	add	r2, r1
 800f4d0:	4291      	cmp	r1, r2
 800f4d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4d6:	d100      	bne.n	800f4da <memcpy+0xc>
 800f4d8:	4770      	bx	lr
 800f4da:	b510      	push	{r4, lr}
 800f4dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4e4:	4291      	cmp	r1, r2
 800f4e6:	d1f9      	bne.n	800f4dc <memcpy+0xe>
 800f4e8:	bd10      	pop	{r4, pc}
	...

0800f4ec <nanf>:
 800f4ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f4f4 <nanf+0x8>
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	7fc00000 	.word	0x7fc00000

0800f4f8 <__assert_func>:
 800f4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4fa:	4614      	mov	r4, r2
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	4b09      	ldr	r3, [pc, #36]	@ (800f524 <__assert_func+0x2c>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4605      	mov	r5, r0
 800f504:	68d8      	ldr	r0, [r3, #12]
 800f506:	b954      	cbnz	r4, 800f51e <__assert_func+0x26>
 800f508:	4b07      	ldr	r3, [pc, #28]	@ (800f528 <__assert_func+0x30>)
 800f50a:	461c      	mov	r4, r3
 800f50c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f510:	9100      	str	r1, [sp, #0]
 800f512:	462b      	mov	r3, r5
 800f514:	4905      	ldr	r1, [pc, #20]	@ (800f52c <__assert_func+0x34>)
 800f516:	f002 fc03 	bl	8011d20 <fiprintf>
 800f51a:	f7fe fbed 	bl	800dcf8 <abort>
 800f51e:	4b04      	ldr	r3, [pc, #16]	@ (800f530 <__assert_func+0x38>)
 800f520:	e7f4      	b.n	800f50c <__assert_func+0x14>
 800f522:	bf00      	nop
 800f524:	20000038 	.word	0x20000038
 800f528:	08012d0d 	.word	0x08012d0d
 800f52c:	08012cdf 	.word	0x08012cdf
 800f530:	08012cd2 	.word	0x08012cd2

0800f534 <quorem>:
 800f534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f538:	6903      	ldr	r3, [r0, #16]
 800f53a:	690c      	ldr	r4, [r1, #16]
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	4607      	mov	r7, r0
 800f540:	db7e      	blt.n	800f640 <quorem+0x10c>
 800f542:	3c01      	subs	r4, #1
 800f544:	f101 0814 	add.w	r8, r1, #20
 800f548:	00a3      	lsls	r3, r4, #2
 800f54a:	f100 0514 	add.w	r5, r0, #20
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f554:	9301      	str	r3, [sp, #4]
 800f556:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f55a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f55e:	3301      	adds	r3, #1
 800f560:	429a      	cmp	r2, r3
 800f562:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f566:	fbb2 f6f3 	udiv	r6, r2, r3
 800f56a:	d32e      	bcc.n	800f5ca <quorem+0x96>
 800f56c:	f04f 0a00 	mov.w	sl, #0
 800f570:	46c4      	mov	ip, r8
 800f572:	46ae      	mov	lr, r5
 800f574:	46d3      	mov	fp, sl
 800f576:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f57a:	b298      	uxth	r0, r3
 800f57c:	fb06 a000 	mla	r0, r6, r0, sl
 800f580:	0c02      	lsrs	r2, r0, #16
 800f582:	0c1b      	lsrs	r3, r3, #16
 800f584:	fb06 2303 	mla	r3, r6, r3, r2
 800f588:	f8de 2000 	ldr.w	r2, [lr]
 800f58c:	b280      	uxth	r0, r0
 800f58e:	b292      	uxth	r2, r2
 800f590:	1a12      	subs	r2, r2, r0
 800f592:	445a      	add	r2, fp
 800f594:	f8de 0000 	ldr.w	r0, [lr]
 800f598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f5a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f5a6:	b292      	uxth	r2, r2
 800f5a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f5ac:	45e1      	cmp	r9, ip
 800f5ae:	f84e 2b04 	str.w	r2, [lr], #4
 800f5b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f5b6:	d2de      	bcs.n	800f576 <quorem+0x42>
 800f5b8:	9b00      	ldr	r3, [sp, #0]
 800f5ba:	58eb      	ldr	r3, [r5, r3]
 800f5bc:	b92b      	cbnz	r3, 800f5ca <quorem+0x96>
 800f5be:	9b01      	ldr	r3, [sp, #4]
 800f5c0:	3b04      	subs	r3, #4
 800f5c2:	429d      	cmp	r5, r3
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	d32f      	bcc.n	800f628 <quorem+0xf4>
 800f5c8:	613c      	str	r4, [r7, #16]
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	f001 f90e 	bl	80107ec <__mcmp>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	db25      	blt.n	800f620 <quorem+0xec>
 800f5d4:	4629      	mov	r1, r5
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f5dc:	f8d1 c000 	ldr.w	ip, [r1]
 800f5e0:	fa1f fe82 	uxth.w	lr, r2
 800f5e4:	fa1f f38c 	uxth.w	r3, ip
 800f5e8:	eba3 030e 	sub.w	r3, r3, lr
 800f5ec:	4403      	add	r3, r0
 800f5ee:	0c12      	lsrs	r2, r2, #16
 800f5f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f5f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5fe:	45c1      	cmp	r9, r8
 800f600:	f841 3b04 	str.w	r3, [r1], #4
 800f604:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f608:	d2e6      	bcs.n	800f5d8 <quorem+0xa4>
 800f60a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f60e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f612:	b922      	cbnz	r2, 800f61e <quorem+0xea>
 800f614:	3b04      	subs	r3, #4
 800f616:	429d      	cmp	r5, r3
 800f618:	461a      	mov	r2, r3
 800f61a:	d30b      	bcc.n	800f634 <quorem+0x100>
 800f61c:	613c      	str	r4, [r7, #16]
 800f61e:	3601      	adds	r6, #1
 800f620:	4630      	mov	r0, r6
 800f622:	b003      	add	sp, #12
 800f624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f628:	6812      	ldr	r2, [r2, #0]
 800f62a:	3b04      	subs	r3, #4
 800f62c:	2a00      	cmp	r2, #0
 800f62e:	d1cb      	bne.n	800f5c8 <quorem+0x94>
 800f630:	3c01      	subs	r4, #1
 800f632:	e7c6      	b.n	800f5c2 <quorem+0x8e>
 800f634:	6812      	ldr	r2, [r2, #0]
 800f636:	3b04      	subs	r3, #4
 800f638:	2a00      	cmp	r2, #0
 800f63a:	d1ef      	bne.n	800f61c <quorem+0xe8>
 800f63c:	3c01      	subs	r4, #1
 800f63e:	e7ea      	b.n	800f616 <quorem+0xe2>
 800f640:	2000      	movs	r0, #0
 800f642:	e7ee      	b.n	800f622 <quorem+0xee>
 800f644:	0000      	movs	r0, r0
	...

0800f648 <_dtoa_r>:
 800f648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f64c:	69c7      	ldr	r7, [r0, #28]
 800f64e:	b099      	sub	sp, #100	@ 0x64
 800f650:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f654:	ec55 4b10 	vmov	r4, r5, d0
 800f658:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f65a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f65c:	4683      	mov	fp, r0
 800f65e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f660:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f662:	b97f      	cbnz	r7, 800f684 <_dtoa_r+0x3c>
 800f664:	2010      	movs	r0, #16
 800f666:	f7fe fb53 	bl	800dd10 <malloc>
 800f66a:	4602      	mov	r2, r0
 800f66c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f670:	b920      	cbnz	r0, 800f67c <_dtoa_r+0x34>
 800f672:	4ba7      	ldr	r3, [pc, #668]	@ (800f910 <_dtoa_r+0x2c8>)
 800f674:	21ef      	movs	r1, #239	@ 0xef
 800f676:	48a7      	ldr	r0, [pc, #668]	@ (800f914 <_dtoa_r+0x2cc>)
 800f678:	f7ff ff3e 	bl	800f4f8 <__assert_func>
 800f67c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f680:	6007      	str	r7, [r0, #0]
 800f682:	60c7      	str	r7, [r0, #12]
 800f684:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f688:	6819      	ldr	r1, [r3, #0]
 800f68a:	b159      	cbz	r1, 800f6a4 <_dtoa_r+0x5c>
 800f68c:	685a      	ldr	r2, [r3, #4]
 800f68e:	604a      	str	r2, [r1, #4]
 800f690:	2301      	movs	r3, #1
 800f692:	4093      	lsls	r3, r2
 800f694:	608b      	str	r3, [r1, #8]
 800f696:	4658      	mov	r0, fp
 800f698:	f000 fe24 	bl	80102e4 <_Bfree>
 800f69c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	601a      	str	r2, [r3, #0]
 800f6a4:	1e2b      	subs	r3, r5, #0
 800f6a6:	bfb9      	ittee	lt
 800f6a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f6ac:	9303      	strlt	r3, [sp, #12]
 800f6ae:	2300      	movge	r3, #0
 800f6b0:	6033      	strge	r3, [r6, #0]
 800f6b2:	9f03      	ldr	r7, [sp, #12]
 800f6b4:	4b98      	ldr	r3, [pc, #608]	@ (800f918 <_dtoa_r+0x2d0>)
 800f6b6:	bfbc      	itt	lt
 800f6b8:	2201      	movlt	r2, #1
 800f6ba:	6032      	strlt	r2, [r6, #0]
 800f6bc:	43bb      	bics	r3, r7
 800f6be:	d112      	bne.n	800f6e6 <_dtoa_r+0x9e>
 800f6c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f6c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f6c6:	6013      	str	r3, [r2, #0]
 800f6c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f6cc:	4323      	orrs	r3, r4
 800f6ce:	f000 854d 	beq.w	801016c <_dtoa_r+0xb24>
 800f6d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f6d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f92c <_dtoa_r+0x2e4>
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f000 854f 	beq.w	801017c <_dtoa_r+0xb34>
 800f6de:	f10a 0303 	add.w	r3, sl, #3
 800f6e2:	f000 bd49 	b.w	8010178 <_dtoa_r+0xb30>
 800f6e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	ec51 0b17 	vmov	r0, r1, d7
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f6f6:	f7f1 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6fa:	4680      	mov	r8, r0
 800f6fc:	b158      	cbz	r0, 800f716 <_dtoa_r+0xce>
 800f6fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f700:	2301      	movs	r3, #1
 800f702:	6013      	str	r3, [r2, #0]
 800f704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f706:	b113      	cbz	r3, 800f70e <_dtoa_r+0xc6>
 800f708:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f70a:	4b84      	ldr	r3, [pc, #528]	@ (800f91c <_dtoa_r+0x2d4>)
 800f70c:	6013      	str	r3, [r2, #0]
 800f70e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f930 <_dtoa_r+0x2e8>
 800f712:	f000 bd33 	b.w	801017c <_dtoa_r+0xb34>
 800f716:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f71a:	aa16      	add	r2, sp, #88	@ 0x58
 800f71c:	a917      	add	r1, sp, #92	@ 0x5c
 800f71e:	4658      	mov	r0, fp
 800f720:	f001 f984 	bl	8010a2c <__d2b>
 800f724:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f728:	4681      	mov	r9, r0
 800f72a:	2e00      	cmp	r6, #0
 800f72c:	d077      	beq.n	800f81e <_dtoa_r+0x1d6>
 800f72e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f730:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f73c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f740:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f744:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f748:	4619      	mov	r1, r3
 800f74a:	2200      	movs	r2, #0
 800f74c:	4b74      	ldr	r3, [pc, #464]	@ (800f920 <_dtoa_r+0x2d8>)
 800f74e:	f7f0 fd9b 	bl	8000288 <__aeabi_dsub>
 800f752:	a369      	add	r3, pc, #420	@ (adr r3, 800f8f8 <_dtoa_r+0x2b0>)
 800f754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f758:	f7f0 ff4e 	bl	80005f8 <__aeabi_dmul>
 800f75c:	a368      	add	r3, pc, #416	@ (adr r3, 800f900 <_dtoa_r+0x2b8>)
 800f75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f762:	f7f0 fd93 	bl	800028c <__adddf3>
 800f766:	4604      	mov	r4, r0
 800f768:	4630      	mov	r0, r6
 800f76a:	460d      	mov	r5, r1
 800f76c:	f7f0 feda 	bl	8000524 <__aeabi_i2d>
 800f770:	a365      	add	r3, pc, #404	@ (adr r3, 800f908 <_dtoa_r+0x2c0>)
 800f772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f776:	f7f0 ff3f 	bl	80005f8 <__aeabi_dmul>
 800f77a:	4602      	mov	r2, r0
 800f77c:	460b      	mov	r3, r1
 800f77e:	4620      	mov	r0, r4
 800f780:	4629      	mov	r1, r5
 800f782:	f7f0 fd83 	bl	800028c <__adddf3>
 800f786:	4604      	mov	r4, r0
 800f788:	460d      	mov	r5, r1
 800f78a:	f7f1 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800f78e:	2200      	movs	r2, #0
 800f790:	4607      	mov	r7, r0
 800f792:	2300      	movs	r3, #0
 800f794:	4620      	mov	r0, r4
 800f796:	4629      	mov	r1, r5
 800f798:	f7f1 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800f79c:	b140      	cbz	r0, 800f7b0 <_dtoa_r+0x168>
 800f79e:	4638      	mov	r0, r7
 800f7a0:	f7f0 fec0 	bl	8000524 <__aeabi_i2d>
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	462b      	mov	r3, r5
 800f7a8:	f7f1 f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7ac:	b900      	cbnz	r0, 800f7b0 <_dtoa_r+0x168>
 800f7ae:	3f01      	subs	r7, #1
 800f7b0:	2f16      	cmp	r7, #22
 800f7b2:	d851      	bhi.n	800f858 <_dtoa_r+0x210>
 800f7b4:	4b5b      	ldr	r3, [pc, #364]	@ (800f924 <_dtoa_r+0x2dc>)
 800f7b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7c2:	f7f1 f98b 	bl	8000adc <__aeabi_dcmplt>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d048      	beq.n	800f85c <_dtoa_r+0x214>
 800f7ca:	3f01      	subs	r7, #1
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800f7d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f7d2:	1b9b      	subs	r3, r3, r6
 800f7d4:	1e5a      	subs	r2, r3, #1
 800f7d6:	bf44      	itt	mi
 800f7d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f7dc:	2300      	movmi	r3, #0
 800f7de:	9208      	str	r2, [sp, #32]
 800f7e0:	bf54      	ite	pl
 800f7e2:	f04f 0800 	movpl.w	r8, #0
 800f7e6:	9308      	strmi	r3, [sp, #32]
 800f7e8:	2f00      	cmp	r7, #0
 800f7ea:	db39      	blt.n	800f860 <_dtoa_r+0x218>
 800f7ec:	9b08      	ldr	r3, [sp, #32]
 800f7ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f7f0:	443b      	add	r3, r7
 800f7f2:	9308      	str	r3, [sp, #32]
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7fa:	2b09      	cmp	r3, #9
 800f7fc:	d864      	bhi.n	800f8c8 <_dtoa_r+0x280>
 800f7fe:	2b05      	cmp	r3, #5
 800f800:	bfc4      	itt	gt
 800f802:	3b04      	subgt	r3, #4
 800f804:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f808:	f1a3 0302 	sub.w	r3, r3, #2
 800f80c:	bfcc      	ite	gt
 800f80e:	2400      	movgt	r4, #0
 800f810:	2401      	movle	r4, #1
 800f812:	2b03      	cmp	r3, #3
 800f814:	d863      	bhi.n	800f8de <_dtoa_r+0x296>
 800f816:	e8df f003 	tbb	[pc, r3]
 800f81a:	372a      	.short	0x372a
 800f81c:	5535      	.short	0x5535
 800f81e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f822:	441e      	add	r6, r3
 800f824:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f828:	2b20      	cmp	r3, #32
 800f82a:	bfc1      	itttt	gt
 800f82c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f830:	409f      	lslgt	r7, r3
 800f832:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f836:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f83a:	bfd6      	itet	le
 800f83c:	f1c3 0320 	rsble	r3, r3, #32
 800f840:	ea47 0003 	orrgt.w	r0, r7, r3
 800f844:	fa04 f003 	lslle.w	r0, r4, r3
 800f848:	f7f0 fe5c 	bl	8000504 <__aeabi_ui2d>
 800f84c:	2201      	movs	r2, #1
 800f84e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f852:	3e01      	subs	r6, #1
 800f854:	9214      	str	r2, [sp, #80]	@ 0x50
 800f856:	e777      	b.n	800f748 <_dtoa_r+0x100>
 800f858:	2301      	movs	r3, #1
 800f85a:	e7b8      	b.n	800f7ce <_dtoa_r+0x186>
 800f85c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f85e:	e7b7      	b.n	800f7d0 <_dtoa_r+0x188>
 800f860:	427b      	negs	r3, r7
 800f862:	930a      	str	r3, [sp, #40]	@ 0x28
 800f864:	2300      	movs	r3, #0
 800f866:	eba8 0807 	sub.w	r8, r8, r7
 800f86a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f86c:	e7c4      	b.n	800f7f8 <_dtoa_r+0x1b0>
 800f86e:	2300      	movs	r3, #0
 800f870:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f874:	2b00      	cmp	r3, #0
 800f876:	dc35      	bgt.n	800f8e4 <_dtoa_r+0x29c>
 800f878:	2301      	movs	r3, #1
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	9307      	str	r3, [sp, #28]
 800f87e:	461a      	mov	r2, r3
 800f880:	920e      	str	r2, [sp, #56]	@ 0x38
 800f882:	e00b      	b.n	800f89c <_dtoa_r+0x254>
 800f884:	2301      	movs	r3, #1
 800f886:	e7f3      	b.n	800f870 <_dtoa_r+0x228>
 800f888:	2300      	movs	r3, #0
 800f88a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f88e:	18fb      	adds	r3, r7, r3
 800f890:	9300      	str	r3, [sp, #0]
 800f892:	3301      	adds	r3, #1
 800f894:	2b01      	cmp	r3, #1
 800f896:	9307      	str	r3, [sp, #28]
 800f898:	bfb8      	it	lt
 800f89a:	2301      	movlt	r3, #1
 800f89c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	2204      	movs	r2, #4
 800f8a4:	f102 0514 	add.w	r5, r2, #20
 800f8a8:	429d      	cmp	r5, r3
 800f8aa:	d91f      	bls.n	800f8ec <_dtoa_r+0x2a4>
 800f8ac:	6041      	str	r1, [r0, #4]
 800f8ae:	4658      	mov	r0, fp
 800f8b0:	f000 fcd8 	bl	8010264 <_Balloc>
 800f8b4:	4682      	mov	sl, r0
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d13c      	bne.n	800f934 <_dtoa_r+0x2ec>
 800f8ba:	4b1b      	ldr	r3, [pc, #108]	@ (800f928 <_dtoa_r+0x2e0>)
 800f8bc:	4602      	mov	r2, r0
 800f8be:	f240 11af 	movw	r1, #431	@ 0x1af
 800f8c2:	e6d8      	b.n	800f676 <_dtoa_r+0x2e>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e7e0      	b.n	800f88a <_dtoa_r+0x242>
 800f8c8:	2401      	movs	r4, #1
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	9307      	str	r3, [sp, #28]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	2312      	movs	r3, #18
 800f8dc:	e7d0      	b.n	800f880 <_dtoa_r+0x238>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8e2:	e7f5      	b.n	800f8d0 <_dtoa_r+0x288>
 800f8e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	9307      	str	r3, [sp, #28]
 800f8ea:	e7d7      	b.n	800f89c <_dtoa_r+0x254>
 800f8ec:	3101      	adds	r1, #1
 800f8ee:	0052      	lsls	r2, r2, #1
 800f8f0:	e7d8      	b.n	800f8a4 <_dtoa_r+0x25c>
 800f8f2:	bf00      	nop
 800f8f4:	f3af 8000 	nop.w
 800f8f8:	636f4361 	.word	0x636f4361
 800f8fc:	3fd287a7 	.word	0x3fd287a7
 800f900:	8b60c8b3 	.word	0x8b60c8b3
 800f904:	3fc68a28 	.word	0x3fc68a28
 800f908:	509f79fb 	.word	0x509f79fb
 800f90c:	3fd34413 	.word	0x3fd34413
 800f910:	08012d1b 	.word	0x08012d1b
 800f914:	08012d32 	.word	0x08012d32
 800f918:	7ff00000 	.word	0x7ff00000
 800f91c:	08012caa 	.word	0x08012caa
 800f920:	3ff80000 	.word	0x3ff80000
 800f924:	08012e28 	.word	0x08012e28
 800f928:	08012d8a 	.word	0x08012d8a
 800f92c:	08012d17 	.word	0x08012d17
 800f930:	08012ca9 	.word	0x08012ca9
 800f934:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f938:	6018      	str	r0, [r3, #0]
 800f93a:	9b07      	ldr	r3, [sp, #28]
 800f93c:	2b0e      	cmp	r3, #14
 800f93e:	f200 80a4 	bhi.w	800fa8a <_dtoa_r+0x442>
 800f942:	2c00      	cmp	r4, #0
 800f944:	f000 80a1 	beq.w	800fa8a <_dtoa_r+0x442>
 800f948:	2f00      	cmp	r7, #0
 800f94a:	dd33      	ble.n	800f9b4 <_dtoa_r+0x36c>
 800f94c:	4bad      	ldr	r3, [pc, #692]	@ (800fc04 <_dtoa_r+0x5bc>)
 800f94e:	f007 020f 	and.w	r2, r7, #15
 800f952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f956:	ed93 7b00 	vldr	d7, [r3]
 800f95a:	05f8      	lsls	r0, r7, #23
 800f95c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f960:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f964:	d516      	bpl.n	800f994 <_dtoa_r+0x34c>
 800f966:	4ba8      	ldr	r3, [pc, #672]	@ (800fc08 <_dtoa_r+0x5c0>)
 800f968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f96c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f970:	f7f0 ff6c 	bl	800084c <__aeabi_ddiv>
 800f974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f978:	f004 040f 	and.w	r4, r4, #15
 800f97c:	2603      	movs	r6, #3
 800f97e:	4da2      	ldr	r5, [pc, #648]	@ (800fc08 <_dtoa_r+0x5c0>)
 800f980:	b954      	cbnz	r4, 800f998 <_dtoa_r+0x350>
 800f982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f98a:	f7f0 ff5f 	bl	800084c <__aeabi_ddiv>
 800f98e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f992:	e028      	b.n	800f9e6 <_dtoa_r+0x39e>
 800f994:	2602      	movs	r6, #2
 800f996:	e7f2      	b.n	800f97e <_dtoa_r+0x336>
 800f998:	07e1      	lsls	r1, r4, #31
 800f99a:	d508      	bpl.n	800f9ae <_dtoa_r+0x366>
 800f99c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f9a4:	f7f0 fe28 	bl	80005f8 <__aeabi_dmul>
 800f9a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9ac:	3601      	adds	r6, #1
 800f9ae:	1064      	asrs	r4, r4, #1
 800f9b0:	3508      	adds	r5, #8
 800f9b2:	e7e5      	b.n	800f980 <_dtoa_r+0x338>
 800f9b4:	f000 80d2 	beq.w	800fb5c <_dtoa_r+0x514>
 800f9b8:	427c      	negs	r4, r7
 800f9ba:	4b92      	ldr	r3, [pc, #584]	@ (800fc04 <_dtoa_r+0x5bc>)
 800f9bc:	4d92      	ldr	r5, [pc, #584]	@ (800fc08 <_dtoa_r+0x5c0>)
 800f9be:	f004 020f 	and.w	r2, r4, #15
 800f9c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f9ce:	f7f0 fe13 	bl	80005f8 <__aeabi_dmul>
 800f9d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9d6:	1124      	asrs	r4, r4, #4
 800f9d8:	2300      	movs	r3, #0
 800f9da:	2602      	movs	r6, #2
 800f9dc:	2c00      	cmp	r4, #0
 800f9de:	f040 80b2 	bne.w	800fb46 <_dtoa_r+0x4fe>
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d1d3      	bne.n	800f98e <_dtoa_r+0x346>
 800f9e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f9e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	f000 80b7 	beq.w	800fb60 <_dtoa_r+0x518>
 800f9f2:	4b86      	ldr	r3, [pc, #536]	@ (800fc0c <_dtoa_r+0x5c4>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	f7f1 f86f 	bl	8000adc <__aeabi_dcmplt>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f000 80ae 	beq.w	800fb60 <_dtoa_r+0x518>
 800fa04:	9b07      	ldr	r3, [sp, #28]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f000 80aa 	beq.w	800fb60 <_dtoa_r+0x518>
 800fa0c:	9b00      	ldr	r3, [sp, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	dd37      	ble.n	800fa82 <_dtoa_r+0x43a>
 800fa12:	1e7b      	subs	r3, r7, #1
 800fa14:	9304      	str	r3, [sp, #16]
 800fa16:	4620      	mov	r0, r4
 800fa18:	4b7d      	ldr	r3, [pc, #500]	@ (800fc10 <_dtoa_r+0x5c8>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	4629      	mov	r1, r5
 800fa1e:	f7f0 fdeb 	bl	80005f8 <__aeabi_dmul>
 800fa22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa26:	9c00      	ldr	r4, [sp, #0]
 800fa28:	3601      	adds	r6, #1
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f7f0 fd7a 	bl	8000524 <__aeabi_i2d>
 800fa30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa34:	f7f0 fde0 	bl	80005f8 <__aeabi_dmul>
 800fa38:	4b76      	ldr	r3, [pc, #472]	@ (800fc14 <_dtoa_r+0x5cc>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f7f0 fc26 	bl	800028c <__adddf3>
 800fa40:	4605      	mov	r5, r0
 800fa42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fa46:	2c00      	cmp	r4, #0
 800fa48:	f040 808d 	bne.w	800fb66 <_dtoa_r+0x51e>
 800fa4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa50:	4b71      	ldr	r3, [pc, #452]	@ (800fc18 <_dtoa_r+0x5d0>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	f7f0 fc18 	bl	8000288 <__aeabi_dsub>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa60:	462a      	mov	r2, r5
 800fa62:	4633      	mov	r3, r6
 800fa64:	f7f1 f858 	bl	8000b18 <__aeabi_dcmpgt>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	f040 828b 	bne.w	800ff84 <_dtoa_r+0x93c>
 800fa6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa72:	462a      	mov	r2, r5
 800fa74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fa78:	f7f1 f830 	bl	8000adc <__aeabi_dcmplt>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	f040 8128 	bne.w	800fcd2 <_dtoa_r+0x68a>
 800fa82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fa86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fa8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f2c0 815a 	blt.w	800fd46 <_dtoa_r+0x6fe>
 800fa92:	2f0e      	cmp	r7, #14
 800fa94:	f300 8157 	bgt.w	800fd46 <_dtoa_r+0x6fe>
 800fa98:	4b5a      	ldr	r3, [pc, #360]	@ (800fc04 <_dtoa_r+0x5bc>)
 800fa9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa9e:	ed93 7b00 	vldr	d7, [r3]
 800faa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	ed8d 7b00 	vstr	d7, [sp]
 800faaa:	da03      	bge.n	800fab4 <_dtoa_r+0x46c>
 800faac:	9b07      	ldr	r3, [sp, #28]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	f340 8101 	ble.w	800fcb6 <_dtoa_r+0x66e>
 800fab4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fab8:	4656      	mov	r6, sl
 800faba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fabe:	4620      	mov	r0, r4
 800fac0:	4629      	mov	r1, r5
 800fac2:	f7f0 fec3 	bl	800084c <__aeabi_ddiv>
 800fac6:	f7f1 f847 	bl	8000b58 <__aeabi_d2iz>
 800faca:	4680      	mov	r8, r0
 800facc:	f7f0 fd2a 	bl	8000524 <__aeabi_i2d>
 800fad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fad4:	f7f0 fd90 	bl	80005f8 <__aeabi_dmul>
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	4620      	mov	r0, r4
 800fade:	4629      	mov	r1, r5
 800fae0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fae4:	f7f0 fbd0 	bl	8000288 <__aeabi_dsub>
 800fae8:	f806 4b01 	strb.w	r4, [r6], #1
 800faec:	9d07      	ldr	r5, [sp, #28]
 800faee:	eba6 040a 	sub.w	r4, r6, sl
 800faf2:	42a5      	cmp	r5, r4
 800faf4:	4602      	mov	r2, r0
 800faf6:	460b      	mov	r3, r1
 800faf8:	f040 8117 	bne.w	800fd2a <_dtoa_r+0x6e2>
 800fafc:	f7f0 fbc6 	bl	800028c <__adddf3>
 800fb00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb04:	4604      	mov	r4, r0
 800fb06:	460d      	mov	r5, r1
 800fb08:	f7f1 f806 	bl	8000b18 <__aeabi_dcmpgt>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	f040 80f9 	bne.w	800fd04 <_dtoa_r+0x6bc>
 800fb12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb16:	4620      	mov	r0, r4
 800fb18:	4629      	mov	r1, r5
 800fb1a:	f7f0 ffd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb1e:	b118      	cbz	r0, 800fb28 <_dtoa_r+0x4e0>
 800fb20:	f018 0f01 	tst.w	r8, #1
 800fb24:	f040 80ee 	bne.w	800fd04 <_dtoa_r+0x6bc>
 800fb28:	4649      	mov	r1, r9
 800fb2a:	4658      	mov	r0, fp
 800fb2c:	f000 fbda 	bl	80102e4 <_Bfree>
 800fb30:	2300      	movs	r3, #0
 800fb32:	7033      	strb	r3, [r6, #0]
 800fb34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fb36:	3701      	adds	r7, #1
 800fb38:	601f      	str	r7, [r3, #0]
 800fb3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f000 831d 	beq.w	801017c <_dtoa_r+0xb34>
 800fb42:	601e      	str	r6, [r3, #0]
 800fb44:	e31a      	b.n	801017c <_dtoa_r+0xb34>
 800fb46:	07e2      	lsls	r2, r4, #31
 800fb48:	d505      	bpl.n	800fb56 <_dtoa_r+0x50e>
 800fb4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb4e:	f7f0 fd53 	bl	80005f8 <__aeabi_dmul>
 800fb52:	3601      	adds	r6, #1
 800fb54:	2301      	movs	r3, #1
 800fb56:	1064      	asrs	r4, r4, #1
 800fb58:	3508      	adds	r5, #8
 800fb5a:	e73f      	b.n	800f9dc <_dtoa_r+0x394>
 800fb5c:	2602      	movs	r6, #2
 800fb5e:	e742      	b.n	800f9e6 <_dtoa_r+0x39e>
 800fb60:	9c07      	ldr	r4, [sp, #28]
 800fb62:	9704      	str	r7, [sp, #16]
 800fb64:	e761      	b.n	800fa2a <_dtoa_r+0x3e2>
 800fb66:	4b27      	ldr	r3, [pc, #156]	@ (800fc04 <_dtoa_r+0x5bc>)
 800fb68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fb6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb72:	4454      	add	r4, sl
 800fb74:	2900      	cmp	r1, #0
 800fb76:	d053      	beq.n	800fc20 <_dtoa_r+0x5d8>
 800fb78:	4928      	ldr	r1, [pc, #160]	@ (800fc1c <_dtoa_r+0x5d4>)
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	f7f0 fe66 	bl	800084c <__aeabi_ddiv>
 800fb80:	4633      	mov	r3, r6
 800fb82:	462a      	mov	r2, r5
 800fb84:	f7f0 fb80 	bl	8000288 <__aeabi_dsub>
 800fb88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb8c:	4656      	mov	r6, sl
 800fb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb92:	f7f0 ffe1 	bl	8000b58 <__aeabi_d2iz>
 800fb96:	4605      	mov	r5, r0
 800fb98:	f7f0 fcc4 	bl	8000524 <__aeabi_i2d>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	460b      	mov	r3, r1
 800fba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fba4:	f7f0 fb70 	bl	8000288 <__aeabi_dsub>
 800fba8:	3530      	adds	r5, #48	@ 0x30
 800fbaa:	4602      	mov	r2, r0
 800fbac:	460b      	mov	r3, r1
 800fbae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fbb2:	f806 5b01 	strb.w	r5, [r6], #1
 800fbb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fbba:	f7f0 ff8f 	bl	8000adc <__aeabi_dcmplt>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d171      	bne.n	800fca6 <_dtoa_r+0x65e>
 800fbc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbc6:	4911      	ldr	r1, [pc, #68]	@ (800fc0c <_dtoa_r+0x5c4>)
 800fbc8:	2000      	movs	r0, #0
 800fbca:	f7f0 fb5d 	bl	8000288 <__aeabi_dsub>
 800fbce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fbd2:	f7f0 ff83 	bl	8000adc <__aeabi_dcmplt>
 800fbd6:	2800      	cmp	r0, #0
 800fbd8:	f040 8095 	bne.w	800fd06 <_dtoa_r+0x6be>
 800fbdc:	42a6      	cmp	r6, r4
 800fbde:	f43f af50 	beq.w	800fa82 <_dtoa_r+0x43a>
 800fbe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fbe6:	4b0a      	ldr	r3, [pc, #40]	@ (800fc10 <_dtoa_r+0x5c8>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f7f0 fd05 	bl	80005f8 <__aeabi_dmul>
 800fbee:	4b08      	ldr	r3, [pc, #32]	@ (800fc10 <_dtoa_r+0x5c8>)
 800fbf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbfa:	f7f0 fcfd 	bl	80005f8 <__aeabi_dmul>
 800fbfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc02:	e7c4      	b.n	800fb8e <_dtoa_r+0x546>
 800fc04:	08012e28 	.word	0x08012e28
 800fc08:	08012e00 	.word	0x08012e00
 800fc0c:	3ff00000 	.word	0x3ff00000
 800fc10:	40240000 	.word	0x40240000
 800fc14:	401c0000 	.word	0x401c0000
 800fc18:	40140000 	.word	0x40140000
 800fc1c:	3fe00000 	.word	0x3fe00000
 800fc20:	4631      	mov	r1, r6
 800fc22:	4628      	mov	r0, r5
 800fc24:	f7f0 fce8 	bl	80005f8 <__aeabi_dmul>
 800fc28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fc2c:	9415      	str	r4, [sp, #84]	@ 0x54
 800fc2e:	4656      	mov	r6, sl
 800fc30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc34:	f7f0 ff90 	bl	8000b58 <__aeabi_d2iz>
 800fc38:	4605      	mov	r5, r0
 800fc3a:	f7f0 fc73 	bl	8000524 <__aeabi_i2d>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	460b      	mov	r3, r1
 800fc42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc46:	f7f0 fb1f 	bl	8000288 <__aeabi_dsub>
 800fc4a:	3530      	adds	r5, #48	@ 0x30
 800fc4c:	f806 5b01 	strb.w	r5, [r6], #1
 800fc50:	4602      	mov	r2, r0
 800fc52:	460b      	mov	r3, r1
 800fc54:	42a6      	cmp	r6, r4
 800fc56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fc5a:	f04f 0200 	mov.w	r2, #0
 800fc5e:	d124      	bne.n	800fcaa <_dtoa_r+0x662>
 800fc60:	4bac      	ldr	r3, [pc, #688]	@ (800ff14 <_dtoa_r+0x8cc>)
 800fc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fc66:	f7f0 fb11 	bl	800028c <__adddf3>
 800fc6a:	4602      	mov	r2, r0
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc72:	f7f0 ff51 	bl	8000b18 <__aeabi_dcmpgt>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d145      	bne.n	800fd06 <_dtoa_r+0x6be>
 800fc7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fc7e:	49a5      	ldr	r1, [pc, #660]	@ (800ff14 <_dtoa_r+0x8cc>)
 800fc80:	2000      	movs	r0, #0
 800fc82:	f7f0 fb01 	bl	8000288 <__aeabi_dsub>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc8e:	f7f0 ff25 	bl	8000adc <__aeabi_dcmplt>
 800fc92:	2800      	cmp	r0, #0
 800fc94:	f43f aef5 	beq.w	800fa82 <_dtoa_r+0x43a>
 800fc98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fc9a:	1e73      	subs	r3, r6, #1
 800fc9c:	9315      	str	r3, [sp, #84]	@ 0x54
 800fc9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fca2:	2b30      	cmp	r3, #48	@ 0x30
 800fca4:	d0f8      	beq.n	800fc98 <_dtoa_r+0x650>
 800fca6:	9f04      	ldr	r7, [sp, #16]
 800fca8:	e73e      	b.n	800fb28 <_dtoa_r+0x4e0>
 800fcaa:	4b9b      	ldr	r3, [pc, #620]	@ (800ff18 <_dtoa_r+0x8d0>)
 800fcac:	f7f0 fca4 	bl	80005f8 <__aeabi_dmul>
 800fcb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcb4:	e7bc      	b.n	800fc30 <_dtoa_r+0x5e8>
 800fcb6:	d10c      	bne.n	800fcd2 <_dtoa_r+0x68a>
 800fcb8:	4b98      	ldr	r3, [pc, #608]	@ (800ff1c <_dtoa_r+0x8d4>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcc0:	f7f0 fc9a 	bl	80005f8 <__aeabi_dmul>
 800fcc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcc8:	f7f0 ff1c 	bl	8000b04 <__aeabi_dcmpge>
 800fccc:	2800      	cmp	r0, #0
 800fcce:	f000 8157 	beq.w	800ff80 <_dtoa_r+0x938>
 800fcd2:	2400      	movs	r4, #0
 800fcd4:	4625      	mov	r5, r4
 800fcd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcd8:	43db      	mvns	r3, r3
 800fcda:	9304      	str	r3, [sp, #16]
 800fcdc:	4656      	mov	r6, sl
 800fcde:	2700      	movs	r7, #0
 800fce0:	4621      	mov	r1, r4
 800fce2:	4658      	mov	r0, fp
 800fce4:	f000 fafe 	bl	80102e4 <_Bfree>
 800fce8:	2d00      	cmp	r5, #0
 800fcea:	d0dc      	beq.n	800fca6 <_dtoa_r+0x65e>
 800fcec:	b12f      	cbz	r7, 800fcfa <_dtoa_r+0x6b2>
 800fcee:	42af      	cmp	r7, r5
 800fcf0:	d003      	beq.n	800fcfa <_dtoa_r+0x6b2>
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	4658      	mov	r0, fp
 800fcf6:	f000 faf5 	bl	80102e4 <_Bfree>
 800fcfa:	4629      	mov	r1, r5
 800fcfc:	4658      	mov	r0, fp
 800fcfe:	f000 faf1 	bl	80102e4 <_Bfree>
 800fd02:	e7d0      	b.n	800fca6 <_dtoa_r+0x65e>
 800fd04:	9704      	str	r7, [sp, #16]
 800fd06:	4633      	mov	r3, r6
 800fd08:	461e      	mov	r6, r3
 800fd0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd0e:	2a39      	cmp	r2, #57	@ 0x39
 800fd10:	d107      	bne.n	800fd22 <_dtoa_r+0x6da>
 800fd12:	459a      	cmp	sl, r3
 800fd14:	d1f8      	bne.n	800fd08 <_dtoa_r+0x6c0>
 800fd16:	9a04      	ldr	r2, [sp, #16]
 800fd18:	3201      	adds	r2, #1
 800fd1a:	9204      	str	r2, [sp, #16]
 800fd1c:	2230      	movs	r2, #48	@ 0x30
 800fd1e:	f88a 2000 	strb.w	r2, [sl]
 800fd22:	781a      	ldrb	r2, [r3, #0]
 800fd24:	3201      	adds	r2, #1
 800fd26:	701a      	strb	r2, [r3, #0]
 800fd28:	e7bd      	b.n	800fca6 <_dtoa_r+0x65e>
 800fd2a:	4b7b      	ldr	r3, [pc, #492]	@ (800ff18 <_dtoa_r+0x8d0>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f7f0 fc63 	bl	80005f8 <__aeabi_dmul>
 800fd32:	2200      	movs	r2, #0
 800fd34:	2300      	movs	r3, #0
 800fd36:	4604      	mov	r4, r0
 800fd38:	460d      	mov	r5, r1
 800fd3a:	f7f0 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f43f aebb 	beq.w	800faba <_dtoa_r+0x472>
 800fd44:	e6f0      	b.n	800fb28 <_dtoa_r+0x4e0>
 800fd46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fd48:	2a00      	cmp	r2, #0
 800fd4a:	f000 80db 	beq.w	800ff04 <_dtoa_r+0x8bc>
 800fd4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd50:	2a01      	cmp	r2, #1
 800fd52:	f300 80bf 	bgt.w	800fed4 <_dtoa_r+0x88c>
 800fd56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fd58:	2a00      	cmp	r2, #0
 800fd5a:	f000 80b7 	beq.w	800fecc <_dtoa_r+0x884>
 800fd5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fd62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fd64:	4646      	mov	r6, r8
 800fd66:	9a08      	ldr	r2, [sp, #32]
 800fd68:	2101      	movs	r1, #1
 800fd6a:	441a      	add	r2, r3
 800fd6c:	4658      	mov	r0, fp
 800fd6e:	4498      	add	r8, r3
 800fd70:	9208      	str	r2, [sp, #32]
 800fd72:	f000 fbb5 	bl	80104e0 <__i2b>
 800fd76:	4605      	mov	r5, r0
 800fd78:	b15e      	cbz	r6, 800fd92 <_dtoa_r+0x74a>
 800fd7a:	9b08      	ldr	r3, [sp, #32]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	dd08      	ble.n	800fd92 <_dtoa_r+0x74a>
 800fd80:	42b3      	cmp	r3, r6
 800fd82:	9a08      	ldr	r2, [sp, #32]
 800fd84:	bfa8      	it	ge
 800fd86:	4633      	movge	r3, r6
 800fd88:	eba8 0803 	sub.w	r8, r8, r3
 800fd8c:	1af6      	subs	r6, r6, r3
 800fd8e:	1ad3      	subs	r3, r2, r3
 800fd90:	9308      	str	r3, [sp, #32]
 800fd92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd94:	b1f3      	cbz	r3, 800fdd4 <_dtoa_r+0x78c>
 800fd96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f000 80b7 	beq.w	800ff0c <_dtoa_r+0x8c4>
 800fd9e:	b18c      	cbz	r4, 800fdc4 <_dtoa_r+0x77c>
 800fda0:	4629      	mov	r1, r5
 800fda2:	4622      	mov	r2, r4
 800fda4:	4658      	mov	r0, fp
 800fda6:	f000 fc5b 	bl	8010660 <__pow5mult>
 800fdaa:	464a      	mov	r2, r9
 800fdac:	4601      	mov	r1, r0
 800fdae:	4605      	mov	r5, r0
 800fdb0:	4658      	mov	r0, fp
 800fdb2:	f000 fbab 	bl	801050c <__multiply>
 800fdb6:	4649      	mov	r1, r9
 800fdb8:	9004      	str	r0, [sp, #16]
 800fdba:	4658      	mov	r0, fp
 800fdbc:	f000 fa92 	bl	80102e4 <_Bfree>
 800fdc0:	9b04      	ldr	r3, [sp, #16]
 800fdc2:	4699      	mov	r9, r3
 800fdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdc6:	1b1a      	subs	r2, r3, r4
 800fdc8:	d004      	beq.n	800fdd4 <_dtoa_r+0x78c>
 800fdca:	4649      	mov	r1, r9
 800fdcc:	4658      	mov	r0, fp
 800fdce:	f000 fc47 	bl	8010660 <__pow5mult>
 800fdd2:	4681      	mov	r9, r0
 800fdd4:	2101      	movs	r1, #1
 800fdd6:	4658      	mov	r0, fp
 800fdd8:	f000 fb82 	bl	80104e0 <__i2b>
 800fddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdde:	4604      	mov	r4, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f000 81cf 	beq.w	8010184 <_dtoa_r+0xb3c>
 800fde6:	461a      	mov	r2, r3
 800fde8:	4601      	mov	r1, r0
 800fdea:	4658      	mov	r0, fp
 800fdec:	f000 fc38 	bl	8010660 <__pow5mult>
 800fdf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	f300 8095 	bgt.w	800ff24 <_dtoa_r+0x8dc>
 800fdfa:	9b02      	ldr	r3, [sp, #8]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f040 8087 	bne.w	800ff10 <_dtoa_r+0x8c8>
 800fe02:	9b03      	ldr	r3, [sp, #12]
 800fe04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f040 8089 	bne.w	800ff20 <_dtoa_r+0x8d8>
 800fe0e:	9b03      	ldr	r3, [sp, #12]
 800fe10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fe14:	0d1b      	lsrs	r3, r3, #20
 800fe16:	051b      	lsls	r3, r3, #20
 800fe18:	b12b      	cbz	r3, 800fe26 <_dtoa_r+0x7de>
 800fe1a:	9b08      	ldr	r3, [sp, #32]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	9308      	str	r3, [sp, #32]
 800fe20:	f108 0801 	add.w	r8, r8, #1
 800fe24:	2301      	movs	r3, #1
 800fe26:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	f000 81b0 	beq.w	8010190 <_dtoa_r+0xb48>
 800fe30:	6923      	ldr	r3, [r4, #16]
 800fe32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fe36:	6918      	ldr	r0, [r3, #16]
 800fe38:	f000 fb06 	bl	8010448 <__hi0bits>
 800fe3c:	f1c0 0020 	rsb	r0, r0, #32
 800fe40:	9b08      	ldr	r3, [sp, #32]
 800fe42:	4418      	add	r0, r3
 800fe44:	f010 001f 	ands.w	r0, r0, #31
 800fe48:	d077      	beq.n	800ff3a <_dtoa_r+0x8f2>
 800fe4a:	f1c0 0320 	rsb	r3, r0, #32
 800fe4e:	2b04      	cmp	r3, #4
 800fe50:	dd6b      	ble.n	800ff2a <_dtoa_r+0x8e2>
 800fe52:	9b08      	ldr	r3, [sp, #32]
 800fe54:	f1c0 001c 	rsb	r0, r0, #28
 800fe58:	4403      	add	r3, r0
 800fe5a:	4480      	add	r8, r0
 800fe5c:	4406      	add	r6, r0
 800fe5e:	9308      	str	r3, [sp, #32]
 800fe60:	f1b8 0f00 	cmp.w	r8, #0
 800fe64:	dd05      	ble.n	800fe72 <_dtoa_r+0x82a>
 800fe66:	4649      	mov	r1, r9
 800fe68:	4642      	mov	r2, r8
 800fe6a:	4658      	mov	r0, fp
 800fe6c:	f000 fc52 	bl	8010714 <__lshift>
 800fe70:	4681      	mov	r9, r0
 800fe72:	9b08      	ldr	r3, [sp, #32]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	dd05      	ble.n	800fe84 <_dtoa_r+0x83c>
 800fe78:	4621      	mov	r1, r4
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	4658      	mov	r0, fp
 800fe7e:	f000 fc49 	bl	8010714 <__lshift>
 800fe82:	4604      	mov	r4, r0
 800fe84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d059      	beq.n	800ff3e <_dtoa_r+0x8f6>
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	4648      	mov	r0, r9
 800fe8e:	f000 fcad 	bl	80107ec <__mcmp>
 800fe92:	2800      	cmp	r0, #0
 800fe94:	da53      	bge.n	800ff3e <_dtoa_r+0x8f6>
 800fe96:	1e7b      	subs	r3, r7, #1
 800fe98:	9304      	str	r3, [sp, #16]
 800fe9a:	4649      	mov	r1, r9
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	220a      	movs	r2, #10
 800fea0:	4658      	mov	r0, fp
 800fea2:	f000 fa41 	bl	8010328 <__multadd>
 800fea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fea8:	4681      	mov	r9, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f000 8172 	beq.w	8010194 <_dtoa_r+0xb4c>
 800feb0:	2300      	movs	r3, #0
 800feb2:	4629      	mov	r1, r5
 800feb4:	220a      	movs	r2, #10
 800feb6:	4658      	mov	r0, fp
 800feb8:	f000 fa36 	bl	8010328 <__multadd>
 800febc:	9b00      	ldr	r3, [sp, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	4605      	mov	r5, r0
 800fec2:	dc67      	bgt.n	800ff94 <_dtoa_r+0x94c>
 800fec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	dc41      	bgt.n	800ff4e <_dtoa_r+0x906>
 800feca:	e063      	b.n	800ff94 <_dtoa_r+0x94c>
 800fecc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fece:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fed2:	e746      	b.n	800fd62 <_dtoa_r+0x71a>
 800fed4:	9b07      	ldr	r3, [sp, #28]
 800fed6:	1e5c      	subs	r4, r3, #1
 800fed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800feda:	42a3      	cmp	r3, r4
 800fedc:	bfbf      	itttt	lt
 800fede:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fee0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fee2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fee4:	1ae3      	sublt	r3, r4, r3
 800fee6:	bfb4      	ite	lt
 800fee8:	18d2      	addlt	r2, r2, r3
 800feea:	1b1c      	subge	r4, r3, r4
 800feec:	9b07      	ldr	r3, [sp, #28]
 800feee:	bfbc      	itt	lt
 800fef0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fef2:	2400      	movlt	r4, #0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	bfb5      	itete	lt
 800fef8:	eba8 0603 	sublt.w	r6, r8, r3
 800fefc:	9b07      	ldrge	r3, [sp, #28]
 800fefe:	2300      	movlt	r3, #0
 800ff00:	4646      	movge	r6, r8
 800ff02:	e730      	b.n	800fd66 <_dtoa_r+0x71e>
 800ff04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ff06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ff08:	4646      	mov	r6, r8
 800ff0a:	e735      	b.n	800fd78 <_dtoa_r+0x730>
 800ff0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff0e:	e75c      	b.n	800fdca <_dtoa_r+0x782>
 800ff10:	2300      	movs	r3, #0
 800ff12:	e788      	b.n	800fe26 <_dtoa_r+0x7de>
 800ff14:	3fe00000 	.word	0x3fe00000
 800ff18:	40240000 	.word	0x40240000
 800ff1c:	40140000 	.word	0x40140000
 800ff20:	9b02      	ldr	r3, [sp, #8]
 800ff22:	e780      	b.n	800fe26 <_dtoa_r+0x7de>
 800ff24:	2300      	movs	r3, #0
 800ff26:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff28:	e782      	b.n	800fe30 <_dtoa_r+0x7e8>
 800ff2a:	d099      	beq.n	800fe60 <_dtoa_r+0x818>
 800ff2c:	9a08      	ldr	r2, [sp, #32]
 800ff2e:	331c      	adds	r3, #28
 800ff30:	441a      	add	r2, r3
 800ff32:	4498      	add	r8, r3
 800ff34:	441e      	add	r6, r3
 800ff36:	9208      	str	r2, [sp, #32]
 800ff38:	e792      	b.n	800fe60 <_dtoa_r+0x818>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	e7f6      	b.n	800ff2c <_dtoa_r+0x8e4>
 800ff3e:	9b07      	ldr	r3, [sp, #28]
 800ff40:	9704      	str	r7, [sp, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	dc20      	bgt.n	800ff88 <_dtoa_r+0x940>
 800ff46:	9300      	str	r3, [sp, #0]
 800ff48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff4a:	2b02      	cmp	r3, #2
 800ff4c:	dd1e      	ble.n	800ff8c <_dtoa_r+0x944>
 800ff4e:	9b00      	ldr	r3, [sp, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f47f aec0 	bne.w	800fcd6 <_dtoa_r+0x68e>
 800ff56:	4621      	mov	r1, r4
 800ff58:	2205      	movs	r2, #5
 800ff5a:	4658      	mov	r0, fp
 800ff5c:	f000 f9e4 	bl	8010328 <__multadd>
 800ff60:	4601      	mov	r1, r0
 800ff62:	4604      	mov	r4, r0
 800ff64:	4648      	mov	r0, r9
 800ff66:	f000 fc41 	bl	80107ec <__mcmp>
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	f77f aeb3 	ble.w	800fcd6 <_dtoa_r+0x68e>
 800ff70:	4656      	mov	r6, sl
 800ff72:	2331      	movs	r3, #49	@ 0x31
 800ff74:	f806 3b01 	strb.w	r3, [r6], #1
 800ff78:	9b04      	ldr	r3, [sp, #16]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	9304      	str	r3, [sp, #16]
 800ff7e:	e6ae      	b.n	800fcde <_dtoa_r+0x696>
 800ff80:	9c07      	ldr	r4, [sp, #28]
 800ff82:	9704      	str	r7, [sp, #16]
 800ff84:	4625      	mov	r5, r4
 800ff86:	e7f3      	b.n	800ff70 <_dtoa_r+0x928>
 800ff88:	9b07      	ldr	r3, [sp, #28]
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f000 8104 	beq.w	801019c <_dtoa_r+0xb54>
 800ff94:	2e00      	cmp	r6, #0
 800ff96:	dd05      	ble.n	800ffa4 <_dtoa_r+0x95c>
 800ff98:	4629      	mov	r1, r5
 800ff9a:	4632      	mov	r2, r6
 800ff9c:	4658      	mov	r0, fp
 800ff9e:	f000 fbb9 	bl	8010714 <__lshift>
 800ffa2:	4605      	mov	r5, r0
 800ffa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d05a      	beq.n	8010060 <_dtoa_r+0xa18>
 800ffaa:	6869      	ldr	r1, [r5, #4]
 800ffac:	4658      	mov	r0, fp
 800ffae:	f000 f959 	bl	8010264 <_Balloc>
 800ffb2:	4606      	mov	r6, r0
 800ffb4:	b928      	cbnz	r0, 800ffc2 <_dtoa_r+0x97a>
 800ffb6:	4b84      	ldr	r3, [pc, #528]	@ (80101c8 <_dtoa_r+0xb80>)
 800ffb8:	4602      	mov	r2, r0
 800ffba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ffbe:	f7ff bb5a 	b.w	800f676 <_dtoa_r+0x2e>
 800ffc2:	692a      	ldr	r2, [r5, #16]
 800ffc4:	3202      	adds	r2, #2
 800ffc6:	0092      	lsls	r2, r2, #2
 800ffc8:	f105 010c 	add.w	r1, r5, #12
 800ffcc:	300c      	adds	r0, #12
 800ffce:	f7ff fa7e 	bl	800f4ce <memcpy>
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	4631      	mov	r1, r6
 800ffd6:	4658      	mov	r0, fp
 800ffd8:	f000 fb9c 	bl	8010714 <__lshift>
 800ffdc:	f10a 0301 	add.w	r3, sl, #1
 800ffe0:	9307      	str	r3, [sp, #28]
 800ffe2:	9b00      	ldr	r3, [sp, #0]
 800ffe4:	4453      	add	r3, sl
 800ffe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ffe8:	9b02      	ldr	r3, [sp, #8]
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	462f      	mov	r7, r5
 800fff0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fff2:	4605      	mov	r5, r0
 800fff4:	9b07      	ldr	r3, [sp, #28]
 800fff6:	4621      	mov	r1, r4
 800fff8:	3b01      	subs	r3, #1
 800fffa:	4648      	mov	r0, r9
 800fffc:	9300      	str	r3, [sp, #0]
 800fffe:	f7ff fa99 	bl	800f534 <quorem>
 8010002:	4639      	mov	r1, r7
 8010004:	9002      	str	r0, [sp, #8]
 8010006:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801000a:	4648      	mov	r0, r9
 801000c:	f000 fbee 	bl	80107ec <__mcmp>
 8010010:	462a      	mov	r2, r5
 8010012:	9008      	str	r0, [sp, #32]
 8010014:	4621      	mov	r1, r4
 8010016:	4658      	mov	r0, fp
 8010018:	f000 fc04 	bl	8010824 <__mdiff>
 801001c:	68c2      	ldr	r2, [r0, #12]
 801001e:	4606      	mov	r6, r0
 8010020:	bb02      	cbnz	r2, 8010064 <_dtoa_r+0xa1c>
 8010022:	4601      	mov	r1, r0
 8010024:	4648      	mov	r0, r9
 8010026:	f000 fbe1 	bl	80107ec <__mcmp>
 801002a:	4602      	mov	r2, r0
 801002c:	4631      	mov	r1, r6
 801002e:	4658      	mov	r0, fp
 8010030:	920e      	str	r2, [sp, #56]	@ 0x38
 8010032:	f000 f957 	bl	80102e4 <_Bfree>
 8010036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801003a:	9e07      	ldr	r6, [sp, #28]
 801003c:	ea43 0102 	orr.w	r1, r3, r2
 8010040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010042:	4319      	orrs	r1, r3
 8010044:	d110      	bne.n	8010068 <_dtoa_r+0xa20>
 8010046:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801004a:	d029      	beq.n	80100a0 <_dtoa_r+0xa58>
 801004c:	9b08      	ldr	r3, [sp, #32]
 801004e:	2b00      	cmp	r3, #0
 8010050:	dd02      	ble.n	8010058 <_dtoa_r+0xa10>
 8010052:	9b02      	ldr	r3, [sp, #8]
 8010054:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010058:	9b00      	ldr	r3, [sp, #0]
 801005a:	f883 8000 	strb.w	r8, [r3]
 801005e:	e63f      	b.n	800fce0 <_dtoa_r+0x698>
 8010060:	4628      	mov	r0, r5
 8010062:	e7bb      	b.n	800ffdc <_dtoa_r+0x994>
 8010064:	2201      	movs	r2, #1
 8010066:	e7e1      	b.n	801002c <_dtoa_r+0x9e4>
 8010068:	9b08      	ldr	r3, [sp, #32]
 801006a:	2b00      	cmp	r3, #0
 801006c:	db04      	blt.n	8010078 <_dtoa_r+0xa30>
 801006e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010070:	430b      	orrs	r3, r1
 8010072:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010074:	430b      	orrs	r3, r1
 8010076:	d120      	bne.n	80100ba <_dtoa_r+0xa72>
 8010078:	2a00      	cmp	r2, #0
 801007a:	dded      	ble.n	8010058 <_dtoa_r+0xa10>
 801007c:	4649      	mov	r1, r9
 801007e:	2201      	movs	r2, #1
 8010080:	4658      	mov	r0, fp
 8010082:	f000 fb47 	bl	8010714 <__lshift>
 8010086:	4621      	mov	r1, r4
 8010088:	4681      	mov	r9, r0
 801008a:	f000 fbaf 	bl	80107ec <__mcmp>
 801008e:	2800      	cmp	r0, #0
 8010090:	dc03      	bgt.n	801009a <_dtoa_r+0xa52>
 8010092:	d1e1      	bne.n	8010058 <_dtoa_r+0xa10>
 8010094:	f018 0f01 	tst.w	r8, #1
 8010098:	d0de      	beq.n	8010058 <_dtoa_r+0xa10>
 801009a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801009e:	d1d8      	bne.n	8010052 <_dtoa_r+0xa0a>
 80100a0:	9a00      	ldr	r2, [sp, #0]
 80100a2:	2339      	movs	r3, #57	@ 0x39
 80100a4:	7013      	strb	r3, [r2, #0]
 80100a6:	4633      	mov	r3, r6
 80100a8:	461e      	mov	r6, r3
 80100aa:	3b01      	subs	r3, #1
 80100ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80100b0:	2a39      	cmp	r2, #57	@ 0x39
 80100b2:	d052      	beq.n	801015a <_dtoa_r+0xb12>
 80100b4:	3201      	adds	r2, #1
 80100b6:	701a      	strb	r2, [r3, #0]
 80100b8:	e612      	b.n	800fce0 <_dtoa_r+0x698>
 80100ba:	2a00      	cmp	r2, #0
 80100bc:	dd07      	ble.n	80100ce <_dtoa_r+0xa86>
 80100be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80100c2:	d0ed      	beq.n	80100a0 <_dtoa_r+0xa58>
 80100c4:	9a00      	ldr	r2, [sp, #0]
 80100c6:	f108 0301 	add.w	r3, r8, #1
 80100ca:	7013      	strb	r3, [r2, #0]
 80100cc:	e608      	b.n	800fce0 <_dtoa_r+0x698>
 80100ce:	9b07      	ldr	r3, [sp, #28]
 80100d0:	9a07      	ldr	r2, [sp, #28]
 80100d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80100d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100d8:	4293      	cmp	r3, r2
 80100da:	d028      	beq.n	801012e <_dtoa_r+0xae6>
 80100dc:	4649      	mov	r1, r9
 80100de:	2300      	movs	r3, #0
 80100e0:	220a      	movs	r2, #10
 80100e2:	4658      	mov	r0, fp
 80100e4:	f000 f920 	bl	8010328 <__multadd>
 80100e8:	42af      	cmp	r7, r5
 80100ea:	4681      	mov	r9, r0
 80100ec:	f04f 0300 	mov.w	r3, #0
 80100f0:	f04f 020a 	mov.w	r2, #10
 80100f4:	4639      	mov	r1, r7
 80100f6:	4658      	mov	r0, fp
 80100f8:	d107      	bne.n	801010a <_dtoa_r+0xac2>
 80100fa:	f000 f915 	bl	8010328 <__multadd>
 80100fe:	4607      	mov	r7, r0
 8010100:	4605      	mov	r5, r0
 8010102:	9b07      	ldr	r3, [sp, #28]
 8010104:	3301      	adds	r3, #1
 8010106:	9307      	str	r3, [sp, #28]
 8010108:	e774      	b.n	800fff4 <_dtoa_r+0x9ac>
 801010a:	f000 f90d 	bl	8010328 <__multadd>
 801010e:	4629      	mov	r1, r5
 8010110:	4607      	mov	r7, r0
 8010112:	2300      	movs	r3, #0
 8010114:	220a      	movs	r2, #10
 8010116:	4658      	mov	r0, fp
 8010118:	f000 f906 	bl	8010328 <__multadd>
 801011c:	4605      	mov	r5, r0
 801011e:	e7f0      	b.n	8010102 <_dtoa_r+0xaba>
 8010120:	9b00      	ldr	r3, [sp, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	bfcc      	ite	gt
 8010126:	461e      	movgt	r6, r3
 8010128:	2601      	movle	r6, #1
 801012a:	4456      	add	r6, sl
 801012c:	2700      	movs	r7, #0
 801012e:	4649      	mov	r1, r9
 8010130:	2201      	movs	r2, #1
 8010132:	4658      	mov	r0, fp
 8010134:	f000 faee 	bl	8010714 <__lshift>
 8010138:	4621      	mov	r1, r4
 801013a:	4681      	mov	r9, r0
 801013c:	f000 fb56 	bl	80107ec <__mcmp>
 8010140:	2800      	cmp	r0, #0
 8010142:	dcb0      	bgt.n	80100a6 <_dtoa_r+0xa5e>
 8010144:	d102      	bne.n	801014c <_dtoa_r+0xb04>
 8010146:	f018 0f01 	tst.w	r8, #1
 801014a:	d1ac      	bne.n	80100a6 <_dtoa_r+0xa5e>
 801014c:	4633      	mov	r3, r6
 801014e:	461e      	mov	r6, r3
 8010150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010154:	2a30      	cmp	r2, #48	@ 0x30
 8010156:	d0fa      	beq.n	801014e <_dtoa_r+0xb06>
 8010158:	e5c2      	b.n	800fce0 <_dtoa_r+0x698>
 801015a:	459a      	cmp	sl, r3
 801015c:	d1a4      	bne.n	80100a8 <_dtoa_r+0xa60>
 801015e:	9b04      	ldr	r3, [sp, #16]
 8010160:	3301      	adds	r3, #1
 8010162:	9304      	str	r3, [sp, #16]
 8010164:	2331      	movs	r3, #49	@ 0x31
 8010166:	f88a 3000 	strb.w	r3, [sl]
 801016a:	e5b9      	b.n	800fce0 <_dtoa_r+0x698>
 801016c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801016e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80101cc <_dtoa_r+0xb84>
 8010172:	b11b      	cbz	r3, 801017c <_dtoa_r+0xb34>
 8010174:	f10a 0308 	add.w	r3, sl, #8
 8010178:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801017a:	6013      	str	r3, [r2, #0]
 801017c:	4650      	mov	r0, sl
 801017e:	b019      	add	sp, #100	@ 0x64
 8010180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010186:	2b01      	cmp	r3, #1
 8010188:	f77f ae37 	ble.w	800fdfa <_dtoa_r+0x7b2>
 801018c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801018e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010190:	2001      	movs	r0, #1
 8010192:	e655      	b.n	800fe40 <_dtoa_r+0x7f8>
 8010194:	9b00      	ldr	r3, [sp, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	f77f aed6 	ble.w	800ff48 <_dtoa_r+0x900>
 801019c:	4656      	mov	r6, sl
 801019e:	4621      	mov	r1, r4
 80101a0:	4648      	mov	r0, r9
 80101a2:	f7ff f9c7 	bl	800f534 <quorem>
 80101a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80101aa:	f806 8b01 	strb.w	r8, [r6], #1
 80101ae:	9b00      	ldr	r3, [sp, #0]
 80101b0:	eba6 020a 	sub.w	r2, r6, sl
 80101b4:	4293      	cmp	r3, r2
 80101b6:	ddb3      	ble.n	8010120 <_dtoa_r+0xad8>
 80101b8:	4649      	mov	r1, r9
 80101ba:	2300      	movs	r3, #0
 80101bc:	220a      	movs	r2, #10
 80101be:	4658      	mov	r0, fp
 80101c0:	f000 f8b2 	bl	8010328 <__multadd>
 80101c4:	4681      	mov	r9, r0
 80101c6:	e7ea      	b.n	801019e <_dtoa_r+0xb56>
 80101c8:	08012d8a 	.word	0x08012d8a
 80101cc:	08012d0e 	.word	0x08012d0e

080101d0 <_free_r>:
 80101d0:	b538      	push	{r3, r4, r5, lr}
 80101d2:	4605      	mov	r5, r0
 80101d4:	2900      	cmp	r1, #0
 80101d6:	d041      	beq.n	801025c <_free_r+0x8c>
 80101d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101dc:	1f0c      	subs	r4, r1, #4
 80101de:	2b00      	cmp	r3, #0
 80101e0:	bfb8      	it	lt
 80101e2:	18e4      	addlt	r4, r4, r3
 80101e4:	f7fd fe3e 	bl	800de64 <__malloc_lock>
 80101e8:	4a1d      	ldr	r2, [pc, #116]	@ (8010260 <_free_r+0x90>)
 80101ea:	6813      	ldr	r3, [r2, #0]
 80101ec:	b933      	cbnz	r3, 80101fc <_free_r+0x2c>
 80101ee:	6063      	str	r3, [r4, #4]
 80101f0:	6014      	str	r4, [r2, #0]
 80101f2:	4628      	mov	r0, r5
 80101f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101f8:	f7fd be3a 	b.w	800de70 <__malloc_unlock>
 80101fc:	42a3      	cmp	r3, r4
 80101fe:	d908      	bls.n	8010212 <_free_r+0x42>
 8010200:	6820      	ldr	r0, [r4, #0]
 8010202:	1821      	adds	r1, r4, r0
 8010204:	428b      	cmp	r3, r1
 8010206:	bf01      	itttt	eq
 8010208:	6819      	ldreq	r1, [r3, #0]
 801020a:	685b      	ldreq	r3, [r3, #4]
 801020c:	1809      	addeq	r1, r1, r0
 801020e:	6021      	streq	r1, [r4, #0]
 8010210:	e7ed      	b.n	80101ee <_free_r+0x1e>
 8010212:	461a      	mov	r2, r3
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	b10b      	cbz	r3, 801021c <_free_r+0x4c>
 8010218:	42a3      	cmp	r3, r4
 801021a:	d9fa      	bls.n	8010212 <_free_r+0x42>
 801021c:	6811      	ldr	r1, [r2, #0]
 801021e:	1850      	adds	r0, r2, r1
 8010220:	42a0      	cmp	r0, r4
 8010222:	d10b      	bne.n	801023c <_free_r+0x6c>
 8010224:	6820      	ldr	r0, [r4, #0]
 8010226:	4401      	add	r1, r0
 8010228:	1850      	adds	r0, r2, r1
 801022a:	4283      	cmp	r3, r0
 801022c:	6011      	str	r1, [r2, #0]
 801022e:	d1e0      	bne.n	80101f2 <_free_r+0x22>
 8010230:	6818      	ldr	r0, [r3, #0]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	6053      	str	r3, [r2, #4]
 8010236:	4408      	add	r0, r1
 8010238:	6010      	str	r0, [r2, #0]
 801023a:	e7da      	b.n	80101f2 <_free_r+0x22>
 801023c:	d902      	bls.n	8010244 <_free_r+0x74>
 801023e:	230c      	movs	r3, #12
 8010240:	602b      	str	r3, [r5, #0]
 8010242:	e7d6      	b.n	80101f2 <_free_r+0x22>
 8010244:	6820      	ldr	r0, [r4, #0]
 8010246:	1821      	adds	r1, r4, r0
 8010248:	428b      	cmp	r3, r1
 801024a:	bf04      	itt	eq
 801024c:	6819      	ldreq	r1, [r3, #0]
 801024e:	685b      	ldreq	r3, [r3, #4]
 8010250:	6063      	str	r3, [r4, #4]
 8010252:	bf04      	itt	eq
 8010254:	1809      	addeq	r1, r1, r0
 8010256:	6021      	streq	r1, [r4, #0]
 8010258:	6054      	str	r4, [r2, #4]
 801025a:	e7ca      	b.n	80101f2 <_free_r+0x22>
 801025c:	bd38      	pop	{r3, r4, r5, pc}
 801025e:	bf00      	nop
 8010260:	2000b8b0 	.word	0x2000b8b0

08010264 <_Balloc>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	69c6      	ldr	r6, [r0, #28]
 8010268:	4604      	mov	r4, r0
 801026a:	460d      	mov	r5, r1
 801026c:	b976      	cbnz	r6, 801028c <_Balloc+0x28>
 801026e:	2010      	movs	r0, #16
 8010270:	f7fd fd4e 	bl	800dd10 <malloc>
 8010274:	4602      	mov	r2, r0
 8010276:	61e0      	str	r0, [r4, #28]
 8010278:	b920      	cbnz	r0, 8010284 <_Balloc+0x20>
 801027a:	4b18      	ldr	r3, [pc, #96]	@ (80102dc <_Balloc+0x78>)
 801027c:	4818      	ldr	r0, [pc, #96]	@ (80102e0 <_Balloc+0x7c>)
 801027e:	216b      	movs	r1, #107	@ 0x6b
 8010280:	f7ff f93a 	bl	800f4f8 <__assert_func>
 8010284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010288:	6006      	str	r6, [r0, #0]
 801028a:	60c6      	str	r6, [r0, #12]
 801028c:	69e6      	ldr	r6, [r4, #28]
 801028e:	68f3      	ldr	r3, [r6, #12]
 8010290:	b183      	cbz	r3, 80102b4 <_Balloc+0x50>
 8010292:	69e3      	ldr	r3, [r4, #28]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801029a:	b9b8      	cbnz	r0, 80102cc <_Balloc+0x68>
 801029c:	2101      	movs	r1, #1
 801029e:	fa01 f605 	lsl.w	r6, r1, r5
 80102a2:	1d72      	adds	r2, r6, #5
 80102a4:	0092      	lsls	r2, r2, #2
 80102a6:	4620      	mov	r0, r4
 80102a8:	f001 fdda 	bl	8011e60 <_calloc_r>
 80102ac:	b160      	cbz	r0, 80102c8 <_Balloc+0x64>
 80102ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102b2:	e00e      	b.n	80102d2 <_Balloc+0x6e>
 80102b4:	2221      	movs	r2, #33	@ 0x21
 80102b6:	2104      	movs	r1, #4
 80102b8:	4620      	mov	r0, r4
 80102ba:	f001 fdd1 	bl	8011e60 <_calloc_r>
 80102be:	69e3      	ldr	r3, [r4, #28]
 80102c0:	60f0      	str	r0, [r6, #12]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d1e4      	bne.n	8010292 <_Balloc+0x2e>
 80102c8:	2000      	movs	r0, #0
 80102ca:	bd70      	pop	{r4, r5, r6, pc}
 80102cc:	6802      	ldr	r2, [r0, #0]
 80102ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80102d2:	2300      	movs	r3, #0
 80102d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80102d8:	e7f7      	b.n	80102ca <_Balloc+0x66>
 80102da:	bf00      	nop
 80102dc:	08012d1b 	.word	0x08012d1b
 80102e0:	08012d9b 	.word	0x08012d9b

080102e4 <_Bfree>:
 80102e4:	b570      	push	{r4, r5, r6, lr}
 80102e6:	69c6      	ldr	r6, [r0, #28]
 80102e8:	4605      	mov	r5, r0
 80102ea:	460c      	mov	r4, r1
 80102ec:	b976      	cbnz	r6, 801030c <_Bfree+0x28>
 80102ee:	2010      	movs	r0, #16
 80102f0:	f7fd fd0e 	bl	800dd10 <malloc>
 80102f4:	4602      	mov	r2, r0
 80102f6:	61e8      	str	r0, [r5, #28]
 80102f8:	b920      	cbnz	r0, 8010304 <_Bfree+0x20>
 80102fa:	4b09      	ldr	r3, [pc, #36]	@ (8010320 <_Bfree+0x3c>)
 80102fc:	4809      	ldr	r0, [pc, #36]	@ (8010324 <_Bfree+0x40>)
 80102fe:	218f      	movs	r1, #143	@ 0x8f
 8010300:	f7ff f8fa 	bl	800f4f8 <__assert_func>
 8010304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010308:	6006      	str	r6, [r0, #0]
 801030a:	60c6      	str	r6, [r0, #12]
 801030c:	b13c      	cbz	r4, 801031e <_Bfree+0x3a>
 801030e:	69eb      	ldr	r3, [r5, #28]
 8010310:	6862      	ldr	r2, [r4, #4]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010318:	6021      	str	r1, [r4, #0]
 801031a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801031e:	bd70      	pop	{r4, r5, r6, pc}
 8010320:	08012d1b 	.word	0x08012d1b
 8010324:	08012d9b 	.word	0x08012d9b

08010328 <__multadd>:
 8010328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032c:	690d      	ldr	r5, [r1, #16]
 801032e:	4607      	mov	r7, r0
 8010330:	460c      	mov	r4, r1
 8010332:	461e      	mov	r6, r3
 8010334:	f101 0c14 	add.w	ip, r1, #20
 8010338:	2000      	movs	r0, #0
 801033a:	f8dc 3000 	ldr.w	r3, [ip]
 801033e:	b299      	uxth	r1, r3
 8010340:	fb02 6101 	mla	r1, r2, r1, r6
 8010344:	0c1e      	lsrs	r6, r3, #16
 8010346:	0c0b      	lsrs	r3, r1, #16
 8010348:	fb02 3306 	mla	r3, r2, r6, r3
 801034c:	b289      	uxth	r1, r1
 801034e:	3001      	adds	r0, #1
 8010350:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010354:	4285      	cmp	r5, r0
 8010356:	f84c 1b04 	str.w	r1, [ip], #4
 801035a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801035e:	dcec      	bgt.n	801033a <__multadd+0x12>
 8010360:	b30e      	cbz	r6, 80103a6 <__multadd+0x7e>
 8010362:	68a3      	ldr	r3, [r4, #8]
 8010364:	42ab      	cmp	r3, r5
 8010366:	dc19      	bgt.n	801039c <__multadd+0x74>
 8010368:	6861      	ldr	r1, [r4, #4]
 801036a:	4638      	mov	r0, r7
 801036c:	3101      	adds	r1, #1
 801036e:	f7ff ff79 	bl	8010264 <_Balloc>
 8010372:	4680      	mov	r8, r0
 8010374:	b928      	cbnz	r0, 8010382 <__multadd+0x5a>
 8010376:	4602      	mov	r2, r0
 8010378:	4b0c      	ldr	r3, [pc, #48]	@ (80103ac <__multadd+0x84>)
 801037a:	480d      	ldr	r0, [pc, #52]	@ (80103b0 <__multadd+0x88>)
 801037c:	21ba      	movs	r1, #186	@ 0xba
 801037e:	f7ff f8bb 	bl	800f4f8 <__assert_func>
 8010382:	6922      	ldr	r2, [r4, #16]
 8010384:	3202      	adds	r2, #2
 8010386:	f104 010c 	add.w	r1, r4, #12
 801038a:	0092      	lsls	r2, r2, #2
 801038c:	300c      	adds	r0, #12
 801038e:	f7ff f89e 	bl	800f4ce <memcpy>
 8010392:	4621      	mov	r1, r4
 8010394:	4638      	mov	r0, r7
 8010396:	f7ff ffa5 	bl	80102e4 <_Bfree>
 801039a:	4644      	mov	r4, r8
 801039c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103a0:	3501      	adds	r5, #1
 80103a2:	615e      	str	r6, [r3, #20]
 80103a4:	6125      	str	r5, [r4, #16]
 80103a6:	4620      	mov	r0, r4
 80103a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ac:	08012d8a 	.word	0x08012d8a
 80103b0:	08012d9b 	.word	0x08012d9b

080103b4 <__s2b>:
 80103b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103b8:	460c      	mov	r4, r1
 80103ba:	4615      	mov	r5, r2
 80103bc:	461f      	mov	r7, r3
 80103be:	2209      	movs	r2, #9
 80103c0:	3308      	adds	r3, #8
 80103c2:	4606      	mov	r6, r0
 80103c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80103c8:	2100      	movs	r1, #0
 80103ca:	2201      	movs	r2, #1
 80103cc:	429a      	cmp	r2, r3
 80103ce:	db09      	blt.n	80103e4 <__s2b+0x30>
 80103d0:	4630      	mov	r0, r6
 80103d2:	f7ff ff47 	bl	8010264 <_Balloc>
 80103d6:	b940      	cbnz	r0, 80103ea <__s2b+0x36>
 80103d8:	4602      	mov	r2, r0
 80103da:	4b19      	ldr	r3, [pc, #100]	@ (8010440 <__s2b+0x8c>)
 80103dc:	4819      	ldr	r0, [pc, #100]	@ (8010444 <__s2b+0x90>)
 80103de:	21d3      	movs	r1, #211	@ 0xd3
 80103e0:	f7ff f88a 	bl	800f4f8 <__assert_func>
 80103e4:	0052      	lsls	r2, r2, #1
 80103e6:	3101      	adds	r1, #1
 80103e8:	e7f0      	b.n	80103cc <__s2b+0x18>
 80103ea:	9b08      	ldr	r3, [sp, #32]
 80103ec:	6143      	str	r3, [r0, #20]
 80103ee:	2d09      	cmp	r5, #9
 80103f0:	f04f 0301 	mov.w	r3, #1
 80103f4:	6103      	str	r3, [r0, #16]
 80103f6:	dd16      	ble.n	8010426 <__s2b+0x72>
 80103f8:	f104 0909 	add.w	r9, r4, #9
 80103fc:	46c8      	mov	r8, r9
 80103fe:	442c      	add	r4, r5
 8010400:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010404:	4601      	mov	r1, r0
 8010406:	3b30      	subs	r3, #48	@ 0x30
 8010408:	220a      	movs	r2, #10
 801040a:	4630      	mov	r0, r6
 801040c:	f7ff ff8c 	bl	8010328 <__multadd>
 8010410:	45a0      	cmp	r8, r4
 8010412:	d1f5      	bne.n	8010400 <__s2b+0x4c>
 8010414:	f1a5 0408 	sub.w	r4, r5, #8
 8010418:	444c      	add	r4, r9
 801041a:	1b2d      	subs	r5, r5, r4
 801041c:	1963      	adds	r3, r4, r5
 801041e:	42bb      	cmp	r3, r7
 8010420:	db04      	blt.n	801042c <__s2b+0x78>
 8010422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010426:	340a      	adds	r4, #10
 8010428:	2509      	movs	r5, #9
 801042a:	e7f6      	b.n	801041a <__s2b+0x66>
 801042c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010430:	4601      	mov	r1, r0
 8010432:	3b30      	subs	r3, #48	@ 0x30
 8010434:	220a      	movs	r2, #10
 8010436:	4630      	mov	r0, r6
 8010438:	f7ff ff76 	bl	8010328 <__multadd>
 801043c:	e7ee      	b.n	801041c <__s2b+0x68>
 801043e:	bf00      	nop
 8010440:	08012d8a 	.word	0x08012d8a
 8010444:	08012d9b 	.word	0x08012d9b

08010448 <__hi0bits>:
 8010448:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801044c:	4603      	mov	r3, r0
 801044e:	bf36      	itet	cc
 8010450:	0403      	lslcc	r3, r0, #16
 8010452:	2000      	movcs	r0, #0
 8010454:	2010      	movcc	r0, #16
 8010456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801045a:	bf3c      	itt	cc
 801045c:	021b      	lslcc	r3, r3, #8
 801045e:	3008      	addcc	r0, #8
 8010460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010464:	bf3c      	itt	cc
 8010466:	011b      	lslcc	r3, r3, #4
 8010468:	3004      	addcc	r0, #4
 801046a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801046e:	bf3c      	itt	cc
 8010470:	009b      	lslcc	r3, r3, #2
 8010472:	3002      	addcc	r0, #2
 8010474:	2b00      	cmp	r3, #0
 8010476:	db05      	blt.n	8010484 <__hi0bits+0x3c>
 8010478:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801047c:	f100 0001 	add.w	r0, r0, #1
 8010480:	bf08      	it	eq
 8010482:	2020      	moveq	r0, #32
 8010484:	4770      	bx	lr

08010486 <__lo0bits>:
 8010486:	6803      	ldr	r3, [r0, #0]
 8010488:	4602      	mov	r2, r0
 801048a:	f013 0007 	ands.w	r0, r3, #7
 801048e:	d00b      	beq.n	80104a8 <__lo0bits+0x22>
 8010490:	07d9      	lsls	r1, r3, #31
 8010492:	d421      	bmi.n	80104d8 <__lo0bits+0x52>
 8010494:	0798      	lsls	r0, r3, #30
 8010496:	bf49      	itett	mi
 8010498:	085b      	lsrmi	r3, r3, #1
 801049a:	089b      	lsrpl	r3, r3, #2
 801049c:	2001      	movmi	r0, #1
 801049e:	6013      	strmi	r3, [r2, #0]
 80104a0:	bf5c      	itt	pl
 80104a2:	6013      	strpl	r3, [r2, #0]
 80104a4:	2002      	movpl	r0, #2
 80104a6:	4770      	bx	lr
 80104a8:	b299      	uxth	r1, r3
 80104aa:	b909      	cbnz	r1, 80104b0 <__lo0bits+0x2a>
 80104ac:	0c1b      	lsrs	r3, r3, #16
 80104ae:	2010      	movs	r0, #16
 80104b0:	b2d9      	uxtb	r1, r3
 80104b2:	b909      	cbnz	r1, 80104b8 <__lo0bits+0x32>
 80104b4:	3008      	adds	r0, #8
 80104b6:	0a1b      	lsrs	r3, r3, #8
 80104b8:	0719      	lsls	r1, r3, #28
 80104ba:	bf04      	itt	eq
 80104bc:	091b      	lsreq	r3, r3, #4
 80104be:	3004      	addeq	r0, #4
 80104c0:	0799      	lsls	r1, r3, #30
 80104c2:	bf04      	itt	eq
 80104c4:	089b      	lsreq	r3, r3, #2
 80104c6:	3002      	addeq	r0, #2
 80104c8:	07d9      	lsls	r1, r3, #31
 80104ca:	d403      	bmi.n	80104d4 <__lo0bits+0x4e>
 80104cc:	085b      	lsrs	r3, r3, #1
 80104ce:	f100 0001 	add.w	r0, r0, #1
 80104d2:	d003      	beq.n	80104dc <__lo0bits+0x56>
 80104d4:	6013      	str	r3, [r2, #0]
 80104d6:	4770      	bx	lr
 80104d8:	2000      	movs	r0, #0
 80104da:	4770      	bx	lr
 80104dc:	2020      	movs	r0, #32
 80104de:	4770      	bx	lr

080104e0 <__i2b>:
 80104e0:	b510      	push	{r4, lr}
 80104e2:	460c      	mov	r4, r1
 80104e4:	2101      	movs	r1, #1
 80104e6:	f7ff febd 	bl	8010264 <_Balloc>
 80104ea:	4602      	mov	r2, r0
 80104ec:	b928      	cbnz	r0, 80104fa <__i2b+0x1a>
 80104ee:	4b05      	ldr	r3, [pc, #20]	@ (8010504 <__i2b+0x24>)
 80104f0:	4805      	ldr	r0, [pc, #20]	@ (8010508 <__i2b+0x28>)
 80104f2:	f240 1145 	movw	r1, #325	@ 0x145
 80104f6:	f7fe ffff 	bl	800f4f8 <__assert_func>
 80104fa:	2301      	movs	r3, #1
 80104fc:	6144      	str	r4, [r0, #20]
 80104fe:	6103      	str	r3, [r0, #16]
 8010500:	bd10      	pop	{r4, pc}
 8010502:	bf00      	nop
 8010504:	08012d8a 	.word	0x08012d8a
 8010508:	08012d9b 	.word	0x08012d9b

0801050c <__multiply>:
 801050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010510:	4614      	mov	r4, r2
 8010512:	690a      	ldr	r2, [r1, #16]
 8010514:	6923      	ldr	r3, [r4, #16]
 8010516:	429a      	cmp	r2, r3
 8010518:	bfa8      	it	ge
 801051a:	4623      	movge	r3, r4
 801051c:	460f      	mov	r7, r1
 801051e:	bfa4      	itt	ge
 8010520:	460c      	movge	r4, r1
 8010522:	461f      	movge	r7, r3
 8010524:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010528:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801052c:	68a3      	ldr	r3, [r4, #8]
 801052e:	6861      	ldr	r1, [r4, #4]
 8010530:	eb0a 0609 	add.w	r6, sl, r9
 8010534:	42b3      	cmp	r3, r6
 8010536:	b085      	sub	sp, #20
 8010538:	bfb8      	it	lt
 801053a:	3101      	addlt	r1, #1
 801053c:	f7ff fe92 	bl	8010264 <_Balloc>
 8010540:	b930      	cbnz	r0, 8010550 <__multiply+0x44>
 8010542:	4602      	mov	r2, r0
 8010544:	4b44      	ldr	r3, [pc, #272]	@ (8010658 <__multiply+0x14c>)
 8010546:	4845      	ldr	r0, [pc, #276]	@ (801065c <__multiply+0x150>)
 8010548:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801054c:	f7fe ffd4 	bl	800f4f8 <__assert_func>
 8010550:	f100 0514 	add.w	r5, r0, #20
 8010554:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010558:	462b      	mov	r3, r5
 801055a:	2200      	movs	r2, #0
 801055c:	4543      	cmp	r3, r8
 801055e:	d321      	bcc.n	80105a4 <__multiply+0x98>
 8010560:	f107 0114 	add.w	r1, r7, #20
 8010564:	f104 0214 	add.w	r2, r4, #20
 8010568:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801056c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010570:	9302      	str	r3, [sp, #8]
 8010572:	1b13      	subs	r3, r2, r4
 8010574:	3b15      	subs	r3, #21
 8010576:	f023 0303 	bic.w	r3, r3, #3
 801057a:	3304      	adds	r3, #4
 801057c:	f104 0715 	add.w	r7, r4, #21
 8010580:	42ba      	cmp	r2, r7
 8010582:	bf38      	it	cc
 8010584:	2304      	movcc	r3, #4
 8010586:	9301      	str	r3, [sp, #4]
 8010588:	9b02      	ldr	r3, [sp, #8]
 801058a:	9103      	str	r1, [sp, #12]
 801058c:	428b      	cmp	r3, r1
 801058e:	d80c      	bhi.n	80105aa <__multiply+0x9e>
 8010590:	2e00      	cmp	r6, #0
 8010592:	dd03      	ble.n	801059c <__multiply+0x90>
 8010594:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010598:	2b00      	cmp	r3, #0
 801059a:	d05b      	beq.n	8010654 <__multiply+0x148>
 801059c:	6106      	str	r6, [r0, #16]
 801059e:	b005      	add	sp, #20
 80105a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a4:	f843 2b04 	str.w	r2, [r3], #4
 80105a8:	e7d8      	b.n	801055c <__multiply+0x50>
 80105aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80105ae:	f1ba 0f00 	cmp.w	sl, #0
 80105b2:	d024      	beq.n	80105fe <__multiply+0xf2>
 80105b4:	f104 0e14 	add.w	lr, r4, #20
 80105b8:	46a9      	mov	r9, r5
 80105ba:	f04f 0c00 	mov.w	ip, #0
 80105be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80105c2:	f8d9 3000 	ldr.w	r3, [r9]
 80105c6:	fa1f fb87 	uxth.w	fp, r7
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80105d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80105d4:	f8d9 7000 	ldr.w	r7, [r9]
 80105d8:	4463      	add	r3, ip
 80105da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80105de:	fb0a c70b 	mla	r7, sl, fp, ip
 80105e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80105ec:	4572      	cmp	r2, lr
 80105ee:	f849 3b04 	str.w	r3, [r9], #4
 80105f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80105f6:	d8e2      	bhi.n	80105be <__multiply+0xb2>
 80105f8:	9b01      	ldr	r3, [sp, #4]
 80105fa:	f845 c003 	str.w	ip, [r5, r3]
 80105fe:	9b03      	ldr	r3, [sp, #12]
 8010600:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010604:	3104      	adds	r1, #4
 8010606:	f1b9 0f00 	cmp.w	r9, #0
 801060a:	d021      	beq.n	8010650 <__multiply+0x144>
 801060c:	682b      	ldr	r3, [r5, #0]
 801060e:	f104 0c14 	add.w	ip, r4, #20
 8010612:	46ae      	mov	lr, r5
 8010614:	f04f 0a00 	mov.w	sl, #0
 8010618:	f8bc b000 	ldrh.w	fp, [ip]
 801061c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010620:	fb09 770b 	mla	r7, r9, fp, r7
 8010624:	4457      	add	r7, sl
 8010626:	b29b      	uxth	r3, r3
 8010628:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801062c:	f84e 3b04 	str.w	r3, [lr], #4
 8010630:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010634:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010638:	f8be 3000 	ldrh.w	r3, [lr]
 801063c:	fb09 330a 	mla	r3, r9, sl, r3
 8010640:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010644:	4562      	cmp	r2, ip
 8010646:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801064a:	d8e5      	bhi.n	8010618 <__multiply+0x10c>
 801064c:	9f01      	ldr	r7, [sp, #4]
 801064e:	51eb      	str	r3, [r5, r7]
 8010650:	3504      	adds	r5, #4
 8010652:	e799      	b.n	8010588 <__multiply+0x7c>
 8010654:	3e01      	subs	r6, #1
 8010656:	e79b      	b.n	8010590 <__multiply+0x84>
 8010658:	08012d8a 	.word	0x08012d8a
 801065c:	08012d9b 	.word	0x08012d9b

08010660 <__pow5mult>:
 8010660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010664:	4615      	mov	r5, r2
 8010666:	f012 0203 	ands.w	r2, r2, #3
 801066a:	4607      	mov	r7, r0
 801066c:	460e      	mov	r6, r1
 801066e:	d007      	beq.n	8010680 <__pow5mult+0x20>
 8010670:	4c25      	ldr	r4, [pc, #148]	@ (8010708 <__pow5mult+0xa8>)
 8010672:	3a01      	subs	r2, #1
 8010674:	2300      	movs	r3, #0
 8010676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801067a:	f7ff fe55 	bl	8010328 <__multadd>
 801067e:	4606      	mov	r6, r0
 8010680:	10ad      	asrs	r5, r5, #2
 8010682:	d03d      	beq.n	8010700 <__pow5mult+0xa0>
 8010684:	69fc      	ldr	r4, [r7, #28]
 8010686:	b97c      	cbnz	r4, 80106a8 <__pow5mult+0x48>
 8010688:	2010      	movs	r0, #16
 801068a:	f7fd fb41 	bl	800dd10 <malloc>
 801068e:	4602      	mov	r2, r0
 8010690:	61f8      	str	r0, [r7, #28]
 8010692:	b928      	cbnz	r0, 80106a0 <__pow5mult+0x40>
 8010694:	4b1d      	ldr	r3, [pc, #116]	@ (801070c <__pow5mult+0xac>)
 8010696:	481e      	ldr	r0, [pc, #120]	@ (8010710 <__pow5mult+0xb0>)
 8010698:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801069c:	f7fe ff2c 	bl	800f4f8 <__assert_func>
 80106a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106a4:	6004      	str	r4, [r0, #0]
 80106a6:	60c4      	str	r4, [r0, #12]
 80106a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80106ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106b0:	b94c      	cbnz	r4, 80106c6 <__pow5mult+0x66>
 80106b2:	f240 2171 	movw	r1, #625	@ 0x271
 80106b6:	4638      	mov	r0, r7
 80106b8:	f7ff ff12 	bl	80104e0 <__i2b>
 80106bc:	2300      	movs	r3, #0
 80106be:	f8c8 0008 	str.w	r0, [r8, #8]
 80106c2:	4604      	mov	r4, r0
 80106c4:	6003      	str	r3, [r0, #0]
 80106c6:	f04f 0900 	mov.w	r9, #0
 80106ca:	07eb      	lsls	r3, r5, #31
 80106cc:	d50a      	bpl.n	80106e4 <__pow5mult+0x84>
 80106ce:	4631      	mov	r1, r6
 80106d0:	4622      	mov	r2, r4
 80106d2:	4638      	mov	r0, r7
 80106d4:	f7ff ff1a 	bl	801050c <__multiply>
 80106d8:	4631      	mov	r1, r6
 80106da:	4680      	mov	r8, r0
 80106dc:	4638      	mov	r0, r7
 80106de:	f7ff fe01 	bl	80102e4 <_Bfree>
 80106e2:	4646      	mov	r6, r8
 80106e4:	106d      	asrs	r5, r5, #1
 80106e6:	d00b      	beq.n	8010700 <__pow5mult+0xa0>
 80106e8:	6820      	ldr	r0, [r4, #0]
 80106ea:	b938      	cbnz	r0, 80106fc <__pow5mult+0x9c>
 80106ec:	4622      	mov	r2, r4
 80106ee:	4621      	mov	r1, r4
 80106f0:	4638      	mov	r0, r7
 80106f2:	f7ff ff0b 	bl	801050c <__multiply>
 80106f6:	6020      	str	r0, [r4, #0]
 80106f8:	f8c0 9000 	str.w	r9, [r0]
 80106fc:	4604      	mov	r4, r0
 80106fe:	e7e4      	b.n	80106ca <__pow5mult+0x6a>
 8010700:	4630      	mov	r0, r6
 8010702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010706:	bf00      	nop
 8010708:	08012df4 	.word	0x08012df4
 801070c:	08012d1b 	.word	0x08012d1b
 8010710:	08012d9b 	.word	0x08012d9b

08010714 <__lshift>:
 8010714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010718:	460c      	mov	r4, r1
 801071a:	6849      	ldr	r1, [r1, #4]
 801071c:	6923      	ldr	r3, [r4, #16]
 801071e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010722:	68a3      	ldr	r3, [r4, #8]
 8010724:	4607      	mov	r7, r0
 8010726:	4691      	mov	r9, r2
 8010728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801072c:	f108 0601 	add.w	r6, r8, #1
 8010730:	42b3      	cmp	r3, r6
 8010732:	db0b      	blt.n	801074c <__lshift+0x38>
 8010734:	4638      	mov	r0, r7
 8010736:	f7ff fd95 	bl	8010264 <_Balloc>
 801073a:	4605      	mov	r5, r0
 801073c:	b948      	cbnz	r0, 8010752 <__lshift+0x3e>
 801073e:	4602      	mov	r2, r0
 8010740:	4b28      	ldr	r3, [pc, #160]	@ (80107e4 <__lshift+0xd0>)
 8010742:	4829      	ldr	r0, [pc, #164]	@ (80107e8 <__lshift+0xd4>)
 8010744:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010748:	f7fe fed6 	bl	800f4f8 <__assert_func>
 801074c:	3101      	adds	r1, #1
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	e7ee      	b.n	8010730 <__lshift+0x1c>
 8010752:	2300      	movs	r3, #0
 8010754:	f100 0114 	add.w	r1, r0, #20
 8010758:	f100 0210 	add.w	r2, r0, #16
 801075c:	4618      	mov	r0, r3
 801075e:	4553      	cmp	r3, sl
 8010760:	db33      	blt.n	80107ca <__lshift+0xb6>
 8010762:	6920      	ldr	r0, [r4, #16]
 8010764:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010768:	f104 0314 	add.w	r3, r4, #20
 801076c:	f019 091f 	ands.w	r9, r9, #31
 8010770:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010774:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010778:	d02b      	beq.n	80107d2 <__lshift+0xbe>
 801077a:	f1c9 0e20 	rsb	lr, r9, #32
 801077e:	468a      	mov	sl, r1
 8010780:	2200      	movs	r2, #0
 8010782:	6818      	ldr	r0, [r3, #0]
 8010784:	fa00 f009 	lsl.w	r0, r0, r9
 8010788:	4310      	orrs	r0, r2
 801078a:	f84a 0b04 	str.w	r0, [sl], #4
 801078e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010792:	459c      	cmp	ip, r3
 8010794:	fa22 f20e 	lsr.w	r2, r2, lr
 8010798:	d8f3      	bhi.n	8010782 <__lshift+0x6e>
 801079a:	ebac 0304 	sub.w	r3, ip, r4
 801079e:	3b15      	subs	r3, #21
 80107a0:	f023 0303 	bic.w	r3, r3, #3
 80107a4:	3304      	adds	r3, #4
 80107a6:	f104 0015 	add.w	r0, r4, #21
 80107aa:	4584      	cmp	ip, r0
 80107ac:	bf38      	it	cc
 80107ae:	2304      	movcc	r3, #4
 80107b0:	50ca      	str	r2, [r1, r3]
 80107b2:	b10a      	cbz	r2, 80107b8 <__lshift+0xa4>
 80107b4:	f108 0602 	add.w	r6, r8, #2
 80107b8:	3e01      	subs	r6, #1
 80107ba:	4638      	mov	r0, r7
 80107bc:	612e      	str	r6, [r5, #16]
 80107be:	4621      	mov	r1, r4
 80107c0:	f7ff fd90 	bl	80102e4 <_Bfree>
 80107c4:	4628      	mov	r0, r5
 80107c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80107ce:	3301      	adds	r3, #1
 80107d0:	e7c5      	b.n	801075e <__lshift+0x4a>
 80107d2:	3904      	subs	r1, #4
 80107d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80107d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80107dc:	459c      	cmp	ip, r3
 80107de:	d8f9      	bhi.n	80107d4 <__lshift+0xc0>
 80107e0:	e7ea      	b.n	80107b8 <__lshift+0xa4>
 80107e2:	bf00      	nop
 80107e4:	08012d8a 	.word	0x08012d8a
 80107e8:	08012d9b 	.word	0x08012d9b

080107ec <__mcmp>:
 80107ec:	690a      	ldr	r2, [r1, #16]
 80107ee:	4603      	mov	r3, r0
 80107f0:	6900      	ldr	r0, [r0, #16]
 80107f2:	1a80      	subs	r0, r0, r2
 80107f4:	b530      	push	{r4, r5, lr}
 80107f6:	d10e      	bne.n	8010816 <__mcmp+0x2a>
 80107f8:	3314      	adds	r3, #20
 80107fa:	3114      	adds	r1, #20
 80107fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010800:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010804:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010808:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801080c:	4295      	cmp	r5, r2
 801080e:	d003      	beq.n	8010818 <__mcmp+0x2c>
 8010810:	d205      	bcs.n	801081e <__mcmp+0x32>
 8010812:	f04f 30ff 	mov.w	r0, #4294967295
 8010816:	bd30      	pop	{r4, r5, pc}
 8010818:	42a3      	cmp	r3, r4
 801081a:	d3f3      	bcc.n	8010804 <__mcmp+0x18>
 801081c:	e7fb      	b.n	8010816 <__mcmp+0x2a>
 801081e:	2001      	movs	r0, #1
 8010820:	e7f9      	b.n	8010816 <__mcmp+0x2a>
	...

08010824 <__mdiff>:
 8010824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010828:	4689      	mov	r9, r1
 801082a:	4606      	mov	r6, r0
 801082c:	4611      	mov	r1, r2
 801082e:	4648      	mov	r0, r9
 8010830:	4614      	mov	r4, r2
 8010832:	f7ff ffdb 	bl	80107ec <__mcmp>
 8010836:	1e05      	subs	r5, r0, #0
 8010838:	d112      	bne.n	8010860 <__mdiff+0x3c>
 801083a:	4629      	mov	r1, r5
 801083c:	4630      	mov	r0, r6
 801083e:	f7ff fd11 	bl	8010264 <_Balloc>
 8010842:	4602      	mov	r2, r0
 8010844:	b928      	cbnz	r0, 8010852 <__mdiff+0x2e>
 8010846:	4b3f      	ldr	r3, [pc, #252]	@ (8010944 <__mdiff+0x120>)
 8010848:	f240 2137 	movw	r1, #567	@ 0x237
 801084c:	483e      	ldr	r0, [pc, #248]	@ (8010948 <__mdiff+0x124>)
 801084e:	f7fe fe53 	bl	800f4f8 <__assert_func>
 8010852:	2301      	movs	r3, #1
 8010854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010858:	4610      	mov	r0, r2
 801085a:	b003      	add	sp, #12
 801085c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010860:	bfbc      	itt	lt
 8010862:	464b      	movlt	r3, r9
 8010864:	46a1      	movlt	r9, r4
 8010866:	4630      	mov	r0, r6
 8010868:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801086c:	bfba      	itte	lt
 801086e:	461c      	movlt	r4, r3
 8010870:	2501      	movlt	r5, #1
 8010872:	2500      	movge	r5, #0
 8010874:	f7ff fcf6 	bl	8010264 <_Balloc>
 8010878:	4602      	mov	r2, r0
 801087a:	b918      	cbnz	r0, 8010884 <__mdiff+0x60>
 801087c:	4b31      	ldr	r3, [pc, #196]	@ (8010944 <__mdiff+0x120>)
 801087e:	f240 2145 	movw	r1, #581	@ 0x245
 8010882:	e7e3      	b.n	801084c <__mdiff+0x28>
 8010884:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010888:	6926      	ldr	r6, [r4, #16]
 801088a:	60c5      	str	r5, [r0, #12]
 801088c:	f109 0310 	add.w	r3, r9, #16
 8010890:	f109 0514 	add.w	r5, r9, #20
 8010894:	f104 0e14 	add.w	lr, r4, #20
 8010898:	f100 0b14 	add.w	fp, r0, #20
 801089c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80108a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	46d9      	mov	r9, fp
 80108a8:	f04f 0c00 	mov.w	ip, #0
 80108ac:	9b01      	ldr	r3, [sp, #4]
 80108ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80108b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80108b6:	9301      	str	r3, [sp, #4]
 80108b8:	fa1f f38a 	uxth.w	r3, sl
 80108bc:	4619      	mov	r1, r3
 80108be:	b283      	uxth	r3, r0
 80108c0:	1acb      	subs	r3, r1, r3
 80108c2:	0c00      	lsrs	r0, r0, #16
 80108c4:	4463      	add	r3, ip
 80108c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80108ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80108d4:	4576      	cmp	r6, lr
 80108d6:	f849 3b04 	str.w	r3, [r9], #4
 80108da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80108de:	d8e5      	bhi.n	80108ac <__mdiff+0x88>
 80108e0:	1b33      	subs	r3, r6, r4
 80108e2:	3b15      	subs	r3, #21
 80108e4:	f023 0303 	bic.w	r3, r3, #3
 80108e8:	3415      	adds	r4, #21
 80108ea:	3304      	adds	r3, #4
 80108ec:	42a6      	cmp	r6, r4
 80108ee:	bf38      	it	cc
 80108f0:	2304      	movcc	r3, #4
 80108f2:	441d      	add	r5, r3
 80108f4:	445b      	add	r3, fp
 80108f6:	461e      	mov	r6, r3
 80108f8:	462c      	mov	r4, r5
 80108fa:	4544      	cmp	r4, r8
 80108fc:	d30e      	bcc.n	801091c <__mdiff+0xf8>
 80108fe:	f108 0103 	add.w	r1, r8, #3
 8010902:	1b49      	subs	r1, r1, r5
 8010904:	f021 0103 	bic.w	r1, r1, #3
 8010908:	3d03      	subs	r5, #3
 801090a:	45a8      	cmp	r8, r5
 801090c:	bf38      	it	cc
 801090e:	2100      	movcc	r1, #0
 8010910:	440b      	add	r3, r1
 8010912:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010916:	b191      	cbz	r1, 801093e <__mdiff+0x11a>
 8010918:	6117      	str	r7, [r2, #16]
 801091a:	e79d      	b.n	8010858 <__mdiff+0x34>
 801091c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010920:	46e6      	mov	lr, ip
 8010922:	0c08      	lsrs	r0, r1, #16
 8010924:	fa1c fc81 	uxtah	ip, ip, r1
 8010928:	4471      	add	r1, lr
 801092a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801092e:	b289      	uxth	r1, r1
 8010930:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010934:	f846 1b04 	str.w	r1, [r6], #4
 8010938:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801093c:	e7dd      	b.n	80108fa <__mdiff+0xd6>
 801093e:	3f01      	subs	r7, #1
 8010940:	e7e7      	b.n	8010912 <__mdiff+0xee>
 8010942:	bf00      	nop
 8010944:	08012d8a 	.word	0x08012d8a
 8010948:	08012d9b 	.word	0x08012d9b

0801094c <__ulp>:
 801094c:	b082      	sub	sp, #8
 801094e:	ed8d 0b00 	vstr	d0, [sp]
 8010952:	9a01      	ldr	r2, [sp, #4]
 8010954:	4b0f      	ldr	r3, [pc, #60]	@ (8010994 <__ulp+0x48>)
 8010956:	4013      	ands	r3, r2
 8010958:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801095c:	2b00      	cmp	r3, #0
 801095e:	dc08      	bgt.n	8010972 <__ulp+0x26>
 8010960:	425b      	negs	r3, r3
 8010962:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010966:	ea4f 5223 	mov.w	r2, r3, asr #20
 801096a:	da04      	bge.n	8010976 <__ulp+0x2a>
 801096c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010970:	4113      	asrs	r3, r2
 8010972:	2200      	movs	r2, #0
 8010974:	e008      	b.n	8010988 <__ulp+0x3c>
 8010976:	f1a2 0314 	sub.w	r3, r2, #20
 801097a:	2b1e      	cmp	r3, #30
 801097c:	bfda      	itte	le
 801097e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010982:	40da      	lsrle	r2, r3
 8010984:	2201      	movgt	r2, #1
 8010986:	2300      	movs	r3, #0
 8010988:	4619      	mov	r1, r3
 801098a:	4610      	mov	r0, r2
 801098c:	ec41 0b10 	vmov	d0, r0, r1
 8010990:	b002      	add	sp, #8
 8010992:	4770      	bx	lr
 8010994:	7ff00000 	.word	0x7ff00000

08010998 <__b2d>:
 8010998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801099c:	6906      	ldr	r6, [r0, #16]
 801099e:	f100 0814 	add.w	r8, r0, #20
 80109a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80109a6:	1f37      	subs	r7, r6, #4
 80109a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80109ac:	4610      	mov	r0, r2
 80109ae:	f7ff fd4b 	bl	8010448 <__hi0bits>
 80109b2:	f1c0 0320 	rsb	r3, r0, #32
 80109b6:	280a      	cmp	r0, #10
 80109b8:	600b      	str	r3, [r1, #0]
 80109ba:	491b      	ldr	r1, [pc, #108]	@ (8010a28 <__b2d+0x90>)
 80109bc:	dc15      	bgt.n	80109ea <__b2d+0x52>
 80109be:	f1c0 0c0b 	rsb	ip, r0, #11
 80109c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80109c6:	45b8      	cmp	r8, r7
 80109c8:	ea43 0501 	orr.w	r5, r3, r1
 80109cc:	bf34      	ite	cc
 80109ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80109d2:	2300      	movcs	r3, #0
 80109d4:	3015      	adds	r0, #21
 80109d6:	fa02 f000 	lsl.w	r0, r2, r0
 80109da:	fa23 f30c 	lsr.w	r3, r3, ip
 80109de:	4303      	orrs	r3, r0
 80109e0:	461c      	mov	r4, r3
 80109e2:	ec45 4b10 	vmov	d0, r4, r5
 80109e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ea:	45b8      	cmp	r8, r7
 80109ec:	bf3a      	itte	cc
 80109ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80109f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80109f6:	2300      	movcs	r3, #0
 80109f8:	380b      	subs	r0, #11
 80109fa:	d012      	beq.n	8010a22 <__b2d+0x8a>
 80109fc:	f1c0 0120 	rsb	r1, r0, #32
 8010a00:	fa23 f401 	lsr.w	r4, r3, r1
 8010a04:	4082      	lsls	r2, r0
 8010a06:	4322      	orrs	r2, r4
 8010a08:	4547      	cmp	r7, r8
 8010a0a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010a0e:	bf8c      	ite	hi
 8010a10:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010a14:	2200      	movls	r2, #0
 8010a16:	4083      	lsls	r3, r0
 8010a18:	40ca      	lsrs	r2, r1
 8010a1a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	e7de      	b.n	80109e0 <__b2d+0x48>
 8010a22:	ea42 0501 	orr.w	r5, r2, r1
 8010a26:	e7db      	b.n	80109e0 <__b2d+0x48>
 8010a28:	3ff00000 	.word	0x3ff00000

08010a2c <__d2b>:
 8010a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a30:	460f      	mov	r7, r1
 8010a32:	2101      	movs	r1, #1
 8010a34:	ec59 8b10 	vmov	r8, r9, d0
 8010a38:	4616      	mov	r6, r2
 8010a3a:	f7ff fc13 	bl	8010264 <_Balloc>
 8010a3e:	4604      	mov	r4, r0
 8010a40:	b930      	cbnz	r0, 8010a50 <__d2b+0x24>
 8010a42:	4602      	mov	r2, r0
 8010a44:	4b23      	ldr	r3, [pc, #140]	@ (8010ad4 <__d2b+0xa8>)
 8010a46:	4824      	ldr	r0, [pc, #144]	@ (8010ad8 <__d2b+0xac>)
 8010a48:	f240 310f 	movw	r1, #783	@ 0x30f
 8010a4c:	f7fe fd54 	bl	800f4f8 <__assert_func>
 8010a50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010a54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a58:	b10d      	cbz	r5, 8010a5e <__d2b+0x32>
 8010a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a5e:	9301      	str	r3, [sp, #4]
 8010a60:	f1b8 0300 	subs.w	r3, r8, #0
 8010a64:	d023      	beq.n	8010aae <__d2b+0x82>
 8010a66:	4668      	mov	r0, sp
 8010a68:	9300      	str	r3, [sp, #0]
 8010a6a:	f7ff fd0c 	bl	8010486 <__lo0bits>
 8010a6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010a72:	b1d0      	cbz	r0, 8010aaa <__d2b+0x7e>
 8010a74:	f1c0 0320 	rsb	r3, r0, #32
 8010a78:	fa02 f303 	lsl.w	r3, r2, r3
 8010a7c:	430b      	orrs	r3, r1
 8010a7e:	40c2      	lsrs	r2, r0
 8010a80:	6163      	str	r3, [r4, #20]
 8010a82:	9201      	str	r2, [sp, #4]
 8010a84:	9b01      	ldr	r3, [sp, #4]
 8010a86:	61a3      	str	r3, [r4, #24]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	bf0c      	ite	eq
 8010a8c:	2201      	moveq	r2, #1
 8010a8e:	2202      	movne	r2, #2
 8010a90:	6122      	str	r2, [r4, #16]
 8010a92:	b1a5      	cbz	r5, 8010abe <__d2b+0x92>
 8010a94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010a98:	4405      	add	r5, r0
 8010a9a:	603d      	str	r5, [r7, #0]
 8010a9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010aa0:	6030      	str	r0, [r6, #0]
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	b003      	add	sp, #12
 8010aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aaa:	6161      	str	r1, [r4, #20]
 8010aac:	e7ea      	b.n	8010a84 <__d2b+0x58>
 8010aae:	a801      	add	r0, sp, #4
 8010ab0:	f7ff fce9 	bl	8010486 <__lo0bits>
 8010ab4:	9b01      	ldr	r3, [sp, #4]
 8010ab6:	6163      	str	r3, [r4, #20]
 8010ab8:	3020      	adds	r0, #32
 8010aba:	2201      	movs	r2, #1
 8010abc:	e7e8      	b.n	8010a90 <__d2b+0x64>
 8010abe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ac2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010ac6:	6038      	str	r0, [r7, #0]
 8010ac8:	6918      	ldr	r0, [r3, #16]
 8010aca:	f7ff fcbd 	bl	8010448 <__hi0bits>
 8010ace:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010ad2:	e7e5      	b.n	8010aa0 <__d2b+0x74>
 8010ad4:	08012d8a 	.word	0x08012d8a
 8010ad8:	08012d9b 	.word	0x08012d9b

08010adc <__ratio>:
 8010adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae0:	b085      	sub	sp, #20
 8010ae2:	e9cd 1000 	strd	r1, r0, [sp]
 8010ae6:	a902      	add	r1, sp, #8
 8010ae8:	f7ff ff56 	bl	8010998 <__b2d>
 8010aec:	9800      	ldr	r0, [sp, #0]
 8010aee:	a903      	add	r1, sp, #12
 8010af0:	ec55 4b10 	vmov	r4, r5, d0
 8010af4:	f7ff ff50 	bl	8010998 <__b2d>
 8010af8:	9b01      	ldr	r3, [sp, #4]
 8010afa:	6919      	ldr	r1, [r3, #16]
 8010afc:	9b00      	ldr	r3, [sp, #0]
 8010afe:	691b      	ldr	r3, [r3, #16]
 8010b00:	1ac9      	subs	r1, r1, r3
 8010b02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010b06:	1a9b      	subs	r3, r3, r2
 8010b08:	ec5b ab10 	vmov	sl, fp, d0
 8010b0c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	bfce      	itee	gt
 8010b14:	462a      	movgt	r2, r5
 8010b16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010b1a:	465a      	movle	r2, fp
 8010b1c:	462f      	mov	r7, r5
 8010b1e:	46d9      	mov	r9, fp
 8010b20:	bfcc      	ite	gt
 8010b22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010b26:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010b2a:	464b      	mov	r3, r9
 8010b2c:	4652      	mov	r2, sl
 8010b2e:	4620      	mov	r0, r4
 8010b30:	4639      	mov	r1, r7
 8010b32:	f7ef fe8b 	bl	800084c <__aeabi_ddiv>
 8010b36:	ec41 0b10 	vmov	d0, r0, r1
 8010b3a:	b005      	add	sp, #20
 8010b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b40 <__copybits>:
 8010b40:	3901      	subs	r1, #1
 8010b42:	b570      	push	{r4, r5, r6, lr}
 8010b44:	1149      	asrs	r1, r1, #5
 8010b46:	6914      	ldr	r4, [r2, #16]
 8010b48:	3101      	adds	r1, #1
 8010b4a:	f102 0314 	add.w	r3, r2, #20
 8010b4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010b52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010b56:	1f05      	subs	r5, r0, #4
 8010b58:	42a3      	cmp	r3, r4
 8010b5a:	d30c      	bcc.n	8010b76 <__copybits+0x36>
 8010b5c:	1aa3      	subs	r3, r4, r2
 8010b5e:	3b11      	subs	r3, #17
 8010b60:	f023 0303 	bic.w	r3, r3, #3
 8010b64:	3211      	adds	r2, #17
 8010b66:	42a2      	cmp	r2, r4
 8010b68:	bf88      	it	hi
 8010b6a:	2300      	movhi	r3, #0
 8010b6c:	4418      	add	r0, r3
 8010b6e:	2300      	movs	r3, #0
 8010b70:	4288      	cmp	r0, r1
 8010b72:	d305      	bcc.n	8010b80 <__copybits+0x40>
 8010b74:	bd70      	pop	{r4, r5, r6, pc}
 8010b76:	f853 6b04 	ldr.w	r6, [r3], #4
 8010b7a:	f845 6f04 	str.w	r6, [r5, #4]!
 8010b7e:	e7eb      	b.n	8010b58 <__copybits+0x18>
 8010b80:	f840 3b04 	str.w	r3, [r0], #4
 8010b84:	e7f4      	b.n	8010b70 <__copybits+0x30>

08010b86 <__any_on>:
 8010b86:	f100 0214 	add.w	r2, r0, #20
 8010b8a:	6900      	ldr	r0, [r0, #16]
 8010b8c:	114b      	asrs	r3, r1, #5
 8010b8e:	4298      	cmp	r0, r3
 8010b90:	b510      	push	{r4, lr}
 8010b92:	db11      	blt.n	8010bb8 <__any_on+0x32>
 8010b94:	dd0a      	ble.n	8010bac <__any_on+0x26>
 8010b96:	f011 011f 	ands.w	r1, r1, #31
 8010b9a:	d007      	beq.n	8010bac <__any_on+0x26>
 8010b9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010ba0:	fa24 f001 	lsr.w	r0, r4, r1
 8010ba4:	fa00 f101 	lsl.w	r1, r0, r1
 8010ba8:	428c      	cmp	r4, r1
 8010baa:	d10b      	bne.n	8010bc4 <__any_on+0x3e>
 8010bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d803      	bhi.n	8010bbc <__any_on+0x36>
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	bd10      	pop	{r4, pc}
 8010bb8:	4603      	mov	r3, r0
 8010bba:	e7f7      	b.n	8010bac <__any_on+0x26>
 8010bbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010bc0:	2900      	cmp	r1, #0
 8010bc2:	d0f5      	beq.n	8010bb0 <__any_on+0x2a>
 8010bc4:	2001      	movs	r0, #1
 8010bc6:	e7f6      	b.n	8010bb6 <__any_on+0x30>

08010bc8 <_malloc_usable_size_r>:
 8010bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bcc:	1f18      	subs	r0, r3, #4
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	bfbc      	itt	lt
 8010bd2:	580b      	ldrlt	r3, [r1, r0]
 8010bd4:	18c0      	addlt	r0, r0, r3
 8010bd6:	4770      	bx	lr

08010bd8 <sulp>:
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	4604      	mov	r4, r0
 8010bdc:	460d      	mov	r5, r1
 8010bde:	ec45 4b10 	vmov	d0, r4, r5
 8010be2:	4616      	mov	r6, r2
 8010be4:	f7ff feb2 	bl	801094c <__ulp>
 8010be8:	ec51 0b10 	vmov	r0, r1, d0
 8010bec:	b17e      	cbz	r6, 8010c0e <sulp+0x36>
 8010bee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010bf2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	dd09      	ble.n	8010c0e <sulp+0x36>
 8010bfa:	051b      	lsls	r3, r3, #20
 8010bfc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010c00:	2400      	movs	r4, #0
 8010c02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010c06:	4622      	mov	r2, r4
 8010c08:	462b      	mov	r3, r5
 8010c0a:	f7ef fcf5 	bl	80005f8 <__aeabi_dmul>
 8010c0e:	ec41 0b10 	vmov	d0, r0, r1
 8010c12:	bd70      	pop	{r4, r5, r6, pc}
 8010c14:	0000      	movs	r0, r0
	...

08010c18 <_strtod_l>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	b09f      	sub	sp, #124	@ 0x7c
 8010c1e:	460c      	mov	r4, r1
 8010c20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010c22:	2200      	movs	r2, #0
 8010c24:	921a      	str	r2, [sp, #104]	@ 0x68
 8010c26:	9005      	str	r0, [sp, #20]
 8010c28:	f04f 0a00 	mov.w	sl, #0
 8010c2c:	f04f 0b00 	mov.w	fp, #0
 8010c30:	460a      	mov	r2, r1
 8010c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c34:	7811      	ldrb	r1, [r2, #0]
 8010c36:	292b      	cmp	r1, #43	@ 0x2b
 8010c38:	d04a      	beq.n	8010cd0 <_strtod_l+0xb8>
 8010c3a:	d838      	bhi.n	8010cae <_strtod_l+0x96>
 8010c3c:	290d      	cmp	r1, #13
 8010c3e:	d832      	bhi.n	8010ca6 <_strtod_l+0x8e>
 8010c40:	2908      	cmp	r1, #8
 8010c42:	d832      	bhi.n	8010caa <_strtod_l+0x92>
 8010c44:	2900      	cmp	r1, #0
 8010c46:	d03b      	beq.n	8010cc0 <_strtod_l+0xa8>
 8010c48:	2200      	movs	r2, #0
 8010c4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010c4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010c4e:	782a      	ldrb	r2, [r5, #0]
 8010c50:	2a30      	cmp	r2, #48	@ 0x30
 8010c52:	f040 80b3 	bne.w	8010dbc <_strtod_l+0x1a4>
 8010c56:	786a      	ldrb	r2, [r5, #1]
 8010c58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010c5c:	2a58      	cmp	r2, #88	@ 0x58
 8010c5e:	d16e      	bne.n	8010d3e <_strtod_l+0x126>
 8010c60:	9302      	str	r3, [sp, #8]
 8010c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c64:	9301      	str	r3, [sp, #4]
 8010c66:	ab1a      	add	r3, sp, #104	@ 0x68
 8010c68:	9300      	str	r3, [sp, #0]
 8010c6a:	4a8e      	ldr	r2, [pc, #568]	@ (8010ea4 <_strtod_l+0x28c>)
 8010c6c:	9805      	ldr	r0, [sp, #20]
 8010c6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010c70:	a919      	add	r1, sp, #100	@ 0x64
 8010c72:	f001 f971 	bl	8011f58 <__gethex>
 8010c76:	f010 060f 	ands.w	r6, r0, #15
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	d005      	beq.n	8010c8a <_strtod_l+0x72>
 8010c7e:	2e06      	cmp	r6, #6
 8010c80:	d128      	bne.n	8010cd4 <_strtod_l+0xbc>
 8010c82:	3501      	adds	r5, #1
 8010c84:	2300      	movs	r3, #0
 8010c86:	9519      	str	r5, [sp, #100]	@ 0x64
 8010c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	f040 858e 	bne.w	80117ae <_strtod_l+0xb96>
 8010c92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c94:	b1cb      	cbz	r3, 8010cca <_strtod_l+0xb2>
 8010c96:	4652      	mov	r2, sl
 8010c98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010c9c:	ec43 2b10 	vmov	d0, r2, r3
 8010ca0:	b01f      	add	sp, #124	@ 0x7c
 8010ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca6:	2920      	cmp	r1, #32
 8010ca8:	d1ce      	bne.n	8010c48 <_strtod_l+0x30>
 8010caa:	3201      	adds	r2, #1
 8010cac:	e7c1      	b.n	8010c32 <_strtod_l+0x1a>
 8010cae:	292d      	cmp	r1, #45	@ 0x2d
 8010cb0:	d1ca      	bne.n	8010c48 <_strtod_l+0x30>
 8010cb2:	2101      	movs	r1, #1
 8010cb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010cb6:	1c51      	adds	r1, r2, #1
 8010cb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8010cba:	7852      	ldrb	r2, [r2, #1]
 8010cbc:	2a00      	cmp	r2, #0
 8010cbe:	d1c5      	bne.n	8010c4c <_strtod_l+0x34>
 8010cc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010cc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f040 8570 	bne.w	80117aa <_strtod_l+0xb92>
 8010cca:	4652      	mov	r2, sl
 8010ccc:	465b      	mov	r3, fp
 8010cce:	e7e5      	b.n	8010c9c <_strtod_l+0x84>
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	e7ef      	b.n	8010cb4 <_strtod_l+0x9c>
 8010cd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010cd6:	b13a      	cbz	r2, 8010ce8 <_strtod_l+0xd0>
 8010cd8:	2135      	movs	r1, #53	@ 0x35
 8010cda:	a81c      	add	r0, sp, #112	@ 0x70
 8010cdc:	f7ff ff30 	bl	8010b40 <__copybits>
 8010ce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ce2:	9805      	ldr	r0, [sp, #20]
 8010ce4:	f7ff fafe 	bl	80102e4 <_Bfree>
 8010ce8:	3e01      	subs	r6, #1
 8010cea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010cec:	2e04      	cmp	r6, #4
 8010cee:	d806      	bhi.n	8010cfe <_strtod_l+0xe6>
 8010cf0:	e8df f006 	tbb	[pc, r6]
 8010cf4:	201d0314 	.word	0x201d0314
 8010cf8:	14          	.byte	0x14
 8010cf9:	00          	.byte	0x00
 8010cfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010cfe:	05e1      	lsls	r1, r4, #23
 8010d00:	bf48      	it	mi
 8010d02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010d06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d0a:	0d1b      	lsrs	r3, r3, #20
 8010d0c:	051b      	lsls	r3, r3, #20
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d1bb      	bne.n	8010c8a <_strtod_l+0x72>
 8010d12:	f7fe fba7 	bl	800f464 <__errno>
 8010d16:	2322      	movs	r3, #34	@ 0x22
 8010d18:	6003      	str	r3, [r0, #0]
 8010d1a:	e7b6      	b.n	8010c8a <_strtod_l+0x72>
 8010d1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010d20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010d24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010d28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010d2c:	e7e7      	b.n	8010cfe <_strtod_l+0xe6>
 8010d2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010eac <_strtod_l+0x294>
 8010d32:	e7e4      	b.n	8010cfe <_strtod_l+0xe6>
 8010d34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010d38:	f04f 3aff 	mov.w	sl, #4294967295
 8010d3c:	e7df      	b.n	8010cfe <_strtod_l+0xe6>
 8010d3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d40:	1c5a      	adds	r2, r3, #1
 8010d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d44:	785b      	ldrb	r3, [r3, #1]
 8010d46:	2b30      	cmp	r3, #48	@ 0x30
 8010d48:	d0f9      	beq.n	8010d3e <_strtod_l+0x126>
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d09d      	beq.n	8010c8a <_strtod_l+0x72>
 8010d4e:	2301      	movs	r3, #1
 8010d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d56:	2300      	movs	r3, #0
 8010d58:	9308      	str	r3, [sp, #32]
 8010d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d5c:	461f      	mov	r7, r3
 8010d5e:	220a      	movs	r2, #10
 8010d60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010d62:	7805      	ldrb	r5, [r0, #0]
 8010d64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010d68:	b2d9      	uxtb	r1, r3
 8010d6a:	2909      	cmp	r1, #9
 8010d6c:	d928      	bls.n	8010dc0 <_strtod_l+0x1a8>
 8010d6e:	494e      	ldr	r1, [pc, #312]	@ (8010ea8 <_strtod_l+0x290>)
 8010d70:	2201      	movs	r2, #1
 8010d72:	f7fe fa5e 	bl	800f232 <strncmp>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d032      	beq.n	8010de0 <_strtod_l+0x1c8>
 8010d7a:	2000      	movs	r0, #0
 8010d7c:	462a      	mov	r2, r5
 8010d7e:	4681      	mov	r9, r0
 8010d80:	463d      	mov	r5, r7
 8010d82:	4603      	mov	r3, r0
 8010d84:	2a65      	cmp	r2, #101	@ 0x65
 8010d86:	d001      	beq.n	8010d8c <_strtod_l+0x174>
 8010d88:	2a45      	cmp	r2, #69	@ 0x45
 8010d8a:	d114      	bne.n	8010db6 <_strtod_l+0x19e>
 8010d8c:	b91d      	cbnz	r5, 8010d96 <_strtod_l+0x17e>
 8010d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d90:	4302      	orrs	r2, r0
 8010d92:	d095      	beq.n	8010cc0 <_strtod_l+0xa8>
 8010d94:	2500      	movs	r5, #0
 8010d96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010d98:	1c62      	adds	r2, r4, #1
 8010d9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d9c:	7862      	ldrb	r2, [r4, #1]
 8010d9e:	2a2b      	cmp	r2, #43	@ 0x2b
 8010da0:	d077      	beq.n	8010e92 <_strtod_l+0x27a>
 8010da2:	2a2d      	cmp	r2, #45	@ 0x2d
 8010da4:	d07b      	beq.n	8010e9e <_strtod_l+0x286>
 8010da6:	f04f 0c00 	mov.w	ip, #0
 8010daa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010dae:	2909      	cmp	r1, #9
 8010db0:	f240 8082 	bls.w	8010eb8 <_strtod_l+0x2a0>
 8010db4:	9419      	str	r4, [sp, #100]	@ 0x64
 8010db6:	f04f 0800 	mov.w	r8, #0
 8010dba:	e0a2      	b.n	8010f02 <_strtod_l+0x2ea>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	e7c7      	b.n	8010d50 <_strtod_l+0x138>
 8010dc0:	2f08      	cmp	r7, #8
 8010dc2:	bfd5      	itete	le
 8010dc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010dc6:	9908      	ldrgt	r1, [sp, #32]
 8010dc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8010dcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010dd0:	f100 0001 	add.w	r0, r0, #1
 8010dd4:	bfd4      	ite	le
 8010dd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010dd8:	9308      	strgt	r3, [sp, #32]
 8010dda:	3701      	adds	r7, #1
 8010ddc:	9019      	str	r0, [sp, #100]	@ 0x64
 8010dde:	e7bf      	b.n	8010d60 <_strtod_l+0x148>
 8010de0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010de2:	1c5a      	adds	r2, r3, #1
 8010de4:	9219      	str	r2, [sp, #100]	@ 0x64
 8010de6:	785a      	ldrb	r2, [r3, #1]
 8010de8:	b37f      	cbz	r7, 8010e4a <_strtod_l+0x232>
 8010dea:	4681      	mov	r9, r0
 8010dec:	463d      	mov	r5, r7
 8010dee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010df2:	2b09      	cmp	r3, #9
 8010df4:	d912      	bls.n	8010e1c <_strtod_l+0x204>
 8010df6:	2301      	movs	r3, #1
 8010df8:	e7c4      	b.n	8010d84 <_strtod_l+0x16c>
 8010dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010dfc:	1c5a      	adds	r2, r3, #1
 8010dfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e00:	785a      	ldrb	r2, [r3, #1]
 8010e02:	3001      	adds	r0, #1
 8010e04:	2a30      	cmp	r2, #48	@ 0x30
 8010e06:	d0f8      	beq.n	8010dfa <_strtod_l+0x1e2>
 8010e08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010e0c:	2b08      	cmp	r3, #8
 8010e0e:	f200 84d3 	bhi.w	80117b8 <_strtod_l+0xba0>
 8010e12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8010e16:	4681      	mov	r9, r0
 8010e18:	2000      	movs	r0, #0
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	3a30      	subs	r2, #48	@ 0x30
 8010e1e:	f100 0301 	add.w	r3, r0, #1
 8010e22:	d02a      	beq.n	8010e7a <_strtod_l+0x262>
 8010e24:	4499      	add	r9, r3
 8010e26:	eb00 0c05 	add.w	ip, r0, r5
 8010e2a:	462b      	mov	r3, r5
 8010e2c:	210a      	movs	r1, #10
 8010e2e:	4563      	cmp	r3, ip
 8010e30:	d10d      	bne.n	8010e4e <_strtod_l+0x236>
 8010e32:	1c69      	adds	r1, r5, #1
 8010e34:	4401      	add	r1, r0
 8010e36:	4428      	add	r0, r5
 8010e38:	2808      	cmp	r0, #8
 8010e3a:	dc16      	bgt.n	8010e6a <_strtod_l+0x252>
 8010e3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010e3e:	230a      	movs	r3, #10
 8010e40:	fb03 2300 	mla	r3, r3, r0, r2
 8010e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e46:	2300      	movs	r3, #0
 8010e48:	e018      	b.n	8010e7c <_strtod_l+0x264>
 8010e4a:	4638      	mov	r0, r7
 8010e4c:	e7da      	b.n	8010e04 <_strtod_l+0x1ec>
 8010e4e:	2b08      	cmp	r3, #8
 8010e50:	f103 0301 	add.w	r3, r3, #1
 8010e54:	dc03      	bgt.n	8010e5e <_strtod_l+0x246>
 8010e56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010e58:	434e      	muls	r6, r1
 8010e5a:	960a      	str	r6, [sp, #40]	@ 0x28
 8010e5c:	e7e7      	b.n	8010e2e <_strtod_l+0x216>
 8010e5e:	2b10      	cmp	r3, #16
 8010e60:	bfde      	ittt	le
 8010e62:	9e08      	ldrle	r6, [sp, #32]
 8010e64:	434e      	mulle	r6, r1
 8010e66:	9608      	strle	r6, [sp, #32]
 8010e68:	e7e1      	b.n	8010e2e <_strtod_l+0x216>
 8010e6a:	280f      	cmp	r0, #15
 8010e6c:	dceb      	bgt.n	8010e46 <_strtod_l+0x22e>
 8010e6e:	9808      	ldr	r0, [sp, #32]
 8010e70:	230a      	movs	r3, #10
 8010e72:	fb03 2300 	mla	r3, r3, r0, r2
 8010e76:	9308      	str	r3, [sp, #32]
 8010e78:	e7e5      	b.n	8010e46 <_strtod_l+0x22e>
 8010e7a:	4629      	mov	r1, r5
 8010e7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e7e:	1c50      	adds	r0, r2, #1
 8010e80:	9019      	str	r0, [sp, #100]	@ 0x64
 8010e82:	7852      	ldrb	r2, [r2, #1]
 8010e84:	4618      	mov	r0, r3
 8010e86:	460d      	mov	r5, r1
 8010e88:	e7b1      	b.n	8010dee <_strtod_l+0x1d6>
 8010e8a:	f04f 0900 	mov.w	r9, #0
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e77d      	b.n	8010d8e <_strtod_l+0x176>
 8010e92:	f04f 0c00 	mov.w	ip, #0
 8010e96:	1ca2      	adds	r2, r4, #2
 8010e98:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e9a:	78a2      	ldrb	r2, [r4, #2]
 8010e9c:	e785      	b.n	8010daa <_strtod_l+0x192>
 8010e9e:	f04f 0c01 	mov.w	ip, #1
 8010ea2:	e7f8      	b.n	8010e96 <_strtod_l+0x27e>
 8010ea4:	08012f08 	.word	0x08012f08
 8010ea8:	08012ef0 	.word	0x08012ef0
 8010eac:	7ff00000 	.word	0x7ff00000
 8010eb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010eb2:	1c51      	adds	r1, r2, #1
 8010eb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8010eb6:	7852      	ldrb	r2, [r2, #1]
 8010eb8:	2a30      	cmp	r2, #48	@ 0x30
 8010eba:	d0f9      	beq.n	8010eb0 <_strtod_l+0x298>
 8010ebc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010ec0:	2908      	cmp	r1, #8
 8010ec2:	f63f af78 	bhi.w	8010db6 <_strtod_l+0x19e>
 8010ec6:	3a30      	subs	r2, #48	@ 0x30
 8010ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8010eca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010ecc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010ece:	f04f 080a 	mov.w	r8, #10
 8010ed2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010ed4:	1c56      	adds	r6, r2, #1
 8010ed6:	9619      	str	r6, [sp, #100]	@ 0x64
 8010ed8:	7852      	ldrb	r2, [r2, #1]
 8010eda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010ede:	f1be 0f09 	cmp.w	lr, #9
 8010ee2:	d939      	bls.n	8010f58 <_strtod_l+0x340>
 8010ee4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010ee6:	1a76      	subs	r6, r6, r1
 8010ee8:	2e08      	cmp	r6, #8
 8010eea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010eee:	dc03      	bgt.n	8010ef8 <_strtod_l+0x2e0>
 8010ef0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010ef2:	4588      	cmp	r8, r1
 8010ef4:	bfa8      	it	ge
 8010ef6:	4688      	movge	r8, r1
 8010ef8:	f1bc 0f00 	cmp.w	ip, #0
 8010efc:	d001      	beq.n	8010f02 <_strtod_l+0x2ea>
 8010efe:	f1c8 0800 	rsb	r8, r8, #0
 8010f02:	2d00      	cmp	r5, #0
 8010f04:	d14e      	bne.n	8010fa4 <_strtod_l+0x38c>
 8010f06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f08:	4308      	orrs	r0, r1
 8010f0a:	f47f aebe 	bne.w	8010c8a <_strtod_l+0x72>
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	f47f aed6 	bne.w	8010cc0 <_strtod_l+0xa8>
 8010f14:	2a69      	cmp	r2, #105	@ 0x69
 8010f16:	d028      	beq.n	8010f6a <_strtod_l+0x352>
 8010f18:	dc25      	bgt.n	8010f66 <_strtod_l+0x34e>
 8010f1a:	2a49      	cmp	r2, #73	@ 0x49
 8010f1c:	d025      	beq.n	8010f6a <_strtod_l+0x352>
 8010f1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8010f20:	f47f aece 	bne.w	8010cc0 <_strtod_l+0xa8>
 8010f24:	499b      	ldr	r1, [pc, #620]	@ (8011194 <_strtod_l+0x57c>)
 8010f26:	a819      	add	r0, sp, #100	@ 0x64
 8010f28:	f001 fa38 	bl	801239c <__match>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	f43f aec7 	beq.w	8010cc0 <_strtod_l+0xa8>
 8010f32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	2b28      	cmp	r3, #40	@ 0x28
 8010f38:	d12e      	bne.n	8010f98 <_strtod_l+0x380>
 8010f3a:	4997      	ldr	r1, [pc, #604]	@ (8011198 <_strtod_l+0x580>)
 8010f3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8010f3e:	a819      	add	r0, sp, #100	@ 0x64
 8010f40:	f001 fa40 	bl	80123c4 <__hexnan>
 8010f44:	2805      	cmp	r0, #5
 8010f46:	d127      	bne.n	8010f98 <_strtod_l+0x380>
 8010f48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010f4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010f4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010f52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010f56:	e698      	b.n	8010c8a <_strtod_l+0x72>
 8010f58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010f5a:	fb08 2101 	mla	r1, r8, r1, r2
 8010f5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010f62:	920e      	str	r2, [sp, #56]	@ 0x38
 8010f64:	e7b5      	b.n	8010ed2 <_strtod_l+0x2ba>
 8010f66:	2a6e      	cmp	r2, #110	@ 0x6e
 8010f68:	e7da      	b.n	8010f20 <_strtod_l+0x308>
 8010f6a:	498c      	ldr	r1, [pc, #560]	@ (801119c <_strtod_l+0x584>)
 8010f6c:	a819      	add	r0, sp, #100	@ 0x64
 8010f6e:	f001 fa15 	bl	801239c <__match>
 8010f72:	2800      	cmp	r0, #0
 8010f74:	f43f aea4 	beq.w	8010cc0 <_strtod_l+0xa8>
 8010f78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f7a:	4989      	ldr	r1, [pc, #548]	@ (80111a0 <_strtod_l+0x588>)
 8010f7c:	3b01      	subs	r3, #1
 8010f7e:	a819      	add	r0, sp, #100	@ 0x64
 8010f80:	9319      	str	r3, [sp, #100]	@ 0x64
 8010f82:	f001 fa0b 	bl	801239c <__match>
 8010f86:	b910      	cbnz	r0, 8010f8e <_strtod_l+0x376>
 8010f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8010f8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80111b0 <_strtod_l+0x598>
 8010f92:	f04f 0a00 	mov.w	sl, #0
 8010f96:	e678      	b.n	8010c8a <_strtod_l+0x72>
 8010f98:	4882      	ldr	r0, [pc, #520]	@ (80111a4 <_strtod_l+0x58c>)
 8010f9a:	f000 ff59 	bl	8011e50 <nan>
 8010f9e:	ec5b ab10 	vmov	sl, fp, d0
 8010fa2:	e672      	b.n	8010c8a <_strtod_l+0x72>
 8010fa4:	eba8 0309 	sub.w	r3, r8, r9
 8010fa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fac:	2f00      	cmp	r7, #0
 8010fae:	bf08      	it	eq
 8010fb0:	462f      	moveq	r7, r5
 8010fb2:	2d10      	cmp	r5, #16
 8010fb4:	462c      	mov	r4, r5
 8010fb6:	bfa8      	it	ge
 8010fb8:	2410      	movge	r4, #16
 8010fba:	f7ef faa3 	bl	8000504 <__aeabi_ui2d>
 8010fbe:	2d09      	cmp	r5, #9
 8010fc0:	4682      	mov	sl, r0
 8010fc2:	468b      	mov	fp, r1
 8010fc4:	dc13      	bgt.n	8010fee <_strtod_l+0x3d6>
 8010fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f43f ae5e 	beq.w	8010c8a <_strtod_l+0x72>
 8010fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fd0:	dd78      	ble.n	80110c4 <_strtod_l+0x4ac>
 8010fd2:	2b16      	cmp	r3, #22
 8010fd4:	dc5f      	bgt.n	8011096 <_strtod_l+0x47e>
 8010fd6:	4974      	ldr	r1, [pc, #464]	@ (80111a8 <_strtod_l+0x590>)
 8010fd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fe0:	4652      	mov	r2, sl
 8010fe2:	465b      	mov	r3, fp
 8010fe4:	f7ef fb08 	bl	80005f8 <__aeabi_dmul>
 8010fe8:	4682      	mov	sl, r0
 8010fea:	468b      	mov	fp, r1
 8010fec:	e64d      	b.n	8010c8a <_strtod_l+0x72>
 8010fee:	4b6e      	ldr	r3, [pc, #440]	@ (80111a8 <_strtod_l+0x590>)
 8010ff0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ff4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010ff8:	f7ef fafe 	bl	80005f8 <__aeabi_dmul>
 8010ffc:	4682      	mov	sl, r0
 8010ffe:	9808      	ldr	r0, [sp, #32]
 8011000:	468b      	mov	fp, r1
 8011002:	f7ef fa7f 	bl	8000504 <__aeabi_ui2d>
 8011006:	4602      	mov	r2, r0
 8011008:	460b      	mov	r3, r1
 801100a:	4650      	mov	r0, sl
 801100c:	4659      	mov	r1, fp
 801100e:	f7ef f93d 	bl	800028c <__adddf3>
 8011012:	2d0f      	cmp	r5, #15
 8011014:	4682      	mov	sl, r0
 8011016:	468b      	mov	fp, r1
 8011018:	ddd5      	ble.n	8010fc6 <_strtod_l+0x3ae>
 801101a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801101c:	1b2c      	subs	r4, r5, r4
 801101e:	441c      	add	r4, r3
 8011020:	2c00      	cmp	r4, #0
 8011022:	f340 8096 	ble.w	8011152 <_strtod_l+0x53a>
 8011026:	f014 030f 	ands.w	r3, r4, #15
 801102a:	d00a      	beq.n	8011042 <_strtod_l+0x42a>
 801102c:	495e      	ldr	r1, [pc, #376]	@ (80111a8 <_strtod_l+0x590>)
 801102e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011032:	4652      	mov	r2, sl
 8011034:	465b      	mov	r3, fp
 8011036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801103a:	f7ef fadd 	bl	80005f8 <__aeabi_dmul>
 801103e:	4682      	mov	sl, r0
 8011040:	468b      	mov	fp, r1
 8011042:	f034 040f 	bics.w	r4, r4, #15
 8011046:	d073      	beq.n	8011130 <_strtod_l+0x518>
 8011048:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801104c:	dd48      	ble.n	80110e0 <_strtod_l+0x4c8>
 801104e:	2400      	movs	r4, #0
 8011050:	46a0      	mov	r8, r4
 8011052:	940a      	str	r4, [sp, #40]	@ 0x28
 8011054:	46a1      	mov	r9, r4
 8011056:	9a05      	ldr	r2, [sp, #20]
 8011058:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80111b0 <_strtod_l+0x598>
 801105c:	2322      	movs	r3, #34	@ 0x22
 801105e:	6013      	str	r3, [r2, #0]
 8011060:	f04f 0a00 	mov.w	sl, #0
 8011064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011066:	2b00      	cmp	r3, #0
 8011068:	f43f ae0f 	beq.w	8010c8a <_strtod_l+0x72>
 801106c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801106e:	9805      	ldr	r0, [sp, #20]
 8011070:	f7ff f938 	bl	80102e4 <_Bfree>
 8011074:	9805      	ldr	r0, [sp, #20]
 8011076:	4649      	mov	r1, r9
 8011078:	f7ff f934 	bl	80102e4 <_Bfree>
 801107c:	9805      	ldr	r0, [sp, #20]
 801107e:	4641      	mov	r1, r8
 8011080:	f7ff f930 	bl	80102e4 <_Bfree>
 8011084:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011086:	9805      	ldr	r0, [sp, #20]
 8011088:	f7ff f92c 	bl	80102e4 <_Bfree>
 801108c:	9805      	ldr	r0, [sp, #20]
 801108e:	4621      	mov	r1, r4
 8011090:	f7ff f928 	bl	80102e4 <_Bfree>
 8011094:	e5f9      	b.n	8010c8a <_strtod_l+0x72>
 8011096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011098:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801109c:	4293      	cmp	r3, r2
 801109e:	dbbc      	blt.n	801101a <_strtod_l+0x402>
 80110a0:	4c41      	ldr	r4, [pc, #260]	@ (80111a8 <_strtod_l+0x590>)
 80110a2:	f1c5 050f 	rsb	r5, r5, #15
 80110a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80110aa:	4652      	mov	r2, sl
 80110ac:	465b      	mov	r3, fp
 80110ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110b2:	f7ef faa1 	bl	80005f8 <__aeabi_dmul>
 80110b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110b8:	1b5d      	subs	r5, r3, r5
 80110ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80110be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80110c2:	e78f      	b.n	8010fe4 <_strtod_l+0x3cc>
 80110c4:	3316      	adds	r3, #22
 80110c6:	dba8      	blt.n	801101a <_strtod_l+0x402>
 80110c8:	4b37      	ldr	r3, [pc, #220]	@ (80111a8 <_strtod_l+0x590>)
 80110ca:	eba9 0808 	sub.w	r8, r9, r8
 80110ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80110d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80110d6:	4650      	mov	r0, sl
 80110d8:	4659      	mov	r1, fp
 80110da:	f7ef fbb7 	bl	800084c <__aeabi_ddiv>
 80110de:	e783      	b.n	8010fe8 <_strtod_l+0x3d0>
 80110e0:	4b32      	ldr	r3, [pc, #200]	@ (80111ac <_strtod_l+0x594>)
 80110e2:	9308      	str	r3, [sp, #32]
 80110e4:	2300      	movs	r3, #0
 80110e6:	1124      	asrs	r4, r4, #4
 80110e8:	4650      	mov	r0, sl
 80110ea:	4659      	mov	r1, fp
 80110ec:	461e      	mov	r6, r3
 80110ee:	2c01      	cmp	r4, #1
 80110f0:	dc21      	bgt.n	8011136 <_strtod_l+0x51e>
 80110f2:	b10b      	cbz	r3, 80110f8 <_strtod_l+0x4e0>
 80110f4:	4682      	mov	sl, r0
 80110f6:	468b      	mov	fp, r1
 80110f8:	492c      	ldr	r1, [pc, #176]	@ (80111ac <_strtod_l+0x594>)
 80110fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80110fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011102:	4652      	mov	r2, sl
 8011104:	465b      	mov	r3, fp
 8011106:	e9d1 0100 	ldrd	r0, r1, [r1]
 801110a:	f7ef fa75 	bl	80005f8 <__aeabi_dmul>
 801110e:	4b28      	ldr	r3, [pc, #160]	@ (80111b0 <_strtod_l+0x598>)
 8011110:	460a      	mov	r2, r1
 8011112:	400b      	ands	r3, r1
 8011114:	4927      	ldr	r1, [pc, #156]	@ (80111b4 <_strtod_l+0x59c>)
 8011116:	428b      	cmp	r3, r1
 8011118:	4682      	mov	sl, r0
 801111a:	d898      	bhi.n	801104e <_strtod_l+0x436>
 801111c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011120:	428b      	cmp	r3, r1
 8011122:	bf86      	itte	hi
 8011124:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80111b8 <_strtod_l+0x5a0>
 8011128:	f04f 3aff 	movhi.w	sl, #4294967295
 801112c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011130:	2300      	movs	r3, #0
 8011132:	9308      	str	r3, [sp, #32]
 8011134:	e07a      	b.n	801122c <_strtod_l+0x614>
 8011136:	07e2      	lsls	r2, r4, #31
 8011138:	d505      	bpl.n	8011146 <_strtod_l+0x52e>
 801113a:	9b08      	ldr	r3, [sp, #32]
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7ef fa5a 	bl	80005f8 <__aeabi_dmul>
 8011144:	2301      	movs	r3, #1
 8011146:	9a08      	ldr	r2, [sp, #32]
 8011148:	3208      	adds	r2, #8
 801114a:	3601      	adds	r6, #1
 801114c:	1064      	asrs	r4, r4, #1
 801114e:	9208      	str	r2, [sp, #32]
 8011150:	e7cd      	b.n	80110ee <_strtod_l+0x4d6>
 8011152:	d0ed      	beq.n	8011130 <_strtod_l+0x518>
 8011154:	4264      	negs	r4, r4
 8011156:	f014 020f 	ands.w	r2, r4, #15
 801115a:	d00a      	beq.n	8011172 <_strtod_l+0x55a>
 801115c:	4b12      	ldr	r3, [pc, #72]	@ (80111a8 <_strtod_l+0x590>)
 801115e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011162:	4650      	mov	r0, sl
 8011164:	4659      	mov	r1, fp
 8011166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116a:	f7ef fb6f 	bl	800084c <__aeabi_ddiv>
 801116e:	4682      	mov	sl, r0
 8011170:	468b      	mov	fp, r1
 8011172:	1124      	asrs	r4, r4, #4
 8011174:	d0dc      	beq.n	8011130 <_strtod_l+0x518>
 8011176:	2c1f      	cmp	r4, #31
 8011178:	dd20      	ble.n	80111bc <_strtod_l+0x5a4>
 801117a:	2400      	movs	r4, #0
 801117c:	46a0      	mov	r8, r4
 801117e:	940a      	str	r4, [sp, #40]	@ 0x28
 8011180:	46a1      	mov	r9, r4
 8011182:	9a05      	ldr	r2, [sp, #20]
 8011184:	2322      	movs	r3, #34	@ 0x22
 8011186:	f04f 0a00 	mov.w	sl, #0
 801118a:	f04f 0b00 	mov.w	fp, #0
 801118e:	6013      	str	r3, [r2, #0]
 8011190:	e768      	b.n	8011064 <_strtod_l+0x44c>
 8011192:	bf00      	nop
 8011194:	08012ca6 	.word	0x08012ca6
 8011198:	08012ef4 	.word	0x08012ef4
 801119c:	08012c9e 	.word	0x08012c9e
 80111a0:	08012d11 	.word	0x08012d11
 80111a4:	08012d0d 	.word	0x08012d0d
 80111a8:	08012e28 	.word	0x08012e28
 80111ac:	08012e00 	.word	0x08012e00
 80111b0:	7ff00000 	.word	0x7ff00000
 80111b4:	7ca00000 	.word	0x7ca00000
 80111b8:	7fefffff 	.word	0x7fefffff
 80111bc:	f014 0310 	ands.w	r3, r4, #16
 80111c0:	bf18      	it	ne
 80111c2:	236a      	movne	r3, #106	@ 0x6a
 80111c4:	4ea9      	ldr	r6, [pc, #676]	@ (801146c <_strtod_l+0x854>)
 80111c6:	9308      	str	r3, [sp, #32]
 80111c8:	4650      	mov	r0, sl
 80111ca:	4659      	mov	r1, fp
 80111cc:	2300      	movs	r3, #0
 80111ce:	07e2      	lsls	r2, r4, #31
 80111d0:	d504      	bpl.n	80111dc <_strtod_l+0x5c4>
 80111d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80111d6:	f7ef fa0f 	bl	80005f8 <__aeabi_dmul>
 80111da:	2301      	movs	r3, #1
 80111dc:	1064      	asrs	r4, r4, #1
 80111de:	f106 0608 	add.w	r6, r6, #8
 80111e2:	d1f4      	bne.n	80111ce <_strtod_l+0x5b6>
 80111e4:	b10b      	cbz	r3, 80111ea <_strtod_l+0x5d2>
 80111e6:	4682      	mov	sl, r0
 80111e8:	468b      	mov	fp, r1
 80111ea:	9b08      	ldr	r3, [sp, #32]
 80111ec:	b1b3      	cbz	r3, 801121c <_strtod_l+0x604>
 80111ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80111f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	4659      	mov	r1, fp
 80111fa:	dd0f      	ble.n	801121c <_strtod_l+0x604>
 80111fc:	2b1f      	cmp	r3, #31
 80111fe:	dd55      	ble.n	80112ac <_strtod_l+0x694>
 8011200:	2b34      	cmp	r3, #52	@ 0x34
 8011202:	bfde      	ittt	le
 8011204:	f04f 33ff 	movle.w	r3, #4294967295
 8011208:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801120c:	4093      	lslle	r3, r2
 801120e:	f04f 0a00 	mov.w	sl, #0
 8011212:	bfcc      	ite	gt
 8011214:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011218:	ea03 0b01 	andle.w	fp, r3, r1
 801121c:	2200      	movs	r2, #0
 801121e:	2300      	movs	r3, #0
 8011220:	4650      	mov	r0, sl
 8011222:	4659      	mov	r1, fp
 8011224:	f7ef fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 8011228:	2800      	cmp	r0, #0
 801122a:	d1a6      	bne.n	801117a <_strtod_l+0x562>
 801122c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011232:	9805      	ldr	r0, [sp, #20]
 8011234:	462b      	mov	r3, r5
 8011236:	463a      	mov	r2, r7
 8011238:	f7ff f8bc 	bl	80103b4 <__s2b>
 801123c:	900a      	str	r0, [sp, #40]	@ 0x28
 801123e:	2800      	cmp	r0, #0
 8011240:	f43f af05 	beq.w	801104e <_strtod_l+0x436>
 8011244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011246:	2a00      	cmp	r2, #0
 8011248:	eba9 0308 	sub.w	r3, r9, r8
 801124c:	bfa8      	it	ge
 801124e:	2300      	movge	r3, #0
 8011250:	9312      	str	r3, [sp, #72]	@ 0x48
 8011252:	2400      	movs	r4, #0
 8011254:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011258:	9316      	str	r3, [sp, #88]	@ 0x58
 801125a:	46a0      	mov	r8, r4
 801125c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801125e:	9805      	ldr	r0, [sp, #20]
 8011260:	6859      	ldr	r1, [r3, #4]
 8011262:	f7fe ffff 	bl	8010264 <_Balloc>
 8011266:	4681      	mov	r9, r0
 8011268:	2800      	cmp	r0, #0
 801126a:	f43f aef4 	beq.w	8011056 <_strtod_l+0x43e>
 801126e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011270:	691a      	ldr	r2, [r3, #16]
 8011272:	3202      	adds	r2, #2
 8011274:	f103 010c 	add.w	r1, r3, #12
 8011278:	0092      	lsls	r2, r2, #2
 801127a:	300c      	adds	r0, #12
 801127c:	f7fe f927 	bl	800f4ce <memcpy>
 8011280:	ec4b ab10 	vmov	d0, sl, fp
 8011284:	9805      	ldr	r0, [sp, #20]
 8011286:	aa1c      	add	r2, sp, #112	@ 0x70
 8011288:	a91b      	add	r1, sp, #108	@ 0x6c
 801128a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801128e:	f7ff fbcd 	bl	8010a2c <__d2b>
 8011292:	901a      	str	r0, [sp, #104]	@ 0x68
 8011294:	2800      	cmp	r0, #0
 8011296:	f43f aede 	beq.w	8011056 <_strtod_l+0x43e>
 801129a:	9805      	ldr	r0, [sp, #20]
 801129c:	2101      	movs	r1, #1
 801129e:	f7ff f91f 	bl	80104e0 <__i2b>
 80112a2:	4680      	mov	r8, r0
 80112a4:	b948      	cbnz	r0, 80112ba <_strtod_l+0x6a2>
 80112a6:	f04f 0800 	mov.w	r8, #0
 80112aa:	e6d4      	b.n	8011056 <_strtod_l+0x43e>
 80112ac:	f04f 32ff 	mov.w	r2, #4294967295
 80112b0:	fa02 f303 	lsl.w	r3, r2, r3
 80112b4:	ea03 0a0a 	and.w	sl, r3, sl
 80112b8:	e7b0      	b.n	801121c <_strtod_l+0x604>
 80112ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80112bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80112be:	2d00      	cmp	r5, #0
 80112c0:	bfab      	itete	ge
 80112c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80112c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80112c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80112c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80112ca:	bfac      	ite	ge
 80112cc:	18ef      	addge	r7, r5, r3
 80112ce:	1b5e      	sublt	r6, r3, r5
 80112d0:	9b08      	ldr	r3, [sp, #32]
 80112d2:	1aed      	subs	r5, r5, r3
 80112d4:	4415      	add	r5, r2
 80112d6:	4b66      	ldr	r3, [pc, #408]	@ (8011470 <_strtod_l+0x858>)
 80112d8:	3d01      	subs	r5, #1
 80112da:	429d      	cmp	r5, r3
 80112dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80112e0:	da50      	bge.n	8011384 <_strtod_l+0x76c>
 80112e2:	1b5b      	subs	r3, r3, r5
 80112e4:	2b1f      	cmp	r3, #31
 80112e6:	eba2 0203 	sub.w	r2, r2, r3
 80112ea:	f04f 0101 	mov.w	r1, #1
 80112ee:	dc3d      	bgt.n	801136c <_strtod_l+0x754>
 80112f0:	fa01 f303 	lsl.w	r3, r1, r3
 80112f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80112f6:	2300      	movs	r3, #0
 80112f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80112fa:	18bd      	adds	r5, r7, r2
 80112fc:	9b08      	ldr	r3, [sp, #32]
 80112fe:	42af      	cmp	r7, r5
 8011300:	4416      	add	r6, r2
 8011302:	441e      	add	r6, r3
 8011304:	463b      	mov	r3, r7
 8011306:	bfa8      	it	ge
 8011308:	462b      	movge	r3, r5
 801130a:	42b3      	cmp	r3, r6
 801130c:	bfa8      	it	ge
 801130e:	4633      	movge	r3, r6
 8011310:	2b00      	cmp	r3, #0
 8011312:	bfc2      	ittt	gt
 8011314:	1aed      	subgt	r5, r5, r3
 8011316:	1af6      	subgt	r6, r6, r3
 8011318:	1aff      	subgt	r7, r7, r3
 801131a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801131c:	2b00      	cmp	r3, #0
 801131e:	dd16      	ble.n	801134e <_strtod_l+0x736>
 8011320:	4641      	mov	r1, r8
 8011322:	9805      	ldr	r0, [sp, #20]
 8011324:	461a      	mov	r2, r3
 8011326:	f7ff f99b 	bl	8010660 <__pow5mult>
 801132a:	4680      	mov	r8, r0
 801132c:	2800      	cmp	r0, #0
 801132e:	d0ba      	beq.n	80112a6 <_strtod_l+0x68e>
 8011330:	4601      	mov	r1, r0
 8011332:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011334:	9805      	ldr	r0, [sp, #20]
 8011336:	f7ff f8e9 	bl	801050c <__multiply>
 801133a:	900e      	str	r0, [sp, #56]	@ 0x38
 801133c:	2800      	cmp	r0, #0
 801133e:	f43f ae8a 	beq.w	8011056 <_strtod_l+0x43e>
 8011342:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011344:	9805      	ldr	r0, [sp, #20]
 8011346:	f7fe ffcd 	bl	80102e4 <_Bfree>
 801134a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801134c:	931a      	str	r3, [sp, #104]	@ 0x68
 801134e:	2d00      	cmp	r5, #0
 8011350:	dc1d      	bgt.n	801138e <_strtod_l+0x776>
 8011352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011354:	2b00      	cmp	r3, #0
 8011356:	dd23      	ble.n	80113a0 <_strtod_l+0x788>
 8011358:	4649      	mov	r1, r9
 801135a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801135c:	9805      	ldr	r0, [sp, #20]
 801135e:	f7ff f97f 	bl	8010660 <__pow5mult>
 8011362:	4681      	mov	r9, r0
 8011364:	b9e0      	cbnz	r0, 80113a0 <_strtod_l+0x788>
 8011366:	f04f 0900 	mov.w	r9, #0
 801136a:	e674      	b.n	8011056 <_strtod_l+0x43e>
 801136c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011370:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011374:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011378:	35e2      	adds	r5, #226	@ 0xe2
 801137a:	fa01 f305 	lsl.w	r3, r1, r5
 801137e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011380:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011382:	e7ba      	b.n	80112fa <_strtod_l+0x6e2>
 8011384:	2300      	movs	r3, #0
 8011386:	9310      	str	r3, [sp, #64]	@ 0x40
 8011388:	2301      	movs	r3, #1
 801138a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801138c:	e7b5      	b.n	80112fa <_strtod_l+0x6e2>
 801138e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011390:	9805      	ldr	r0, [sp, #20]
 8011392:	462a      	mov	r2, r5
 8011394:	f7ff f9be 	bl	8010714 <__lshift>
 8011398:	901a      	str	r0, [sp, #104]	@ 0x68
 801139a:	2800      	cmp	r0, #0
 801139c:	d1d9      	bne.n	8011352 <_strtod_l+0x73a>
 801139e:	e65a      	b.n	8011056 <_strtod_l+0x43e>
 80113a0:	2e00      	cmp	r6, #0
 80113a2:	dd07      	ble.n	80113b4 <_strtod_l+0x79c>
 80113a4:	4649      	mov	r1, r9
 80113a6:	9805      	ldr	r0, [sp, #20]
 80113a8:	4632      	mov	r2, r6
 80113aa:	f7ff f9b3 	bl	8010714 <__lshift>
 80113ae:	4681      	mov	r9, r0
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d0d8      	beq.n	8011366 <_strtod_l+0x74e>
 80113b4:	2f00      	cmp	r7, #0
 80113b6:	dd08      	ble.n	80113ca <_strtod_l+0x7b2>
 80113b8:	4641      	mov	r1, r8
 80113ba:	9805      	ldr	r0, [sp, #20]
 80113bc:	463a      	mov	r2, r7
 80113be:	f7ff f9a9 	bl	8010714 <__lshift>
 80113c2:	4680      	mov	r8, r0
 80113c4:	2800      	cmp	r0, #0
 80113c6:	f43f ae46 	beq.w	8011056 <_strtod_l+0x43e>
 80113ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80113cc:	9805      	ldr	r0, [sp, #20]
 80113ce:	464a      	mov	r2, r9
 80113d0:	f7ff fa28 	bl	8010824 <__mdiff>
 80113d4:	4604      	mov	r4, r0
 80113d6:	2800      	cmp	r0, #0
 80113d8:	f43f ae3d 	beq.w	8011056 <_strtod_l+0x43e>
 80113dc:	68c3      	ldr	r3, [r0, #12]
 80113de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80113e0:	2300      	movs	r3, #0
 80113e2:	60c3      	str	r3, [r0, #12]
 80113e4:	4641      	mov	r1, r8
 80113e6:	f7ff fa01 	bl	80107ec <__mcmp>
 80113ea:	2800      	cmp	r0, #0
 80113ec:	da46      	bge.n	801147c <_strtod_l+0x864>
 80113ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113f0:	ea53 030a 	orrs.w	r3, r3, sl
 80113f4:	d16c      	bne.n	80114d0 <_strtod_l+0x8b8>
 80113f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d168      	bne.n	80114d0 <_strtod_l+0x8b8>
 80113fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011402:	0d1b      	lsrs	r3, r3, #20
 8011404:	051b      	lsls	r3, r3, #20
 8011406:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801140a:	d961      	bls.n	80114d0 <_strtod_l+0x8b8>
 801140c:	6963      	ldr	r3, [r4, #20]
 801140e:	b913      	cbnz	r3, 8011416 <_strtod_l+0x7fe>
 8011410:	6923      	ldr	r3, [r4, #16]
 8011412:	2b01      	cmp	r3, #1
 8011414:	dd5c      	ble.n	80114d0 <_strtod_l+0x8b8>
 8011416:	4621      	mov	r1, r4
 8011418:	2201      	movs	r2, #1
 801141a:	9805      	ldr	r0, [sp, #20]
 801141c:	f7ff f97a 	bl	8010714 <__lshift>
 8011420:	4641      	mov	r1, r8
 8011422:	4604      	mov	r4, r0
 8011424:	f7ff f9e2 	bl	80107ec <__mcmp>
 8011428:	2800      	cmp	r0, #0
 801142a:	dd51      	ble.n	80114d0 <_strtod_l+0x8b8>
 801142c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011430:	9a08      	ldr	r2, [sp, #32]
 8011432:	0d1b      	lsrs	r3, r3, #20
 8011434:	051b      	lsls	r3, r3, #20
 8011436:	2a00      	cmp	r2, #0
 8011438:	d06b      	beq.n	8011512 <_strtod_l+0x8fa>
 801143a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801143e:	d868      	bhi.n	8011512 <_strtod_l+0x8fa>
 8011440:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011444:	f67f ae9d 	bls.w	8011182 <_strtod_l+0x56a>
 8011448:	4b0a      	ldr	r3, [pc, #40]	@ (8011474 <_strtod_l+0x85c>)
 801144a:	4650      	mov	r0, sl
 801144c:	4659      	mov	r1, fp
 801144e:	2200      	movs	r2, #0
 8011450:	f7ef f8d2 	bl	80005f8 <__aeabi_dmul>
 8011454:	4b08      	ldr	r3, [pc, #32]	@ (8011478 <_strtod_l+0x860>)
 8011456:	400b      	ands	r3, r1
 8011458:	4682      	mov	sl, r0
 801145a:	468b      	mov	fp, r1
 801145c:	2b00      	cmp	r3, #0
 801145e:	f47f ae05 	bne.w	801106c <_strtod_l+0x454>
 8011462:	9a05      	ldr	r2, [sp, #20]
 8011464:	2322      	movs	r3, #34	@ 0x22
 8011466:	6013      	str	r3, [r2, #0]
 8011468:	e600      	b.n	801106c <_strtod_l+0x454>
 801146a:	bf00      	nop
 801146c:	08012f20 	.word	0x08012f20
 8011470:	fffffc02 	.word	0xfffffc02
 8011474:	39500000 	.word	0x39500000
 8011478:	7ff00000 	.word	0x7ff00000
 801147c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011480:	d165      	bne.n	801154e <_strtod_l+0x936>
 8011482:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011488:	b35a      	cbz	r2, 80114e2 <_strtod_l+0x8ca>
 801148a:	4a9f      	ldr	r2, [pc, #636]	@ (8011708 <_strtod_l+0xaf0>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d12b      	bne.n	80114e8 <_strtod_l+0x8d0>
 8011490:	9b08      	ldr	r3, [sp, #32]
 8011492:	4651      	mov	r1, sl
 8011494:	b303      	cbz	r3, 80114d8 <_strtod_l+0x8c0>
 8011496:	4b9d      	ldr	r3, [pc, #628]	@ (801170c <_strtod_l+0xaf4>)
 8011498:	465a      	mov	r2, fp
 801149a:	4013      	ands	r3, r2
 801149c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80114a0:	f04f 32ff 	mov.w	r2, #4294967295
 80114a4:	d81b      	bhi.n	80114de <_strtod_l+0x8c6>
 80114a6:	0d1b      	lsrs	r3, r3, #20
 80114a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80114ac:	fa02 f303 	lsl.w	r3, r2, r3
 80114b0:	4299      	cmp	r1, r3
 80114b2:	d119      	bne.n	80114e8 <_strtod_l+0x8d0>
 80114b4:	4b96      	ldr	r3, [pc, #600]	@ (8011710 <_strtod_l+0xaf8>)
 80114b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d102      	bne.n	80114c2 <_strtod_l+0x8aa>
 80114bc:	3101      	adds	r1, #1
 80114be:	f43f adca 	beq.w	8011056 <_strtod_l+0x43e>
 80114c2:	4b92      	ldr	r3, [pc, #584]	@ (801170c <_strtod_l+0xaf4>)
 80114c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114c6:	401a      	ands	r2, r3
 80114c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80114cc:	f04f 0a00 	mov.w	sl, #0
 80114d0:	9b08      	ldr	r3, [sp, #32]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d1b8      	bne.n	8011448 <_strtod_l+0x830>
 80114d6:	e5c9      	b.n	801106c <_strtod_l+0x454>
 80114d8:	f04f 33ff 	mov.w	r3, #4294967295
 80114dc:	e7e8      	b.n	80114b0 <_strtod_l+0x898>
 80114de:	4613      	mov	r3, r2
 80114e0:	e7e6      	b.n	80114b0 <_strtod_l+0x898>
 80114e2:	ea53 030a 	orrs.w	r3, r3, sl
 80114e6:	d0a1      	beq.n	801142c <_strtod_l+0x814>
 80114e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80114ea:	b1db      	cbz	r3, 8011524 <_strtod_l+0x90c>
 80114ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114ee:	4213      	tst	r3, r2
 80114f0:	d0ee      	beq.n	80114d0 <_strtod_l+0x8b8>
 80114f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114f4:	9a08      	ldr	r2, [sp, #32]
 80114f6:	4650      	mov	r0, sl
 80114f8:	4659      	mov	r1, fp
 80114fa:	b1bb      	cbz	r3, 801152c <_strtod_l+0x914>
 80114fc:	f7ff fb6c 	bl	8010bd8 <sulp>
 8011500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011504:	ec53 2b10 	vmov	r2, r3, d0
 8011508:	f7ee fec0 	bl	800028c <__adddf3>
 801150c:	4682      	mov	sl, r0
 801150e:	468b      	mov	fp, r1
 8011510:	e7de      	b.n	80114d0 <_strtod_l+0x8b8>
 8011512:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011516:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801151a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801151e:	f04f 3aff 	mov.w	sl, #4294967295
 8011522:	e7d5      	b.n	80114d0 <_strtod_l+0x8b8>
 8011524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011526:	ea13 0f0a 	tst.w	r3, sl
 801152a:	e7e1      	b.n	80114f0 <_strtod_l+0x8d8>
 801152c:	f7ff fb54 	bl	8010bd8 <sulp>
 8011530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011534:	ec53 2b10 	vmov	r2, r3, d0
 8011538:	f7ee fea6 	bl	8000288 <__aeabi_dsub>
 801153c:	2200      	movs	r2, #0
 801153e:	2300      	movs	r3, #0
 8011540:	4682      	mov	sl, r0
 8011542:	468b      	mov	fp, r1
 8011544:	f7ef fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011548:	2800      	cmp	r0, #0
 801154a:	d0c1      	beq.n	80114d0 <_strtod_l+0x8b8>
 801154c:	e619      	b.n	8011182 <_strtod_l+0x56a>
 801154e:	4641      	mov	r1, r8
 8011550:	4620      	mov	r0, r4
 8011552:	f7ff fac3 	bl	8010adc <__ratio>
 8011556:	ec57 6b10 	vmov	r6, r7, d0
 801155a:	2200      	movs	r2, #0
 801155c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011560:	4630      	mov	r0, r6
 8011562:	4639      	mov	r1, r7
 8011564:	f7ef fac4 	bl	8000af0 <__aeabi_dcmple>
 8011568:	2800      	cmp	r0, #0
 801156a:	d06f      	beq.n	801164c <_strtod_l+0xa34>
 801156c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801156e:	2b00      	cmp	r3, #0
 8011570:	d17a      	bne.n	8011668 <_strtod_l+0xa50>
 8011572:	f1ba 0f00 	cmp.w	sl, #0
 8011576:	d158      	bne.n	801162a <_strtod_l+0xa12>
 8011578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801157a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801157e:	2b00      	cmp	r3, #0
 8011580:	d15a      	bne.n	8011638 <_strtod_l+0xa20>
 8011582:	4b64      	ldr	r3, [pc, #400]	@ (8011714 <_strtod_l+0xafc>)
 8011584:	2200      	movs	r2, #0
 8011586:	4630      	mov	r0, r6
 8011588:	4639      	mov	r1, r7
 801158a:	f7ef faa7 	bl	8000adc <__aeabi_dcmplt>
 801158e:	2800      	cmp	r0, #0
 8011590:	d159      	bne.n	8011646 <_strtod_l+0xa2e>
 8011592:	4630      	mov	r0, r6
 8011594:	4639      	mov	r1, r7
 8011596:	4b60      	ldr	r3, [pc, #384]	@ (8011718 <_strtod_l+0xb00>)
 8011598:	2200      	movs	r2, #0
 801159a:	f7ef f82d 	bl	80005f8 <__aeabi_dmul>
 801159e:	4606      	mov	r6, r0
 80115a0:	460f      	mov	r7, r1
 80115a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80115a6:	9606      	str	r6, [sp, #24]
 80115a8:	9307      	str	r3, [sp, #28]
 80115aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115ae:	4d57      	ldr	r5, [pc, #348]	@ (801170c <_strtod_l+0xaf4>)
 80115b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80115b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115b6:	401d      	ands	r5, r3
 80115b8:	4b58      	ldr	r3, [pc, #352]	@ (801171c <_strtod_l+0xb04>)
 80115ba:	429d      	cmp	r5, r3
 80115bc:	f040 80b2 	bne.w	8011724 <_strtod_l+0xb0c>
 80115c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80115c6:	ec4b ab10 	vmov	d0, sl, fp
 80115ca:	f7ff f9bf 	bl	801094c <__ulp>
 80115ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115d2:	ec51 0b10 	vmov	r0, r1, d0
 80115d6:	f7ef f80f 	bl	80005f8 <__aeabi_dmul>
 80115da:	4652      	mov	r2, sl
 80115dc:	465b      	mov	r3, fp
 80115de:	f7ee fe55 	bl	800028c <__adddf3>
 80115e2:	460b      	mov	r3, r1
 80115e4:	4949      	ldr	r1, [pc, #292]	@ (801170c <_strtod_l+0xaf4>)
 80115e6:	4a4e      	ldr	r2, [pc, #312]	@ (8011720 <_strtod_l+0xb08>)
 80115e8:	4019      	ands	r1, r3
 80115ea:	4291      	cmp	r1, r2
 80115ec:	4682      	mov	sl, r0
 80115ee:	d942      	bls.n	8011676 <_strtod_l+0xa5e>
 80115f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80115f2:	4b47      	ldr	r3, [pc, #284]	@ (8011710 <_strtod_l+0xaf8>)
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d103      	bne.n	8011600 <_strtod_l+0x9e8>
 80115f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115fa:	3301      	adds	r3, #1
 80115fc:	f43f ad2b 	beq.w	8011056 <_strtod_l+0x43e>
 8011600:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011710 <_strtod_l+0xaf8>
 8011604:	f04f 3aff 	mov.w	sl, #4294967295
 8011608:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801160a:	9805      	ldr	r0, [sp, #20]
 801160c:	f7fe fe6a 	bl	80102e4 <_Bfree>
 8011610:	9805      	ldr	r0, [sp, #20]
 8011612:	4649      	mov	r1, r9
 8011614:	f7fe fe66 	bl	80102e4 <_Bfree>
 8011618:	9805      	ldr	r0, [sp, #20]
 801161a:	4641      	mov	r1, r8
 801161c:	f7fe fe62 	bl	80102e4 <_Bfree>
 8011620:	9805      	ldr	r0, [sp, #20]
 8011622:	4621      	mov	r1, r4
 8011624:	f7fe fe5e 	bl	80102e4 <_Bfree>
 8011628:	e618      	b.n	801125c <_strtod_l+0x644>
 801162a:	f1ba 0f01 	cmp.w	sl, #1
 801162e:	d103      	bne.n	8011638 <_strtod_l+0xa20>
 8011630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011632:	2b00      	cmp	r3, #0
 8011634:	f43f ada5 	beq.w	8011182 <_strtod_l+0x56a>
 8011638:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80116e8 <_strtod_l+0xad0>
 801163c:	4f35      	ldr	r7, [pc, #212]	@ (8011714 <_strtod_l+0xafc>)
 801163e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011642:	2600      	movs	r6, #0
 8011644:	e7b1      	b.n	80115aa <_strtod_l+0x992>
 8011646:	4f34      	ldr	r7, [pc, #208]	@ (8011718 <_strtod_l+0xb00>)
 8011648:	2600      	movs	r6, #0
 801164a:	e7aa      	b.n	80115a2 <_strtod_l+0x98a>
 801164c:	4b32      	ldr	r3, [pc, #200]	@ (8011718 <_strtod_l+0xb00>)
 801164e:	4630      	mov	r0, r6
 8011650:	4639      	mov	r1, r7
 8011652:	2200      	movs	r2, #0
 8011654:	f7ee ffd0 	bl	80005f8 <__aeabi_dmul>
 8011658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801165a:	4606      	mov	r6, r0
 801165c:	460f      	mov	r7, r1
 801165e:	2b00      	cmp	r3, #0
 8011660:	d09f      	beq.n	80115a2 <_strtod_l+0x98a>
 8011662:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011666:	e7a0      	b.n	80115aa <_strtod_l+0x992>
 8011668:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80116f0 <_strtod_l+0xad8>
 801166c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011670:	ec57 6b17 	vmov	r6, r7, d7
 8011674:	e799      	b.n	80115aa <_strtod_l+0x992>
 8011676:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801167a:	9b08      	ldr	r3, [sp, #32]
 801167c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1c1      	bne.n	8011608 <_strtod_l+0x9f0>
 8011684:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011688:	0d1b      	lsrs	r3, r3, #20
 801168a:	051b      	lsls	r3, r3, #20
 801168c:	429d      	cmp	r5, r3
 801168e:	d1bb      	bne.n	8011608 <_strtod_l+0x9f0>
 8011690:	4630      	mov	r0, r6
 8011692:	4639      	mov	r1, r7
 8011694:	f7ef fb10 	bl	8000cb8 <__aeabi_d2lz>
 8011698:	f7ee ff80 	bl	800059c <__aeabi_l2d>
 801169c:	4602      	mov	r2, r0
 801169e:	460b      	mov	r3, r1
 80116a0:	4630      	mov	r0, r6
 80116a2:	4639      	mov	r1, r7
 80116a4:	f7ee fdf0 	bl	8000288 <__aeabi_dsub>
 80116a8:	460b      	mov	r3, r1
 80116aa:	4602      	mov	r2, r0
 80116ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80116b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80116b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116b6:	ea46 060a 	orr.w	r6, r6, sl
 80116ba:	431e      	orrs	r6, r3
 80116bc:	d06f      	beq.n	801179e <_strtod_l+0xb86>
 80116be:	a30e      	add	r3, pc, #56	@ (adr r3, 80116f8 <_strtod_l+0xae0>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	f7ef fa0a 	bl	8000adc <__aeabi_dcmplt>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	f47f accf 	bne.w	801106c <_strtod_l+0x454>
 80116ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8011700 <_strtod_l+0xae8>)
 80116d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116d8:	f7ef fa1e 	bl	8000b18 <__aeabi_dcmpgt>
 80116dc:	2800      	cmp	r0, #0
 80116de:	d093      	beq.n	8011608 <_strtod_l+0x9f0>
 80116e0:	e4c4      	b.n	801106c <_strtod_l+0x454>
 80116e2:	bf00      	nop
 80116e4:	f3af 8000 	nop.w
 80116e8:	00000000 	.word	0x00000000
 80116ec:	bff00000 	.word	0xbff00000
 80116f0:	00000000 	.word	0x00000000
 80116f4:	3ff00000 	.word	0x3ff00000
 80116f8:	94a03595 	.word	0x94a03595
 80116fc:	3fdfffff 	.word	0x3fdfffff
 8011700:	35afe535 	.word	0x35afe535
 8011704:	3fe00000 	.word	0x3fe00000
 8011708:	000fffff 	.word	0x000fffff
 801170c:	7ff00000 	.word	0x7ff00000
 8011710:	7fefffff 	.word	0x7fefffff
 8011714:	3ff00000 	.word	0x3ff00000
 8011718:	3fe00000 	.word	0x3fe00000
 801171c:	7fe00000 	.word	0x7fe00000
 8011720:	7c9fffff 	.word	0x7c9fffff
 8011724:	9b08      	ldr	r3, [sp, #32]
 8011726:	b323      	cbz	r3, 8011772 <_strtod_l+0xb5a>
 8011728:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801172c:	d821      	bhi.n	8011772 <_strtod_l+0xb5a>
 801172e:	a328      	add	r3, pc, #160	@ (adr r3, 80117d0 <_strtod_l+0xbb8>)
 8011730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011734:	4630      	mov	r0, r6
 8011736:	4639      	mov	r1, r7
 8011738:	f7ef f9da 	bl	8000af0 <__aeabi_dcmple>
 801173c:	b1a0      	cbz	r0, 8011768 <_strtod_l+0xb50>
 801173e:	4639      	mov	r1, r7
 8011740:	4630      	mov	r0, r6
 8011742:	f7ef fa31 	bl	8000ba8 <__aeabi_d2uiz>
 8011746:	2801      	cmp	r0, #1
 8011748:	bf38      	it	cc
 801174a:	2001      	movcc	r0, #1
 801174c:	f7ee feda 	bl	8000504 <__aeabi_ui2d>
 8011750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011752:	4606      	mov	r6, r0
 8011754:	460f      	mov	r7, r1
 8011756:	b9fb      	cbnz	r3, 8011798 <_strtod_l+0xb80>
 8011758:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801175c:	9014      	str	r0, [sp, #80]	@ 0x50
 801175e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011760:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011764:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011768:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801176a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801176e:	1b5b      	subs	r3, r3, r5
 8011770:	9311      	str	r3, [sp, #68]	@ 0x44
 8011772:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011776:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801177a:	f7ff f8e7 	bl	801094c <__ulp>
 801177e:	4650      	mov	r0, sl
 8011780:	ec53 2b10 	vmov	r2, r3, d0
 8011784:	4659      	mov	r1, fp
 8011786:	f7ee ff37 	bl	80005f8 <__aeabi_dmul>
 801178a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801178e:	f7ee fd7d 	bl	800028c <__adddf3>
 8011792:	4682      	mov	sl, r0
 8011794:	468b      	mov	fp, r1
 8011796:	e770      	b.n	801167a <_strtod_l+0xa62>
 8011798:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801179c:	e7e0      	b.n	8011760 <_strtod_l+0xb48>
 801179e:	a30e      	add	r3, pc, #56	@ (adr r3, 80117d8 <_strtod_l+0xbc0>)
 80117a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a4:	f7ef f99a 	bl	8000adc <__aeabi_dcmplt>
 80117a8:	e798      	b.n	80116dc <_strtod_l+0xac4>
 80117aa:	2300      	movs	r3, #0
 80117ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80117b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117b2:	6013      	str	r3, [r2, #0]
 80117b4:	f7ff ba6d 	b.w	8010c92 <_strtod_l+0x7a>
 80117b8:	2a65      	cmp	r2, #101	@ 0x65
 80117ba:	f43f ab66 	beq.w	8010e8a <_strtod_l+0x272>
 80117be:	2a45      	cmp	r2, #69	@ 0x45
 80117c0:	f43f ab63 	beq.w	8010e8a <_strtod_l+0x272>
 80117c4:	2301      	movs	r3, #1
 80117c6:	f7ff bb9e 	b.w	8010f06 <_strtod_l+0x2ee>
 80117ca:	bf00      	nop
 80117cc:	f3af 8000 	nop.w
 80117d0:	ffc00000 	.word	0xffc00000
 80117d4:	41dfffff 	.word	0x41dfffff
 80117d8:	94a03595 	.word	0x94a03595
 80117dc:	3fcfffff 	.word	0x3fcfffff

080117e0 <_strtod_r>:
 80117e0:	4b01      	ldr	r3, [pc, #4]	@ (80117e8 <_strtod_r+0x8>)
 80117e2:	f7ff ba19 	b.w	8010c18 <_strtod_l>
 80117e6:	bf00      	nop
 80117e8:	20000088 	.word	0x20000088

080117ec <__ssputs_r>:
 80117ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117f0:	688e      	ldr	r6, [r1, #8]
 80117f2:	461f      	mov	r7, r3
 80117f4:	42be      	cmp	r6, r7
 80117f6:	680b      	ldr	r3, [r1, #0]
 80117f8:	4682      	mov	sl, r0
 80117fa:	460c      	mov	r4, r1
 80117fc:	4690      	mov	r8, r2
 80117fe:	d82d      	bhi.n	801185c <__ssputs_r+0x70>
 8011800:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011804:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011808:	d026      	beq.n	8011858 <__ssputs_r+0x6c>
 801180a:	6965      	ldr	r5, [r4, #20]
 801180c:	6909      	ldr	r1, [r1, #16]
 801180e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011812:	eba3 0901 	sub.w	r9, r3, r1
 8011816:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801181a:	1c7b      	adds	r3, r7, #1
 801181c:	444b      	add	r3, r9
 801181e:	106d      	asrs	r5, r5, #1
 8011820:	429d      	cmp	r5, r3
 8011822:	bf38      	it	cc
 8011824:	461d      	movcc	r5, r3
 8011826:	0553      	lsls	r3, r2, #21
 8011828:	d527      	bpl.n	801187a <__ssputs_r+0x8e>
 801182a:	4629      	mov	r1, r5
 801182c:	f7fc fa9a 	bl	800dd64 <_malloc_r>
 8011830:	4606      	mov	r6, r0
 8011832:	b360      	cbz	r0, 801188e <__ssputs_r+0xa2>
 8011834:	6921      	ldr	r1, [r4, #16]
 8011836:	464a      	mov	r2, r9
 8011838:	f7fd fe49 	bl	800f4ce <memcpy>
 801183c:	89a3      	ldrh	r3, [r4, #12]
 801183e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011846:	81a3      	strh	r3, [r4, #12]
 8011848:	6126      	str	r6, [r4, #16]
 801184a:	6165      	str	r5, [r4, #20]
 801184c:	444e      	add	r6, r9
 801184e:	eba5 0509 	sub.w	r5, r5, r9
 8011852:	6026      	str	r6, [r4, #0]
 8011854:	60a5      	str	r5, [r4, #8]
 8011856:	463e      	mov	r6, r7
 8011858:	42be      	cmp	r6, r7
 801185a:	d900      	bls.n	801185e <__ssputs_r+0x72>
 801185c:	463e      	mov	r6, r7
 801185e:	6820      	ldr	r0, [r4, #0]
 8011860:	4632      	mov	r2, r6
 8011862:	4641      	mov	r1, r8
 8011864:	f7fd fcb6 	bl	800f1d4 <memmove>
 8011868:	68a3      	ldr	r3, [r4, #8]
 801186a:	1b9b      	subs	r3, r3, r6
 801186c:	60a3      	str	r3, [r4, #8]
 801186e:	6823      	ldr	r3, [r4, #0]
 8011870:	4433      	add	r3, r6
 8011872:	6023      	str	r3, [r4, #0]
 8011874:	2000      	movs	r0, #0
 8011876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801187a:	462a      	mov	r2, r5
 801187c:	f7fc fafe 	bl	800de7c <_realloc_r>
 8011880:	4606      	mov	r6, r0
 8011882:	2800      	cmp	r0, #0
 8011884:	d1e0      	bne.n	8011848 <__ssputs_r+0x5c>
 8011886:	6921      	ldr	r1, [r4, #16]
 8011888:	4650      	mov	r0, sl
 801188a:	f7fe fca1 	bl	80101d0 <_free_r>
 801188e:	230c      	movs	r3, #12
 8011890:	f8ca 3000 	str.w	r3, [sl]
 8011894:	89a3      	ldrh	r3, [r4, #12]
 8011896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801189a:	81a3      	strh	r3, [r4, #12]
 801189c:	f04f 30ff 	mov.w	r0, #4294967295
 80118a0:	e7e9      	b.n	8011876 <__ssputs_r+0x8a>
	...

080118a4 <_svfiprintf_r>:
 80118a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a8:	4698      	mov	r8, r3
 80118aa:	898b      	ldrh	r3, [r1, #12]
 80118ac:	061b      	lsls	r3, r3, #24
 80118ae:	b09d      	sub	sp, #116	@ 0x74
 80118b0:	4607      	mov	r7, r0
 80118b2:	460d      	mov	r5, r1
 80118b4:	4614      	mov	r4, r2
 80118b6:	d510      	bpl.n	80118da <_svfiprintf_r+0x36>
 80118b8:	690b      	ldr	r3, [r1, #16]
 80118ba:	b973      	cbnz	r3, 80118da <_svfiprintf_r+0x36>
 80118bc:	2140      	movs	r1, #64	@ 0x40
 80118be:	f7fc fa51 	bl	800dd64 <_malloc_r>
 80118c2:	6028      	str	r0, [r5, #0]
 80118c4:	6128      	str	r0, [r5, #16]
 80118c6:	b930      	cbnz	r0, 80118d6 <_svfiprintf_r+0x32>
 80118c8:	230c      	movs	r3, #12
 80118ca:	603b      	str	r3, [r7, #0]
 80118cc:	f04f 30ff 	mov.w	r0, #4294967295
 80118d0:	b01d      	add	sp, #116	@ 0x74
 80118d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d6:	2340      	movs	r3, #64	@ 0x40
 80118d8:	616b      	str	r3, [r5, #20]
 80118da:	2300      	movs	r3, #0
 80118dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80118de:	2320      	movs	r3, #32
 80118e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80118e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80118e8:	2330      	movs	r3, #48	@ 0x30
 80118ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011a88 <_svfiprintf_r+0x1e4>
 80118ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80118f2:	f04f 0901 	mov.w	r9, #1
 80118f6:	4623      	mov	r3, r4
 80118f8:	469a      	mov	sl, r3
 80118fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118fe:	b10a      	cbz	r2, 8011904 <_svfiprintf_r+0x60>
 8011900:	2a25      	cmp	r2, #37	@ 0x25
 8011902:	d1f9      	bne.n	80118f8 <_svfiprintf_r+0x54>
 8011904:	ebba 0b04 	subs.w	fp, sl, r4
 8011908:	d00b      	beq.n	8011922 <_svfiprintf_r+0x7e>
 801190a:	465b      	mov	r3, fp
 801190c:	4622      	mov	r2, r4
 801190e:	4629      	mov	r1, r5
 8011910:	4638      	mov	r0, r7
 8011912:	f7ff ff6b 	bl	80117ec <__ssputs_r>
 8011916:	3001      	adds	r0, #1
 8011918:	f000 80a7 	beq.w	8011a6a <_svfiprintf_r+0x1c6>
 801191c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801191e:	445a      	add	r2, fp
 8011920:	9209      	str	r2, [sp, #36]	@ 0x24
 8011922:	f89a 3000 	ldrb.w	r3, [sl]
 8011926:	2b00      	cmp	r3, #0
 8011928:	f000 809f 	beq.w	8011a6a <_svfiprintf_r+0x1c6>
 801192c:	2300      	movs	r3, #0
 801192e:	f04f 32ff 	mov.w	r2, #4294967295
 8011932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011936:	f10a 0a01 	add.w	sl, sl, #1
 801193a:	9304      	str	r3, [sp, #16]
 801193c:	9307      	str	r3, [sp, #28]
 801193e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011942:	931a      	str	r3, [sp, #104]	@ 0x68
 8011944:	4654      	mov	r4, sl
 8011946:	2205      	movs	r2, #5
 8011948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801194c:	484e      	ldr	r0, [pc, #312]	@ (8011a88 <_svfiprintf_r+0x1e4>)
 801194e:	f7ee fc3f 	bl	80001d0 <memchr>
 8011952:	9a04      	ldr	r2, [sp, #16]
 8011954:	b9d8      	cbnz	r0, 801198e <_svfiprintf_r+0xea>
 8011956:	06d0      	lsls	r0, r2, #27
 8011958:	bf44      	itt	mi
 801195a:	2320      	movmi	r3, #32
 801195c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011960:	0711      	lsls	r1, r2, #28
 8011962:	bf44      	itt	mi
 8011964:	232b      	movmi	r3, #43	@ 0x2b
 8011966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801196a:	f89a 3000 	ldrb.w	r3, [sl]
 801196e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011970:	d015      	beq.n	801199e <_svfiprintf_r+0xfa>
 8011972:	9a07      	ldr	r2, [sp, #28]
 8011974:	4654      	mov	r4, sl
 8011976:	2000      	movs	r0, #0
 8011978:	f04f 0c0a 	mov.w	ip, #10
 801197c:	4621      	mov	r1, r4
 801197e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011982:	3b30      	subs	r3, #48	@ 0x30
 8011984:	2b09      	cmp	r3, #9
 8011986:	d94b      	bls.n	8011a20 <_svfiprintf_r+0x17c>
 8011988:	b1b0      	cbz	r0, 80119b8 <_svfiprintf_r+0x114>
 801198a:	9207      	str	r2, [sp, #28]
 801198c:	e014      	b.n	80119b8 <_svfiprintf_r+0x114>
 801198e:	eba0 0308 	sub.w	r3, r0, r8
 8011992:	fa09 f303 	lsl.w	r3, r9, r3
 8011996:	4313      	orrs	r3, r2
 8011998:	9304      	str	r3, [sp, #16]
 801199a:	46a2      	mov	sl, r4
 801199c:	e7d2      	b.n	8011944 <_svfiprintf_r+0xa0>
 801199e:	9b03      	ldr	r3, [sp, #12]
 80119a0:	1d19      	adds	r1, r3, #4
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	9103      	str	r1, [sp, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	bfbb      	ittet	lt
 80119aa:	425b      	neglt	r3, r3
 80119ac:	f042 0202 	orrlt.w	r2, r2, #2
 80119b0:	9307      	strge	r3, [sp, #28]
 80119b2:	9307      	strlt	r3, [sp, #28]
 80119b4:	bfb8      	it	lt
 80119b6:	9204      	strlt	r2, [sp, #16]
 80119b8:	7823      	ldrb	r3, [r4, #0]
 80119ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80119bc:	d10a      	bne.n	80119d4 <_svfiprintf_r+0x130>
 80119be:	7863      	ldrb	r3, [r4, #1]
 80119c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80119c2:	d132      	bne.n	8011a2a <_svfiprintf_r+0x186>
 80119c4:	9b03      	ldr	r3, [sp, #12]
 80119c6:	1d1a      	adds	r2, r3, #4
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	9203      	str	r2, [sp, #12]
 80119cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80119d0:	3402      	adds	r4, #2
 80119d2:	9305      	str	r3, [sp, #20]
 80119d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011a98 <_svfiprintf_r+0x1f4>
 80119d8:	7821      	ldrb	r1, [r4, #0]
 80119da:	2203      	movs	r2, #3
 80119dc:	4650      	mov	r0, sl
 80119de:	f7ee fbf7 	bl	80001d0 <memchr>
 80119e2:	b138      	cbz	r0, 80119f4 <_svfiprintf_r+0x150>
 80119e4:	9b04      	ldr	r3, [sp, #16]
 80119e6:	eba0 000a 	sub.w	r0, r0, sl
 80119ea:	2240      	movs	r2, #64	@ 0x40
 80119ec:	4082      	lsls	r2, r0
 80119ee:	4313      	orrs	r3, r2
 80119f0:	3401      	adds	r4, #1
 80119f2:	9304      	str	r3, [sp, #16]
 80119f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119f8:	4824      	ldr	r0, [pc, #144]	@ (8011a8c <_svfiprintf_r+0x1e8>)
 80119fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80119fe:	2206      	movs	r2, #6
 8011a00:	f7ee fbe6 	bl	80001d0 <memchr>
 8011a04:	2800      	cmp	r0, #0
 8011a06:	d036      	beq.n	8011a76 <_svfiprintf_r+0x1d2>
 8011a08:	4b21      	ldr	r3, [pc, #132]	@ (8011a90 <_svfiprintf_r+0x1ec>)
 8011a0a:	bb1b      	cbnz	r3, 8011a54 <_svfiprintf_r+0x1b0>
 8011a0c:	9b03      	ldr	r3, [sp, #12]
 8011a0e:	3307      	adds	r3, #7
 8011a10:	f023 0307 	bic.w	r3, r3, #7
 8011a14:	3308      	adds	r3, #8
 8011a16:	9303      	str	r3, [sp, #12]
 8011a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a1a:	4433      	add	r3, r6
 8011a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a1e:	e76a      	b.n	80118f6 <_svfiprintf_r+0x52>
 8011a20:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a24:	460c      	mov	r4, r1
 8011a26:	2001      	movs	r0, #1
 8011a28:	e7a8      	b.n	801197c <_svfiprintf_r+0xd8>
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	3401      	adds	r4, #1
 8011a2e:	9305      	str	r3, [sp, #20]
 8011a30:	4619      	mov	r1, r3
 8011a32:	f04f 0c0a 	mov.w	ip, #10
 8011a36:	4620      	mov	r0, r4
 8011a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a3c:	3a30      	subs	r2, #48	@ 0x30
 8011a3e:	2a09      	cmp	r2, #9
 8011a40:	d903      	bls.n	8011a4a <_svfiprintf_r+0x1a6>
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d0c6      	beq.n	80119d4 <_svfiprintf_r+0x130>
 8011a46:	9105      	str	r1, [sp, #20]
 8011a48:	e7c4      	b.n	80119d4 <_svfiprintf_r+0x130>
 8011a4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a4e:	4604      	mov	r4, r0
 8011a50:	2301      	movs	r3, #1
 8011a52:	e7f0      	b.n	8011a36 <_svfiprintf_r+0x192>
 8011a54:	ab03      	add	r3, sp, #12
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	462a      	mov	r2, r5
 8011a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8011a94 <_svfiprintf_r+0x1f0>)
 8011a5c:	a904      	add	r1, sp, #16
 8011a5e:	4638      	mov	r0, r7
 8011a60:	f7fc fb60 	bl	800e124 <_printf_float>
 8011a64:	1c42      	adds	r2, r0, #1
 8011a66:	4606      	mov	r6, r0
 8011a68:	d1d6      	bne.n	8011a18 <_svfiprintf_r+0x174>
 8011a6a:	89ab      	ldrh	r3, [r5, #12]
 8011a6c:	065b      	lsls	r3, r3, #25
 8011a6e:	f53f af2d 	bmi.w	80118cc <_svfiprintf_r+0x28>
 8011a72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a74:	e72c      	b.n	80118d0 <_svfiprintf_r+0x2c>
 8011a76:	ab03      	add	r3, sp, #12
 8011a78:	9300      	str	r3, [sp, #0]
 8011a7a:	462a      	mov	r2, r5
 8011a7c:	4b05      	ldr	r3, [pc, #20]	@ (8011a94 <_svfiprintf_r+0x1f0>)
 8011a7e:	a904      	add	r1, sp, #16
 8011a80:	4638      	mov	r0, r7
 8011a82:	f7fc fde7 	bl	800e654 <_printf_i>
 8011a86:	e7ed      	b.n	8011a64 <_svfiprintf_r+0x1c0>
 8011a88:	08012f48 	.word	0x08012f48
 8011a8c:	08012f52 	.word	0x08012f52
 8011a90:	0800e125 	.word	0x0800e125
 8011a94:	080117ed 	.word	0x080117ed
 8011a98:	08012f4e 	.word	0x08012f4e

08011a9c <__sfputc_r>:
 8011a9c:	6893      	ldr	r3, [r2, #8]
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	b410      	push	{r4}
 8011aa4:	6093      	str	r3, [r2, #8]
 8011aa6:	da08      	bge.n	8011aba <__sfputc_r+0x1e>
 8011aa8:	6994      	ldr	r4, [r2, #24]
 8011aaa:	42a3      	cmp	r3, r4
 8011aac:	db01      	blt.n	8011ab2 <__sfputc_r+0x16>
 8011aae:	290a      	cmp	r1, #10
 8011ab0:	d103      	bne.n	8011aba <__sfputc_r+0x1e>
 8011ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ab6:	f7fd baf8 	b.w	800f0aa <__swbuf_r>
 8011aba:	6813      	ldr	r3, [r2, #0]
 8011abc:	1c58      	adds	r0, r3, #1
 8011abe:	6010      	str	r0, [r2, #0]
 8011ac0:	7019      	strb	r1, [r3, #0]
 8011ac2:	4608      	mov	r0, r1
 8011ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <__sfputs_r>:
 8011aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011acc:	4606      	mov	r6, r0
 8011ace:	460f      	mov	r7, r1
 8011ad0:	4614      	mov	r4, r2
 8011ad2:	18d5      	adds	r5, r2, r3
 8011ad4:	42ac      	cmp	r4, r5
 8011ad6:	d101      	bne.n	8011adc <__sfputs_r+0x12>
 8011ad8:	2000      	movs	r0, #0
 8011ada:	e007      	b.n	8011aec <__sfputs_r+0x22>
 8011adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ae0:	463a      	mov	r2, r7
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	f7ff ffda 	bl	8011a9c <__sfputc_r>
 8011ae8:	1c43      	adds	r3, r0, #1
 8011aea:	d1f3      	bne.n	8011ad4 <__sfputs_r+0xa>
 8011aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011af0 <_vfiprintf_r>:
 8011af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af4:	460d      	mov	r5, r1
 8011af6:	b09d      	sub	sp, #116	@ 0x74
 8011af8:	4614      	mov	r4, r2
 8011afa:	4698      	mov	r8, r3
 8011afc:	4606      	mov	r6, r0
 8011afe:	b118      	cbz	r0, 8011b08 <_vfiprintf_r+0x18>
 8011b00:	6a03      	ldr	r3, [r0, #32]
 8011b02:	b90b      	cbnz	r3, 8011b08 <_vfiprintf_r+0x18>
 8011b04:	f7fd fa26 	bl	800ef54 <__sinit>
 8011b08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b0a:	07d9      	lsls	r1, r3, #31
 8011b0c:	d405      	bmi.n	8011b1a <_vfiprintf_r+0x2a>
 8011b0e:	89ab      	ldrh	r3, [r5, #12]
 8011b10:	059a      	lsls	r2, r3, #22
 8011b12:	d402      	bmi.n	8011b1a <_vfiprintf_r+0x2a>
 8011b14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b16:	f7fd fcd0 	bl	800f4ba <__retarget_lock_acquire_recursive>
 8011b1a:	89ab      	ldrh	r3, [r5, #12]
 8011b1c:	071b      	lsls	r3, r3, #28
 8011b1e:	d501      	bpl.n	8011b24 <_vfiprintf_r+0x34>
 8011b20:	692b      	ldr	r3, [r5, #16]
 8011b22:	b99b      	cbnz	r3, 8011b4c <_vfiprintf_r+0x5c>
 8011b24:	4629      	mov	r1, r5
 8011b26:	4630      	mov	r0, r6
 8011b28:	f7fd fafe 	bl	800f128 <__swsetup_r>
 8011b2c:	b170      	cbz	r0, 8011b4c <_vfiprintf_r+0x5c>
 8011b2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b30:	07dc      	lsls	r4, r3, #31
 8011b32:	d504      	bpl.n	8011b3e <_vfiprintf_r+0x4e>
 8011b34:	f04f 30ff 	mov.w	r0, #4294967295
 8011b38:	b01d      	add	sp, #116	@ 0x74
 8011b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b3e:	89ab      	ldrh	r3, [r5, #12]
 8011b40:	0598      	lsls	r0, r3, #22
 8011b42:	d4f7      	bmi.n	8011b34 <_vfiprintf_r+0x44>
 8011b44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b46:	f7fd fcb9 	bl	800f4bc <__retarget_lock_release_recursive>
 8011b4a:	e7f3      	b.n	8011b34 <_vfiprintf_r+0x44>
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b50:	2320      	movs	r3, #32
 8011b52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b5a:	2330      	movs	r3, #48	@ 0x30
 8011b5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011d0c <_vfiprintf_r+0x21c>
 8011b60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b64:	f04f 0901 	mov.w	r9, #1
 8011b68:	4623      	mov	r3, r4
 8011b6a:	469a      	mov	sl, r3
 8011b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b70:	b10a      	cbz	r2, 8011b76 <_vfiprintf_r+0x86>
 8011b72:	2a25      	cmp	r2, #37	@ 0x25
 8011b74:	d1f9      	bne.n	8011b6a <_vfiprintf_r+0x7a>
 8011b76:	ebba 0b04 	subs.w	fp, sl, r4
 8011b7a:	d00b      	beq.n	8011b94 <_vfiprintf_r+0xa4>
 8011b7c:	465b      	mov	r3, fp
 8011b7e:	4622      	mov	r2, r4
 8011b80:	4629      	mov	r1, r5
 8011b82:	4630      	mov	r0, r6
 8011b84:	f7ff ffa1 	bl	8011aca <__sfputs_r>
 8011b88:	3001      	adds	r0, #1
 8011b8a:	f000 80a7 	beq.w	8011cdc <_vfiprintf_r+0x1ec>
 8011b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b90:	445a      	add	r2, fp
 8011b92:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b94:	f89a 3000 	ldrb.w	r3, [sl]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f000 809f 	beq.w	8011cdc <_vfiprintf_r+0x1ec>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ba8:	f10a 0a01 	add.w	sl, sl, #1
 8011bac:	9304      	str	r3, [sp, #16]
 8011bae:	9307      	str	r3, [sp, #28]
 8011bb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8011bb6:	4654      	mov	r4, sl
 8011bb8:	2205      	movs	r2, #5
 8011bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bbe:	4853      	ldr	r0, [pc, #332]	@ (8011d0c <_vfiprintf_r+0x21c>)
 8011bc0:	f7ee fb06 	bl	80001d0 <memchr>
 8011bc4:	9a04      	ldr	r2, [sp, #16]
 8011bc6:	b9d8      	cbnz	r0, 8011c00 <_vfiprintf_r+0x110>
 8011bc8:	06d1      	lsls	r1, r2, #27
 8011bca:	bf44      	itt	mi
 8011bcc:	2320      	movmi	r3, #32
 8011bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bd2:	0713      	lsls	r3, r2, #28
 8011bd4:	bf44      	itt	mi
 8011bd6:	232b      	movmi	r3, #43	@ 0x2b
 8011bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8011be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011be2:	d015      	beq.n	8011c10 <_vfiprintf_r+0x120>
 8011be4:	9a07      	ldr	r2, [sp, #28]
 8011be6:	4654      	mov	r4, sl
 8011be8:	2000      	movs	r0, #0
 8011bea:	f04f 0c0a 	mov.w	ip, #10
 8011bee:	4621      	mov	r1, r4
 8011bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bf4:	3b30      	subs	r3, #48	@ 0x30
 8011bf6:	2b09      	cmp	r3, #9
 8011bf8:	d94b      	bls.n	8011c92 <_vfiprintf_r+0x1a2>
 8011bfa:	b1b0      	cbz	r0, 8011c2a <_vfiprintf_r+0x13a>
 8011bfc:	9207      	str	r2, [sp, #28]
 8011bfe:	e014      	b.n	8011c2a <_vfiprintf_r+0x13a>
 8011c00:	eba0 0308 	sub.w	r3, r0, r8
 8011c04:	fa09 f303 	lsl.w	r3, r9, r3
 8011c08:	4313      	orrs	r3, r2
 8011c0a:	9304      	str	r3, [sp, #16]
 8011c0c:	46a2      	mov	sl, r4
 8011c0e:	e7d2      	b.n	8011bb6 <_vfiprintf_r+0xc6>
 8011c10:	9b03      	ldr	r3, [sp, #12]
 8011c12:	1d19      	adds	r1, r3, #4
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	9103      	str	r1, [sp, #12]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	bfbb      	ittet	lt
 8011c1c:	425b      	neglt	r3, r3
 8011c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8011c22:	9307      	strge	r3, [sp, #28]
 8011c24:	9307      	strlt	r3, [sp, #28]
 8011c26:	bfb8      	it	lt
 8011c28:	9204      	strlt	r2, [sp, #16]
 8011c2a:	7823      	ldrb	r3, [r4, #0]
 8011c2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c2e:	d10a      	bne.n	8011c46 <_vfiprintf_r+0x156>
 8011c30:	7863      	ldrb	r3, [r4, #1]
 8011c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c34:	d132      	bne.n	8011c9c <_vfiprintf_r+0x1ac>
 8011c36:	9b03      	ldr	r3, [sp, #12]
 8011c38:	1d1a      	adds	r2, r3, #4
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	9203      	str	r2, [sp, #12]
 8011c3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c42:	3402      	adds	r4, #2
 8011c44:	9305      	str	r3, [sp, #20]
 8011c46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011d1c <_vfiprintf_r+0x22c>
 8011c4a:	7821      	ldrb	r1, [r4, #0]
 8011c4c:	2203      	movs	r2, #3
 8011c4e:	4650      	mov	r0, sl
 8011c50:	f7ee fabe 	bl	80001d0 <memchr>
 8011c54:	b138      	cbz	r0, 8011c66 <_vfiprintf_r+0x176>
 8011c56:	9b04      	ldr	r3, [sp, #16]
 8011c58:	eba0 000a 	sub.w	r0, r0, sl
 8011c5c:	2240      	movs	r2, #64	@ 0x40
 8011c5e:	4082      	lsls	r2, r0
 8011c60:	4313      	orrs	r3, r2
 8011c62:	3401      	adds	r4, #1
 8011c64:	9304      	str	r3, [sp, #16]
 8011c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c6a:	4829      	ldr	r0, [pc, #164]	@ (8011d10 <_vfiprintf_r+0x220>)
 8011c6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c70:	2206      	movs	r2, #6
 8011c72:	f7ee faad 	bl	80001d0 <memchr>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d03f      	beq.n	8011cfa <_vfiprintf_r+0x20a>
 8011c7a:	4b26      	ldr	r3, [pc, #152]	@ (8011d14 <_vfiprintf_r+0x224>)
 8011c7c:	bb1b      	cbnz	r3, 8011cc6 <_vfiprintf_r+0x1d6>
 8011c7e:	9b03      	ldr	r3, [sp, #12]
 8011c80:	3307      	adds	r3, #7
 8011c82:	f023 0307 	bic.w	r3, r3, #7
 8011c86:	3308      	adds	r3, #8
 8011c88:	9303      	str	r3, [sp, #12]
 8011c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c8c:	443b      	add	r3, r7
 8011c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c90:	e76a      	b.n	8011b68 <_vfiprintf_r+0x78>
 8011c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c96:	460c      	mov	r4, r1
 8011c98:	2001      	movs	r0, #1
 8011c9a:	e7a8      	b.n	8011bee <_vfiprintf_r+0xfe>
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	3401      	adds	r4, #1
 8011ca0:	9305      	str	r3, [sp, #20]
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	f04f 0c0a 	mov.w	ip, #10
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cae:	3a30      	subs	r2, #48	@ 0x30
 8011cb0:	2a09      	cmp	r2, #9
 8011cb2:	d903      	bls.n	8011cbc <_vfiprintf_r+0x1cc>
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d0c6      	beq.n	8011c46 <_vfiprintf_r+0x156>
 8011cb8:	9105      	str	r1, [sp, #20]
 8011cba:	e7c4      	b.n	8011c46 <_vfiprintf_r+0x156>
 8011cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	e7f0      	b.n	8011ca8 <_vfiprintf_r+0x1b8>
 8011cc6:	ab03      	add	r3, sp, #12
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	462a      	mov	r2, r5
 8011ccc:	4b12      	ldr	r3, [pc, #72]	@ (8011d18 <_vfiprintf_r+0x228>)
 8011cce:	a904      	add	r1, sp, #16
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	f7fc fa27 	bl	800e124 <_printf_float>
 8011cd6:	4607      	mov	r7, r0
 8011cd8:	1c78      	adds	r0, r7, #1
 8011cda:	d1d6      	bne.n	8011c8a <_vfiprintf_r+0x19a>
 8011cdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011cde:	07d9      	lsls	r1, r3, #31
 8011ce0:	d405      	bmi.n	8011cee <_vfiprintf_r+0x1fe>
 8011ce2:	89ab      	ldrh	r3, [r5, #12]
 8011ce4:	059a      	lsls	r2, r3, #22
 8011ce6:	d402      	bmi.n	8011cee <_vfiprintf_r+0x1fe>
 8011ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cea:	f7fd fbe7 	bl	800f4bc <__retarget_lock_release_recursive>
 8011cee:	89ab      	ldrh	r3, [r5, #12]
 8011cf0:	065b      	lsls	r3, r3, #25
 8011cf2:	f53f af1f 	bmi.w	8011b34 <_vfiprintf_r+0x44>
 8011cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cf8:	e71e      	b.n	8011b38 <_vfiprintf_r+0x48>
 8011cfa:	ab03      	add	r3, sp, #12
 8011cfc:	9300      	str	r3, [sp, #0]
 8011cfe:	462a      	mov	r2, r5
 8011d00:	4b05      	ldr	r3, [pc, #20]	@ (8011d18 <_vfiprintf_r+0x228>)
 8011d02:	a904      	add	r1, sp, #16
 8011d04:	4630      	mov	r0, r6
 8011d06:	f7fc fca5 	bl	800e654 <_printf_i>
 8011d0a:	e7e4      	b.n	8011cd6 <_vfiprintf_r+0x1e6>
 8011d0c:	08012f48 	.word	0x08012f48
 8011d10:	08012f52 	.word	0x08012f52
 8011d14:	0800e125 	.word	0x0800e125
 8011d18:	08011acb 	.word	0x08011acb
 8011d1c:	08012f4e 	.word	0x08012f4e

08011d20 <fiprintf>:
 8011d20:	b40e      	push	{r1, r2, r3}
 8011d22:	b503      	push	{r0, r1, lr}
 8011d24:	4601      	mov	r1, r0
 8011d26:	ab03      	add	r3, sp, #12
 8011d28:	4805      	ldr	r0, [pc, #20]	@ (8011d40 <fiprintf+0x20>)
 8011d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d2e:	6800      	ldr	r0, [r0, #0]
 8011d30:	9301      	str	r3, [sp, #4]
 8011d32:	f7ff fedd 	bl	8011af0 <_vfiprintf_r>
 8011d36:	b002      	add	sp, #8
 8011d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d3c:	b003      	add	sp, #12
 8011d3e:	4770      	bx	lr
 8011d40:	20000038 	.word	0x20000038

08011d44 <__swhatbuf_r>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	460c      	mov	r4, r1
 8011d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d4c:	2900      	cmp	r1, #0
 8011d4e:	b096      	sub	sp, #88	@ 0x58
 8011d50:	4615      	mov	r5, r2
 8011d52:	461e      	mov	r6, r3
 8011d54:	da0d      	bge.n	8011d72 <__swhatbuf_r+0x2e>
 8011d56:	89a3      	ldrh	r3, [r4, #12]
 8011d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011d5c:	f04f 0100 	mov.w	r1, #0
 8011d60:	bf14      	ite	ne
 8011d62:	2340      	movne	r3, #64	@ 0x40
 8011d64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011d68:	2000      	movs	r0, #0
 8011d6a:	6031      	str	r1, [r6, #0]
 8011d6c:	602b      	str	r3, [r5, #0]
 8011d6e:	b016      	add	sp, #88	@ 0x58
 8011d70:	bd70      	pop	{r4, r5, r6, pc}
 8011d72:	466a      	mov	r2, sp
 8011d74:	f000 f848 	bl	8011e08 <_fstat_r>
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	dbec      	blt.n	8011d56 <__swhatbuf_r+0x12>
 8011d7c:	9901      	ldr	r1, [sp, #4]
 8011d7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011d82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011d86:	4259      	negs	r1, r3
 8011d88:	4159      	adcs	r1, r3
 8011d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d8e:	e7eb      	b.n	8011d68 <__swhatbuf_r+0x24>

08011d90 <__smakebuf_r>:
 8011d90:	898b      	ldrh	r3, [r1, #12]
 8011d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d94:	079d      	lsls	r5, r3, #30
 8011d96:	4606      	mov	r6, r0
 8011d98:	460c      	mov	r4, r1
 8011d9a:	d507      	bpl.n	8011dac <__smakebuf_r+0x1c>
 8011d9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	6123      	str	r3, [r4, #16]
 8011da4:	2301      	movs	r3, #1
 8011da6:	6163      	str	r3, [r4, #20]
 8011da8:	b003      	add	sp, #12
 8011daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dac:	ab01      	add	r3, sp, #4
 8011dae:	466a      	mov	r2, sp
 8011db0:	f7ff ffc8 	bl	8011d44 <__swhatbuf_r>
 8011db4:	9f00      	ldr	r7, [sp, #0]
 8011db6:	4605      	mov	r5, r0
 8011db8:	4639      	mov	r1, r7
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f7fb ffd2 	bl	800dd64 <_malloc_r>
 8011dc0:	b948      	cbnz	r0, 8011dd6 <__smakebuf_r+0x46>
 8011dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dc6:	059a      	lsls	r2, r3, #22
 8011dc8:	d4ee      	bmi.n	8011da8 <__smakebuf_r+0x18>
 8011dca:	f023 0303 	bic.w	r3, r3, #3
 8011dce:	f043 0302 	orr.w	r3, r3, #2
 8011dd2:	81a3      	strh	r3, [r4, #12]
 8011dd4:	e7e2      	b.n	8011d9c <__smakebuf_r+0xc>
 8011dd6:	89a3      	ldrh	r3, [r4, #12]
 8011dd8:	6020      	str	r0, [r4, #0]
 8011dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dde:	81a3      	strh	r3, [r4, #12]
 8011de0:	9b01      	ldr	r3, [sp, #4]
 8011de2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011de6:	b15b      	cbz	r3, 8011e00 <__smakebuf_r+0x70>
 8011de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dec:	4630      	mov	r0, r6
 8011dee:	f000 f81d 	bl	8011e2c <_isatty_r>
 8011df2:	b128      	cbz	r0, 8011e00 <__smakebuf_r+0x70>
 8011df4:	89a3      	ldrh	r3, [r4, #12]
 8011df6:	f023 0303 	bic.w	r3, r3, #3
 8011dfa:	f043 0301 	orr.w	r3, r3, #1
 8011dfe:	81a3      	strh	r3, [r4, #12]
 8011e00:	89a3      	ldrh	r3, [r4, #12]
 8011e02:	431d      	orrs	r5, r3
 8011e04:	81a5      	strh	r5, [r4, #12]
 8011e06:	e7cf      	b.n	8011da8 <__smakebuf_r+0x18>

08011e08 <_fstat_r>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4d07      	ldr	r5, [pc, #28]	@ (8011e28 <_fstat_r+0x20>)
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	4604      	mov	r4, r0
 8011e10:	4608      	mov	r0, r1
 8011e12:	4611      	mov	r1, r2
 8011e14:	602b      	str	r3, [r5, #0]
 8011e16:	f7f0 f8e9 	bl	8001fec <_fstat>
 8011e1a:	1c43      	adds	r3, r0, #1
 8011e1c:	d102      	bne.n	8011e24 <_fstat_r+0x1c>
 8011e1e:	682b      	ldr	r3, [r5, #0]
 8011e20:	b103      	cbz	r3, 8011e24 <_fstat_r+0x1c>
 8011e22:	6023      	str	r3, [r4, #0]
 8011e24:	bd38      	pop	{r3, r4, r5, pc}
 8011e26:	bf00      	nop
 8011e28:	2000b9f0 	.word	0x2000b9f0

08011e2c <_isatty_r>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	4d06      	ldr	r5, [pc, #24]	@ (8011e48 <_isatty_r+0x1c>)
 8011e30:	2300      	movs	r3, #0
 8011e32:	4604      	mov	r4, r0
 8011e34:	4608      	mov	r0, r1
 8011e36:	602b      	str	r3, [r5, #0]
 8011e38:	f7f0 f8e8 	bl	800200c <_isatty>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_isatty_r+0x1a>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_isatty_r+0x1a>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	2000b9f0 	.word	0x2000b9f0
 8011e4c:	00000000 	.word	0x00000000

08011e50 <nan>:
 8011e50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011e58 <nan+0x8>
 8011e54:	4770      	bx	lr
 8011e56:	bf00      	nop
 8011e58:	00000000 	.word	0x00000000
 8011e5c:	7ff80000 	.word	0x7ff80000

08011e60 <_calloc_r>:
 8011e60:	b570      	push	{r4, r5, r6, lr}
 8011e62:	fba1 5402 	umull	r5, r4, r1, r2
 8011e66:	b93c      	cbnz	r4, 8011e78 <_calloc_r+0x18>
 8011e68:	4629      	mov	r1, r5
 8011e6a:	f7fb ff7b 	bl	800dd64 <_malloc_r>
 8011e6e:	4606      	mov	r6, r0
 8011e70:	b928      	cbnz	r0, 8011e7e <_calloc_r+0x1e>
 8011e72:	2600      	movs	r6, #0
 8011e74:	4630      	mov	r0, r6
 8011e76:	bd70      	pop	{r4, r5, r6, pc}
 8011e78:	220c      	movs	r2, #12
 8011e7a:	6002      	str	r2, [r0, #0]
 8011e7c:	e7f9      	b.n	8011e72 <_calloc_r+0x12>
 8011e7e:	462a      	mov	r2, r5
 8011e80:	4621      	mov	r1, r4
 8011e82:	f7fd f9c1 	bl	800f208 <memset>
 8011e86:	e7f5      	b.n	8011e74 <_calloc_r+0x14>

08011e88 <rshift>:
 8011e88:	6903      	ldr	r3, [r0, #16]
 8011e8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011e8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011e96:	f100 0414 	add.w	r4, r0, #20
 8011e9a:	dd45      	ble.n	8011f28 <rshift+0xa0>
 8011e9c:	f011 011f 	ands.w	r1, r1, #31
 8011ea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011ea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011ea8:	d10c      	bne.n	8011ec4 <rshift+0x3c>
 8011eaa:	f100 0710 	add.w	r7, r0, #16
 8011eae:	4629      	mov	r1, r5
 8011eb0:	42b1      	cmp	r1, r6
 8011eb2:	d334      	bcc.n	8011f1e <rshift+0x96>
 8011eb4:	1a9b      	subs	r3, r3, r2
 8011eb6:	009b      	lsls	r3, r3, #2
 8011eb8:	1eea      	subs	r2, r5, #3
 8011eba:	4296      	cmp	r6, r2
 8011ebc:	bf38      	it	cc
 8011ebe:	2300      	movcc	r3, #0
 8011ec0:	4423      	add	r3, r4
 8011ec2:	e015      	b.n	8011ef0 <rshift+0x68>
 8011ec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011ec8:	f1c1 0820 	rsb	r8, r1, #32
 8011ecc:	40cf      	lsrs	r7, r1
 8011ece:	f105 0e04 	add.w	lr, r5, #4
 8011ed2:	46a1      	mov	r9, r4
 8011ed4:	4576      	cmp	r6, lr
 8011ed6:	46f4      	mov	ip, lr
 8011ed8:	d815      	bhi.n	8011f06 <rshift+0x7e>
 8011eda:	1a9a      	subs	r2, r3, r2
 8011edc:	0092      	lsls	r2, r2, #2
 8011ede:	3a04      	subs	r2, #4
 8011ee0:	3501      	adds	r5, #1
 8011ee2:	42ae      	cmp	r6, r5
 8011ee4:	bf38      	it	cc
 8011ee6:	2200      	movcc	r2, #0
 8011ee8:	18a3      	adds	r3, r4, r2
 8011eea:	50a7      	str	r7, [r4, r2]
 8011eec:	b107      	cbz	r7, 8011ef0 <rshift+0x68>
 8011eee:	3304      	adds	r3, #4
 8011ef0:	1b1a      	subs	r2, r3, r4
 8011ef2:	42a3      	cmp	r3, r4
 8011ef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011ef8:	bf08      	it	eq
 8011efa:	2300      	moveq	r3, #0
 8011efc:	6102      	str	r2, [r0, #16]
 8011efe:	bf08      	it	eq
 8011f00:	6143      	streq	r3, [r0, #20]
 8011f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f06:	f8dc c000 	ldr.w	ip, [ip]
 8011f0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8011f0e:	ea4c 0707 	orr.w	r7, ip, r7
 8011f12:	f849 7b04 	str.w	r7, [r9], #4
 8011f16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011f1a:	40cf      	lsrs	r7, r1
 8011f1c:	e7da      	b.n	8011ed4 <rshift+0x4c>
 8011f1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8011f22:	f847 cf04 	str.w	ip, [r7, #4]!
 8011f26:	e7c3      	b.n	8011eb0 <rshift+0x28>
 8011f28:	4623      	mov	r3, r4
 8011f2a:	e7e1      	b.n	8011ef0 <rshift+0x68>

08011f2c <__hexdig_fun>:
 8011f2c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011f30:	2b09      	cmp	r3, #9
 8011f32:	d802      	bhi.n	8011f3a <__hexdig_fun+0xe>
 8011f34:	3820      	subs	r0, #32
 8011f36:	b2c0      	uxtb	r0, r0
 8011f38:	4770      	bx	lr
 8011f3a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011f3e:	2b05      	cmp	r3, #5
 8011f40:	d801      	bhi.n	8011f46 <__hexdig_fun+0x1a>
 8011f42:	3847      	subs	r0, #71	@ 0x47
 8011f44:	e7f7      	b.n	8011f36 <__hexdig_fun+0xa>
 8011f46:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011f4a:	2b05      	cmp	r3, #5
 8011f4c:	d801      	bhi.n	8011f52 <__hexdig_fun+0x26>
 8011f4e:	3827      	subs	r0, #39	@ 0x27
 8011f50:	e7f1      	b.n	8011f36 <__hexdig_fun+0xa>
 8011f52:	2000      	movs	r0, #0
 8011f54:	4770      	bx	lr
	...

08011f58 <__gethex>:
 8011f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5c:	b085      	sub	sp, #20
 8011f5e:	468a      	mov	sl, r1
 8011f60:	9302      	str	r3, [sp, #8]
 8011f62:	680b      	ldr	r3, [r1, #0]
 8011f64:	9001      	str	r0, [sp, #4]
 8011f66:	4690      	mov	r8, r2
 8011f68:	1c9c      	adds	r4, r3, #2
 8011f6a:	46a1      	mov	r9, r4
 8011f6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011f70:	2830      	cmp	r0, #48	@ 0x30
 8011f72:	d0fa      	beq.n	8011f6a <__gethex+0x12>
 8011f74:	eba9 0303 	sub.w	r3, r9, r3
 8011f78:	f1a3 0b02 	sub.w	fp, r3, #2
 8011f7c:	f7ff ffd6 	bl	8011f2c <__hexdig_fun>
 8011f80:	4605      	mov	r5, r0
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d168      	bne.n	8012058 <__gethex+0x100>
 8011f86:	49a0      	ldr	r1, [pc, #640]	@ (8012208 <__gethex+0x2b0>)
 8011f88:	2201      	movs	r2, #1
 8011f8a:	4648      	mov	r0, r9
 8011f8c:	f7fd f951 	bl	800f232 <strncmp>
 8011f90:	4607      	mov	r7, r0
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d167      	bne.n	8012066 <__gethex+0x10e>
 8011f96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011f9a:	4626      	mov	r6, r4
 8011f9c:	f7ff ffc6 	bl	8011f2c <__hexdig_fun>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	d062      	beq.n	801206a <__gethex+0x112>
 8011fa4:	4623      	mov	r3, r4
 8011fa6:	7818      	ldrb	r0, [r3, #0]
 8011fa8:	2830      	cmp	r0, #48	@ 0x30
 8011faa:	4699      	mov	r9, r3
 8011fac:	f103 0301 	add.w	r3, r3, #1
 8011fb0:	d0f9      	beq.n	8011fa6 <__gethex+0x4e>
 8011fb2:	f7ff ffbb 	bl	8011f2c <__hexdig_fun>
 8011fb6:	fab0 f580 	clz	r5, r0
 8011fba:	096d      	lsrs	r5, r5, #5
 8011fbc:	f04f 0b01 	mov.w	fp, #1
 8011fc0:	464a      	mov	r2, r9
 8011fc2:	4616      	mov	r6, r2
 8011fc4:	3201      	adds	r2, #1
 8011fc6:	7830      	ldrb	r0, [r6, #0]
 8011fc8:	f7ff ffb0 	bl	8011f2c <__hexdig_fun>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d1f8      	bne.n	8011fc2 <__gethex+0x6a>
 8011fd0:	498d      	ldr	r1, [pc, #564]	@ (8012208 <__gethex+0x2b0>)
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f7fd f92c 	bl	800f232 <strncmp>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	d13f      	bne.n	801205e <__gethex+0x106>
 8011fde:	b944      	cbnz	r4, 8011ff2 <__gethex+0x9a>
 8011fe0:	1c74      	adds	r4, r6, #1
 8011fe2:	4622      	mov	r2, r4
 8011fe4:	4616      	mov	r6, r2
 8011fe6:	3201      	adds	r2, #1
 8011fe8:	7830      	ldrb	r0, [r6, #0]
 8011fea:	f7ff ff9f 	bl	8011f2c <__hexdig_fun>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	d1f8      	bne.n	8011fe4 <__gethex+0x8c>
 8011ff2:	1ba4      	subs	r4, r4, r6
 8011ff4:	00a7      	lsls	r7, r4, #2
 8011ff6:	7833      	ldrb	r3, [r6, #0]
 8011ff8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011ffc:	2b50      	cmp	r3, #80	@ 0x50
 8011ffe:	d13e      	bne.n	801207e <__gethex+0x126>
 8012000:	7873      	ldrb	r3, [r6, #1]
 8012002:	2b2b      	cmp	r3, #43	@ 0x2b
 8012004:	d033      	beq.n	801206e <__gethex+0x116>
 8012006:	2b2d      	cmp	r3, #45	@ 0x2d
 8012008:	d034      	beq.n	8012074 <__gethex+0x11c>
 801200a:	1c71      	adds	r1, r6, #1
 801200c:	2400      	movs	r4, #0
 801200e:	7808      	ldrb	r0, [r1, #0]
 8012010:	f7ff ff8c 	bl	8011f2c <__hexdig_fun>
 8012014:	1e43      	subs	r3, r0, #1
 8012016:	b2db      	uxtb	r3, r3
 8012018:	2b18      	cmp	r3, #24
 801201a:	d830      	bhi.n	801207e <__gethex+0x126>
 801201c:	f1a0 0210 	sub.w	r2, r0, #16
 8012020:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012024:	f7ff ff82 	bl	8011f2c <__hexdig_fun>
 8012028:	f100 3cff 	add.w	ip, r0, #4294967295
 801202c:	fa5f fc8c 	uxtb.w	ip, ip
 8012030:	f1bc 0f18 	cmp.w	ip, #24
 8012034:	f04f 030a 	mov.w	r3, #10
 8012038:	d91e      	bls.n	8012078 <__gethex+0x120>
 801203a:	b104      	cbz	r4, 801203e <__gethex+0xe6>
 801203c:	4252      	negs	r2, r2
 801203e:	4417      	add	r7, r2
 8012040:	f8ca 1000 	str.w	r1, [sl]
 8012044:	b1ed      	cbz	r5, 8012082 <__gethex+0x12a>
 8012046:	f1bb 0f00 	cmp.w	fp, #0
 801204a:	bf0c      	ite	eq
 801204c:	2506      	moveq	r5, #6
 801204e:	2500      	movne	r5, #0
 8012050:	4628      	mov	r0, r5
 8012052:	b005      	add	sp, #20
 8012054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012058:	2500      	movs	r5, #0
 801205a:	462c      	mov	r4, r5
 801205c:	e7b0      	b.n	8011fc0 <__gethex+0x68>
 801205e:	2c00      	cmp	r4, #0
 8012060:	d1c7      	bne.n	8011ff2 <__gethex+0x9a>
 8012062:	4627      	mov	r7, r4
 8012064:	e7c7      	b.n	8011ff6 <__gethex+0x9e>
 8012066:	464e      	mov	r6, r9
 8012068:	462f      	mov	r7, r5
 801206a:	2501      	movs	r5, #1
 801206c:	e7c3      	b.n	8011ff6 <__gethex+0x9e>
 801206e:	2400      	movs	r4, #0
 8012070:	1cb1      	adds	r1, r6, #2
 8012072:	e7cc      	b.n	801200e <__gethex+0xb6>
 8012074:	2401      	movs	r4, #1
 8012076:	e7fb      	b.n	8012070 <__gethex+0x118>
 8012078:	fb03 0002 	mla	r0, r3, r2, r0
 801207c:	e7ce      	b.n	801201c <__gethex+0xc4>
 801207e:	4631      	mov	r1, r6
 8012080:	e7de      	b.n	8012040 <__gethex+0xe8>
 8012082:	eba6 0309 	sub.w	r3, r6, r9
 8012086:	3b01      	subs	r3, #1
 8012088:	4629      	mov	r1, r5
 801208a:	2b07      	cmp	r3, #7
 801208c:	dc0a      	bgt.n	80120a4 <__gethex+0x14c>
 801208e:	9801      	ldr	r0, [sp, #4]
 8012090:	f7fe f8e8 	bl	8010264 <_Balloc>
 8012094:	4604      	mov	r4, r0
 8012096:	b940      	cbnz	r0, 80120aa <__gethex+0x152>
 8012098:	4b5c      	ldr	r3, [pc, #368]	@ (801220c <__gethex+0x2b4>)
 801209a:	4602      	mov	r2, r0
 801209c:	21e4      	movs	r1, #228	@ 0xe4
 801209e:	485c      	ldr	r0, [pc, #368]	@ (8012210 <__gethex+0x2b8>)
 80120a0:	f7fd fa2a 	bl	800f4f8 <__assert_func>
 80120a4:	3101      	adds	r1, #1
 80120a6:	105b      	asrs	r3, r3, #1
 80120a8:	e7ef      	b.n	801208a <__gethex+0x132>
 80120aa:	f100 0a14 	add.w	sl, r0, #20
 80120ae:	2300      	movs	r3, #0
 80120b0:	4655      	mov	r5, sl
 80120b2:	469b      	mov	fp, r3
 80120b4:	45b1      	cmp	r9, r6
 80120b6:	d337      	bcc.n	8012128 <__gethex+0x1d0>
 80120b8:	f845 bb04 	str.w	fp, [r5], #4
 80120bc:	eba5 050a 	sub.w	r5, r5, sl
 80120c0:	10ad      	asrs	r5, r5, #2
 80120c2:	6125      	str	r5, [r4, #16]
 80120c4:	4658      	mov	r0, fp
 80120c6:	f7fe f9bf 	bl	8010448 <__hi0bits>
 80120ca:	016d      	lsls	r5, r5, #5
 80120cc:	f8d8 6000 	ldr.w	r6, [r8]
 80120d0:	1a2d      	subs	r5, r5, r0
 80120d2:	42b5      	cmp	r5, r6
 80120d4:	dd54      	ble.n	8012180 <__gethex+0x228>
 80120d6:	1bad      	subs	r5, r5, r6
 80120d8:	4629      	mov	r1, r5
 80120da:	4620      	mov	r0, r4
 80120dc:	f7fe fd53 	bl	8010b86 <__any_on>
 80120e0:	4681      	mov	r9, r0
 80120e2:	b178      	cbz	r0, 8012104 <__gethex+0x1ac>
 80120e4:	1e6b      	subs	r3, r5, #1
 80120e6:	1159      	asrs	r1, r3, #5
 80120e8:	f003 021f 	and.w	r2, r3, #31
 80120ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80120f0:	f04f 0901 	mov.w	r9, #1
 80120f4:	fa09 f202 	lsl.w	r2, r9, r2
 80120f8:	420a      	tst	r2, r1
 80120fa:	d003      	beq.n	8012104 <__gethex+0x1ac>
 80120fc:	454b      	cmp	r3, r9
 80120fe:	dc36      	bgt.n	801216e <__gethex+0x216>
 8012100:	f04f 0902 	mov.w	r9, #2
 8012104:	4629      	mov	r1, r5
 8012106:	4620      	mov	r0, r4
 8012108:	f7ff febe 	bl	8011e88 <rshift>
 801210c:	442f      	add	r7, r5
 801210e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012112:	42bb      	cmp	r3, r7
 8012114:	da42      	bge.n	801219c <__gethex+0x244>
 8012116:	9801      	ldr	r0, [sp, #4]
 8012118:	4621      	mov	r1, r4
 801211a:	f7fe f8e3 	bl	80102e4 <_Bfree>
 801211e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012120:	2300      	movs	r3, #0
 8012122:	6013      	str	r3, [r2, #0]
 8012124:	25a3      	movs	r5, #163	@ 0xa3
 8012126:	e793      	b.n	8012050 <__gethex+0xf8>
 8012128:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801212c:	2a2e      	cmp	r2, #46	@ 0x2e
 801212e:	d012      	beq.n	8012156 <__gethex+0x1fe>
 8012130:	2b20      	cmp	r3, #32
 8012132:	d104      	bne.n	801213e <__gethex+0x1e6>
 8012134:	f845 bb04 	str.w	fp, [r5], #4
 8012138:	f04f 0b00 	mov.w	fp, #0
 801213c:	465b      	mov	r3, fp
 801213e:	7830      	ldrb	r0, [r6, #0]
 8012140:	9303      	str	r3, [sp, #12]
 8012142:	f7ff fef3 	bl	8011f2c <__hexdig_fun>
 8012146:	9b03      	ldr	r3, [sp, #12]
 8012148:	f000 000f 	and.w	r0, r0, #15
 801214c:	4098      	lsls	r0, r3
 801214e:	ea4b 0b00 	orr.w	fp, fp, r0
 8012152:	3304      	adds	r3, #4
 8012154:	e7ae      	b.n	80120b4 <__gethex+0x15c>
 8012156:	45b1      	cmp	r9, r6
 8012158:	d8ea      	bhi.n	8012130 <__gethex+0x1d8>
 801215a:	492b      	ldr	r1, [pc, #172]	@ (8012208 <__gethex+0x2b0>)
 801215c:	9303      	str	r3, [sp, #12]
 801215e:	2201      	movs	r2, #1
 8012160:	4630      	mov	r0, r6
 8012162:	f7fd f866 	bl	800f232 <strncmp>
 8012166:	9b03      	ldr	r3, [sp, #12]
 8012168:	2800      	cmp	r0, #0
 801216a:	d1e1      	bne.n	8012130 <__gethex+0x1d8>
 801216c:	e7a2      	b.n	80120b4 <__gethex+0x15c>
 801216e:	1ea9      	subs	r1, r5, #2
 8012170:	4620      	mov	r0, r4
 8012172:	f7fe fd08 	bl	8010b86 <__any_on>
 8012176:	2800      	cmp	r0, #0
 8012178:	d0c2      	beq.n	8012100 <__gethex+0x1a8>
 801217a:	f04f 0903 	mov.w	r9, #3
 801217e:	e7c1      	b.n	8012104 <__gethex+0x1ac>
 8012180:	da09      	bge.n	8012196 <__gethex+0x23e>
 8012182:	1b75      	subs	r5, r6, r5
 8012184:	4621      	mov	r1, r4
 8012186:	9801      	ldr	r0, [sp, #4]
 8012188:	462a      	mov	r2, r5
 801218a:	f7fe fac3 	bl	8010714 <__lshift>
 801218e:	1b7f      	subs	r7, r7, r5
 8012190:	4604      	mov	r4, r0
 8012192:	f100 0a14 	add.w	sl, r0, #20
 8012196:	f04f 0900 	mov.w	r9, #0
 801219a:	e7b8      	b.n	801210e <__gethex+0x1b6>
 801219c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80121a0:	42bd      	cmp	r5, r7
 80121a2:	dd6f      	ble.n	8012284 <__gethex+0x32c>
 80121a4:	1bed      	subs	r5, r5, r7
 80121a6:	42ae      	cmp	r6, r5
 80121a8:	dc34      	bgt.n	8012214 <__gethex+0x2bc>
 80121aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	d022      	beq.n	80121f8 <__gethex+0x2a0>
 80121b2:	2b03      	cmp	r3, #3
 80121b4:	d024      	beq.n	8012200 <__gethex+0x2a8>
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d115      	bne.n	80121e6 <__gethex+0x28e>
 80121ba:	42ae      	cmp	r6, r5
 80121bc:	d113      	bne.n	80121e6 <__gethex+0x28e>
 80121be:	2e01      	cmp	r6, #1
 80121c0:	d10b      	bne.n	80121da <__gethex+0x282>
 80121c2:	9a02      	ldr	r2, [sp, #8]
 80121c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80121c8:	6013      	str	r3, [r2, #0]
 80121ca:	2301      	movs	r3, #1
 80121cc:	6123      	str	r3, [r4, #16]
 80121ce:	f8ca 3000 	str.w	r3, [sl]
 80121d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121d4:	2562      	movs	r5, #98	@ 0x62
 80121d6:	601c      	str	r4, [r3, #0]
 80121d8:	e73a      	b.n	8012050 <__gethex+0xf8>
 80121da:	1e71      	subs	r1, r6, #1
 80121dc:	4620      	mov	r0, r4
 80121de:	f7fe fcd2 	bl	8010b86 <__any_on>
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d1ed      	bne.n	80121c2 <__gethex+0x26a>
 80121e6:	9801      	ldr	r0, [sp, #4]
 80121e8:	4621      	mov	r1, r4
 80121ea:	f7fe f87b 	bl	80102e4 <_Bfree>
 80121ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80121f0:	2300      	movs	r3, #0
 80121f2:	6013      	str	r3, [r2, #0]
 80121f4:	2550      	movs	r5, #80	@ 0x50
 80121f6:	e72b      	b.n	8012050 <__gethex+0xf8>
 80121f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d1f3      	bne.n	80121e6 <__gethex+0x28e>
 80121fe:	e7e0      	b.n	80121c2 <__gethex+0x26a>
 8012200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1dd      	bne.n	80121c2 <__gethex+0x26a>
 8012206:	e7ee      	b.n	80121e6 <__gethex+0x28e>
 8012208:	08012ef0 	.word	0x08012ef0
 801220c:	08012d8a 	.word	0x08012d8a
 8012210:	08012f61 	.word	0x08012f61
 8012214:	1e6f      	subs	r7, r5, #1
 8012216:	f1b9 0f00 	cmp.w	r9, #0
 801221a:	d130      	bne.n	801227e <__gethex+0x326>
 801221c:	b127      	cbz	r7, 8012228 <__gethex+0x2d0>
 801221e:	4639      	mov	r1, r7
 8012220:	4620      	mov	r0, r4
 8012222:	f7fe fcb0 	bl	8010b86 <__any_on>
 8012226:	4681      	mov	r9, r0
 8012228:	117a      	asrs	r2, r7, #5
 801222a:	2301      	movs	r3, #1
 801222c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012230:	f007 071f 	and.w	r7, r7, #31
 8012234:	40bb      	lsls	r3, r7
 8012236:	4213      	tst	r3, r2
 8012238:	4629      	mov	r1, r5
 801223a:	4620      	mov	r0, r4
 801223c:	bf18      	it	ne
 801223e:	f049 0902 	orrne.w	r9, r9, #2
 8012242:	f7ff fe21 	bl	8011e88 <rshift>
 8012246:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801224a:	1b76      	subs	r6, r6, r5
 801224c:	2502      	movs	r5, #2
 801224e:	f1b9 0f00 	cmp.w	r9, #0
 8012252:	d047      	beq.n	80122e4 <__gethex+0x38c>
 8012254:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012258:	2b02      	cmp	r3, #2
 801225a:	d015      	beq.n	8012288 <__gethex+0x330>
 801225c:	2b03      	cmp	r3, #3
 801225e:	d017      	beq.n	8012290 <__gethex+0x338>
 8012260:	2b01      	cmp	r3, #1
 8012262:	d109      	bne.n	8012278 <__gethex+0x320>
 8012264:	f019 0f02 	tst.w	r9, #2
 8012268:	d006      	beq.n	8012278 <__gethex+0x320>
 801226a:	f8da 3000 	ldr.w	r3, [sl]
 801226e:	ea49 0903 	orr.w	r9, r9, r3
 8012272:	f019 0f01 	tst.w	r9, #1
 8012276:	d10e      	bne.n	8012296 <__gethex+0x33e>
 8012278:	f045 0510 	orr.w	r5, r5, #16
 801227c:	e032      	b.n	80122e4 <__gethex+0x38c>
 801227e:	f04f 0901 	mov.w	r9, #1
 8012282:	e7d1      	b.n	8012228 <__gethex+0x2d0>
 8012284:	2501      	movs	r5, #1
 8012286:	e7e2      	b.n	801224e <__gethex+0x2f6>
 8012288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801228a:	f1c3 0301 	rsb	r3, r3, #1
 801228e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012292:	2b00      	cmp	r3, #0
 8012294:	d0f0      	beq.n	8012278 <__gethex+0x320>
 8012296:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801229a:	f104 0314 	add.w	r3, r4, #20
 801229e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80122a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80122a6:	f04f 0c00 	mov.w	ip, #0
 80122aa:	4618      	mov	r0, r3
 80122ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80122b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80122b4:	d01b      	beq.n	80122ee <__gethex+0x396>
 80122b6:	3201      	adds	r2, #1
 80122b8:	6002      	str	r2, [r0, #0]
 80122ba:	2d02      	cmp	r5, #2
 80122bc:	f104 0314 	add.w	r3, r4, #20
 80122c0:	d13c      	bne.n	801233c <__gethex+0x3e4>
 80122c2:	f8d8 2000 	ldr.w	r2, [r8]
 80122c6:	3a01      	subs	r2, #1
 80122c8:	42b2      	cmp	r2, r6
 80122ca:	d109      	bne.n	80122e0 <__gethex+0x388>
 80122cc:	1171      	asrs	r1, r6, #5
 80122ce:	2201      	movs	r2, #1
 80122d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80122d4:	f006 061f 	and.w	r6, r6, #31
 80122d8:	fa02 f606 	lsl.w	r6, r2, r6
 80122dc:	421e      	tst	r6, r3
 80122de:	d13a      	bne.n	8012356 <__gethex+0x3fe>
 80122e0:	f045 0520 	orr.w	r5, r5, #32
 80122e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122e6:	601c      	str	r4, [r3, #0]
 80122e8:	9b02      	ldr	r3, [sp, #8]
 80122ea:	601f      	str	r7, [r3, #0]
 80122ec:	e6b0      	b.n	8012050 <__gethex+0xf8>
 80122ee:	4299      	cmp	r1, r3
 80122f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80122f4:	d8d9      	bhi.n	80122aa <__gethex+0x352>
 80122f6:	68a3      	ldr	r3, [r4, #8]
 80122f8:	459b      	cmp	fp, r3
 80122fa:	db17      	blt.n	801232c <__gethex+0x3d4>
 80122fc:	6861      	ldr	r1, [r4, #4]
 80122fe:	9801      	ldr	r0, [sp, #4]
 8012300:	3101      	adds	r1, #1
 8012302:	f7fd ffaf 	bl	8010264 <_Balloc>
 8012306:	4681      	mov	r9, r0
 8012308:	b918      	cbnz	r0, 8012312 <__gethex+0x3ba>
 801230a:	4b1a      	ldr	r3, [pc, #104]	@ (8012374 <__gethex+0x41c>)
 801230c:	4602      	mov	r2, r0
 801230e:	2184      	movs	r1, #132	@ 0x84
 8012310:	e6c5      	b.n	801209e <__gethex+0x146>
 8012312:	6922      	ldr	r2, [r4, #16]
 8012314:	3202      	adds	r2, #2
 8012316:	f104 010c 	add.w	r1, r4, #12
 801231a:	0092      	lsls	r2, r2, #2
 801231c:	300c      	adds	r0, #12
 801231e:	f7fd f8d6 	bl	800f4ce <memcpy>
 8012322:	4621      	mov	r1, r4
 8012324:	9801      	ldr	r0, [sp, #4]
 8012326:	f7fd ffdd 	bl	80102e4 <_Bfree>
 801232a:	464c      	mov	r4, r9
 801232c:	6923      	ldr	r3, [r4, #16]
 801232e:	1c5a      	adds	r2, r3, #1
 8012330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012334:	6122      	str	r2, [r4, #16]
 8012336:	2201      	movs	r2, #1
 8012338:	615a      	str	r2, [r3, #20]
 801233a:	e7be      	b.n	80122ba <__gethex+0x362>
 801233c:	6922      	ldr	r2, [r4, #16]
 801233e:	455a      	cmp	r2, fp
 8012340:	dd0b      	ble.n	801235a <__gethex+0x402>
 8012342:	2101      	movs	r1, #1
 8012344:	4620      	mov	r0, r4
 8012346:	f7ff fd9f 	bl	8011e88 <rshift>
 801234a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801234e:	3701      	adds	r7, #1
 8012350:	42bb      	cmp	r3, r7
 8012352:	f6ff aee0 	blt.w	8012116 <__gethex+0x1be>
 8012356:	2501      	movs	r5, #1
 8012358:	e7c2      	b.n	80122e0 <__gethex+0x388>
 801235a:	f016 061f 	ands.w	r6, r6, #31
 801235e:	d0fa      	beq.n	8012356 <__gethex+0x3fe>
 8012360:	4453      	add	r3, sl
 8012362:	f1c6 0620 	rsb	r6, r6, #32
 8012366:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801236a:	f7fe f86d 	bl	8010448 <__hi0bits>
 801236e:	42b0      	cmp	r0, r6
 8012370:	dbe7      	blt.n	8012342 <__gethex+0x3ea>
 8012372:	e7f0      	b.n	8012356 <__gethex+0x3fe>
 8012374:	08012d8a 	.word	0x08012d8a

08012378 <L_shift>:
 8012378:	f1c2 0208 	rsb	r2, r2, #8
 801237c:	0092      	lsls	r2, r2, #2
 801237e:	b570      	push	{r4, r5, r6, lr}
 8012380:	f1c2 0620 	rsb	r6, r2, #32
 8012384:	6843      	ldr	r3, [r0, #4]
 8012386:	6804      	ldr	r4, [r0, #0]
 8012388:	fa03 f506 	lsl.w	r5, r3, r6
 801238c:	432c      	orrs	r4, r5
 801238e:	40d3      	lsrs	r3, r2
 8012390:	6004      	str	r4, [r0, #0]
 8012392:	f840 3f04 	str.w	r3, [r0, #4]!
 8012396:	4288      	cmp	r0, r1
 8012398:	d3f4      	bcc.n	8012384 <L_shift+0xc>
 801239a:	bd70      	pop	{r4, r5, r6, pc}

0801239c <__match>:
 801239c:	b530      	push	{r4, r5, lr}
 801239e:	6803      	ldr	r3, [r0, #0]
 80123a0:	3301      	adds	r3, #1
 80123a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123a6:	b914      	cbnz	r4, 80123ae <__match+0x12>
 80123a8:	6003      	str	r3, [r0, #0]
 80123aa:	2001      	movs	r0, #1
 80123ac:	bd30      	pop	{r4, r5, pc}
 80123ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80123b6:	2d19      	cmp	r5, #25
 80123b8:	bf98      	it	ls
 80123ba:	3220      	addls	r2, #32
 80123bc:	42a2      	cmp	r2, r4
 80123be:	d0f0      	beq.n	80123a2 <__match+0x6>
 80123c0:	2000      	movs	r0, #0
 80123c2:	e7f3      	b.n	80123ac <__match+0x10>

080123c4 <__hexnan>:
 80123c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123c8:	680b      	ldr	r3, [r1, #0]
 80123ca:	6801      	ldr	r1, [r0, #0]
 80123cc:	115e      	asrs	r6, r3, #5
 80123ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80123d2:	f013 031f 	ands.w	r3, r3, #31
 80123d6:	b087      	sub	sp, #28
 80123d8:	bf18      	it	ne
 80123da:	3604      	addne	r6, #4
 80123dc:	2500      	movs	r5, #0
 80123de:	1f37      	subs	r7, r6, #4
 80123e0:	4682      	mov	sl, r0
 80123e2:	4690      	mov	r8, r2
 80123e4:	9301      	str	r3, [sp, #4]
 80123e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80123ea:	46b9      	mov	r9, r7
 80123ec:	463c      	mov	r4, r7
 80123ee:	9502      	str	r5, [sp, #8]
 80123f0:	46ab      	mov	fp, r5
 80123f2:	784a      	ldrb	r2, [r1, #1]
 80123f4:	1c4b      	adds	r3, r1, #1
 80123f6:	9303      	str	r3, [sp, #12]
 80123f8:	b342      	cbz	r2, 801244c <__hexnan+0x88>
 80123fa:	4610      	mov	r0, r2
 80123fc:	9105      	str	r1, [sp, #20]
 80123fe:	9204      	str	r2, [sp, #16]
 8012400:	f7ff fd94 	bl	8011f2c <__hexdig_fun>
 8012404:	2800      	cmp	r0, #0
 8012406:	d151      	bne.n	80124ac <__hexnan+0xe8>
 8012408:	9a04      	ldr	r2, [sp, #16]
 801240a:	9905      	ldr	r1, [sp, #20]
 801240c:	2a20      	cmp	r2, #32
 801240e:	d818      	bhi.n	8012442 <__hexnan+0x7e>
 8012410:	9b02      	ldr	r3, [sp, #8]
 8012412:	459b      	cmp	fp, r3
 8012414:	dd13      	ble.n	801243e <__hexnan+0x7a>
 8012416:	454c      	cmp	r4, r9
 8012418:	d206      	bcs.n	8012428 <__hexnan+0x64>
 801241a:	2d07      	cmp	r5, #7
 801241c:	dc04      	bgt.n	8012428 <__hexnan+0x64>
 801241e:	462a      	mov	r2, r5
 8012420:	4649      	mov	r1, r9
 8012422:	4620      	mov	r0, r4
 8012424:	f7ff ffa8 	bl	8012378 <L_shift>
 8012428:	4544      	cmp	r4, r8
 801242a:	d952      	bls.n	80124d2 <__hexnan+0x10e>
 801242c:	2300      	movs	r3, #0
 801242e:	f1a4 0904 	sub.w	r9, r4, #4
 8012432:	f844 3c04 	str.w	r3, [r4, #-4]
 8012436:	f8cd b008 	str.w	fp, [sp, #8]
 801243a:	464c      	mov	r4, r9
 801243c:	461d      	mov	r5, r3
 801243e:	9903      	ldr	r1, [sp, #12]
 8012440:	e7d7      	b.n	80123f2 <__hexnan+0x2e>
 8012442:	2a29      	cmp	r2, #41	@ 0x29
 8012444:	d157      	bne.n	80124f6 <__hexnan+0x132>
 8012446:	3102      	adds	r1, #2
 8012448:	f8ca 1000 	str.w	r1, [sl]
 801244c:	f1bb 0f00 	cmp.w	fp, #0
 8012450:	d051      	beq.n	80124f6 <__hexnan+0x132>
 8012452:	454c      	cmp	r4, r9
 8012454:	d206      	bcs.n	8012464 <__hexnan+0xa0>
 8012456:	2d07      	cmp	r5, #7
 8012458:	dc04      	bgt.n	8012464 <__hexnan+0xa0>
 801245a:	462a      	mov	r2, r5
 801245c:	4649      	mov	r1, r9
 801245e:	4620      	mov	r0, r4
 8012460:	f7ff ff8a 	bl	8012378 <L_shift>
 8012464:	4544      	cmp	r4, r8
 8012466:	d936      	bls.n	80124d6 <__hexnan+0x112>
 8012468:	f1a8 0204 	sub.w	r2, r8, #4
 801246c:	4623      	mov	r3, r4
 801246e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012472:	f842 1f04 	str.w	r1, [r2, #4]!
 8012476:	429f      	cmp	r7, r3
 8012478:	d2f9      	bcs.n	801246e <__hexnan+0xaa>
 801247a:	1b3b      	subs	r3, r7, r4
 801247c:	f023 0303 	bic.w	r3, r3, #3
 8012480:	3304      	adds	r3, #4
 8012482:	3401      	adds	r4, #1
 8012484:	3e03      	subs	r6, #3
 8012486:	42b4      	cmp	r4, r6
 8012488:	bf88      	it	hi
 801248a:	2304      	movhi	r3, #4
 801248c:	4443      	add	r3, r8
 801248e:	2200      	movs	r2, #0
 8012490:	f843 2b04 	str.w	r2, [r3], #4
 8012494:	429f      	cmp	r7, r3
 8012496:	d2fb      	bcs.n	8012490 <__hexnan+0xcc>
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	b91b      	cbnz	r3, 80124a4 <__hexnan+0xe0>
 801249c:	4547      	cmp	r7, r8
 801249e:	d128      	bne.n	80124f2 <__hexnan+0x12e>
 80124a0:	2301      	movs	r3, #1
 80124a2:	603b      	str	r3, [r7, #0]
 80124a4:	2005      	movs	r0, #5
 80124a6:	b007      	add	sp, #28
 80124a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ac:	3501      	adds	r5, #1
 80124ae:	2d08      	cmp	r5, #8
 80124b0:	f10b 0b01 	add.w	fp, fp, #1
 80124b4:	dd06      	ble.n	80124c4 <__hexnan+0x100>
 80124b6:	4544      	cmp	r4, r8
 80124b8:	d9c1      	bls.n	801243e <__hexnan+0x7a>
 80124ba:	2300      	movs	r3, #0
 80124bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80124c0:	2501      	movs	r5, #1
 80124c2:	3c04      	subs	r4, #4
 80124c4:	6822      	ldr	r2, [r4, #0]
 80124c6:	f000 000f 	and.w	r0, r0, #15
 80124ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80124ce:	6020      	str	r0, [r4, #0]
 80124d0:	e7b5      	b.n	801243e <__hexnan+0x7a>
 80124d2:	2508      	movs	r5, #8
 80124d4:	e7b3      	b.n	801243e <__hexnan+0x7a>
 80124d6:	9b01      	ldr	r3, [sp, #4]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d0dd      	beq.n	8012498 <__hexnan+0xd4>
 80124dc:	f1c3 0320 	rsb	r3, r3, #32
 80124e0:	f04f 32ff 	mov.w	r2, #4294967295
 80124e4:	40da      	lsrs	r2, r3
 80124e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80124ea:	4013      	ands	r3, r2
 80124ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80124f0:	e7d2      	b.n	8012498 <__hexnan+0xd4>
 80124f2:	3f04      	subs	r7, #4
 80124f4:	e7d0      	b.n	8012498 <__hexnan+0xd4>
 80124f6:	2004      	movs	r0, #4
 80124f8:	e7d5      	b.n	80124a6 <__hexnan+0xe2>

080124fa <__ascii_mbtowc>:
 80124fa:	b082      	sub	sp, #8
 80124fc:	b901      	cbnz	r1, 8012500 <__ascii_mbtowc+0x6>
 80124fe:	a901      	add	r1, sp, #4
 8012500:	b142      	cbz	r2, 8012514 <__ascii_mbtowc+0x1a>
 8012502:	b14b      	cbz	r3, 8012518 <__ascii_mbtowc+0x1e>
 8012504:	7813      	ldrb	r3, [r2, #0]
 8012506:	600b      	str	r3, [r1, #0]
 8012508:	7812      	ldrb	r2, [r2, #0]
 801250a:	1e10      	subs	r0, r2, #0
 801250c:	bf18      	it	ne
 801250e:	2001      	movne	r0, #1
 8012510:	b002      	add	sp, #8
 8012512:	4770      	bx	lr
 8012514:	4610      	mov	r0, r2
 8012516:	e7fb      	b.n	8012510 <__ascii_mbtowc+0x16>
 8012518:	f06f 0001 	mvn.w	r0, #1
 801251c:	e7f8      	b.n	8012510 <__ascii_mbtowc+0x16>

0801251e <__ascii_wctomb>:
 801251e:	4603      	mov	r3, r0
 8012520:	4608      	mov	r0, r1
 8012522:	b141      	cbz	r1, 8012536 <__ascii_wctomb+0x18>
 8012524:	2aff      	cmp	r2, #255	@ 0xff
 8012526:	d904      	bls.n	8012532 <__ascii_wctomb+0x14>
 8012528:	228a      	movs	r2, #138	@ 0x8a
 801252a:	601a      	str	r2, [r3, #0]
 801252c:	f04f 30ff 	mov.w	r0, #4294967295
 8012530:	4770      	bx	lr
 8012532:	700a      	strb	r2, [r1, #0]
 8012534:	2001      	movs	r0, #1
 8012536:	4770      	bx	lr

08012538 <_init>:
 8012538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801253a:	bf00      	nop
 801253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801253e:	bc08      	pop	{r3}
 8012540:	469e      	mov	lr, r3
 8012542:	4770      	bx	lr

08012544 <_fini>:
 8012544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012546:	bf00      	nop
 8012548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801254a:	bc08      	pop	{r3}
 801254c:	469e      	mov	lr, r3
 801254e:	4770      	bx	lr
